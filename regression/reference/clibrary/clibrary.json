{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "class_map": [
            "array_info"
        ],
        "classes": [
            {
                "<CLASS>": "array_info ****************************************",
                "cxx_header": [],
                "name": "array_info",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "parse_keyword": "struct",
                "scope": "array_info::",
                "typemap_name": "array_info",
                "variables": [
                    {
                        "<VARIABLE>": "tc ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "tc",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "tc",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "share": {}
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "tc",
                            "variable_lower": "tc",
                            "variable_name": "tc",
                            "variable_upper": "TC"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wraparray_info.h",
                    "C_impl_filename": "wraparray_info.c",
                    "C_name_api": "array_info",
                    "C_name_scope": "array_info_",
                    "C_type_name": "array_info",
                    "F_derived_name": "array_info",
                    "F_name_api": "array_info",
                    "F_name_scope": "array_info_",
                    "PY_struct_array_descr_create": "PY_array_info_create_array_descr",
                    "PY_struct_array_descr_name": "array_info_dtype",
                    "PY_struct_array_descr_variable": "PY_array_info_array_descr",
                    "class_scope": "array_info::",
                    "cxx_class": "array_info",
                    "cxx_type": "array_info",
                    "file_scope": "array_info"
                }
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2024, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "clibrary.h"
        ],
        "functions": [
            {
                "<FUNCTION>": "NoReturnNoArguments  0 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "NoReturnNoArguments",
                        "params": [],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void NoReturnNoArguments(void)",
                "declgen": "void NoReturnNoArguments(void)",
                "name": "NoReturnNoArguments",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "NoReturnNoArguments(\t)",
                            "C_name": "NoReturnNoArguments",
                            "C_prototype": "void",
                            "C_return_type": "void",
                            "F_C_name": "c_no_return_no_arguments",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "NoReturnNoArguments(\t)",
                            "C_name": "NoReturnNoArguments",
                            "C_prototype": "void",
                            "C_return_type": "void",
                            "F_C_arguments": "",
                            "F_C_call": "c_no_return_no_arguments",
                            "F_C_name": "no_return_no_arguments",
                            "F_C_subprogram": "subroutine",
                            "F_arguments": "",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "NoReturnNoArguments",
                    "F_name_api": "no_return_no_arguments",
                    "F_name_function": "no_return_no_arguments",
                    "F_name_generic": "no_return_no_arguments",
                    "F_name_impl": "no_return_no_arguments",
                    "PY_name_impl": "PY_NoReturnNoArguments",
                    "function_name": "NoReturnNoArguments"
                }
            },
            {
                "<FUNCTION>": "PassByValue  1 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "PassByValue",
                        "params": [
                            {
                                "declarator": {
                                    "name": "arg1",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "name": "arg2",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "double"
                    },
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double PassByValue(double arg1, int arg2)",
                "declgen": "double PassByValue(double arg1, int arg2)",
                "name": "PassByValue",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "PassByValue(\targ1,\t arg2)",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "PassByValue",
                            "C_prototype": "double arg1,\t int arg2",
                            "C_return_type": "double",
                            "F_C_name": "c_pass_by_value",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "double",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "double SHC_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "PassByValue(\targ1,\t arg2)",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "PassByValue",
                            "C_prototype": "double arg1,\t int arg2",
                            "C_return_type": "double",
                            "F_C_arguments": "arg1,\t arg2",
                            "F_C_call": "c_pass_by_value",
                            "F_C_name": "pass_by_value",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "arg1,\t arg2",
                            "F_arguments": "arg1,\t arg2",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "double",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "double SHC_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg1",
                            "ctor_expr": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "fc_var": "arg2",
                            "i_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg2",
                            "ctor_expr": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "PassByValue",
                    "F_name_api": "pass_by_value",
                    "F_name_function": "pass_by_value",
                    "F_name_generic": "pass_by_value",
                    "F_name_impl": "pass_by_value",
                    "PY_name_impl": "PY_PassByValue",
                    "function_name": "PassByValue"
                }
            },
            {
                "<FUNCTION>": "PassByReference  2 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "PassByReference",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg2",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void PassByReference(double *arg1+intent(in), int *arg2+intent(out))",
                "declgen": "void PassByReference(double * arg1 +intent(in), int * arg2 +intent(out))",
                "name": "PassByReference",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_*"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_native_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_*"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "f_out_native_*"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "PassByReference(\targ1,\t arg2)",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "PassByReference",
                            "C_prototype": "double * arg1,\t int * arg2",
                            "C_return_type": "void",
                            "F_C_name": "c_pass_by_reference",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "PassByReference(\targ1,\t arg2)",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "PassByReference",
                            "C_prototype": "double * arg1,\t int * arg2",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t arg2",
                            "F_C_call": "c_pass_by_reference",
                            "F_C_name": "pass_by_reference",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg1,\t arg2",
                            "F_arguments": "arg1,\t arg2",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_in_native_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_in_native_*"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double",
                            "c_var": "arg1",
                            "ctor_expr": "*arg1",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_in_native_*",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_out_native_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "fc_var": "arg2",
                            "i_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_out_native_*"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "arg2",
                            "ctor_expr": "arg2",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt": "py_out_native_*",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "PassByReference",
                    "F_name_api": "pass_by_reference",
                    "F_name_function": "pass_by_reference",
                    "F_name_generic": "pass_by_reference",
                    "F_name_impl": "pass_by_reference",
                    "PY_name_impl": "PY_PassByReference",
                    "function_name": "PassByReference"
                }
            },
            {
                "<FUNCTION>": "PassByValueMacro  3 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "PassByValueMacro",
                        "params": [
                            {
                                "declarator": {
                                    "name": "arg2",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "double"
                    },
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double PassByValueMacro(int arg2)",
                "declgen": "double PassByValueMacro(int arg2)",
                "doxygen": {
                    "description": "PassByValueMacro is a #define macro. Force a C wrapper\nto allow Fortran to have an actual function to call.\n"
                },
                "name": "PassByValueMacro",
                "options": {
                    "C_force_wrapper": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "PassByValueMacro(\targ2)",
                            "C_call_list": "arg2",
                            "C_name": "CLI_PassByValueMacro",
                            "C_prototype": "int arg2",
                            "C_return_type": "double",
                            "F_C_name": "c_pass_by_value_macro",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "double",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "double SHC_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "PassByValueMacro(\targ2)",
                            "C_call_list": "arg2",
                            "C_name": "CLI_PassByValueMacro",
                            "C_prototype": "int arg2",
                            "C_return_type": "double",
                            "F_C_arguments": "arg2",
                            "F_C_call": "c_pass_by_value_macro",
                            "F_C_name": "pass_by_value_macro",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "arg2",
                            "F_arguments": "arg2",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "double",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "double SHC_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "fc_var": "arg2",
                            "i_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg2",
                            "ctor_expr": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "PassByValueMacro",
                    "F_name_api": "pass_by_value_macro",
                    "F_name_function": "pass_by_value_macro",
                    "F_name_generic": "pass_by_value_macro",
                    "F_name_impl": "pass_by_value_macro",
                    "PY_name_impl": "PY_PassByValueMacro",
                    "function_name": "PassByValueMacro"
                }
            },
            {
                "<FUNCTION>": "checkBool  4 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "checkBool",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "arg1",
                                    "typemap_name": "bool"
                                },
                                "specifier": [
                                    "bool"
                                ],
                                "typemap_name": "bool"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg2",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "bool"
                                },
                                "specifier": [
                                    "bool"
                                ],
                                "typemap_name": "bool"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg3",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "bool"
                                },
                                "specifier": [
                                    "bool"
                                ],
                                "typemap_name": "bool"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void checkBool(const bool arg1, bool *arg2+intent(out), bool *arg3+intent(inout))",
                "declgen": "void checkBool(const bool arg1, bool * arg2 +intent(out), bool * arg3 +intent(inout))",
                "doxygen": {
                    "brief": "Check intent with bool"
                },
                "name": "checkBool",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_bool_scalar"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_bool_*"
                        },
                        "arg3": {
                            "meta": {
                                "intent": "inout"
                            },
                            "stmt": "c_inout_bool_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_bool_scalar"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "f_out_bool_*"
                        },
                        "arg3": {
                            "meta": {
                                "intent": "inout"
                            },
                            "stmt": "f_inout_bool_*"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "arg3": {
                            "meta": {
                                "intent": "inout"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "arg3": {
                            "meta": {
                                "intent": "inout"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "checkBool(\targ1,\t arg2,\t arg3)",
                            "C_call_list": "arg1,\t arg2,\t arg3",
                            "C_name": "checkBool",
                            "C_prototype": "const bool arg1,\t bool * arg2,\t bool * arg3",
                            "C_return_type": "void",
                            "F_C_name": "c_check_bool",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "checkBool(\targ1,\t arg2,\t arg3)",
                            "C_call_list": "arg1,\t arg2,\t arg3",
                            "C_name": "checkBool",
                            "C_prototype": "const bool arg1,\t bool * arg2,\t bool * arg3",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t arg2,\t arg3",
                            "F_C_call": "c_check_bool",
                            "F_C_name": "c_check_bool",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_arg1_cxx,\t SHT_arg2_cxx,\t SHT_arg3_cxx",
                            "F_arguments": "arg1,\t arg2,\t arg3",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "bool",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "(bool *) &arg1",
                            "cxx_type": "bool",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "c_in_bool_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "bool",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "(bool *) &arg1",
                            "cxx_type": "bool",
                            "cxx_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_BOOL",
                            "f_type": "logical",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "f_var_cxx": "SHT_arg1_cxx",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "f_in_bool_scalar"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "arg1",
                            "ctor_expr": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "(bool *) &arg1",
                            "cxx_type": "bool",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_BOOL",
                            "py_object": "PyObject",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_in_bool_scalar",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "bool",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg2",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "c_out_bool_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "bool",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg2",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "f_intent": "OUT",
                            "f_kind": "C_BOOL",
                            "f_type": "logical",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "f_var_cxx": "SHT_arg2_cxx",
                            "fc_var": "arg2",
                            "i_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "f_out_bool_*"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "bool",
                            "c_var": "arg2",
                            "ctor_expr": "*arg2",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg2",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_BOOL",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt": "py_out_bool_*",
                            "value_var": "SHValue_arg2"
                        }
                    },
                    "arg3": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "bool",
                            "c_var": "arg3",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg3",
                            "cxx_type": "bool",
                            "cxx_var": "arg3",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "c_inout_bool_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "bool",
                            "c_var": "arg3",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg3",
                            "cxx_type": "bool",
                            "cxx_var": "arg3",
                            "f_intent": "INOUT",
                            "f_kind": "C_BOOL",
                            "f_type": "logical",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg3",
                            "f_var_cxx": "SHT_arg3_cxx",
                            "fc_var": "arg3",
                            "i_var": "arg3",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "f_inout_bool_*"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "bool",
                            "c_var": "arg3",
                            "ctor_expr": "*arg3",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg3",
                            "cxx_type": "bool",
                            "cxx_var": "arg3",
                            "data_var": "SHData_arg3",
                            "numpy_type": "NPY_BOOL",
                            "py_object": "PyObject",
                            "py_var": "SHPy_arg3",
                            "size_var": "SHSize_arg3",
                            "stmt": "py_inout_bool_*",
                            "value_var": "SHValue_arg3"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "checkBool",
                    "F_name_api": "check_bool",
                    "F_name_function": "check_bool",
                    "F_name_generic": "check_bool",
                    "F_name_impl": "check_bool",
                    "PY_name_impl": "PY_checkBool",
                    "function_name": "checkBool"
                }
            },
            {
                "<FUNCTION>": "Function4a  5 ****************************************",
                "ast": {
                    "declarator": {
                        "attrs": {
                            "len": "30"
                        },
                        "name": "Function4a",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            },
                            {
                                "const": true,
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "char"
                    },
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "char *Function4a( const char *arg1, const char *arg2 ) +len(30)",
                "declgen": "char * Function4a(const char * arg1, const char * arg2) +len(30)",
                "helpers": {
                    "c": [
                        "char_copy"
                    ]
                },
                "name": "Function4a",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_char_*"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_*"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "buf",
                                "deref": "copy",
                                "intent": "function"
                            },
                            "stmt": "f_function_char_*_buf_copy"
                        },
                        "arg1": {
                            "meta": {
                                "ftrim_char_in": true,
                                "intent": "in"
                            },
                            "stmt": "f_in_char_*"
                        },
                        "arg2": {
                            "meta": {
                                "ftrim_char_in": true,
                                "intent": "in"
                            },
                            "stmt": "f_in_char_*"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "Function4a(\targ1,\t arg2)",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "Function4a",
                            "C_prototype": "const char * arg1,\t const char * arg2",
                            "C_return_type": "char *",
                            "F_C_arguments": "arg1,\t arg2",
                            "F_C_name": "c_function4a",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_char_len": "30",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHC_rv",
                            "cxx_rv_decl": "char * SHC_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_char_*"
                        },
                        "fmtf": {
                            "C_call_function": "Function4a(\targ1,\t arg2)",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "CLI_Function4a_bufferify",
                            "C_prototype": "const char * arg1,\t const char * arg2,\t char *SHC_rv,\t int SHT_rv_len",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t arg2,\t SHT_rv,\t SHT_rv_len",
                            "F_C_call": "c_function4a_bufferify",
                            "F_C_name": "c_function4a_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "trim(arg1)//C_NULL_CHAR,\t trim(arg2)//C_NULL_CHAR,\t SHT_rv,\t SHT_rv_len",
                            "F_arguments": "arg1,\t arg2",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_char_len": "30",
                            "c_const": "",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_len": "SHT_rv_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_rv_decl": "char * SHCXX_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_len": "SHT_rv_len",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_len": "SHT_rv_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_char_*_buf_copy"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_char_*",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) arg1",
                            "cxx_type": "char",
                            "cxx_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) arg1",
                            "cxx_type": "char",
                            "cxx_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_*"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "*arg1",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) arg1",
                            "cxx_type": "char",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_in_char_*",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) arg2",
                            "cxx_type": "char",
                            "cxx_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "i_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) arg2",
                            "cxx_type": "char",
                            "cxx_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "fc_var": "arg2",
                            "i_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_*"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg2",
                            "ctor_expr": "*arg2",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) arg2",
                            "cxx_type": "char",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt": "py_in_char_*",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "Function4a",
                    "F_name_api": "function4a",
                    "F_name_function": "function4a",
                    "F_name_generic": "function4a",
                    "F_name_impl": "function4a",
                    "PY_name_impl": "PY_Function4a",
                    "function_name": "Function4a"
                }
            },
            {
                "<FUNCTION>": "acceptName  6 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "acceptName",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptName(const char *name)",
                "declgen": "void acceptName(const char * name)",
                "name": "acceptName",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "name": {
                            "meta": {
                                "ftrim_char_in": true,
                                "intent": "in"
                            },
                            "stmt": "f_in_char_*"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "acceptName(\tname)",
                            "C_call_list": "name",
                            "C_name": "acceptName",
                            "C_prototype": "const char * name",
                            "C_return_type": "void",
                            "F_C_name": "c_accept_name",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "acceptName(\tname)",
                            "C_call_list": "name",
                            "C_name": "acceptName",
                            "C_prototype": "const char * name",
                            "C_return_type": "void",
                            "F_C_arguments": "name",
                            "F_C_call": "c_accept_name",
                            "F_C_name": "c_accept_name",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "trim(name)//C_NULL_CHAR",
                            "F_arguments": "name",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) name",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) name",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "fc_var": "name",
                            "i_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_*"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name",
                            "ctor_expr": "*name",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) name",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "data_var": "SHData_name",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt": "py_in_char_*",
                            "value_var": "SHValue_name"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "acceptName",
                    "F_name_api": "accept_name",
                    "F_name_function": "accept_name",
                    "F_name_generic": "accept_name",
                    "F_name_impl": "accept_name",
                    "PY_name_impl": "PY_acceptName",
                    "function_name": "acceptName"
                }
            },
            {
                "<FUNCTION>": "passCharPtrInOut  7 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "passCharPtrInOut",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "inout"
                                    },
                                    "name": "s",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtrInOut(char * s+intent(inout))",
                "declgen": "void passCharPtrInOut(char * s +intent(inout))",
                "doxygen": {
                    "brief": "toupper",
                    "description": "Change a string in-place.\nFor Python, return a new string since strings are immutable.\n"
                },
                "helpers": {
                    "c": [
                        "char_alloc",
                        "char_copy",
                        "char_free"
                    ]
                },
                "name": "passCharPtrInOut",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "s": {
                            "meta": {
                                "intent": "inout"
                            },
                            "stmt": "c_inout_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "s": {
                            "meta": {
                                "api": "buf",
                                "intent": "inout"
                            },
                            "stmt": "f_inout_char_*_buf"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "s": {
                            "meta": {
                                "intent": "inout"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "s": {
                            "meta": {
                                "intent": "inout"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "passCharPtrInOut(\ts)",
                            "C_call_list": "s",
                            "C_name": "passCharPtrInOut",
                            "C_prototype": "char * s",
                            "C_return_type": "void",
                            "F_C_arguments": "s",
                            "F_C_name": "c_pass_char_ptr_in_out",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "passCharPtrInOut(\tSHT_s_str)",
                            "C_call_list": "SHT_s_str",
                            "C_name": "CLI_passCharPtrInOut_bufferify",
                            "C_prototype": "char *s,\t int SHT_s_len",
                            "C_return_type": "void",
                            "F_C_arguments": "s,\t SHT_s_len",
                            "F_C_call": "c_pass_char_ptr_in_out_bufferify",
                            "F_C_name": "c_pass_char_ptr_in_out_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "s,\t SHT_s_len",
                            "F_arguments": "s",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "s": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "s",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "s",
                            "cxx_type": "char",
                            "cxx_var": "s",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "s",
                            "i_var": "s",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_inout_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_alloc": "ShroudCharAlloc",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_helper_char_free": "ShroudCharFree",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "s",
                            "c_var_len": "SHT_s_len",
                            "c_var_str": "SHT_s_str",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "s",
                            "cxx_type": "char",
                            "cxx_var": "s",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "s",
                            "f_var_len": "SHT_s_len",
                            "fc_var": "s",
                            "i_var": "s",
                            "i_var_len": "SHT_s_len",
                            "i_var_str": "SHT_s_str",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_inout_char_*_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "s",
                            "ctor_expr": "s",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "s",
                            "cxx_type": "char",
                            "cxx_var": "s",
                            "data_var": "SHData_s",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_s",
                            "size_var": "SHSize_s",
                            "stmt": "py_inout_char_*",
                            "value_var": "SHValue_s"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passCharPtrInOut",
                    "F_name_api": "pass_char_ptr_in_out",
                    "F_name_function": "pass_char_ptr_in_out",
                    "F_name_generic": "pass_char_ptr_in_out",
                    "F_name_impl": "pass_char_ptr_in_out",
                    "PY_name_impl": "PY_passCharPtrInOut",
                    "function_name": "passCharPtrInOut"
                }
            },
            {
                "<FUNCTION>": "returnOneName  8 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "returnOneName",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "charlen": "MAXNAME",
                                        "intent": "out"
                                    },
                                    "name": "name1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void returnOneName(char *name1+intent(out)+charlen(MAXNAME))",
                "declgen": "void returnOneName(char * name1 +charlen(MAXNAME)+intent(out))",
                "doxygen": {
                    "brief": "Test charlen attribute",
                    "description": "Each argument is assumed to be at least MAXNAME long.\nThis define is provided by the user.\nThe function will copy into the user provided buffer.\n"
                },
                "helpers": {
                    "c": [
                        "char_blank_fill"
                    ]
                },
                "name": "returnOneName",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "name1": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "name1": {
                            "meta": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "stmt": "f_out_char_*_buf"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "name1": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "name1": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "returnOneName(\tname1)",
                            "C_call_list": "name1",
                            "C_name": "returnOneName",
                            "C_prototype": "char * name1",
                            "C_return_type": "void",
                            "F_C_arguments": "name1",
                            "F_C_name": "c_return_one_name",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "returnOneName(\tname1)",
                            "C_call_list": "name1",
                            "C_name": "CLI_returnOneName_bufferify",
                            "C_prototype": "char *name1,\t int SHT_name1_len",
                            "C_return_type": "void",
                            "F_C_arguments": "name1,\t SHT_name1_len",
                            "F_C_call": "c_return_one_name_bufferify",
                            "F_C_name": "c_return_one_name_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "name1,\t SHT_name1_len",
                            "F_arguments": "name1",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "name1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name1",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name1",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name1",
                            "i_var": "name1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_blank_fill": "ShroudCharBlankFill",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name1",
                            "c_var_len": "SHT_name1_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name1",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name1",
                            "f_var_len": "SHT_name1_len",
                            "fc_var": "name1",
                            "i_var": "name1",
                            "i_var_len": "SHT_name1_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_char_*_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name1",
                            "charlen": "MAXNAME",
                            "ctor_expr": "name1",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name1",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "data_var": "SHData_name1",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_name1",
                            "size_var": "SHSize_name1",
                            "stmt": "py_out_char_*_charlen",
                            "value_var": "SHValue_name1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnOneName",
                    "F_name_api": "return_one_name",
                    "F_name_function": "return_one_name",
                    "F_name_generic": "return_one_name",
                    "F_name_impl": "return_one_name",
                    "PY_name_impl": "PY_returnOneName",
                    "function_name": "returnOneName"
                }
            },
            {
                "<FUNCTION>": "returnTwoNames  9 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "returnTwoNames",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "charlen": "MAXNAME",
                                        "intent": "out"
                                    },
                                    "name": "name1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "charlen": "MAXNAME",
                                        "intent": "out"
                                    },
                                    "name": "name2",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void returnTwoNames(char *name1+intent(out)+charlen(MAXNAME), char *name2+intent(out)+charlen(MAXNAME))",
                "declgen": "void returnTwoNames(char * name1 +charlen(MAXNAME)+intent(out), char * name2 +charlen(MAXNAME)+intent(out))",
                "doxygen": {
                    "brief": "Test charlen attribute",
                    "description": "Each argument is assumed to be at least MAXNAME long.\nThis define is provided by the user.\nThe function will copy into the user provided buffer.\n"
                },
                "helpers": {
                    "c": [
                        "char_blank_fill"
                    ]
                },
                "name": "returnTwoNames",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "name1": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_char_*"
                        },
                        "name2": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "name1": {
                            "meta": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "stmt": "f_out_char_*_buf"
                        },
                        "name2": {
                            "meta": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "stmt": "f_out_char_*_buf"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "name1": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "name2": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "name1": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "name2": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "returnTwoNames(\tname1,\t name2)",
                            "C_call_list": "name1,\t name2",
                            "C_name": "returnTwoNames",
                            "C_prototype": "char * name1,\t char * name2",
                            "C_return_type": "void",
                            "F_C_arguments": "name1,\t name2",
                            "F_C_name": "c_return_two_names",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "returnTwoNames(\tname1,\t name2)",
                            "C_call_list": "name1,\t name2",
                            "C_name": "CLI_returnTwoNames_bufferify",
                            "C_prototype": "char *name1,\t int SHT_name1_len,\t char *name2,\t int SHT_name2_len",
                            "C_return_type": "void",
                            "F_C_arguments": "name1,\t SHT_name1_len,\t name2,\t SHT_name2_len",
                            "F_C_call": "c_return_two_names_bufferify",
                            "F_C_name": "c_return_two_names_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "name1,\t SHT_name1_len,\t name2,\t SHT_name2_len",
                            "F_arguments": "name1,\t name2",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "name1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name1",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name1",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name1",
                            "i_var": "name1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_blank_fill": "ShroudCharBlankFill",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name1",
                            "c_var_len": "SHT_name1_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name1",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name1",
                            "f_var_len": "SHT_name1_len",
                            "fc_var": "name1",
                            "i_var": "name1",
                            "i_var_len": "SHT_name1_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_char_*_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name1",
                            "charlen": "MAXNAME",
                            "ctor_expr": "name1",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name1",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "data_var": "SHData_name1",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_name1",
                            "size_var": "SHSize_name1",
                            "stmt": "py_out_char_*_charlen",
                            "value_var": "SHValue_name1"
                        }
                    },
                    "name2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name2",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name2",
                            "cxx_type": "char",
                            "cxx_var": "name2",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name2",
                            "i_var": "name2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_blank_fill": "ShroudCharBlankFill",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name2",
                            "c_var_len": "SHT_name2_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name2",
                            "cxx_type": "char",
                            "cxx_var": "name2",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name2",
                            "f_var_len": "SHT_name2_len",
                            "fc_var": "name2",
                            "i_var": "name2",
                            "i_var_len": "SHT_name2_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_char_*_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name2",
                            "charlen": "MAXNAME",
                            "ctor_expr": "name2",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name2",
                            "cxx_type": "char",
                            "cxx_var": "name2",
                            "data_var": "SHData_name2",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_name2",
                            "size_var": "SHSize_name2",
                            "stmt": "py_out_char_*_charlen",
                            "value_var": "SHValue_name2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnTwoNames",
                    "F_name_api": "return_two_names",
                    "F_name_function": "return_two_names",
                    "F_name_generic": "return_two_names",
                    "F_name_impl": "return_two_names",
                    "PY_name_impl": "PY_returnTwoNames",
                    "function_name": "returnTwoNames"
                }
            },
            {
                "<FUNCTION>": "ImpliedTextLen  10 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "ImpliedTextLen",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "charlen": "MAXNAME",
                                        "intent": "out"
                                    },
                                    "name": "text",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "len(text)"
                                    },
                                    "name": "ltext",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void ImpliedTextLen(char *text+intent(out)+charlen(MAXNAME), int ltext+implied(len(text)))",
                "declgen": "void ImpliedTextLen(char * text +charlen(MAXNAME)+intent(out), int ltext +implied(len(text)))",
                "doxygen": {
                    "brief": "Fill text, at most ltext characters."
                },
                "helpers": {
                    "c": [
                        "char_blank_fill"
                    ]
                },
                "name": "ImpliedTextLen",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "ltext": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "text": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "ltext": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "text": {
                            "meta": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "stmt": "f_out_char_*_buf"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "ltext": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "text": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "ltext": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "text": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "ImpliedTextLen(\ttext,\t ltext)",
                            "C_call_list": "text,\t ltext",
                            "C_name": "ImpliedTextLen",
                            "C_prototype": "char * text,\t int ltext",
                            "C_return_type": "void",
                            "F_C_arguments": "text,\t ltext",
                            "F_C_name": "c_implied_text_len",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "ImpliedTextLen(\ttext,\t ltext)",
                            "C_call_list": "text,\t ltext",
                            "C_name": "CLI_ImpliedTextLen_bufferify",
                            "C_prototype": "char *text,\t int SHT_text_len,\t int ltext",
                            "C_return_type": "void",
                            "F_C_arguments": "text,\t SHT_text_len,\t ltext",
                            "F_C_call": "c_implied_text_len_bufferify",
                            "F_C_name": "c_implied_text_len_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "text,\t SHT_text_len,\t SH_ltext",
                            "F_arguments": "text",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "ltext": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "ltext",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&ltext",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "ltext",
                            "i_var": "ltext",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "ltext",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&ltext",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "ltext",
                            "fc_var": "SH_ltext",
                            "i_var": "ltext",
                            "idtor": "0",
                            "pre_call_intent": "len(text,kind=C_INT)",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "ltext",
                            "ctor_expr": "ltext",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&ltext",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "data_var": "SHData_ltext",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "MAXNAME",
                            "py_var": "SHPy_ltext",
                            "size_var": "SHSize_ltext",
                            "value_var": "SHValue_ltext"
                        }
                    },
                    "text": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "text",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "text",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "text",
                            "i_var": "text",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_blank_fill": "ShroudCharBlankFill",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "text",
                            "c_var_len": "SHT_text_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "text",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "text",
                            "f_var_len": "SHT_text_len",
                            "fc_var": "text",
                            "i_var": "text",
                            "i_var_len": "SHT_text_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_char_*_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "text",
                            "charlen": "MAXNAME",
                            "ctor_expr": "text",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "text",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "data_var": "SHData_text",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_text",
                            "size_var": "SHSize_text",
                            "stmt": "py_out_char_*_charlen",
                            "value_var": "SHValue_text"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "ImpliedTextLen",
                    "F_name_api": "implied_text_len",
                    "F_name_function": "implied_text_len",
                    "F_name_generic": "implied_text_len",
                    "F_name_impl": "implied_text_len",
                    "PY_name_impl": "PY_ImpliedTextLen",
                    "function_name": "ImpliedTextLen"
                }
            },
            {
                "<FUNCTION>": "ImpliedLen  11 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "ImpliedLen",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "text",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "len(text)"
                                    },
                                    "name": "ltext",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "false"
                                    },
                                    "name": "flag",
                                    "typemap_name": "bool"
                                },
                                "specifier": [
                                    "bool"
                                ],
                                "typemap_name": "bool"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int ImpliedLen(const char *text, int ltext+implied(len(text)), bool flag+implied(false))",
                "declgen": "int ImpliedLen(const char * text, int ltext +implied(len(text)), bool flag +implied(false))",
                "doxygen": {
                    "brief": "Return the implied argument - text length",
                    "description": "Pass the Fortran length of the char argument directy to the C function.\nNo need for the bufferify version which will needlessly copy the string.\n"
                },
                "name": "ImpliedLen",
                "options": {
                    "F_create_bufferify_function": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_bool_scalar"
                        },
                        "ltext": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "text": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_bool_scalar"
                        },
                        "ltext": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "text": {
                            "meta": {
                                "ftrim_char_in": true,
                                "intent": "in"
                            },
                            "stmt": "f_in_char_*"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "ltext": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "text": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "ltext": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "text": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "ImpliedLen(\ttext,\t ltext,\t flag)",
                            "C_call_list": "text,\t ltext,\t flag",
                            "C_name": "ImpliedLen",
                            "C_prototype": "const char * text,\t int ltext,\t bool flag",
                            "C_return_type": "int",
                            "F_C_name": "c_implied_len",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "ImpliedLen(\ttext,\t ltext,\t flag)",
                            "C_call_list": "text,\t ltext,\t flag",
                            "C_name": "ImpliedLen",
                            "C_prototype": "const char * text,\t int ltext,\t bool flag",
                            "C_return_type": "int",
                            "F_C_arguments": "text,\t ltext,\t flag",
                            "F_C_call": "c_implied_len",
                            "F_C_name": "c_implied_len",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "trim(text)//C_NULL_CHAR,\t SH_ltext,\t SH_flag",
                            "F_arguments": "text",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "flag": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "c_in_bool_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "f_intent": "IN",
                            "f_kind": "C_BOOL",
                            "f_type": "logical",
                            "f_type_module": "iso_c_binding",
                            "f_var": "flag",
                            "f_var_cxx": "SHT_flag_cxx",
                            "fc_var": "SH_flag",
                            "i_var": "flag",
                            "idtor": "0",
                            "pre_call_intent": ".FALSE._C_BOOL",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "f_in_bool_scalar"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "flag",
                            "ctor_expr": "flag",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "data_var": "SHData_flag",
                            "numpy_type": "NPY_BOOL",
                            "pre_call_intent": "false",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag",
                            "value_var": "SHValue_flag"
                        }
                    },
                    "ltext": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "ltext",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&ltext",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "ltext",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&ltext",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "ltext",
                            "fc_var": "SH_ltext",
                            "i_var": "ltext",
                            "idtor": "0",
                            "pre_call_intent": "len(text,kind=C_INT)",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "ltext",
                            "ctor_expr": "ltext",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&ltext",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "data_var": "SHData_ltext",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "strlen(text)",
                            "py_var": "SHPy_ltext",
                            "size_var": "SHSize_ltext",
                            "value_var": "SHValue_ltext"
                        }
                    },
                    "text": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "text",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) text",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "text",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) text",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "text",
                            "fc_var": "text",
                            "i_var": "text",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_*"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "text",
                            "ctor_expr": "*text",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) text",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "data_var": "SHData_text",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_text",
                            "size_var": "SHSize_text",
                            "stmt": "py_in_char_*",
                            "value_var": "SHValue_text"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "ImpliedLen",
                    "F_name_api": "implied_len",
                    "F_name_function": "implied_len",
                    "F_name_generic": "implied_len",
                    "F_name_impl": "implied_len",
                    "PY_name_impl": "PY_ImpliedLen",
                    "function_name": "ImpliedLen"
                }
            },
            {
                "<FUNCTION>": "ImpliedLenTrim  12 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "ImpliedLenTrim",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "text",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "len_trim(text)"
                                    },
                                    "name": "ltext",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "true"
                                    },
                                    "name": "flag",
                                    "typemap_name": "bool"
                                },
                                "specifier": [
                                    "bool"
                                ],
                                "typemap_name": "bool"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int ImpliedLenTrim(const char *text, int ltext+implied(len_trim(text)), bool flag+implied(true))",
                "declgen": "int ImpliedLenTrim(const char * text, int ltext +implied(len_trim(text)), bool flag +implied(true))",
                "doxygen": {
                    "brief": "Return the implied argument - text length",
                    "description": "Pass the Fortran length of the char argument directy to the C function.\nNo need for the bufferify version which will needlessly copy the string.\n"
                },
                "name": "ImpliedLenTrim",
                "options": {
                    "F_create_bufferify_function": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_bool_scalar"
                        },
                        "ltext": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "text": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_bool_scalar"
                        },
                        "ltext": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "text": {
                            "meta": {
                                "ftrim_char_in": true,
                                "intent": "in"
                            },
                            "stmt": "f_in_char_*"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "ltext": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "text": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "ltext": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "text": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "ImpliedLenTrim(\ttext,\t ltext,\t flag)",
                            "C_call_list": "text,\t ltext,\t flag",
                            "C_name": "ImpliedLenTrim",
                            "C_prototype": "const char * text,\t int ltext,\t bool flag",
                            "C_return_type": "int",
                            "F_C_name": "c_implied_len_trim",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "ImpliedLenTrim(\ttext,\t ltext,\t flag)",
                            "C_call_list": "text,\t ltext,\t flag",
                            "C_name": "ImpliedLenTrim",
                            "C_prototype": "const char * text,\t int ltext,\t bool flag",
                            "C_return_type": "int",
                            "F_C_arguments": "text,\t ltext,\t flag",
                            "F_C_call": "c_implied_len_trim",
                            "F_C_name": "c_implied_len_trim",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "trim(text)//C_NULL_CHAR,\t SH_ltext,\t SH_flag",
                            "F_arguments": "text",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "flag": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "c_in_bool_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "f_intent": "IN",
                            "f_kind": "C_BOOL",
                            "f_type": "logical",
                            "f_type_module": "iso_c_binding",
                            "f_var": "flag",
                            "f_var_cxx": "SHT_flag_cxx",
                            "fc_var": "SH_flag",
                            "i_var": "flag",
                            "idtor": "0",
                            "pre_call_intent": ".TRUE._C_BOOL",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "f_in_bool_scalar"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "flag",
                            "ctor_expr": "flag",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "data_var": "SHData_flag",
                            "numpy_type": "NPY_BOOL",
                            "pre_call_intent": "true",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag",
                            "value_var": "SHValue_flag"
                        }
                    },
                    "ltext": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "ltext",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&ltext",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "ltext",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&ltext",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "ltext",
                            "fc_var": "SH_ltext",
                            "i_var": "ltext",
                            "idtor": "0",
                            "pre_call_intent": "len_trim(text,kind=C_INT)",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "ltext",
                            "ctor_expr": "ltext",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&ltext",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "data_var": "SHData_ltext",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "strlen(text)",
                            "py_var": "SHPy_ltext",
                            "size_var": "SHSize_ltext",
                            "value_var": "SHValue_ltext"
                        }
                    },
                    "text": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "text",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) text",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "text",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) text",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "text",
                            "fc_var": "text",
                            "i_var": "text",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_*"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "text",
                            "ctor_expr": "*text",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) text",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "data_var": "SHData_text",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_text",
                            "size_var": "SHSize_text",
                            "stmt": "py_in_char_*",
                            "value_var": "SHValue_text"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "ImpliedLenTrim",
                    "F_name_api": "implied_len_trim",
                    "F_name_function": "implied_len_trim",
                    "F_name_generic": "implied_len_trim",
                    "F_name_impl": "implied_len_trim",
                    "PY_name_impl": "PY_ImpliedLenTrim",
                    "function_name": "ImpliedLenTrim"
                }
            },
            {
                "<FUNCTION>": "ImpliedBoolTrue  13 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "ImpliedBoolTrue",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "true"
                                    },
                                    "name": "flag",
                                    "typemap_name": "bool"
                                },
                                "specifier": [
                                    "bool"
                                ],
                                "typemap_name": "bool"
                            }
                        ],
                        "typemap_name": "bool"
                    },
                    "specifier": [
                        "bool"
                    ],
                    "typemap_name": "bool"
                },
                "decl": "bool ImpliedBoolTrue(bool flag+implied(true))",
                "declgen": "bool ImpliedBoolTrue(bool flag +implied(true))",
                "doxygen": {
                    "brief": "Single, implied bool argument"
                },
                "name": "ImpliedBoolTrue",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_bool_scalar"
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_bool_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_bool_scalar"
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_bool_scalar"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "ImpliedBoolTrue(\tflag)",
                            "C_call_list": "flag",
                            "C_name": "ImpliedBoolTrue",
                            "C_prototype": "bool flag",
                            "C_return_type": "bool",
                            "F_C_name": "c_implied_bool_true",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "bool",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "bool SHC_rv",
                            "cxx_type": "bool",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "c_function_bool_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "ImpliedBoolTrue(\tflag)",
                            "C_call_list": "flag",
                            "C_name": "ImpliedBoolTrue",
                            "C_prototype": "bool flag",
                            "C_return_type": "bool",
                            "F_C_arguments": "flag",
                            "F_C_call": "c_implied_bool_true",
                            "F_C_name": "c_implied_bool_true",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "SH_flag",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "bool",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "bool SHC_rv",
                            "cxx_type": "bool",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_BOOL",
                            "f_type": "logical",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "f_function_bool_scalar"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "bool",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_BOOL",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_bool_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "flag": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "c_in_bool_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "f_intent": "IN",
                            "f_kind": "C_BOOL",
                            "f_type": "logical",
                            "f_type_module": "iso_c_binding",
                            "f_var": "flag",
                            "f_var_cxx": "SHT_flag_cxx",
                            "fc_var": "SH_flag",
                            "i_var": "flag",
                            "idtor": "0",
                            "pre_call_intent": ".TRUE._C_BOOL",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "f_in_bool_scalar"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "flag",
                            "ctor_expr": "flag",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "data_var": "SHData_flag",
                            "numpy_type": "NPY_BOOL",
                            "pre_call_intent": "true",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag",
                            "value_var": "SHValue_flag"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "ImpliedBoolTrue",
                    "F_name_api": "implied_bool_true",
                    "F_name_function": "implied_bool_true",
                    "F_name_generic": "implied_bool_true",
                    "F_name_impl": "implied_bool_true",
                    "PY_name_impl": "PY_ImpliedBoolTrue",
                    "function_name": "ImpliedBoolTrue"
                }
            },
            {
                "<FUNCTION>": "ImpliedBoolFalse  14 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "ImpliedBoolFalse",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "false"
                                    },
                                    "name": "flag",
                                    "typemap_name": "bool"
                                },
                                "specifier": [
                                    "bool"
                                ],
                                "typemap_name": "bool"
                            }
                        ],
                        "typemap_name": "bool"
                    },
                    "specifier": [
                        "bool"
                    ],
                    "typemap_name": "bool"
                },
                "decl": "bool ImpliedBoolFalse(bool flag+implied(false))",
                "declgen": "bool ImpliedBoolFalse(bool flag +implied(false))",
                "doxygen": {
                    "brief": "Single, implied bool argument"
                },
                "name": "ImpliedBoolFalse",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_bool_scalar"
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_bool_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_bool_scalar"
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_bool_scalar"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "ImpliedBoolFalse(\tflag)",
                            "C_call_list": "flag",
                            "C_name": "ImpliedBoolFalse",
                            "C_prototype": "bool flag",
                            "C_return_type": "bool",
                            "F_C_name": "c_implied_bool_false",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "bool",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "bool SHC_rv",
                            "cxx_type": "bool",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "c_function_bool_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "ImpliedBoolFalse(\tflag)",
                            "C_call_list": "flag",
                            "C_name": "ImpliedBoolFalse",
                            "C_prototype": "bool flag",
                            "C_return_type": "bool",
                            "F_C_arguments": "flag",
                            "F_C_call": "c_implied_bool_false",
                            "F_C_name": "c_implied_bool_false",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "SH_flag",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "bool",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "bool SHC_rv",
                            "cxx_type": "bool",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_BOOL",
                            "f_type": "logical",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "f_function_bool_scalar"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "bool",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_BOOL",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_bool_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "flag": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "c_in_bool_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "f_intent": "IN",
                            "f_kind": "C_BOOL",
                            "f_type": "logical",
                            "f_type_module": "iso_c_binding",
                            "f_var": "flag",
                            "f_var_cxx": "SHT_flag_cxx",
                            "fc_var": "SH_flag",
                            "i_var": "flag",
                            "idtor": "0",
                            "pre_call_intent": ".FALSE._C_BOOL",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "f_in_bool_scalar"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "flag",
                            "ctor_expr": "flag",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "data_var": "SHData_flag",
                            "numpy_type": "NPY_BOOL",
                            "pre_call_intent": "false",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag",
                            "value_var": "SHValue_flag"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "ImpliedBoolFalse",
                    "F_name_api": "implied_bool_false",
                    "F_name_function": "implied_bool_false",
                    "F_name_generic": "implied_bool_false",
                    "F_name_impl": "implied_bool_false",
                    "PY_name_impl": "PY_ImpliedBoolFalse",
                    "function_name": "ImpliedBoolFalse"
                }
            },
            {
                "<FUNCTION>": "bindC1  15 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "bindC1",
                        "params": [],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void bindC1(void)",
                "declgen": "void bindC1(void)",
                "doxygen": {
                    "brief": "Rename Fortran name for interface only function",
                    "description": "This creates only an interface.\n"
                },
                "name": "bindC1",
                "options": {
                    "wrap_python": false
                },
                "user_fmt": {
                    "F_C_name": "Fortran_bindC1b",
                    "F_name_impl": "Fortran_bindC1a"
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "bindC1(\t)",
                            "C_name": "bindC1",
                            "C_prototype": "void",
                            "C_return_type": "void",
                            "F_C_name": "c_bind_c1",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "bindC1(\t)",
                            "C_name": "bindC1",
                            "C_prototype": "void",
                            "C_return_type": "void",
                            "F_C_arguments": "",
                            "F_C_call": "Fortran_bindC1b",
                            "F_C_name": "Fortran_bindC1a",
                            "F_C_subprogram": "subroutine",
                            "F_arguments": "",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "bindC1",
                    "F_C_name": "Fortran_bindC1b",
                    "F_name_api": "bind_c1",
                    "F_name_function": "bind_c1",
                    "F_name_generic": "bind_c1",
                    "F_name_impl": "Fortran_bindC1a",
                    "function_name": "bindC1"
                }
            },
            {
                "<FUNCTION>": "bindC2  16 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "bindC2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "outbuf",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void bindC2(char *outbuf+intent(out))",
                "declgen": "void bindC2(char * outbuf +intent(out))",
                "doxygen": {
                    "brief": "Rename Fortran name for interface only function",
                    "description": "This creates a Fortran bufferify function and an interface.\n"
                },
                "helpers": {
                    "c": [
                        "char_blank_fill"
                    ]
                },
                "name": "bindC2",
                "options": {
                    "wrap_python": false
                },
                "user_fmt": {
                    "F_name_impl": "Fortran_bindC2a"
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "outbuf": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "outbuf": {
                            "meta": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "stmt": "f_out_char_*_buf"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "outbuf": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "bindC2(\toutbuf)",
                            "C_call_list": "outbuf",
                            "C_name": "bindC2",
                            "C_prototype": "char * outbuf",
                            "C_return_type": "void",
                            "F_C_arguments": "outbuf",
                            "F_C_name": "c_bind_c2",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "bindC2(\toutbuf)",
                            "C_call_list": "outbuf",
                            "C_name": "CLI_bindC2_bufferify",
                            "C_prototype": "char *outbuf,\t int SHT_outbuf_len",
                            "C_return_type": "void",
                            "F_C_arguments": "outbuf,\t SHT_outbuf_len",
                            "F_C_call": "c_bind_c2_bufferify",
                            "F_C_name": "c_bind_c2_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "outbuf,\t SHT_outbuf_len",
                            "F_arguments": "outbuf",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "outbuf": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "outbuf",
                            "i_var": "outbuf",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_blank_fill": "ShroudCharBlankFill",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "c_var_len": "SHT_outbuf_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "outbuf",
                            "f_var_len": "SHT_outbuf_len",
                            "fc_var": "outbuf",
                            "i_var": "outbuf",
                            "i_var_len": "SHT_outbuf_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_char_*_buf"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "bindC2",
                    "F_name_api": "bind_c2",
                    "F_name_function": "bind_c2",
                    "F_name_generic": "bind_c2",
                    "F_name_impl": "Fortran_bindC2a",
                    "function_name": "bindC2"
                }
            },
            {
                "<FUNCTION>": "passVoidStarStar  17 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "passVoidStarStar",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in"
                                    },
                                    "name": "in",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "out",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passVoidStarStar(void *in+intent(in), void **out+intent(out))",
                "declgen": "void passVoidStarStar(void * in +intent(in), void * * out +intent(out))",
                "doxygen": {
                    "brief": "Assign in to out.",
                    "description": "No bufferify function is created, only an interface.\n"
                },
                "name": "passVoidStarStar",
                "options": {
                    "literalinclude": true,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_void_*"
                        },
                        "out": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_void_**"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_void_*"
                        },
                        "out": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "f_out_void_**"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "out": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "passVoidStarStar(\tin,\t out)",
                            "C_call_list": "in,\t out",
                            "C_name": "passVoidStarStar",
                            "C_prototype": "void * in,\t void **out",
                            "C_return_type": "void",
                            "F_C_name": "c_pass_void_star_star",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "passVoidStarStar(\tin,\t out)",
                            "C_call_list": "in,\t out",
                            "C_name": "passVoidStarStar",
                            "C_prototype": "void * in,\t void **out",
                            "C_return_type": "void",
                            "F_C_arguments": "in,\t out",
                            "F_C_call": "c_pass_void_star_star",
                            "F_C_name": "pass_void_star_star",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "in,\t out",
                            "F_arguments": "in,\t out",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "in": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "in",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "in",
                            "cxx_type": "void",
                            "cxx_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "c_in_void_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "in",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "in",
                            "cxx_type": "void",
                            "cxx_var": "in",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "in",
                            "fc_var": "in",
                            "i_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "f_in_void_*"
                        }
                    },
                    "out": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "out",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out",
                            "cxx_type": "void",
                            "cxx_var": "out",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "c_out_void_**"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "out",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out",
                            "cxx_type": "void",
                            "cxx_var": "out",
                            "f_intent": "OUT",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "out",
                            "fc_var": "out",
                            "i_var": "out",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "f_out_void_**"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passVoidStarStar",
                    "F_name_api": "pass_void_star_star",
                    "F_name_function": "pass_void_star_star",
                    "F_name_generic": "pass_void_star_star",
                    "F_name_impl": "pass_void_star_star",
                    "function_name": "passVoidStarStar"
                }
            },
            {
                "<FUNCTION>": "passAssumedType  18 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "passAssumedType",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "assumedtype": true
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passAssumedType(void *arg+assumedtype)",
                "declgen": "int passAssumedType(void * arg +assumedtype)",
                "doxygen": {
                    "brief": "Test assumed-type",
                    "description": "No bufferify function is created, only an interface.\nShould only be call with an C_INT argument, and will\nreturn the value passed in.\n"
                },
                "name": "passAssumedType",
                "options": {
                    "literalinclude": true,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_void_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_void_*"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "passAssumedType(\targ)",
                            "C_call_list": "arg",
                            "C_name": "passAssumedType",
                            "C_prototype": "void * arg",
                            "C_return_type": "int",
                            "F_C_name": "c_pass_assumed_type",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "passAssumedType(\targ)",
                            "C_call_list": "arg",
                            "C_name": "passAssumedType",
                            "C_prototype": "void * arg",
                            "C_return_type": "int",
                            "F_C_arguments": "arg",
                            "F_C_call": "c_pass_assumed_type",
                            "F_C_name": "pass_assumed_type",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "arg",
                            "F_arguments": "arg",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        }
                    },
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "void",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "c_in_void_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "void",
                            "cxx_var": "arg",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "f_in_void_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passAssumedType",
                    "F_name_api": "pass_assumed_type",
                    "F_name_function": "pass_assumed_type",
                    "F_name_generic": "pass_assumed_type",
                    "F_name_impl": "pass_assumed_type",
                    "function_name": "passAssumedType"
                }
            },
            {
                "<FUNCTION>": "passAssumedTypeDim  19 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "passAssumedTypeDim",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "assumedtype": true,
                                        "rank": 1
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passAssumedTypeDim(void *arg+assumedtype+rank(1))",
                "declgen": "void passAssumedTypeDim(void * arg +assumedtype+rank(1))",
                "doxygen": {
                    "brief": "Test assumed-type with rank(1)"
                },
                "name": "passAssumedTypeDim",
                "options": {
                    "literalinclude": true,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_void_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_void_*"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "passAssumedTypeDim(\targ)",
                            "C_call_list": "arg",
                            "C_name": "passAssumedTypeDim",
                            "C_prototype": "void * arg",
                            "C_return_type": "void",
                            "F_C_name": "c_pass_assumed_type_dim",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "passAssumedTypeDim(\targ)",
                            "C_call_list": "arg",
                            "C_name": "passAssumedTypeDim",
                            "C_prototype": "void * arg",
                            "C_return_type": "void",
                            "F_C_arguments": "arg",
                            "F_C_call": "c_pass_assumed_type_dim",
                            "F_C_name": "pass_assumed_type_dim",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg",
                            "F_arguments": "arg",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "void",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "c_in_void_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "void",
                            "cxx_var": "arg",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_dimension": "(*)",
                            "i_var": "arg",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_CPTR",
                            "size": "size(arg)",
                            "stmt_name": "f_in_void_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passAssumedTypeDim",
                    "F_name_api": "pass_assumed_type_dim",
                    "F_name_function": "pass_assumed_type_dim",
                    "F_name_generic": "pass_assumed_type_dim",
                    "F_name_impl": "pass_assumed_type_dim",
                    "function_name": "passAssumedTypeDim"
                }
            },
            {
                "<FUNCTION>": "passAssumedTypeBuf  20 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "passAssumedTypeBuf",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "assumedtype": true
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "outbuf",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passAssumedTypeBuf(void *arg+assumedtype, char *outbuf+intent(out))",
                "declgen": "int passAssumedTypeBuf(void * arg +assumedtype, char * outbuf +intent(out))",
                "doxygen": {
                    "brief": "Test assumed-type",
                    "description": "A bufferify function is created.\nShould only be call with an C_INT argument, and will\nreturn the value passed in.\n"
                },
                "helpers": {
                    "c": [
                        "char_blank_fill"
                    ]
                },
                "name": "passAssumedTypeBuf",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_void_*"
                        },
                        "outbuf": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_void_*"
                        },
                        "outbuf": {
                            "meta": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "stmt": "f_out_char_*_buf"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "outbuf": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "passAssumedTypeBuf(\targ,\t outbuf)",
                            "C_call_list": "arg,\t outbuf",
                            "C_name": "passAssumedTypeBuf",
                            "C_prototype": "void * arg,\t char * outbuf",
                            "C_return_type": "int",
                            "F_C_arguments": "arg,\t outbuf",
                            "F_C_name": "c_pass_assumed_type_buf",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "passAssumedTypeBuf(\targ,\t outbuf)",
                            "C_call_list": "arg,\t outbuf",
                            "C_name": "CLI_passAssumedTypeBuf_bufferify",
                            "C_prototype": "void * arg,\t char *outbuf,\t int SHT_outbuf_len",
                            "C_return_type": "int",
                            "F_C_arguments": "arg,\t outbuf,\t SHT_outbuf_len",
                            "F_C_call": "c_pass_assumed_type_buf_bufferify",
                            "F_C_name": "c_pass_assumed_type_buf_bufferify",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "arg,\t outbuf,\t SHT_outbuf_len",
                            "F_arguments": "arg,\t outbuf",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_c_suffix": "_bufferify",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        }
                    },
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "void",
                            "cxx_var": "arg",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "c_in_void_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "void",
                            "cxx_var": "arg",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "f_in_void_*"
                        }
                    },
                    "outbuf": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "outbuf",
                            "i_var": "outbuf",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_blank_fill": "ShroudCharBlankFill",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "c_var_len": "SHT_outbuf_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "outbuf",
                            "f_var_len": "SHT_outbuf_len",
                            "fc_var": "outbuf",
                            "i_var": "outbuf",
                            "i_var_len": "SHT_outbuf_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_char_*_buf"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passAssumedTypeBuf",
                    "F_name_api": "pass_assumed_type_buf",
                    "F_name_function": "pass_assumed_type_buf",
                    "F_name_generic": "pass_assumed_type_buf",
                    "F_name_impl": "pass_assumed_type_buf",
                    "function_name": "passAssumedTypeBuf"
                }
            },
            {
                "<FUNCTION>": "callback1  21 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "callback1",
                        "params": [
                            {
                                "declarator": {
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "external": true
                                    },
                                    "func": {
                                        "name": "incr",
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "name": "incr",
                                    "params": [],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void callback1(int type, void (*incr)(void)+external)",
                "declgen": "void callback1(int type, void ( * incr)(void) +external)",
                "doxygen": {
                    "brief": "Test function pointer"
                },
                "name": "callback1",
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "incr": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_void_scalar"
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "incr": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_void_scalar"
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "incr": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "callback1(\ttype,\t incr)",
                            "C_call_list": "type,\t incr",
                            "C_name": "callback1",
                            "C_prototype": "int type,\t void ( * incr)(\tvoid)",
                            "C_return_type": "void",
                            "F_C_name": "c_callback1",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "callback1(\ttype,\t incr)",
                            "C_call_list": "type,\t incr",
                            "C_name": "callback1",
                            "C_prototype": "int type,\t void ( * incr)(\tvoid)",
                            "C_return_type": "void",
                            "F_C_arguments": "type,\t incr",
                            "F_C_call": "c_callback1",
                            "F_C_name": "c_callback1",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "type,\t incr",
                            "F_arguments": "type,\t incr",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "incr": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "void",
                            "c_var": "incr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&incr",
                            "cxx_type": "void",
                            "cxx_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "c_in_void_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "void",
                            "c_var": "incr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&incr",
                            "cxx_type": "void",
                            "cxx_var": "incr",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "incr",
                            "fc_var": "incr",
                            "i_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "f_in_void_scalar"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "type",
                            "fc_var": "type",
                            "i_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "callback1",
                    "F_name_api": "callback1",
                    "F_name_function": "callback1",
                    "F_name_generic": "callback1",
                    "F_name_impl": "callback1",
                    "function_name": "callback1"
                }
            },
            {
                "<FUNCTION>": "callback1a  22 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "callback1a",
                        "params": [
                            {
                                "declarator": {
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "external": true
                                    },
                                    "func": {
                                        "name": "incr",
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "name": "incr",
                                    "params": [],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void callback1a(int type, void (*incr)(void)+external)",
                "declgen": "void callback1a(int type, void ( * incr)(void) +external)",
                "doxygen": {
                    "brief": "Test function pointer",
                    "description": "Add C_force_wrapper to test generating function pointer prototype.\n"
                },
                "name": "callback1a",
                "options": {
                    "C_force_wrapper": true,
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "incr": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_void_scalar"
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "incr": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_void_scalar"
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "incr": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "callback1a(\ttype,\t incr)",
                            "C_call_list": "type,\t incr",
                            "C_name": "CLI_callback1a",
                            "C_prototype": "int type,\t void ( * incr)(\tvoid)",
                            "C_return_type": "void",
                            "F_C_name": "c_callback1a",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "callback1a(\ttype,\t incr)",
                            "C_call_list": "type,\t incr",
                            "C_name": "CLI_callback1a",
                            "C_prototype": "int type,\t void ( * incr)(\tvoid)",
                            "C_return_type": "void",
                            "F_C_arguments": "type,\t incr",
                            "F_C_call": "c_callback1a",
                            "F_C_name": "c_callback1a",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "type,\t incr",
                            "F_arguments": "type,\t incr",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "incr": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "void",
                            "c_var": "incr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&incr",
                            "cxx_type": "void",
                            "cxx_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "c_in_void_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "void",
                            "c_var": "incr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&incr",
                            "cxx_type": "void",
                            "cxx_var": "incr",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "incr",
                            "fc_var": "incr",
                            "i_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "f_in_void_scalar"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "type",
                            "fc_var": "type",
                            "i_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "callback1a",
                    "F_name_api": "callback1a",
                    "F_name_function": "callback1a",
                    "F_name_generic": "callback1a",
                    "F_name_impl": "callback1a",
                    "function_name": "callback1a"
                }
            },
            {
                "<FUNCTION>": "callback2  23 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "callback2",
                        "params": [
                            {
                                "declarator": {
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "assumedtype": true
                                    },
                                    "name": "in",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "external": true
                                    },
                                    "func": {
                                        "name": "incr",
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "name": "incr",
                                    "params": [
                                        {
                                            "declarator": {
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ],
                                                "typemap_name": "int"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void callback2(int type, void * in+assumedtype, void (*incr)(int *)+external)",
                "declgen": "void callback2(int type, void * in +assumedtype, void ( * incr)(int *) +external)",
                "doxygen": {
                    "brief": "Test function pointer"
                },
                "name": "callback2",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_void_*"
                        },
                        "incr": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_void_scalar"
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_void_*"
                        },
                        "incr": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_void_scalar"
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "incr": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "callback2(\ttype,\t in,\t incr)",
                            "C_call_list": "type,\t in,\t incr",
                            "C_name": "callback2",
                            "C_prototype": "int type,\t void * in,\t void ( * incr)(\tint *)",
                            "C_return_type": "void",
                            "F_C_name": "c_callback2",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "callback2(\ttype,\t in,\t incr)",
                            "C_call_list": "type,\t in,\t incr",
                            "C_name": "callback2",
                            "C_prototype": "int type,\t void * in,\t void ( * incr)(\tint *)",
                            "C_return_type": "void",
                            "F_C_arguments": "type,\t in,\t incr",
                            "F_C_call": "c_callback2",
                            "F_C_name": "c_callback2",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "type,\t in,\t incr",
                            "F_arguments": "type,\t in,\t incr",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "in": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "in",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "in",
                            "cxx_type": "void",
                            "cxx_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "c_in_void_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "in",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "in",
                            "cxx_type": "void",
                            "cxx_var": "in",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "in",
                            "fc_var": "in",
                            "i_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "f_in_void_*"
                        }
                    },
                    "incr": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "void",
                            "c_var": "incr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&incr",
                            "cxx_type": "void",
                            "cxx_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "c_in_void_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "void",
                            "c_var": "incr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&incr",
                            "cxx_type": "void",
                            "cxx_var": "incr",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "incr",
                            "fc_var": "incr",
                            "i_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "f_in_void_scalar"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "type",
                            "fc_var": "type",
                            "i_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "callback2",
                    "F_name_api": "callback2",
                    "F_name_function": "callback2",
                    "F_name_generic": "callback2",
                    "F_name_impl": "callback2",
                    "function_name": "callback2"
                }
            },
            {
                "<FUNCTION>": "callback3  24 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "callback3",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "type",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "assumedtype": true
                                    },
                                    "name": "in",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "external": true
                                    },
                                    "func": {
                                        "name": "incr",
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "name": "incr",
                                    "params": [
                                        {
                                            "declarator": {
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ],
                                                "typemap_name": "int"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "outbuf",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void callback3(const char *type, void * in+assumedtype, void (*incr)(int *)+external, char *outbuf+intent(out))",
                "declgen": "void callback3(const char * type, void * in +assumedtype, void ( * incr)(int *) +external, char * outbuf +intent(out))",
                "doxygen": {
                    "brief": "Test function pointer",
                    "description": "A bufferify function will be created.\n"
                },
                "helpers": {
                    "c": [
                        "char_blank_fill"
                    ]
                },
                "name": "callback3",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_void_*"
                        },
                        "incr": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_void_scalar"
                        },
                        "outbuf": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_char_*"
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_void_*"
                        },
                        "incr": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_void_scalar"
                        },
                        "outbuf": {
                            "meta": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "stmt": "f_out_char_*_buf"
                        },
                        "type": {
                            "meta": {
                                "ftrim_char_in": true,
                                "intent": "in"
                            },
                            "stmt": "f_in_char_*"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "incr": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "outbuf": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "callback3(\ttype,\t in,\t incr,\t outbuf)",
                            "C_call_list": "type,\t in,\t incr,\t outbuf",
                            "C_name": "callback3",
                            "C_prototype": "const char * type,\t void * in,\t void ( * incr)(\tint *),\t char * outbuf",
                            "C_return_type": "void",
                            "F_C_arguments": "type,\t in,\t incr,\t outbuf",
                            "F_C_name": "c_callback3",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "callback3(\ttype,\t in,\t incr,\t outbuf)",
                            "C_call_list": "type,\t in,\t incr,\t outbuf",
                            "C_name": "CLI_callback3_bufferify",
                            "C_prototype": "const char * type,\t void * in,\t void ( * incr)(\tint *),\t char *outbuf,\t int SHT_outbuf_len",
                            "C_return_type": "void",
                            "F_C_arguments": "type,\t in,\t incr,\t outbuf,\t SHT_outbuf_len",
                            "F_C_call": "c_callback3_bufferify",
                            "F_C_name": "c_callback3_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "trim(type)//C_NULL_CHAR,\t in,\t incr,\t outbuf,\t SHT_outbuf_len",
                            "F_arguments": "type,\t in,\t incr,\t outbuf",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "in": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "in",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "in",
                            "cxx_type": "void",
                            "cxx_var": "in",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "in",
                            "i_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "c_in_void_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "in",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "in",
                            "cxx_type": "void",
                            "cxx_var": "in",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "in",
                            "fc_var": "in",
                            "i_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "f_in_void_*"
                        }
                    },
                    "incr": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "void",
                            "c_var": "incr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&incr",
                            "cxx_type": "void",
                            "cxx_var": "incr",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "incr",
                            "i_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "c_in_void_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "void",
                            "c_var": "incr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&incr",
                            "cxx_type": "void",
                            "cxx_var": "incr",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "incr",
                            "fc_var": "incr",
                            "i_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "f_in_void_scalar"
                        }
                    },
                    "outbuf": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "outbuf",
                            "i_var": "outbuf",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_blank_fill": "ShroudCharBlankFill",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "c_var_len": "SHT_outbuf_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "outbuf",
                            "f_var_len": "SHT_outbuf_len",
                            "fc_var": "outbuf",
                            "i_var": "outbuf",
                            "i_var_len": "SHT_outbuf_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_char_*_buf"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "type",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) type",
                            "cxx_type": "char",
                            "cxx_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "type",
                            "i_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "type",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(char *) type",
                            "cxx_type": "char",
                            "cxx_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "type",
                            "fc_var": "type",
                            "i_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "callback3",
                    "F_name_api": "callback3",
                    "F_name_function": "callback3",
                    "F_name_generic": "callback3",
                    "F_name_impl": "callback3",
                    "function_name": "callback3"
                }
            },
            {
                "<FUNCTION>": "callback_set_alloc  25 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "callback_set_alloc",
                        "params": [
                            {
                                "declarator": {
                                    "name": "tc",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "array_info"
                                },
                                "specifier": [
                                    "array_info"
                                ],
                                "typemap_name": "array_info"
                            },
                            {
                                "declarator": {
                                    "func": {
                                        "name": "alloc",
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "name": "alloc",
                                    "params": [
                                        {
                                            "declarator": {
                                                "attrs": {
                                                    "intent": "in",
                                                    "value": true
                                                },
                                                "name": "tc",
                                                "typemap_name": "int"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "declarator": {
                                                "attrs": {
                                                    "intent": "inout"
                                                },
                                                "name": "arr",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ],
                                                "typemap_name": "array_info"
                                            },
                                            "specifier": [
                                                "array_info"
                                            ],
                                            "typemap_name": "array_info"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void callback_set_alloc(int tc, array_info *arr+intent(inout), void (*alloc)(int tc+intent(in), array_info *arr+intent(inout)))",
                "declgen": "void callback_set_alloc(int tc, array_info * arr +intent(inout), void ( * alloc)(int tc +intent(in), array_info * arr +intent(inout)))",
                "doxygen": {
                    "description": "The function argument takes a struct argument\nwhich is defined in this library.\nUse IMPORT.\n"
                },
                "name": "callback_set_alloc",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "alloc": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_void_scalar"
                        },
                        "arr": {
                            "meta": {
                                "intent": "inout"
                            },
                            "stmt": "c_inout_struct_*"
                        },
                        "tc": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "alloc": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_void_scalar"
                        },
                        "arr": {
                            "meta": {
                                "intent": "inout"
                            },
                            "stmt": "f_inout_struct_*"
                        },
                        "tc": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "alloc": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arr": {
                            "meta": {
                                "intent": "inout"
                            }
                        },
                        "tc": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "callback_set_alloc(\ttc,\t arr,\t alloc)",
                            "C_call_list": "tc,\t arr,\t alloc",
                            "C_name": "callback_set_alloc",
                            "C_prototype": "int tc,\t array_info * arr,\t void ( * alloc)(\tint tc,\t array_info * arr)",
                            "C_return_type": "void",
                            "F_C_name": "c_callback_set_alloc",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "callback_set_alloc(\ttc,\t arr,\t alloc)",
                            "C_call_list": "tc,\t arr,\t alloc",
                            "C_name": "callback_set_alloc",
                            "C_prototype": "int tc,\t array_info * arr,\t void ( * alloc)(\tint tc,\t array_info * arr)",
                            "C_return_type": "void",
                            "F_C_arguments": "tc,\t arr,\t alloc",
                            "F_C_call": "c_callback_set_alloc",
                            "F_C_name": "callback_set_alloc",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "tc,\t arr,\t alloc",
                            "F_arguments": "tc,\t arr,\t alloc",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "alloc": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "void",
                            "c_var": "alloc",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&alloc",
                            "cxx_type": "void",
                            "cxx_var": "alloc",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "c_in_void_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "void",
                            "c_var": "alloc",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&alloc",
                            "cxx_type": "void",
                            "cxx_var": "alloc",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "alloc",
                            "fc_var": "alloc",
                            "i_var": "alloc",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "f_in_void_scalar"
                        }
                    },
                    "arr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "array_info",
                            "c_var": "arr",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arr",
                            "cxx_type": "array_info",
                            "cxx_var": "arr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt_name": "c_inout_struct_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "array_info",
                            "c_var": "arr",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arr",
                            "cxx_type": "array_info",
                            "cxx_var": "arr",
                            "f_derived_type": "array_info",
                            "f_intent": "INOUT",
                            "f_kind": "array_info",
                            "f_type": "type(array_info)",
                            "f_type_module": "clibrary_mod",
                            "f_var": "arr",
                            "fc_var": "arr",
                            "i_var": "arr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt_name": "f_inout_struct_*"
                        }
                    },
                    "tc": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "tc",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&tc",
                            "cxx_type": "int",
                            "cxx_var": "tc",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "tc",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&tc",
                            "cxx_type": "int",
                            "cxx_var": "tc",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "tc",
                            "fc_var": "tc",
                            "i_var": "tc",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "callback_set_alloc",
                    "F_name_api": "callback_set_alloc",
                    "F_name_function": "callback_set_alloc",
                    "F_name_generic": "callback_set_alloc",
                    "F_name_impl": "callback_set_alloc",
                    "function_name": "callback_set_alloc"
                }
            }
        ],
        "language": "c",
        "scope_file": [
            "Clibrary"
        ],
        "typedefs": [
            {
                "<TYPEDEF>": "TypeID ****************************************",
                "ast": {
                    "declarator": {
                        "name": "TypeID",
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "typedef"
                    ],
                    "typemap_name": "TypeID"
                },
                "f_kind": "C_INT",
                "f_module": {
                    "iso_c_binding": [
                        "C_INT"
                    ]
                },
                "name": "TypeID",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name_api": "TypeID",
                    "C_name_typedef": "CLI_TypeID",
                    "F_name_api": "type_id",
                    "F_name_typedef": "type_id",
                    "cxx_type": "TypeID",
                    "typedef_name": "TypeID"
                }
            },
            {
                "<TYPEDEF>": "EnumTypeID ****************************************",
                "ast": {
                    "declarator": {
                        "name": "EnumTypeID",
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "typedef"
                    ],
                    "typemap_name": "EnumTypeID"
                },
                "f_kind": "C_INT",
                "f_module": {
                    "iso_c_binding": [
                        "C_INT"
                    ]
                },
                "name": "EnumTypeID",
                "options": {},
                "user_fields": {
                    "c_to_cxx": "static_cast<EnumTypeID>({c_var})",
                    "cxx_to_c": "static_cast<int>({cxx_var})"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name_api": "EnumTypeID",
                    "C_name_typedef": "CLI_EnumTypeID",
                    "F_name_api": "enum_type_id",
                    "F_name_typedef": "enum_type_id",
                    "cxx_type": "EnumTypeID",
                    "typedef_name": "EnumTypeID"
                }
            }
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "python": true
        }
    },
    "symtab": {
        "array_info": "struct-array_info",
        "struct-array_info": "array_info"
    },
    "types": {
        "EnumTypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({ctor_expr})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "base": "integer",
            "c_to_cxx": "static_cast<EnumTypeID>({c_var})",
            "c_type": "CLI_EnumTypeID",
            "cfi_type": "CFI_type_int",
            "cxx_to_c": "static_cast<int>({cxx_var})",
            "cxx_type": "EnumTypeID",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "enum_type_id",
            "f_module": {
                "clibrary_mod": [
                    "enum_type_id"
                ]
            },
            "f_module_name": "clibrary_mod",
            "f_type": "integer(enum_type_id)",
            "flat_name": "int",
            "i_module": {
                "clibrary_mod": [
                    "enum_type_id"
                ]
            },
            "sgroup": "native",
            "sh_type": "SH_TYPE_INT",
            "typedef": "int",
            "wrap_header": [
                "wrapClibrary.h"
            ]
        },
        "TypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({ctor_expr})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "base": "integer",
            "c_type": "CLI_TypeID",
            "cfi_type": "CFI_type_int",
            "cxx_type": "TypeID",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "type_id",
            "f_module": {
                "clibrary_mod": [
                    "type_id"
                ]
            },
            "f_module_name": "clibrary_mod",
            "f_type": "integer(type_id)",
            "flat_name": "int",
            "i_module": {
                "clibrary_mod": [
                    "type_id"
                ]
            },
            "sgroup": "native",
            "sh_type": "SH_TYPE_INT",
            "typedef": "int",
            "wrap_header": [
                "wrapClibrary.h"
            ]
        },
        "array_info": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_array_info_array_descr",
            "PY_struct_as": "numpy",
            "base": "struct",
            "c_header": [
                "clibrary.h"
            ],
            "c_type": "array_info",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "array_info",
            "f_derived_type": "array_info",
            "f_kind": "array_info",
            "f_module": {
                "clibrary_mod": [
                    "array_info"
                ]
            },
            "f_module_name": "clibrary_mod",
            "f_type": "type(array_info)",
            "flat_name": "array_info",
            "i_module": {
                "clibrary_mod": [
                    "array_info"
                ]
            },
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        }
    }
}