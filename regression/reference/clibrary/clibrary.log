Read yaml clibrary.yaml
Close clibrary_types.yaml
C c void NoReturnNoArguments(void)
C f void NoReturnNoArguments(void)
C c double PassByValue(double arg1, int arg2)
C f double PassByValue(double arg1, int arg2)
C c void PassByReference(double * arg1 +intent(in), int * arg2 +intent(out))
C f void PassByReference(double * arg1 +intent(in), int * arg2 +intent(out))
C c double PassByValueMacro(int arg2)
C f double PassByValueMacro(int arg2)
C c void checkBool(const bool arg1, bool * arg2 +intent(out), bool * arg3 +intent(inout))
C f void checkBool(const bool arg1, bool * arg2 +intent(out), bool * arg3 +intent(inout))
C c char * Function4a(const char * arg1, const char * arg2) +len(30)
C f char * Function4a(const char * arg1, const char * arg2) +len(30)
C c void acceptName(const char * name)
C f void acceptName(const char * name)
C c void passCharPtrInOut(char * s +intent(inout))
C f void passCharPtrInOut(char * s +intent(inout))
C c void passCharPtrCAPI(int n, char * in +api(capi)+intent(inout), char * out +api(capi)+intent(out))
C f void passCharPtrCAPI(int n, char * in +api(capi)+intent(inout), char * out +api(capi)+intent(out))
C c void returnOneName(char * name1 +charlen(MAXNAME)+intent(out))
C f void returnOneName(char * name1 +charlen(MAXNAME)+intent(out))
C c void returnTwoNames(char * name1 +charlen(MAXNAME)+intent(out), char * name2 +charlen(MAXNAME)+intent(out))
C f void returnTwoNames(char * name1 +charlen(MAXNAME)+intent(out), char * name2 +charlen(MAXNAME)+intent(out))
C c void ImpliedTextLen(char * text +charlen(MAXNAME)+intent(out), int ltext +implied(len(text)))
C f void ImpliedTextLen(char * text +charlen(MAXNAME)+intent(out), int ltext +implied(len(text)))
C c int ImpliedLen(const char * text, int ltext +implied(len(text)), bool flag +implied(false))
C f int ImpliedLen(const char * text, int ltext +implied(len(text)), bool flag +implied(false))
C c int ImpliedLenTrim(const char * text, int ltext +implied(len_trim(text)), bool flag +implied(true))
C f int ImpliedLenTrim(const char * text, int ltext +implied(len_trim(text)), bool flag +implied(true))
C c bool ImpliedBoolTrue(bool flag +implied(true))
C f bool ImpliedBoolTrue(bool flag +implied(true))
C c bool ImpliedBoolFalse(bool flag +implied(false))
C f bool ImpliedBoolFalse(bool flag +implied(false))
C c void bindC1(void)
C f void bindC1(void)
C c void bindC2(char * outbuf +intent(out))
C f void bindC2(char * outbuf +intent(out))
C c void passVoidStarStar(void * in +intent(in), void * * out +intent(out))
C f void passVoidStarStar(void * in +intent(in), void * * out +intent(out))
C c int passAssumedType(void * arg +assumedtype)
C f int passAssumedType(void * arg +assumedtype)
C c void passAssumedTypeDim(void * arg +assumedtype+rank(1))
C f void passAssumedTypeDim(void * arg +assumedtype+rank(1))
C c int passAssumedTypeBuf(void * arg +assumedtype, char * outbuf +intent(out))
C f int passAssumedTypeBuf(void * arg +assumedtype, char * outbuf +intent(out))
C c void callback1(int type, void ( * incr)(void) +external)
C f void callback1(int type, void ( * incr)(void) +external)
C c void callback1a(int type, void ( * incr)(void) +external)
C f void callback1a(int type, void ( * incr)(void) +external)
C c void callback2(int type, void * in +assumedtype, void ( * incr)(int *) +external)
C f void callback2(int type, void * in +assumedtype, void ( * incr)(int *) +external)
C c void callback3(const char * type, void * in +assumedtype, void ( * incr)(int *) +external, char * outbuf +intent(out))
C f void callback3(const char * type, void * in +assumedtype, void ( * incr)(int *) +external, char * outbuf +intent(out))
C c void callback_set_alloc(int tc, array_info * arr +intent(inout), void ( * alloc)(int tc +intent(in), array_info * arr +intent(inout)))
C f void callback_set_alloc(int tc, array_info * arr +intent(inout), void ( * alloc)(int tc +intent(in), array_info * arr +intent(inout)))
Close wrapClibrary.h
Close wrapClibrary.c
class array_info
typedef TypeID
typedef EnumTypeID
Fortran void NoReturnNoArguments(void)
Fortran double PassByValue(double arg1, int arg2)
Fortran void PassByReference(double * arg1 +intent(in), int * arg2 +intent(out))
Fortran double PassByValueMacro(int arg2)
Fortran void checkBool(const bool arg1, bool * arg2 +intent(out), bool * arg3 +intent(inout))
Fortran char * Function4a(const char * arg1, const char * arg2) +len(30)
Fortran void acceptName(const char * name)
Fortran void passCharPtrInOut(char * s +intent(inout))
Fortran void passCharPtrCAPI(int n, char * in +api(capi)+intent(inout), char * out +api(capi)+intent(out))
Fortran void returnOneName(char * name1 +charlen(MAXNAME)+intent(out))
Fortran void returnTwoNames(char * name1 +charlen(MAXNAME)+intent(out), char * name2 +charlen(MAXNAME)+intent(out))
Fortran void ImpliedTextLen(char * text +charlen(MAXNAME)+intent(out), int ltext +implied(len(text)))
Fortran int ImpliedLen(const char * text, int ltext +implied(len(text)), bool flag +implied(false))
Fortran int ImpliedLenTrim(const char * text, int ltext +implied(len_trim(text)), bool flag +implied(true))
Fortran bool ImpliedBoolTrue(bool flag +implied(true))
Fortran bool ImpliedBoolFalse(bool flag +implied(false))
Fortran void bindC1(void)
Fortran void bindC2(char * outbuf +intent(out))
Fortran void passVoidStarStar(void * in +intent(in), void * * out +intent(out))
Fortran int passAssumedType(void * arg +assumedtype)
Fortran void passAssumedTypeDim(void * arg +assumedtype+rank(1))
Fortran int passAssumedTypeBuf(void * arg +assumedtype, char * outbuf +intent(out))
Fortran void callback1(int type, void ( * incr)(void) +external)
Fortran void callback1a(int type, void ( * incr)(void) +external)
Fortran void callback2(int type, void * in +assumedtype, void ( * incr)(int *) +external)
Fortran void callback3(const char * type, void * in +assumedtype, void ( * incr)(int *) +external, char * outbuf +intent(out))
Fortran void callback_set_alloc(int tc, array_info * arr +intent(inout), void ( * alloc)(int tc +intent(in), array_info * arr +intent(inout)))
C-interface f void NoReturnNoArguments(void)
C-interface f double PassByValue(double arg1, int arg2)
C-interface f void PassByReference(double * arg1 +intent(in), int * arg2 +intent(out))
C-interface f double PassByValueMacro(int arg2)
C-interface f void checkBool(const bool arg1, bool * arg2 +intent(out), bool * arg3 +intent(inout))
C-interface c char * Function4a(const char * arg1, const char * arg2) +len(30)
C-interface f char * Function4a(const char * arg1, const char * arg2) +len(30)
C-interface f void acceptName(const char * name)
C-interface c void passCharPtrInOut(char * s +intent(inout))
C-interface f void passCharPtrInOut(char * s +intent(inout))
C-interface f void passCharPtrCAPI(int n, char * in +api(capi)+intent(inout), char * out +api(capi)+intent(out))
C-interface c void returnOneName(char * name1 +charlen(MAXNAME)+intent(out))
C-interface f void returnOneName(char * name1 +charlen(MAXNAME)+intent(out))
C-interface c void returnTwoNames(char * name1 +charlen(MAXNAME)+intent(out), char * name2 +charlen(MAXNAME)+intent(out))
C-interface f void returnTwoNames(char * name1 +charlen(MAXNAME)+intent(out), char * name2 +charlen(MAXNAME)+intent(out))
C-interface c void ImpliedTextLen(char * text +charlen(MAXNAME)+intent(out), int ltext +implied(len(text)))
C-interface f void ImpliedTextLen(char * text +charlen(MAXNAME)+intent(out), int ltext +implied(len(text)))
C-interface f int ImpliedLen(const char * text, int ltext +implied(len(text)), bool flag +implied(false))
C-interface f int ImpliedLenTrim(const char * text, int ltext +implied(len_trim(text)), bool flag +implied(true))
C-interface f bool ImpliedBoolTrue(bool flag +implied(true))
C-interface f bool ImpliedBoolFalse(bool flag +implied(false))
C-interface f void bindC1(void)
C-interface c void bindC2(char * outbuf +intent(out))
C-interface f void bindC2(char * outbuf +intent(out))
C-interface f void passVoidStarStar(void * in +intent(in), void * * out +intent(out))
C-interface f int passAssumedType(void * arg +assumedtype)
C-interface f void passAssumedTypeDim(void * arg +assumedtype+rank(1))
C-interface c int passAssumedTypeBuf(void * arg +assumedtype, char * outbuf +intent(out))
C-interface f int passAssumedTypeBuf(void * arg +assumedtype, char * outbuf +intent(out))
C-interface f void callback1(int type, void ( * incr)(void) +external)
C-interface f void callback1a(int type, void ( * incr)(void) +external)
C-interface f void callback2(int type, void * in +assumedtype, void ( * incr)(int *) +external)
C-interface c void callback3(const char * type, void * in +assumedtype, void ( * incr)(int *) +external, char * outbuf +intent(out))
C-interface f void callback3(const char * type, void * in +assumedtype, void ( * incr)(int *) +external, char * outbuf +intent(out))
C-interface f void callback_set_alloc(int tc, array_info * arr +intent(inout), void ( * alloc)(int tc +intent(in), array_info * arr +intent(inout)))
Close wrapfclibrary.f
Close utilClibrary.c
Close typesClibrary.h
Python function void NoReturnNoArguments(void)
Python function double PassByValue(double arg1, int arg2)
Python function void PassByReference(double * arg1 +intent(in), int * arg2 +intent(out))
Python function double PassByValueMacro(int arg2)
Python function void checkBool(const bool arg1, bool * arg2 +intent(out), bool * arg3 +intent(inout))
Python function char * Function4a(const char * arg1, const char * arg2) +len(30)
Python function void acceptName(const char * name)
Python function void passCharPtrInOut(char * s +intent(inout))
Python function void returnOneName(char * name1 +charlen(MAXNAME)+intent(out))
Python function void returnTwoNames(char * name1 +charlen(MAXNAME)+intent(out), char * name2 +charlen(MAXNAME)+intent(out))
Python function void ImpliedTextLen(char * text +charlen(MAXNAME)+intent(out), int ltext +implied(len(text)))
Python function int ImpliedLen(const char * text, int ltext +implied(len(text)), bool flag +implied(false))
Python function int ImpliedLenTrim(const char * text, int ltext +implied(len_trim(text)), bool flag +implied(true))
Python function bool ImpliedBoolTrue(bool flag +implied(true))
Python function bool ImpliedBoolFalse(bool flag +implied(false))
Close pyClibrarymodule.c
Close pyClibrarymodule.h
Close setup.py
