{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "class_map": [
            "Class1"
        ],
        "classes": [
            {
                "<CLASS>": "Class1 ****************************************",
                "cxx_header": [],
                "name": "Class1",
                "options": {
                    "wrap_python": false
                },
                "parse_keyword": "class",
                "scope": "Class1::",
                "typemap_name": "Class1",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapClass1.h",
                    "C_impl_filename": "wrapClass1.cpp",
                    "C_name_api": "Class1",
                    "C_name_scope": "Class1_",
                    "C_type_name": "ERR_Class1",
                    "F_derived_name": "class1",
                    "F_name_api": "class1",
                    "F_name_scope": "class1_",
                    "class_scope": "Class1::",
                    "cxx_class": "Class1",
                    "cxx_type": "Class1",
                    "f_capsule_data_type": "ERR_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "ERR_SHROUD_capsule_data",
                    "file_scope": "Class1"
                }
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "error.hpp"
        ],
        "functions": [
            {
                "<FUNCTION>": "FortranGenericOverloaded3  0 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "FortranGenericOverloaded3",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded3(double arg2)",
                "declgen": "void FortranGenericOverloaded3(double arg2 +value)",
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "function_suffix": "_float",
                        "generic": "(float arg3)"
                    },
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "function_suffix": "_double",
                        "generic": "(double arg3)"
                    }
                ],
                "name": "FortranGenericOverloaded3",
                "options": {},
                "wrap": {},
                "zz_fmtdict": {
                    "C_name": "ERR_FortranGenericOverloaded3",
                    "C_name_api": "FortranGenericOverloaded3",
                    "F_C_name": "c_fortran_generic_overloaded3",
                    "F_name_api": "fortran_generic_overloaded3",
                    "function_name": "FortranGenericOverloaded3"
                }
            },
            {
                "<FUNCTION>": "PYGoodFunction  1 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "PYGoodFunction",
                        "params": [],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void PYGoodFunction(void)",
                "declgen": "void PYGoodFunction(void)",
                "name": "PYGoodFunction",
                "options": {
                    "PY_array_arg": "none",
                    "PY_struct_arg": "none",
                    "wrap_c": false,
                    "wrap_fortran": false
                },
                "wrap": {
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "ERR_PYGoodFunction",
                    "C_name_api": "PYGoodFunction",
                    "F_C_name": "c_py_good_function",
                    "F_name_api": "py_good_function",
                    "PY_name_impl": "PY_PYGoodFunction",
                    "function_name": "PYGoodFunction"
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "error"
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "python": true
        }
    },
    "symtab": {
        "Class1": "Class1"
    },
    "types": {
        "Class1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}Class1 *>\t({c_var}->addr)",
            "c_type": "ERR_Class1",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "Class1",
            "f_capsule_data_type": "ERR_SHROUD_capsule_data",
            "f_class": "class(class1)",
            "f_derived_type": "class1",
            "f_module": {
                "error_mod": [
                    "class1"
                ]
            },
            "f_module_name": "error_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(class1)",
            "flat_name": "Class1",
            "i_module": {
                "error_mod": [
                    "ERR_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(ERR_SHROUD_capsule_data)",
            "impl_header": [
                "error.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typeserror.h"
            ]
        }
    }
}