// wrapcxxlibrary_structns.cpp
// This file is generated by Shroud nowrite-version. Do not edit.
// Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
// other Shroud Project Developers.
// See the top-level COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//

// cxx_header
#include "cxxlibrary.hpp"
// shroud
#include "wrapcxxlibrary_structns.h"

// splicer begin namespace.structns.CXX_definitions
// splicer end namespace.structns.CXX_definitions

extern "C" {

// splicer begin namespace.structns.C_definitions
// splicer end namespace.structns.C_definitions

/**
 * Argument is modified by library, defaults to intent(inout).
 */
// ----------------------------------------
// Function:  int passStructByReference
// Statement: c_function_native_scalar
// ----------------------------------------
// Argument:  Cstruct1 & arg
// Statement: c_inout_struct_&
int CXX_structns_passStructByReference(CXX_cstruct1 * arg)
{
    // splicer begin namespace.structns.function.passStructByReference
    int SHC_rv = structns::passStructByReference(*arg);
    return SHC_rv;
    // splicer end namespace.structns.function.passStructByReference
}

/**
 * const defaults to intent(in)
 */
// ----------------------------------------
// Function:  int passStructByReferenceIn
// Statement: c_function_native_scalar
// ----------------------------------------
// Argument:  const Cstruct1 & arg
// Statement: c_in_struct_&
int CXX_structns_passStructByReferenceIn(const CXX_cstruct1 * arg)
{
    // splicer begin namespace.structns.function.passStructByReferenceIn
    int SHC_rv = structns::passStructByReferenceIn(*arg);
    return SHC_rv;
    // splicer end namespace.structns.function.passStructByReferenceIn
}

// ----------------------------------------
// Function:  void passStructByReferenceInout
// Statement: c_subroutine
// ----------------------------------------
// Argument:  Cstruct1 & arg +intent(inout)
// Statement: c_inout_struct_&
void CXX_structns_passStructByReferenceInout(CXX_cstruct1 * arg)
{
    // splicer begin namespace.structns.function.passStructByReferenceInout
    structns::passStructByReferenceInout(*arg);
    // splicer end namespace.structns.function.passStructByReferenceInout
}

// ----------------------------------------
// Function:  void passStructByReferenceOut
// Statement: c_subroutine
// ----------------------------------------
// Argument:  Cstruct1 & arg +intent(out)
// Statement: c_out_struct_&
void CXX_structns_passStructByReferenceOut(CXX_cstruct1 * arg)
{
    // splicer begin namespace.structns.function.passStructByReferenceOut
    structns::passStructByReferenceOut(*arg);
    // splicer end namespace.structns.function.passStructByReferenceOut
}

}  // extern "C"
