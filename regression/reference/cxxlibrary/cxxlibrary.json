{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "class_map": [
            "Cstruct1_cls",
            "nested",
            "structns_Cstruct1"
        ],
        "classes": [
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "0 ****************************************",
                        "_generated": "struct_as_class_ctor",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "_constructor": true,
                                    "name": "Cstruct1_cls_ctor"
                                },
                                "metaattrs": {
                                    "intent": "ctor"
                                },
                                "params": [
                                    {
                                        "declarator": {
                                            "metaattrs": {
                                                "intent": "in",
                                                "struct_member": "ifield"
                                            },
                                            "name": "ifield",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    },
                                    {
                                        "declarator": {
                                            "metaattrs": {
                                                "intent": "in",
                                                "struct_member": "dfield"
                                            },
                                            "name": "dfield",
                                            "typemap_name": "double"
                                        },
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "typemap_name": "Cstruct1_cls"
                            },
                            "is_ctor": true,
                            "specifier": [
                                "Cstruct1_cls"
                            ],
                            "typemap_name": "Cstruct1_cls"
                        },
                        "decl": "Cstruct1_cls_ctor",
                        "declgen": "Cstruct1_cls(int ifield, double dfield) +name(Cstruct1_cls_ctor)",
                        "name": "Cstruct1_cls_ctor",
                        "options": {
                            "wrap_c": false,
                            "wrap_fortran": false,
                            "wrap_lua": false
                        },
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtargs": {
                            "dfield": {
                                "fmtpy": {
                                    "PY_member_object": "XXXPY_member_object",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_type": "double",
                                    "c_var": "dfield",
                                    "ctor_expr": "dfield",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&dfield",
                                    "cxx_type": "double",
                                    "cxx_var": "dfield",
                                    "data_var": "SHData_dfield",
                                    "field_name": "dfield",
                                    "numpy_type": "NPY_DOUBLE",
                                    "py_var": "SHPy_dfield",
                                    "size_var": "SHSize_dfield",
                                    "stmt": "py_ctor_native_scalar_numpy",
                                    "value_var": "SHValue_dfield"
                                }
                            },
                            "ifield": {
                                "fmtpy": {
                                    "PY_member_object": "XXXPY_member_object",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "ifield",
                                    "ctor_expr": "ifield",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&ifield",
                                    "cxx_type": "int",
                                    "cxx_var": "ifield",
                                    "data_var": "SHData_ifield",
                                    "field_name": "ifield",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_ifield",
                                    "size_var": "SHSize_ifield",
                                    "stmt": "py_ctor_native_scalar_numpy",
                                    "value_var": "SHValue_ifield"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "Cstruct1_cls_ctor",
                            "F_name_api": "cstruct1_cls_ctor",
                            "PY_name_impl": "PY_Cstruct1_cls_tp_init",
                            "PY_type_impl": "PY_Cstruct1_cls_tp_init",
                            "PY_type_method": "tp_init",
                            "function_name": "Cstruct1_cls_ctor"
                        },
                        "zz_fmtresult": {
                            "fmtpy": {
                                "PYN_descr": "PY_Cstruct1_cls_array_descr",
                                "PY_build_format": "O",
                                "PY_to_object_idtor_func": "PP_Cstruct1_cls_to_Object_idtor",
                                "PyObject": "PY_Cstruct1_cls",
                                "PyTypeObject": "PY_Cstruct1_cls_Type",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "Cstruct1_cls",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt": "py_default",
                                "value_var": "SHValue_rv",
                                "vargs": "SHCXX_rv"
                            }
                        }
                    }
                ],
                "name": "Cstruct1_cls",
                "options": {
                    "PY_struct_arg": "class"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct1_cls::",
                "typemap_name": "Cstruct1_cls",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "ifield",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "ifield",
                        "options": {},
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtdict": {
                            "PY_getter": "PY_Cstruct1_cls_ifield_getter",
                            "PY_setter": "PY_Cstruct1_cls_ifield_setter",
                            "PY_struct_context": "self->obj->",
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "ifield",
                            "variable_lower": "ifield",
                            "variable_name": "ifield",
                            "variable_upper": "IFIELD"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "dfield",
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "name": "dfield",
                        "options": {},
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtdict": {
                            "PY_getter": "PY_Cstruct1_cls_dfield_getter",
                            "PY_setter": "PY_Cstruct1_cls_dfield_setter",
                            "PY_struct_context": "self->obj->",
                            "c_type": "double",
                            "cxx_type": "double",
                            "field_name": "dfield",
                            "variable_lower": "dfield",
                            "variable_name": "dfield",
                            "variable_upper": "DFIELD"
                        }
                    }
                ],
                "wrap": {
                    "python": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapCstruct1_cls.h",
                    "C_impl_filename": "wrapCstruct1_cls.cpp",
                    "C_name_api": "Cstruct1_cls",
                    "C_name_scope": "Cstruct1_cls_",
                    "C_type_name": "CXX_cstruct1_cls",
                    "F_derived_name": "cstruct1_cls",
                    "F_name_api": "cstruct1_cls",
                    "F_name_scope": "cstruct1_cls_",
                    "PY_PyObject": "PY_Cstruct1_cls",
                    "PY_PyTypeObject": "PY_Cstruct1_cls_Type",
                    "PY_capsule_name": "PY_Cstruct1_cls_capsule_name",
                    "PY_from_object_func": "PP_Cstruct1_cls_from_Object",
                    "PY_struct_array_descr_create": "PY_Cstruct1_cls_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct1_cls_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct1_cls_array_descr",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Cstruct1_cls_to_Object",
                    "PY_to_object_idtor_func": "PP_Cstruct1_cls_to_Object_idtor",
                    "PY_type_filename": "pyCstruct1_clstype.cpp",
                    "class_scope": "Cstruct1_cls::",
                    "cxx_class": "Cstruct1_cls",
                    "cxx_type": "Cstruct1_cls",
                    "file_scope": "Cstruct1_cls"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "name": "nested",
                "options": {},
                "parse_keyword": "struct",
                "scope": "nested::",
                "typemap_name": "nested",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "index",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "index",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "index",
                            "variable_lower": "index",
                            "variable_name": "index",
                            "variable_upper": "INDEX"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "sublevels",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "sublevels",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "sublevels",
                            "variable_lower": "sublevels",
                            "variable_name": "sublevels",
                            "variable_upper": "SUBLEVELS"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "parent",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "nested"
                            },
                            "specifier": [
                                "nested"
                            ],
                            "typemap_name": "nested"
                        },
                        "name": "parent",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "CXX_nested",
                            "cxx_type": "nested",
                            "field_name": "parent",
                            "variable_lower": "parent",
                            "variable_name": "parent",
                            "variable_upper": "PARENT"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "sublevels"
                                },
                                "metaattrs": {
                                    "dimension": [
                                        {
                                            "name": "sublevels"
                                        }
                                    ]
                                },
                                "name": "child",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "nested"
                            },
                            "specifier": [
                                "nested"
                            ],
                            "typemap_name": "nested"
                        },
                        "name": "child",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "CXX_nested",
                            "cxx_type": "nested",
                            "field_name": "child",
                            "variable_lower": "child",
                            "variable_name": "child",
                            "variable_upper": "CHILD"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapnested.h",
                    "C_impl_filename": "wrapnested.cpp",
                    "C_name_api": "nested",
                    "C_name_scope": "nested_",
                    "C_type_name": "CXX_nested",
                    "F_derived_name": "nested",
                    "F_name_api": "nested",
                    "F_name_scope": "nested_",
                    "PY_PyObject": "PY_nested",
                    "PY_PyTypeObject": "PY_nested_Type",
                    "PY_from_object_func": "PP_nested_from_Object",
                    "PY_struct_array_descr_create": "PY_nested_create_array_descr",
                    "PY_struct_array_descr_name": "nested_dtype",
                    "PY_struct_array_descr_variable": "PY_nested_array_descr",
                    "PY_to_object_func": "PP_nested_to_Object",
                    "PY_to_object_idtor_func": "PP_nested_to_Object_idtor",
                    "class_scope": "nested::",
                    "cxx_class": "nested",
                    "cxx_type": "nested",
                    "file_scope": "nested"
                }
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "cxxlibrary.hpp"
        ],
        "functions": [
            {
                "<FUNCTION>": "1 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "passStructByReferenceCls",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "Cstruct1_cls"
                                },
                                "specifier": [
                                    "Cstruct1_cls"
                                ],
                                "typemap_name": "Cstruct1_cls"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStructByReferenceCls(Cstruct1_cls &arg)",
                "declgen": "int passStructByReferenceCls(Cstruct1_cls & arg)",
                "name": "passStructByReferenceCls",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "PYN_descr": "PY_Cstruct1_cls_array_descr",
                            "PY_to_object_idtor_func": "PP_Cstruct1_cls_to_Object_idtor",
                            "PyObject": "PY_Cstruct1_cls",
                            "PyTypeObject": "PY_Cstruct1_cls_Type",
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "CXX_cstruct1_cls",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "Cstruct1_cls",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": null,
                            "py_object": "PY_Cstruct1_cls",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_inout_struct_&_class",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passStructByReferenceCls",
                    "F_name_api": "pass_struct_by_reference_cls",
                    "PY_name_impl": "PY_passStructByReferenceCls",
                    "function_name": "passStructByReferenceCls"
                },
                "zz_fmtresult": {
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt": "py_function_native_scalar",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "2 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "passStructByReferenceInCls",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "Cstruct1_cls"
                                },
                                "specifier": [
                                    "Cstruct1_cls"
                                ],
                                "typemap_name": "Cstruct1_cls"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStructByReferenceInCls(const Cstruct1_cls &arg)",
                "declgen": "int passStructByReferenceInCls(const Cstruct1_cls & arg)",
                "doxygen": {
                    "description": "const defaults to intent(in)\n"
                },
                "name": "passStructByReferenceInCls",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "PYN_descr": "PY_Cstruct1_cls_array_descr",
                            "PY_to_object_idtor_func": "PP_Cstruct1_cls_to_Object_idtor",
                            "PyObject": "PY_Cstruct1_cls",
                            "PyTypeObject": "PY_Cstruct1_cls_Type",
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "CXX_cstruct1_cls",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<Cstruct1_cls *>\t(&arg)",
                            "cxx_type": "Cstruct1_cls",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": null,
                            "py_object": "PY_Cstruct1_cls",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_in_struct_&_class",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passStructByReferenceInCls",
                    "F_name_api": "pass_struct_by_reference_in_cls",
                    "PY_name_impl": "PY_passStructByReferenceInCls",
                    "function_name": "passStructByReferenceInCls"
                },
                "zz_fmtresult": {
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt": "py_function_native_scalar",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "3 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "passStructByReferenceInoutCls",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "inout"
                                    },
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "Cstruct1_cls"
                                },
                                "specifier": [
                                    "Cstruct1_cls"
                                ],
                                "typemap_name": "Cstruct1_cls"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passStructByReferenceInoutCls(Cstruct1_cls &arg +intent(inout))",
                "declgen": "void passStructByReferenceInoutCls(Cstruct1_cls & arg +intent(inout))",
                "name": "passStructByReferenceInoutCls",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "PYN_descr": "PY_Cstruct1_cls_array_descr",
                            "PY_to_object_idtor_func": "PP_Cstruct1_cls_to_Object_idtor",
                            "PyObject": "PY_Cstruct1_cls",
                            "PyTypeObject": "PY_Cstruct1_cls_Type",
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "CXX_cstruct1_cls",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "Cstruct1_cls",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": null,
                            "py_object": "PY_Cstruct1_cls",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_inout_struct_&_class",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passStructByReferenceInoutCls",
                    "F_name_api": "pass_struct_by_reference_inout_cls",
                    "PY_name_impl": "PY_passStructByReferenceInoutCls",
                    "function_name": "passStructByReferenceInoutCls"
                }
            },
            {
                "<FUNCTION>": "4 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "passStructByReferenceOutCls",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "Cstruct1_cls"
                                },
                                "specifier": [
                                    "Cstruct1_cls"
                                ],
                                "typemap_name": "Cstruct1_cls"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passStructByReferenceOutCls(Cstruct1_cls &arg +intent(out))",
                "declgen": "void passStructByReferenceOutCls(Cstruct1_cls & arg +intent(out))",
                "name": "passStructByReferenceOutCls",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "PYN_descr": "PY_Cstruct1_cls_array_descr",
                            "PY_to_object_idtor_func": "PP_Cstruct1_cls_to_Object_idtor",
                            "PyObject": "PY_Cstruct1_cls",
                            "PyTypeObject": "PY_Cstruct1_cls_Type",
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "CXX_cstruct1_cls",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "Cstruct1_cls",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": null,
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_out_struct_&_class",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passStructByReferenceOutCls",
                    "F_name_api": "pass_struct_by_reference_out_cls",
                    "PY_name_impl": "PY_passStructByReferenceOutCls",
                    "function_name": "passStructByReferenceOutCls"
                }
            },
            {
                "<FUNCTION>": "12 ****************************************",
                "C_generated_path": [
                    "has_default_arg"
                ],
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "defaultPtrIsNULL",
                        "params": [],
                        "typemap_name": "bool"
                    },
                    "specifier": [
                        "bool"
                    ],
                    "typemap_name": "bool"
                },
                "decl": "bool defaultPtrIsNULL(double* data +intent(IN)+rank(1) = nullptr )",
                "declgen": "bool defaultPtrIsNULL(void)",
                "name": "defaultPtrIsNULL",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "CXX_defaultPtrIsNULL_0",
                    "C_name_api": "defaultPtrIsNULL",
                    "C_prototype": "void",
                    "C_return_type": "bool",
                    "F_C_arguments": "",
                    "F_C_call": "c_default_ptr_is_null_0",
                    "F_C_name": "c_default_ptr_is_null_0",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arguments": "",
                    "F_name_api": "default_ptr_is_null",
                    "F_name_function": "default_ptr_is_null_0",
                    "F_name_generic": "default_ptr_is_null",
                    "F_name_impl": "default_ptr_is_null_0",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "bool SHC_rv",
                    "function_name": "defaultPtrIsNULL",
                    "function_suffix": "_0"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "bool",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_Bool",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "bool",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_BOOL",
                        "stmtc": "f_function_bool_scalar"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "bool",
                        "f_intent": "OUT",
                        "f_kind": "C_BOOL",
                        "f_type": "logical",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_BOOL",
                        "stmtf": "f_function_bool_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "5 ****************************************",
                "_default_funcs": [
                    12
                ],
                "_has_default_arg": true,
                "_nargs": [
                    0,
                    1
                ],
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "defaultPtrIsNULL",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "IN",
                                        "rank": 1
                                    },
                                    "init": "nullptr",
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "data",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "bool"
                    },
                    "specifier": [
                        "bool"
                    ],
                    "typemap_name": "bool"
                },
                "decl": "bool defaultPtrIsNULL(double* data +intent(IN)+rank(1) = nullptr )",
                "declgen": "bool defaultPtrIsNULL(double * data=nullptr +intent(IN)+rank(1))",
                "name": "defaultPtrIsNULL",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "data": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double",
                            "c_var": "data",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "data",
                            "cxx_type": "double",
                            "cxx_var": "data",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmtc": "f_in_native_*"
                        },
                        "fmtf": {
                            "F_C_var": "data",
                            "c_var": "data",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "data",
                            "i_dimension": "(*)",
                            "rank": "1",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "size": "size(data)",
                            "stmtf": "f_in_native_*"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double",
                            "c_var": "data",
                            "ctor_expr": "*data",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "data",
                            "cxx_type": "double",
                            "cxx_var": "data",
                            "data_var": "SHData_data",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_data",
                            "pytmp_var": "SHTPy_data",
                            "rank": "1",
                            "size_var": "SHSize_data",
                            "stmt": "py_in_native_*_pointer_numpy",
                            "value_var": "SHValue_data"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "data",
                    "C_name": "CXX_defaultPtrIsNULL_1",
                    "C_name_api": "defaultPtrIsNULL",
                    "C_prototype": "double * data",
                    "C_return_type": "bool",
                    "F_C_arguments": "data",
                    "F_C_call": "c_default_ptr_is_null_1",
                    "F_C_name": "c_default_ptr_is_null_1",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "data",
                    "F_arguments": "data",
                    "F_name_api": "default_ptr_is_null",
                    "F_name_function": "default_ptr_is_null_1",
                    "F_name_generic": "default_ptr_is_null",
                    "F_name_impl": "default_ptr_is_null_1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_cleanup_decref": "Py_XDECREF",
                    "PY_name_impl": "PY_defaultPtrIsNULL_1",
                    "cxx_rv_decl": "bool SHC_rv",
                    "function_name": "defaultPtrIsNULL",
                    "function_suffix": "_1"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "bool",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_Bool",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "bool",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_BOOL",
                        "stmtc": "f_function_bool_scalar"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "bool",
                        "f_intent": "OUT",
                        "f_kind": "C_BOOL",
                        "f_type": "logical",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_BOOL",
                        "stmtf": "f_function_bool_scalar"
                    },
                    "fmtpy": {
                        "PyTypeObject": "PyBool_Type",
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "bool",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_BOOL",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt": "py_function_bool_scalar",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "13 ****************************************",
                "C_generated_path": [
                    "has_default_arg"
                ],
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "defaultArgsInOut",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "in1",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "out1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "out2",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void defaultArgsInOut(int in1, int *out1+intent(out), int *out2+intent(out), bool flag = false)",
                "declgen": "void defaultArgsInOut(int in1 +value, int * out1 +intent(out), int * out2 +intent(out))",
                "name": "defaultArgsInOut",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "in1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "in1",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&in1",
                            "cxx_type": "int",
                            "cxx_var": "in1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "in1",
                            "c_var": "in1",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "in1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtf": "f_in_native_scalar"
                        }
                    },
                    "out1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "out1",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out1",
                            "cxx_type": "int",
                            "cxx_var": "out1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*"
                        },
                        "fmtf": {
                            "F_C_var": "out1",
                            "c_var": "out1",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "out1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtf": "f_out_native_*"
                        }
                    },
                    "out2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "out2",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out2",
                            "cxx_type": "int",
                            "cxx_var": "out2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*"
                        },
                        "fmtf": {
                            "F_C_var": "out2",
                            "c_var": "out2",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "out2",
                            "sh_type": "SH_TYPE_INT",
                            "stmtf": "f_out_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "in1,\t out1,\t out2",
                    "C_name": "CXX_defaultArgsInOut_0",
                    "C_name_api": "defaultArgsInOut",
                    "C_prototype": "int in1,\t int * out1,\t int * out2",
                    "C_return_type": "void",
                    "F_C_arguments": "in1,\t out1,\t out2",
                    "F_C_call": "c_default_args_in_out_0",
                    "F_C_name": "c_default_args_in_out_0",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "in1,\t out1,\t out2",
                    "F_arguments": "in1,\t out1,\t out2",
                    "F_name_api": "default_args_in_out",
                    "F_name_function": "default_args_in_out_0",
                    "F_name_generic": "default_args_in_out",
                    "F_name_impl": "default_args_in_out_0",
                    "F_subprogram": "subroutine",
                    "function_name": "defaultArgsInOut",
                    "function_suffix": "_0",
                    "stmtc": "f_subroutine",
                    "stmtf": "f_subroutine"
                }
            },
            {
                "<FUNCTION>": "6 ****************************************",
                "_default_funcs": [
                    13
                ],
                "_has_default_arg": true,
                "_nargs": [
                    3,
                    4
                ],
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "defaultArgsInOut",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "in1",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "out1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "out2",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "init": "false",
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "flag",
                                    "typemap_name": "bool"
                                },
                                "specifier": [
                                    "bool"
                                ],
                                "typemap_name": "bool"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void defaultArgsInOut(int in1, int *out1+intent(out), int *out2+intent(out), bool flag = false)",
                "declgen": "void defaultArgsInOut(int in1 +value, int * out1 +intent(out), int * out2 +intent(out), bool flag=false +value)",
                "name": "defaultArgsInOut",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "flag": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmtc": "f_in_bool_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "flag",
                            "c_var": "flag",
                            "f_intent": "IN",
                            "f_kind": "C_BOOL",
                            "f_type": "logical",
                            "f_type_module": "iso_c_binding",
                            "f_var": "flag",
                            "f_var_cxx": "SHT_flag_cxx",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmtf": "f_in_bool_scalar"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "flag",
                            "ctor_expr": "flag",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "data_var": "SHData_flag",
                            "numpy_type": "NPY_BOOL",
                            "py_object": "PyObject",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag",
                            "stmt": "py_in_bool_scalar",
                            "value_var": "SHValue_flag"
                        }
                    },
                    "in1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "in1",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&in1",
                            "cxx_type": "int",
                            "cxx_var": "in1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "in1",
                            "c_var": "in1",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "in1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtf": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "in1",
                            "ctor_expr": "in1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&in1",
                            "cxx_type": "int",
                            "cxx_var": "in1",
                            "data_var": "SHData_in1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_in1",
                            "size_var": "SHSize_in1",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_in1"
                        }
                    },
                    "out1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "out1",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out1",
                            "cxx_type": "int",
                            "cxx_var": "out1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*"
                        },
                        "fmtf": {
                            "F_C_var": "out1",
                            "c_var": "out1",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "out1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtf": "f_out_native_*"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "out1",
                            "ctor_expr": "out1",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out1",
                            "cxx_type": "int",
                            "cxx_var": "out1",
                            "data_var": "SHData_out1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_out1",
                            "size_var": "SHSize_out1",
                            "stmt": "py_out_native_*",
                            "value_var": "SHValue_out1"
                        }
                    },
                    "out2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "out2",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out2",
                            "cxx_type": "int",
                            "cxx_var": "out2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*"
                        },
                        "fmtf": {
                            "F_C_var": "out2",
                            "c_var": "out2",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "out2",
                            "sh_type": "SH_TYPE_INT",
                            "stmtf": "f_out_native_*"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "out2",
                            "ctor_expr": "out2",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out2",
                            "cxx_type": "int",
                            "cxx_var": "out2",
                            "data_var": "SHData_out2",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_out2",
                            "size_var": "SHSize_out2",
                            "stmt": "py_out_native_*",
                            "value_var": "SHValue_out2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "in1,\t out1,\t out2,\t flag",
                    "C_name": "CXX_defaultArgsInOut_1",
                    "C_name_api": "defaultArgsInOut",
                    "C_prototype": "int in1,\t int * out1,\t int * out2,\t bool flag",
                    "C_return_type": "void",
                    "F_C_arguments": "in1,\t out1,\t out2,\t flag",
                    "F_C_call": "c_default_args_in_out_1",
                    "F_C_name": "c_default_args_in_out_1",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "in1,\t out1,\t out2,\t SHT_flag_cxx",
                    "F_arguments": "in1,\t out1,\t out2,\t flag",
                    "F_name_api": "default_args_in_out",
                    "F_name_function": "default_args_in_out_1",
                    "F_name_generic": "default_args_in_out",
                    "F_name_impl": "default_args_in_out_1",
                    "F_subprogram": "subroutine",
                    "PY_cleanup_decref": "Py_XDECREF",
                    "PY_name_impl": "PY_defaultArgsInOut_1",
                    "function_name": "defaultArgsInOut",
                    "function_suffix": "_1",
                    "stmtc": "f_subroutine",
                    "stmtf": "f_subroutine"
                }
            },
            {
                "<FUNCTION>": "7 ****************************************",
                "_overloaded": true,
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "len": "30"
                        },
                        "metaattrs": {
                            "deref": "copy",
                            "intent": "function"
                        },
                        "name": "getGroupName",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "idx",
                                    "typemap_name": "long"
                                },
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& getGroupName(long idx) +len(30)",
                "declgen": "const std::string & getGroupName(long idx +value) +len(30)",
                "doxygen": {
                    "brief": "String reference function with scalar generic args"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "idx",
                                    "typemap_name": "int32_t"
                                },
                                "specifier": [
                                    "int32_t"
                                ],
                                "typemap_name": "int32_t"
                            }
                        ],
                        "function_suffix": "_int32_t",
                        "generic": "(int32_t idx)"
                    },
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "idx",
                                    "typemap_name": "int64_t"
                                },
                                "specifier": [
                                    "int64_t"
                                ],
                                "typemap_name": "int64_t"
                            }
                        ],
                        "function_suffix": "_int64_t",
                        "generic": "(int64_t idx)"
                    }
                ],
                "name": "getGroupName",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "idx": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "long",
                            "c_var": "idx",
                            "cfi_type": "CFI_type_long",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&idx",
                            "cxx_type": "long",
                            "cxx_var": "idx",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "stmtc": "f_in_native_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "idx",
                            "c_var": "idx",
                            "f_intent": "IN",
                            "f_kind": "C_LONG",
                            "f_type": "integer(C_LONG)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "idx",
                            "sh_type": "SH_TYPE_LONG"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "idx",
                    "C_name": "CXX_getGroupName",
                    "C_name_api": "getGroupName",
                    "C_prototype": "long idx",
                    "C_return_type": "const char *",
                    "F_C_arguments": "idx",
                    "F_C_name": "c_get_group_name",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "get_group_name",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getGroupName"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_char_len": "30",
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_other",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmtc": "f_function_string_&_copy"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_char_len": "len=30",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER"
                    }
                }
            },
            {
                "<FUNCTION>": "14 ****************************************",
                "C_force_wrapper": "True",
                "_PTR_C_CXX_index": "7",
                "_PTR_F_C_index": "16",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "len": "30"
                        },
                        "metaattrs": {
                            "deref": "copy",
                            "intent": "function"
                        },
                        "name": "getGroupName",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "idx",
                                    "typemap_name": "int32_t"
                                },
                                "specifier": [
                                    "int32_t"
                                ],
                                "typemap_name": "int32_t"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& getGroupName(long idx) +len(30)",
                "declgen": "const std::string & getGroupName(int32_t idx +value) +len(30)",
                "doxygen": {
                    "brief": "String reference function with scalar generic args"
                },
                "name": "getGroupName",
                "options": {
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "getGroupName",
                    "F_name_api": "get_group_name",
                    "function_name": "getGroupName",
                    "function_suffix": "_int32_t"
                }
            },
            {
                "<FUNCTION>": "16 ****************************************",
                "C_force_wrapper": "True",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_C_CXX_index": "14",
                "_generated": "arg_to_buffer",
                "_overloaded": true,
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "len": "30"
                        },
                        "metaattrs": {
                            "api": "buf",
                            "deref": "copy",
                            "intent": "function"
                        },
                        "name": "getGroupName",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "idx",
                                    "typemap_name": "int32_t"
                                },
                                "specifier": [
                                    "int32_t"
                                ],
                                "typemap_name": "int32_t"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& getGroupName(long idx) +len(30)",
                "declgen": "const std::string & getGroupName(int32_t idx +value) +len(30)",
                "doxygen": {
                    "brief": "String reference function with scalar generic args"
                },
                "name": "getGroupName",
                "options": {
                    "wrap_python": false
                },
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "idx": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int32_t",
                            "c_var": "idx",
                            "cfi_type": "CFI_type_int32_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&idx",
                            "cxx_type": "int32_t",
                            "cxx_var": "idx",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT32_T",
                            "stmtc": "f_in_native_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "idx",
                            "c_var": "idx",
                            "f_intent": "IN",
                            "f_kind": "C_INT32_T",
                            "f_type": "integer(C_INT32_T)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "idx",
                            "sh_type": "SH_TYPE_INT32_T",
                            "stmtf": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "idx",
                    "C_name": "CXX_getGroupName_int32_t_bufferify",
                    "C_name_api": "getGroupName",
                    "C_prototype": "int32_t idx,\t char *SHC_rv,\t int SHT_rv_len",
                    "C_return_type": "void",
                    "F_C_arguments": "idx,\t SHT_rv,\t SHT_rv_len",
                    "F_C_call": "c_get_group_name_int32_t_bufferify",
                    "F_C_name": "c_get_group_name_int32_t_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "idx,\t SHT_rv,\t SHT_rv_len",
                    "F_arguments": "idx",
                    "F_name_api": "get_group_name",
                    "F_name_function": "get_group_name_int32_t",
                    "F_name_generic": "get_group_name",
                    "F_name_impl": "get_group_name_int32_t",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "f_c_suffix": "_bufferify",
                    "function_name": "getGroupName",
                    "function_suffix": "_int32_t"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_char_len": "30",
                        "c_const": "const ",
                        "c_helper_char_copy": "ShroudCharCopy",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_len": "SHT_rv_len",
                        "cfi_type": "CFI_type_other",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmtc": "f_function_string_&_buf_copy"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_len": "SHT_rv_len",
                        "cxx_type": "std::string",
                        "f_char_len": "len=30",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "f_var_len": "SHT_rv_len",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmtf": "f_function_string_&_buf_copy"
                    }
                }
            },
            {
                "<FUNCTION>": "15 ****************************************",
                "C_force_wrapper": "True",
                "_PTR_C_CXX_index": "7",
                "_PTR_F_C_index": "17",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "len": "30"
                        },
                        "metaattrs": {
                            "deref": "copy",
                            "intent": "function"
                        },
                        "name": "getGroupName",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "idx",
                                    "typemap_name": "int64_t"
                                },
                                "specifier": [
                                    "int64_t"
                                ],
                                "typemap_name": "int64_t"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& getGroupName(long idx) +len(30)",
                "declgen": "const std::string & getGroupName(int64_t idx +value) +len(30)",
                "doxygen": {
                    "brief": "String reference function with scalar generic args"
                },
                "name": "getGroupName",
                "options": {
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "getGroupName",
                    "F_name_api": "get_group_name",
                    "function_name": "getGroupName",
                    "function_suffix": "_int64_t"
                }
            },
            {
                "<FUNCTION>": "17 ****************************************",
                "C_force_wrapper": "True",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_C_CXX_index": "15",
                "_generated": "arg_to_buffer",
                "_overloaded": true,
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "len": "30"
                        },
                        "metaattrs": {
                            "api": "buf",
                            "deref": "copy",
                            "intent": "function"
                        },
                        "name": "getGroupName",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "idx",
                                    "typemap_name": "int64_t"
                                },
                                "specifier": [
                                    "int64_t"
                                ],
                                "typemap_name": "int64_t"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& getGroupName(long idx) +len(30)",
                "declgen": "const std::string & getGroupName(int64_t idx +value) +len(30)",
                "doxygen": {
                    "brief": "String reference function with scalar generic args"
                },
                "name": "getGroupName",
                "options": {
                    "wrap_python": false
                },
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "idx": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int64_t",
                            "c_var": "idx",
                            "cfi_type": "CFI_type_int64_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&idx",
                            "cxx_type": "int64_t",
                            "cxx_var": "idx",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT64_T",
                            "stmtc": "f_in_native_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "idx",
                            "c_var": "idx",
                            "f_intent": "IN",
                            "f_kind": "C_INT64_T",
                            "f_type": "integer(C_INT64_T)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "idx",
                            "sh_type": "SH_TYPE_INT64_T",
                            "stmtf": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "idx",
                    "C_name": "CXX_getGroupName_int64_t_bufferify",
                    "C_name_api": "getGroupName",
                    "C_prototype": "int64_t idx,\t char *SHC_rv,\t int SHT_rv_len",
                    "C_return_type": "void",
                    "F_C_arguments": "idx,\t SHT_rv,\t SHT_rv_len",
                    "F_C_call": "c_get_group_name_int64_t_bufferify",
                    "F_C_name": "c_get_group_name_int64_t_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "idx,\t SHT_rv,\t SHT_rv_len",
                    "F_arguments": "idx",
                    "F_name_api": "get_group_name",
                    "F_name_function": "get_group_name_int64_t",
                    "F_name_generic": "get_group_name",
                    "F_name_impl": "get_group_name_int64_t",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "f_c_suffix": "_bufferify",
                    "function_name": "getGroupName",
                    "function_suffix": "_int64_t"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_char_len": "30",
                        "c_const": "const ",
                        "c_helper_char_copy": "ShroudCharCopy",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_len": "SHT_rv_len",
                        "cfi_type": "CFI_type_other",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmtc": "f_function_string_&_buf_copy"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_len": "SHT_rv_len",
                        "cxx_type": "std::string",
                        "f_char_len": "len=30",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "f_var_len": "SHT_rv_len",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmtf": "f_function_string_&_buf_copy"
                    }
                }
            },
            {
                "<FUNCTION>": "8 ****************************************",
                "C_generated_path": [
                    "getter/setter"
                ],
                "_generated": "getter/setter",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "api": "cdesc",
                            "deref": "pointer",
                            "intent": "getter"
                        },
                        "name": "nested_get_parent",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "SH_this",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "nested"
                                },
                                "specifier": [
                                    "nested"
                                ],
                                "typemap_name": "nested"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "nested"
                    },
                    "specifier": [
                        "nested"
                    ],
                    "typemap_name": "nested"
                },
                "decl": "nested * nested_get_parent(nested *SH_this)",
                "declgen": "nested * nested_get_parent(nested * SH_this)",
                "name": "nested_get_parent",
                "options": {},
                "struct_parent": "nested",
                "user_fmt": {
                    "field_name": "parent",
                    "struct_name": "nested",
                    "wrapped_name": "parent"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "SH_this": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "CXX_nested",
                            "c_var": "SH_this",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SH_this",
                            "cxx_type": "nested",
                            "cxx_var": "SH_this",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_in_struct_*"
                        },
                        "fmtf": {
                            "F_C_var": "SH_this",
                            "c_var": "SH_this",
                            "f_derived_type": "nested",
                            "f_intent": "IN",
                            "f_kind": "nested",
                            "f_type": "type(nested)",
                            "f_type_module": "cxxlibrary_mod",
                            "f_var": "SH_this",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtf": "f_in_struct_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SH_this",
                    "C_name": "CXX_nested_get_parent",
                    "C_name_api": "nested_get_parent",
                    "C_prototype": "CXX_nested * SH_this,\t CXX_SHROUD_array *SHT_rv_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SH_this,\t SHT_rv_cdesc",
                    "F_C_call": "c_nested_get_parent",
                    "F_C_name": "c_nested_get_parent",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SH_this,\t SHT_rv_cdesc",
                    "F_arguments": "SH_this",
                    "F_name_api": "nested_get_parent",
                    "F_name_function": "nested_get_parent",
                    "F_name_generic": "nested_get_parent",
                    "F_name_impl": "nested_get_parent",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "nested * SHC_rv",
                    "field_name": "parent",
                    "function_name": "nested_get_parent",
                    "struct_name": "nested",
                    "wrapped_name": "parent"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_helper_array_context": "CXX_SHROUD_array",
                        "c_type": "CXX_nested",
                        "c_var": "SHC_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cfi_type": "CFI_type_struct",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "nested",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmtc": "f_getter_struct_*_cdesc_pointer"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cxx_type": "nested",
                        "f_derived_type": "nested",
                        "f_helper_array_context": "CXX_SHROUD_array",
                        "f_intent": "OUT",
                        "f_kind": "nested",
                        "f_type": "type(nested)",
                        "f_type_module": "cxxlibrary_mod",
                        "f_var": "SHT_rv",
                        "f_var_cdesc": "SHT_rv_cdesc",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmtf": "f_getter_struct_*_cdesc_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "9 ****************************************",
                "C_generated_path": [
                    "getter/setter"
                ],
                "_generated": "getter/setter",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "setter"
                        },
                        "name": "nested_set_parent",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "SH_this",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "nested"
                                },
                                "specifier": [
                                    "nested"
                                ],
                                "typemap_name": "nested"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in"
                                    },
                                    "metaattrs": {
                                        "intent": "setter"
                                    },
                                    "name": "val",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "nested"
                                },
                                "specifier": [
                                    "nested"
                                ],
                                "typemap_name": "nested"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void nested_set_parent(nested *SH_this,nested * val)",
                "declgen": "void nested_set_parent(nested * SH_this, nested * val +intent(in))",
                "name": "nested_set_parent",
                "options": {},
                "user_fmt": {
                    "field_name": "parent",
                    "struct_name": "nested",
                    "wrapped_name": "parent"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "SH_this": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "CXX_nested",
                            "c_var": "SH_this",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SH_this",
                            "cxx_type": "nested",
                            "cxx_var": "SH_this",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_inout_struct_*"
                        },
                        "fmtf": {
                            "F_C_var": "SH_this",
                            "c_var": "SH_this",
                            "f_derived_type": "nested",
                            "f_intent": "INOUT",
                            "f_kind": "nested",
                            "f_type": "type(nested)",
                            "f_type_module": "cxxlibrary_mod",
                            "f_var": "SH_this",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtf": "f_inout_struct_*"
                        }
                    },
                    "val": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "CXX_nested",
                            "c_var": "val",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "val",
                            "cxx_type": "nested",
                            "cxx_var": "val",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_setter_struct_*"
                        },
                        "fmtf": {
                            "F_C_var": "val",
                            "c_var": "val",
                            "f_derived_type": "nested",
                            "f_intent": "IN",
                            "f_kind": "nested",
                            "f_type": "type(nested)",
                            "f_type_module": "cxxlibrary_mod",
                            "f_var": "val",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtf": "f_setter_struct_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SH_this,\t val",
                    "C_name": "CXX_nested_set_parent",
                    "C_name_api": "nested_set_parent",
                    "C_prototype": "CXX_nested * SH_this,\t CXX_nested * val",
                    "C_return_type": "void",
                    "F_C_arguments": "SH_this,\t val",
                    "F_C_call": "c_nested_set_parent",
                    "F_C_name": "nested_set_parent",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SH_this,\t val",
                    "F_arguments": "SH_this,\t val",
                    "F_name_api": "nested_set_parent",
                    "F_name_function": "nested_set_parent",
                    "F_name_generic": "nested_set_parent",
                    "F_name_impl": "nested_set_parent",
                    "F_subprogram": "subroutine",
                    "field_name": "parent",
                    "function_name": "nested_set_parent",
                    "stmtc": "f_setter",
                    "stmtf": "f_setter",
                    "struct_name": "nested",
                    "wrapped_name": "parent"
                }
            },
            {
                "<FUNCTION>": "10 ****************************************",
                "_PTR_F_C_index": "18",
                "_generated": "getter/setter",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "api": "cdesc",
                            "deref": "pointer",
                            "dimension": [
                                {
                                    "name": "sublevels"
                                }
                            ],
                            "intent": "getter"
                        },
                        "name": "nested_get_child",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "SH_this",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "nested"
                                },
                                "specifier": [
                                    "nested"
                                ],
                                "typemap_name": "nested"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            },
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "nested"
                    },
                    "specifier": [
                        "nested"
                    ],
                    "typemap_name": "nested"
                },
                "decl": "nested * * nested_get_child(nested *SH_this)",
                "declgen": "nested * * nested_get_child(nested * SH_this)",
                "name": "nested_get_child",
                "options": {},
                "struct_parent": "nested",
                "user_fmt": {
                    "field_name": "child",
                    "struct_name": "nested",
                    "wrapped_name": "child"
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "nested_get_child",
                    "F_name_api": "nested_get_child",
                    "field_name": "child",
                    "function_name": "nested_get_child",
                    "struct_name": "nested",
                    "wrapped_name": "child"
                }
            },
            {
                "<FUNCTION>": "18 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_C_CXX_index": "10",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "api": "cdesc",
                            "deref": "pointer",
                            "dimension": [
                                {
                                    "name": "sublevels"
                                }
                            ],
                            "intent": "getter"
                        },
                        "name": "nested_get_child",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "SH_this",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "nested"
                                },
                                "specifier": [
                                    "nested"
                                ],
                                "typemap_name": "nested"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            },
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "nested"
                    },
                    "specifier": [
                        "nested"
                    ],
                    "typemap_name": "nested"
                },
                "decl": "nested * * nested_get_child(nested *SH_this)",
                "declgen": "nested * * nested_get_child(nested * SH_this)",
                "name": "nested_get_child",
                "options": {},
                "splicer_group": "buf",
                "struct_parent": "nested",
                "user_fmt": {
                    "field_name": "child",
                    "struct_name": "nested",
                    "wrapped_name": "child"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "SH_this": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "CXX_nested",
                            "c_var": "SH_this",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SH_this",
                            "cxx_type": "nested",
                            "cxx_var": "SH_this",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_in_struct_*"
                        },
                        "fmtf": {
                            "F_C_var": "SH_this",
                            "c_var": "SH_this",
                            "f_derived_type": "nested",
                            "f_intent": "IN",
                            "f_kind": "nested",
                            "f_type": "type(nested)",
                            "f_type_module": "cxxlibrary_mod",
                            "f_var": "SH_this",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtf": "f_in_struct_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SH_this",
                    "C_name": "CXX_nested_get_child_bufferify",
                    "C_name_api": "nested_get_child",
                    "C_prototype": "CXX_nested * SH_this,\t CXX_SHROUD_array *SHT_rv_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SH_this,\t SHT_rv_cdesc",
                    "F_C_call": "c_nested_get_child_bufferify",
                    "F_C_name": "c_nested_get_child_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SH_this,\t SHT_rv_cdesc",
                    "F_arguments": "SH_this",
                    "F_name_api": "nested_get_child",
                    "F_name_function": "nested_get_child",
                    "F_name_generic": "nested_get_child",
                    "F_name_impl": "nested_get_child",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "nested * * SHC_rv",
                    "f_c_suffix": "_bufferify",
                    "field_name": "child",
                    "function_name": "nested_get_child",
                    "struct_name": "nested",
                    "wrapped_name": "child"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_array_shape": "\nSHT_rv_cdesc->shape[0] = SH_this->sublevels;",
                        "c_array_size": "SHT_rv_cdesc->shape[0]",
                        "c_array_size2": "SH_this->sublevels",
                        "c_const": "",
                        "c_helper_array_context": "CXX_SHROUD_array",
                        "c_type": "CXX_nested",
                        "c_var": "SHC_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cfi_type": "CFI_type_struct",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "nested",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "rank": "1",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmtc": "f_getter_struct_**_cdesc_pointer"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cxx_type": "nested",
                        "f_array_allocate": "(SHT_rv_cdesc%shape(1))",
                        "f_array_shape": ",\t SHT_rv_cdesc%shape(1:1)",
                        "f_assumed_shape": "(:)",
                        "f_cdesc_shape": "\nSHT_rv_cdesc%shape(1:1) = shape(SHT_rv)",
                        "f_derived_type": "nested",
                        "f_helper_array_context": "CXX_SHROUD_array",
                        "f_intent": "OUT",
                        "f_kind": "nested",
                        "f_type": "type(nested)",
                        "f_type_module": "cxxlibrary_mod",
                        "f_var": "SHT_rv",
                        "f_var_cdesc": "SHT_rv_cdesc",
                        "rank": "1",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmtf": "f_getter_struct_**_cdesc_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "11 ****************************************",
                "C_generated_path": [
                    "getter/setter"
                ],
                "_generated": "getter/setter",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "setter"
                        },
                        "name": "nested_set_child",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "SH_this",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "nested"
                                },
                                "specifier": [
                                    "nested"
                                ],
                                "typemap_name": "nested"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "dimension": [
                                            {
                                                "name": "sublevels"
                                            }
                                        ],
                                        "intent": "setter"
                                    },
                                    "name": "val",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "nested"
                                },
                                "specifier": [
                                    "nested"
                                ],
                                "typemap_name": "nested"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void nested_set_child(nested *SH_this,nested * * val)",
                "declgen": "void nested_set_child(nested * SH_this, nested * * val +intent(in)+rank(1))",
                "name": "nested_set_child",
                "options": {},
                "user_fmt": {
                    "field_name": "child",
                    "struct_name": "nested",
                    "wrapped_name": "child"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "SH_this": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "CXX_nested",
                            "c_var": "SH_this",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SH_this",
                            "cxx_type": "nested",
                            "cxx_var": "SH_this",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_inout_struct_*"
                        },
                        "fmtf": {
                            "F_C_var": "SH_this",
                            "c_var": "SH_this",
                            "f_derived_type": "nested",
                            "f_intent": "INOUT",
                            "f_kind": "nested",
                            "f_type": "type(nested)",
                            "f_type_module": "cxxlibrary_mod",
                            "f_var": "SH_this",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtf": "f_inout_struct_*"
                        }
                    },
                    "val": {
                        "fmtc": {
                            "c_addr": "",
                            "c_array_size2": "sublevels",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "CXX_nested",
                            "c_var": "val",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "val",
                            "cxx_type": "nested",
                            "cxx_var": "val",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_setter_struct_**"
                        },
                        "fmtf": {
                            "F_C_var": "val",
                            "c_var": "val",
                            "f_assumed_shape": "(:)",
                            "f_derived_type": "nested",
                            "f_intent": "IN",
                            "f_kind": "nested",
                            "f_type": "type(nested)",
                            "f_type_module": "cxxlibrary_mod",
                            "f_var": "val",
                            "i_dimension": "(*)",
                            "rank": "1",
                            "sh_type": "SH_TYPE_STRUCT",
                            "size": "size(val)",
                            "stmtf": "f_setter_struct_**"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SH_this,\t val",
                    "C_name": "CXX_nested_set_child",
                    "C_name_api": "nested_set_child",
                    "C_prototype": "CXX_nested * SH_this,\t CXX_nested * * val",
                    "C_return_type": "void",
                    "F_C_arguments": "SH_this,\t val",
                    "F_C_call": "c_nested_set_child",
                    "F_C_name": "nested_set_child",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SH_this,\t val",
                    "F_arguments": "SH_this,\t val",
                    "F_name_api": "nested_set_child",
                    "F_name_function": "nested_set_child",
                    "F_name_generic": "nested_set_child",
                    "F_name_impl": "nested_set_child",
                    "F_subprogram": "subroutine",
                    "field_name": "child",
                    "function_name": "nested_set_child",
                    "stmtc": "f_setter",
                    "stmtf": "f_setter",
                    "struct_name": "nested",
                    "wrapped_name": "child"
                }
            }
        ],
        "language": "cxx",
        "namespaces": [
            {
                "<NAMESPACE>": "****************************************",
                "classes": [
                    {
                        "<CLASS>": "****************************************",
                        "cxx_header": [],
                        "name": "Cstruct1",
                        "options": {
                            "PY_struct_arg": "numpy"
                        },
                        "parse_keyword": "struct",
                        "scope": "structns::Cstruct1::",
                        "typemap_name": "structns::Cstruct1",
                        "variables": [
                            {
                                "<VARIABLE>": "****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "ifield",
                                        "typemap_name": "int"
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                },
                                "name": "ifield",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "python": true
                                },
                                "zz_fmtdict": {
                                    "c_type": "int",
                                    "cxx_type": "int",
                                    "field_name": "ifield",
                                    "variable_lower": "ifield",
                                    "variable_name": "ifield",
                                    "variable_upper": "IFIELD"
                                }
                            },
                            {
                                "<VARIABLE>": "****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "dfield",
                                        "typemap_name": "double"
                                    },
                                    "specifier": [
                                        "double"
                                    ],
                                    "typemap_name": "double"
                                },
                                "name": "dfield",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "python": true
                                },
                                "zz_fmtdict": {
                                    "c_type": "double",
                                    "cxx_type": "double",
                                    "field_name": "dfield",
                                    "variable_lower": "dfield",
                                    "variable_name": "dfield",
                                    "variable_upper": "DFIELD"
                                }
                            }
                        ],
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_header_filename": "wrapstructns_Cstruct1.h",
                            "C_impl_filename": "wrapstructns_Cstruct1.cpp",
                            "C_name_api": "Cstruct1",
                            "C_name_scope": "structns_Cstruct1_",
                            "C_type_name": "CXX_cstruct1",
                            "F_derived_name": "cstruct1",
                            "F_name_api": "cstruct1",
                            "F_name_scope": "cstruct1_",
                            "PY_PyObject": "PY_Cstruct1",
                            "PY_PyTypeObject": "PY_Cstruct1_Type",
                            "PY_from_object_func": "PP_Cstruct1_from_Object",
                            "PY_struct_array_descr_create": "PY_Cstruct1_create_array_descr",
                            "PY_struct_array_descr_name": "Cstruct1_dtype",
                            "PY_struct_array_descr_variable": "PY_Cstruct1_array_descr",
                            "PY_to_object_func": "PP_Cstruct1_to_Object",
                            "PY_to_object_idtor_func": "PP_Cstruct1_to_Object_idtor",
                            "class_scope": "Cstruct1::",
                            "cxx_class": "Cstruct1",
                            "cxx_type": "Cstruct1",
                            "file_scope": "structns_Cstruct1"
                        }
                    }
                ],
                "functions": [
                    {
                        "<FUNCTION>": "19 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "passStructByReference",
                                "params": [
                                    {
                                        "declarator": {
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "name": "arg",
                                            "pointer": [
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "structns::Cstruct1"
                                        },
                                        "specifier": [
                                            "Cstruct1"
                                        ],
                                        "typemap_name": "structns::Cstruct1"
                                    }
                                ],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int passStructByReference(Cstruct1 &arg)",
                        "declgen": "int passStructByReference(Cstruct1 & arg)",
                        "doxygen": {
                            "description": "Argument is modified by library, defaults to intent(inout).\n"
                        },
                        "name": "passStructByReference",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "arg": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "CXX_cstruct1",
                                    "c_var": "arg",
                                    "cfi_type": "CFI_type_struct",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&arg",
                                    "cxx_type": "structns::Cstruct1",
                                    "cxx_var": "arg",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_STRUCT",
                                    "stmtc": "f_inout_struct_&"
                                },
                                "fmtf": {
                                    "F_C_var": "arg",
                                    "c_var": "arg",
                                    "f_derived_type": "cstruct1",
                                    "f_intent": "INOUT",
                                    "f_kind": "cstruct1",
                                    "f_type": "type(cstruct1)",
                                    "f_type_module": "cxxlibrary_structns_mod",
                                    "f_var": "arg",
                                    "sh_type": "SH_TYPE_STRUCT",
                                    "stmtf": "f_inout_struct_&"
                                },
                                "fmtpy": {
                                    "PYN_descr": "PY_Cstruct1_array_descr",
                                    "PY_to_object_idtor_func": "PP_Cstruct1_to_Object_idtor",
                                    "PyObject": "PY_Cstruct1",
                                    "PyTypeObject": "PY_Cstruct1_Type",
                                    "array_size": "1",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_type": "CXX_cstruct1",
                                    "c_var": "arg",
                                    "ctor_expr": "arg",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&arg",
                                    "cxx_type": "structns::Cstruct1",
                                    "cxx_var": "arg",
                                    "data_var": "SHData_arg",
                                    "numpy_type": null,
                                    "py_var": "SHPy_arg",
                                    "pytmp_var": "SHTPy_arg",
                                    "size_var": "SHSize_arg",
                                    "stmt": "py_inout_struct_&_numpy",
                                    "value_var": "SHValue_arg"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "*arg",
                            "C_name": "CXX_structns_passStructByReference",
                            "C_name_api": "passStructByReference",
                            "C_prototype": "CXX_cstruct1 * arg",
                            "C_return_type": "int",
                            "F_C_arguments": "arg",
                            "F_C_call": "c_pass_struct_by_reference",
                            "F_C_name": "pass_struct_by_reference",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "arg",
                            "F_arguments": "arg",
                            "F_name_api": "pass_struct_by_reference",
                            "F_name_function": "pass_struct_by_reference",
                            "F_name_generic": "pass_struct_by_reference",
                            "F_name_impl": "pass_struct_by_reference",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_passStructByReference",
                            "cxx_rv_decl": "int SHC_rv",
                            "function_name": "passStructByReference"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_get_value": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_int",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHC_rv",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "stmtc": "f_function_native_scalar"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "int",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_type_module": "iso_c_binding",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_INT",
                                "stmtf": "f_function_native_scalar"
                            },
                            "fmtpy": {
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "int",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": "NPY_INT",
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt": "py_function_native_scalar",
                                "value_var": "SHValue_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "20 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "passStructByReferenceIn",
                                "params": [
                                    {
                                        "const": true,
                                        "declarator": {
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "arg",
                                            "pointer": [
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "structns::Cstruct1"
                                        },
                                        "specifier": [
                                            "Cstruct1"
                                        ],
                                        "typemap_name": "structns::Cstruct1"
                                    }
                                ],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int passStructByReferenceIn(const Cstruct1 &arg)",
                        "declgen": "int passStructByReferenceIn(const Cstruct1 & arg)",
                        "doxygen": {
                            "description": "const defaults to intent(in)\n"
                        },
                        "name": "passStructByReferenceIn",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "arg": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "const ",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "CXX_cstruct1",
                                    "c_var": "arg",
                                    "cfi_type": "CFI_type_struct",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "const_cast<structns::Cstruct1 *>\t(&arg)",
                                    "cxx_type": "structns::Cstruct1",
                                    "cxx_var": "arg",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_STRUCT",
                                    "stmtc": "f_in_struct_&"
                                },
                                "fmtf": {
                                    "F_C_var": "arg",
                                    "c_var": "arg",
                                    "f_derived_type": "cstruct1",
                                    "f_intent": "IN",
                                    "f_kind": "cstruct1",
                                    "f_type": "type(cstruct1)",
                                    "f_type_module": "cxxlibrary_structns_mod",
                                    "f_var": "arg",
                                    "sh_type": "SH_TYPE_STRUCT",
                                    "stmtf": "f_in_struct_&"
                                },
                                "fmtpy": {
                                    "PYN_descr": "PY_Cstruct1_array_descr",
                                    "PY_to_object_idtor_func": "PP_Cstruct1_to_Object_idtor",
                                    "PyObject": "PY_Cstruct1",
                                    "PyTypeObject": "PY_Cstruct1_Type",
                                    "array_size": "1",
                                    "c_const": "const ",
                                    "c_deref": "",
                                    "c_type": "CXX_cstruct1",
                                    "c_var": "arg",
                                    "ctor_expr": "arg",
                                    "cxx_addr": "&",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "const_cast<structns::Cstruct1 *>\t(&arg)",
                                    "cxx_type": "structns::Cstruct1",
                                    "cxx_var": "arg",
                                    "data_var": "SHData_arg",
                                    "numpy_type": null,
                                    "py_var": "SHPy_arg",
                                    "pytmp_var": "SHTPy_arg",
                                    "size_var": "SHSize_arg",
                                    "stmt": "py_in_struct_&_numpy",
                                    "value_var": "SHValue_arg"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "*arg",
                            "C_name": "CXX_structns_passStructByReferenceIn",
                            "C_name_api": "passStructByReferenceIn",
                            "C_prototype": "const CXX_cstruct1 * arg",
                            "C_return_type": "int",
                            "F_C_arguments": "arg",
                            "F_C_call": "c_pass_struct_by_reference_in",
                            "F_C_name": "pass_struct_by_reference_in",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "arg",
                            "F_arguments": "arg",
                            "F_name_api": "pass_struct_by_reference_in",
                            "F_name_function": "pass_struct_by_reference_in",
                            "F_name_generic": "pass_struct_by_reference_in",
                            "F_name_impl": "pass_struct_by_reference_in",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_passStructByReferenceIn",
                            "cxx_rv_decl": "int SHC_rv",
                            "function_name": "passStructByReferenceIn"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_get_value": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_int",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHC_rv",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "stmtc": "f_function_native_scalar"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "int",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_type_module": "iso_c_binding",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_INT",
                                "stmtf": "f_function_native_scalar"
                            },
                            "fmtpy": {
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "int",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": "NPY_INT",
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt": "py_function_native_scalar",
                                "value_var": "SHValue_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "21 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "passStructByReferenceInout",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "inout"
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "name": "arg",
                                            "pointer": [
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "structns::Cstruct1"
                                        },
                                        "specifier": [
                                            "Cstruct1"
                                        ],
                                        "typemap_name": "structns::Cstruct1"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void passStructByReferenceInout(Cstruct1 &arg +intent(inout))",
                        "declgen": "void passStructByReferenceInout(Cstruct1 & arg +intent(inout))",
                        "name": "passStructByReferenceInout",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "arg": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "CXX_cstruct1",
                                    "c_var": "arg",
                                    "cfi_type": "CFI_type_struct",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&arg",
                                    "cxx_type": "structns::Cstruct1",
                                    "cxx_var": "arg",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_STRUCT",
                                    "stmtc": "f_inout_struct_&"
                                },
                                "fmtf": {
                                    "F_C_var": "arg",
                                    "c_var": "arg",
                                    "f_derived_type": "cstruct1",
                                    "f_intent": "INOUT",
                                    "f_kind": "cstruct1",
                                    "f_type": "type(cstruct1)",
                                    "f_type_module": "cxxlibrary_structns_mod",
                                    "f_var": "arg",
                                    "sh_type": "SH_TYPE_STRUCT",
                                    "stmtf": "f_inout_struct_&"
                                },
                                "fmtpy": {
                                    "PYN_descr": "PY_Cstruct1_array_descr",
                                    "PY_to_object_idtor_func": "PP_Cstruct1_to_Object_idtor",
                                    "PyObject": "PY_Cstruct1",
                                    "PyTypeObject": "PY_Cstruct1_Type",
                                    "array_size": "1",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_type": "CXX_cstruct1",
                                    "c_var": "arg",
                                    "ctor_expr": "arg",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&arg",
                                    "cxx_type": "structns::Cstruct1",
                                    "cxx_var": "arg",
                                    "data_var": "SHData_arg",
                                    "numpy_type": null,
                                    "py_var": "SHPy_arg",
                                    "pytmp_var": "SHTPy_arg",
                                    "size_var": "SHSize_arg",
                                    "stmt": "py_inout_struct_&_numpy",
                                    "value_var": "SHValue_arg"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "*arg",
                            "C_name": "CXX_structns_passStructByReferenceInout",
                            "C_name_api": "passStructByReferenceInout",
                            "C_prototype": "CXX_cstruct1 * arg",
                            "C_return_type": "void",
                            "F_C_arguments": "arg",
                            "F_C_call": "c_pass_struct_by_reference_inout",
                            "F_C_name": "pass_struct_by_reference_inout",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg",
                            "F_arguments": "arg",
                            "F_name_api": "pass_struct_by_reference_inout",
                            "F_name_function": "pass_struct_by_reference_inout",
                            "F_name_generic": "pass_struct_by_reference_inout",
                            "F_name_impl": "pass_struct_by_reference_inout",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_passStructByReferenceInout",
                            "function_name": "passStructByReferenceInout",
                            "stmtc": "f_subroutine",
                            "stmtf": "f_subroutine"
                        }
                    },
                    {
                        "<FUNCTION>": "22 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "passStructByReferenceOut",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "out"
                                            },
                                            "metaattrs": {
                                                "intent": "out"
                                            },
                                            "name": "arg",
                                            "pointer": [
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "structns::Cstruct1"
                                        },
                                        "specifier": [
                                            "Cstruct1"
                                        ],
                                        "typemap_name": "structns::Cstruct1"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void passStructByReferenceOut(Cstruct1 &arg +intent(out))",
                        "declgen": "void passStructByReferenceOut(Cstruct1 & arg +intent(out))",
                        "name": "passStructByReferenceOut",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "arg": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "CXX_cstruct1",
                                    "c_var": "arg",
                                    "cfi_type": "CFI_type_struct",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&arg",
                                    "cxx_type": "structns::Cstruct1",
                                    "cxx_var": "arg",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_STRUCT",
                                    "stmtc": "f_out_struct_&"
                                },
                                "fmtf": {
                                    "F_C_var": "arg",
                                    "c_var": "arg",
                                    "f_derived_type": "cstruct1",
                                    "f_intent": "OUT",
                                    "f_kind": "cstruct1",
                                    "f_type": "type(cstruct1)",
                                    "f_type_module": "cxxlibrary_structns_mod",
                                    "f_var": "arg",
                                    "sh_type": "SH_TYPE_STRUCT",
                                    "stmtf": "f_out_struct_&"
                                },
                                "fmtpy": {
                                    "PYN_descr": "PY_Cstruct1_array_descr",
                                    "PY_to_object_idtor_func": "PP_Cstruct1_to_Object_idtor",
                                    "PyObject": "PY_Cstruct1",
                                    "PyTypeObject": "PY_Cstruct1_Type",
                                    "array_size": "1",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_type": "CXX_cstruct1",
                                    "c_var": "arg",
                                    "ctor_expr": "arg",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&arg",
                                    "cxx_type": "structns::Cstruct1",
                                    "cxx_var": "arg",
                                    "data_var": "SHData_arg",
                                    "numpy_type": null,
                                    "py_var": "SHPy_arg",
                                    "size_var": "SHSize_arg",
                                    "stmt": "py_out_struct_&_numpy",
                                    "value_var": "SHValue_arg"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "*arg",
                            "C_name": "CXX_structns_passStructByReferenceOut",
                            "C_name_api": "passStructByReferenceOut",
                            "C_prototype": "CXX_cstruct1 * arg",
                            "C_return_type": "void",
                            "F_C_arguments": "arg",
                            "F_C_call": "c_pass_struct_by_reference_out",
                            "F_C_name": "pass_struct_by_reference_out",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg",
                            "F_arguments": "arg",
                            "F_name_api": "pass_struct_by_reference_out",
                            "F_name_function": "pass_struct_by_reference_out",
                            "F_name_generic": "pass_struct_by_reference_out",
                            "F_name_impl": "pass_struct_by_reference_out",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_passStructByReferenceOut",
                            "function_name": "passStructByReferenceOut",
                            "stmtc": "f_subroutine",
                            "stmtf": "f_subroutine"
                        }
                    }
                ],
                "name": "structns",
                "options": {},
                "scope": "structns::",
                "scope_file": [
                    "cxxlibrary",
                    "structns"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "structns::",
                    "C_header_filename": "wrapcxxlibrary_structns.h",
                    "C_impl_filename": "wrapcxxlibrary_structns.cpp",
                    "C_name_api": "structns",
                    "C_name_scope": "structns_",
                    "F_impl_filename": "wrapfcxxlibrary_structns.f",
                    "F_module_name": "cxxlibrary_structns_mod",
                    "F_name_api": "structns",
                    "LUA_this_call": "structns::",
                    "PY_library_doc": "library documentation",
                    "PY_module_filename": "pycxxlibrary_structnsmodule.cpp",
                    "PY_module_init": "cxxlibrary_structns",
                    "PY_module_name": "structns",
                    "PY_module_scope": "cxxlibrary.structns",
                    "PY_this_call": "structns::",
                    "file_scope": "cxxlibrary_structns",
                    "namespace_scope": "structns::"
                }
            }
        ],
        "scope_file": [
            "cxxlibrary"
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "python": true
        }
    },
    "symtab": {
        "Cstruct1_cls": "struct-Cstruct1_cls",
        "nested": "struct-nested",
        "struct-Cstruct1_cls": "Cstruct1_cls",
        "struct-nested": "nested",
        "structns": {
            "Cstruct1": "struct-Cstruct1",
            "struct-Cstruct1": "structns::Cstruct1"
        }
    },
    "types": {
        "Cstruct1_cls": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Cstruct1_cls_array_descr",
            "PY_PyObject": "PY_Cstruct1_cls",
            "PY_PyTypeObject": "PY_Cstruct1_cls_Type",
            "PY_from_object": "PP_Cstruct1_cls_from_Object",
            "PY_struct_as": "class",
            "PY_to_object": "PP_Cstruct1_cls_to_Object",
            "PY_to_object_idtor": "PP_Cstruct1_cls_to_Object_idtor",
            "base": "struct",
            "c_type": "CXX_cstruct1_cls",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Cstruct1_cls",
            "f_derived_type": "cstruct1_cls",
            "f_kind": "cstruct1_cls",
            "f_module": {
                "cxxlibrary_mod": [
                    "cstruct1_cls"
                ]
            },
            "f_module_name": "cxxlibrary_mod",
            "f_type": "type(cstruct1_cls)",
            "flat_name": "Cstruct1_cls",
            "i_module": {
                "cxxlibrary_mod": [
                    "cstruct1_cls"
                ]
            },
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        },
        "nested": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_nested_array_descr",
            "PY_PyObject": "PY_nested",
            "PY_PyTypeObject": "PY_nested_Type",
            "PY_from_object": "PP_nested_from_Object",
            "PY_struct_as": "numpy",
            "PY_to_object": "PP_nested_to_Object",
            "PY_to_object_idtor": "PP_nested_to_Object_idtor",
            "base": "struct",
            "c_type": "CXX_nested",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "nested",
            "f_derived_type": "nested",
            "f_kind": "nested",
            "f_module": {
                "cxxlibrary_mod": [
                    "nested"
                ]
            },
            "f_module_name": "cxxlibrary_mod",
            "f_type": "type(nested)",
            "flat_name": "nested",
            "i_module": {
                "cxxlibrary_mod": [
                    "nested"
                ]
            },
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        },
        "structns::Cstruct1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Cstruct1_array_descr",
            "PY_PyObject": "PY_Cstruct1",
            "PY_PyTypeObject": "PY_Cstruct1_Type",
            "PY_from_object": "PP_Cstruct1_from_Object",
            "PY_struct_as": "numpy",
            "PY_to_object": "PP_Cstruct1_to_Object",
            "PY_to_object_idtor": "PP_Cstruct1_to_Object_idtor",
            "base": "struct",
            "c_type": "CXX_cstruct1",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "structns::Cstruct1",
            "f_derived_type": "cstruct1",
            "f_kind": "cstruct1",
            "f_module": {
                "cxxlibrary_structns_mod": [
                    "cstruct1"
                ]
            },
            "f_module_name": "cxxlibrary_structns_mod",
            "f_type": "type(cstruct1)",
            "flat_name": "structns_Cstruct1",
            "i_module": {
                "cxxlibrary_structns_mod": [
                    "cstruct1"
                ]
            },
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        }
    }
}