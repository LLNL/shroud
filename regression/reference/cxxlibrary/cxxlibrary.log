Read yaml cxxlibrary.yaml
Close cxxlibrary_types.yaml
struct Cstruct1
C c int passStructByReference(Cstruct1 & arg)
C f int passStructByReference(Cstruct1 & arg)
C c int passStructByReferenceIn(const Cstruct1 & arg)
C f int passStructByReferenceIn(const Cstruct1 & arg)
C c void passStructByReferenceInout(Cstruct1 & arg +intent(inout))
C f void passStructByReferenceInout(Cstruct1 & arg +intent(inout))
C c void passStructByReferenceOut(Cstruct1 & arg +intent(out))
C f void passStructByReferenceOut(Cstruct1 & arg +intent(out))
Close wrapcxxlibrary_structns.h
Close wrapcxxlibrary_structns.cpp
class Class1
C c Class1(void)
C f Class1(void)
C c int check_length(void)
C f int check_length(void)
C c int check_length(int length=1)
C f int check_length(int length=1)
C f int check_length(long length=1)
C c Class1 * declare(int flag)
C f Class1 * declare(int flag)
C c Class1 * declare(int flag, int length=1)
C f Class1 * declare(int flag, int length=1)
C f Class1 * declare(int flag, long length=1)
C f int get_length(void)
Close wrapClass1.h
Close wrapClass1.cpp
struct nested
C c bool defaultPtrIsNULL(void)
C f bool defaultPtrIsNULL(void)
C c bool defaultPtrIsNULL(double * data=nullptr +intent(IN)+rank(1))
C f bool defaultPtrIsNULL(double * data=nullptr +intent(IN)+rank(1))
C c void defaultArgsInOut(int in1, int * out1 +intent(out), int * out2 +intent(out))
C f void defaultArgsInOut(int in1, int * out1 +intent(out), int * out2 +intent(out))
C c void defaultArgsInOut(int in1, int * out1 +intent(out), int * out2 +intent(out), bool flag=false)
C f void defaultArgsInOut(int in1, int * out1 +intent(out), int * out2 +intent(out), bool flag=false)
C c const std::string & getGroupName(long idx) +len(30)
C f const std::string & getGroupName(int32_t idx) +len(30)
C f const std::string & getGroupName(int64_t idx) +len(30)
C f nested * nested_get_parent(nested * SH_this)
C f void nested_set_parent(nested * SH_this, nested * val +intent(in))
C f nested * * nested_get_child(nested * SH_this) +dimension(sublevels)
C f void nested_set_child(nested * SH_this, nested * * val +intent(in)+rank(1))
Close wrapcxxlibrary.h
Close wrapcxxlibrary.cpp
class nested
class Class1
Fortran Class1(void)
Fortran int check_length(void)
Fortran int check_length(int length=1)
Fortran int check_length(long length=1)
Fortran Class1 * declare(int flag)
Fortran Class1 * declare(int flag, int length=1)
Fortran Class1 * declare(int flag, long length=1)
Fortran int get_length(void)
C-interface f Class1(void)
C-interface f int check_length(void)
C-interface c int check_length(int length=1)
C-interface f int check_length(int length=1)
C-interface f int check_length(long length=1)
C-interface f Class1 * declare(int flag)
C-interface c Class1 * declare(int flag, int length=1)
C-interface f Class1 * declare(int flag, int length=1)
C-interface f Class1 * declare(int flag, long length=1)
C-interface f int get_length(void)
Fortran bool defaultPtrIsNULL(void)
Fortran bool defaultPtrIsNULL(double * data=nullptr +intent(IN)+rank(1))
Fortran void defaultArgsInOut(int in1, int * out1 +intent(out), int * out2 +intent(out))
Fortran void defaultArgsInOut(int in1, int * out1 +intent(out), int * out2 +intent(out), bool flag=false)
Fortran const std::string & getGroupName(int32_t idx) +len(30)
Fortran const std::string & getGroupName(int64_t idx) +len(30)
Fortran nested * nested_get_parent(nested * SH_this)
Fortran void nested_set_parent(nested * SH_this, nested * val +intent(in))
Fortran nested * * nested_get_child(nested * SH_this) +dimension(sublevels)
Fortran void nested_set_child(nested * SH_this, nested * * val +intent(in)+rank(1))
C-interface f bool defaultPtrIsNULL(void)
C-interface f bool defaultPtrIsNULL(double * data=nullptr +intent(IN)+rank(1))
C-interface f void defaultArgsInOut(int in1, int * out1 +intent(out), int * out2 +intent(out))
C-interface f void defaultArgsInOut(int in1, int * out1 +intent(out), int * out2 +intent(out), bool flag=false)
C-interface c const std::string & getGroupName(long idx) +len(30)
C-interface f const std::string & getGroupName(int32_t idx) +len(30)
C-interface f const std::string & getGroupName(int64_t idx) +len(30)
C-interface f nested * nested_get_parent(nested * SH_this)
C-interface f void nested_set_parent(nested * SH_this, nested * val +intent(in))
C-interface f nested * * nested_get_child(nested * SH_this) +dimension(sublevels)
C-interface f void nested_set_child(nested * SH_this, nested * * val +intent(in)+rank(1))
class Cstruct1
Fortran int passStructByReference(Cstruct1 & arg)
Fortran int passStructByReferenceIn(const Cstruct1 & arg)
Fortran void passStructByReferenceInout(Cstruct1 & arg +intent(inout))
Fortran void passStructByReferenceOut(Cstruct1 & arg +intent(out))
C-interface f int passStructByReference(Cstruct1 & arg)
C-interface f int passStructByReferenceIn(const Cstruct1 & arg)
C-interface f void passStructByReferenceInout(Cstruct1 & arg +intent(inout))
C-interface f void passStructByReferenceOut(Cstruct1 & arg +intent(out))
Close wrapfcxxlibrary_structns.f
Close wrapfcxxlibrary.f
Close utilcxxlibrary.cpp
Close typescxxlibrary.h
Python function int passStructByReference(Cstruct1 & arg)
Python function int passStructByReferenceIn(const Cstruct1 & arg)
Python function void passStructByReferenceInout(Cstruct1 & arg +intent(inout))
Python function void passStructByReferenceOut(Cstruct1 & arg +intent(out))
Close pycxxlibrary_structnsmodule.cpp
class Cstruct1_cls
Python method Cstruct1_cls(int ifield, double dfield) +name(Cstruct1_cls_ctor)
Close pyCstruct1_clstype.cpp
Python function int passStructByReferenceCls(Cstruct1_cls & arg)
Python function int passStructByReferenceInCls(const Cstruct1_cls & arg)
Python function void passStructByReferenceInoutCls(Cstruct1_cls & arg +intent(inout))
Python function void passStructByReferenceOutCls(Cstruct1_cls & arg +intent(out))
Python function bool defaultPtrIsNULL(double * data=nullptr +intent(IN)+rank(1))
Python function void defaultArgsInOut(int in1, int * out1 +intent(out), int * out2 +intent(out), bool flag=false)
Close pycxxlibrarymodule.cpp
Close pycxxlibraryutil.cpp
Close pycxxlibrarymodule.hpp
Close setup.py
