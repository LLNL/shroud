{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "class_map": [
            "classes_Circle",
            "classes_Class1",
            "classes_Class2",
            "classes_Data",
            "classes_Shape",
            "classes_Singleton"
        ],
        "classes": [
            {
                "<CLASS>": "Class1 ****************************************",
                "cxx_header": [],
                "enums": [
                    {
                        "<ENUM>": "DIRECTION ****************************************",
                        "_fmtmembers": {
                            "DOWN": {
                                "C_enum_member": "CLA_Class1_DOWN",
                                "F_enum_member": "class1_down",
                                "F_value": 3,
                                "enum_member_lower": "down",
                                "enum_member_name": "DOWN",
                                "enum_member_upper": "DOWN"
                            },
                            "LEFT": {
                                "C_enum_member": "CLA_Class1_LEFT",
                                "C_value": 100,
                                "F_enum_member": "class1_left",
                                "F_value": 100,
                                "enum_member_lower": "left",
                                "enum_member_name": "LEFT",
                                "enum_member_upper": "LEFT"
                            },
                            "RIGHT": {
                                "C_enum_member": "CLA_Class1_RIGHT",
                                "F_enum_member": "class1_right",
                                "F_value": 101,
                                "enum_member_lower": "right",
                                "enum_member_name": "RIGHT",
                                "enum_member_upper": "RIGHT"
                            },
                            "UP": {
                                "C_enum_member": "CLA_Class1_UP",
                                "C_value": 2,
                                "F_enum_member": "class1_up",
                                "F_value": 2,
                                "enum_member_lower": "up",
                                "enum_member_name": "UP",
                                "enum_member_upper": "UP"
                            }
                        },
                        "ast": {
                            "members": [
                                {
                                    "name": "UP",
                                    "value": {
                                        "constant": "2"
                                    }
                                },
                                {
                                    "name": "DOWN"
                                },
                                {
                                    "name": "LEFT",
                                    "value": {
                                        "constant": "100"
                                    }
                                },
                                {
                                    "name": "RIGHT"
                                }
                            ],
                            "name": "DIRECTION"
                        },
                        "decl": "enum DIRECTION { UP = 2, DOWN, LEFT= 100, RIGHT };",
                        "name": "DIRECTION",
                        "options": {},
                        "typemap_name": "classes::Class1::DIRECTION",
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_enum": "CLA_Class1_DIRECTION",
                            "enum_lower": "direction",
                            "enum_name": "DIRECTION",
                            "enum_upper": "DIRECTION",
                            "namespace_scope": "classes::Class1::"
                        }
                    }
                ],
                "functions": [
                    {
                        "<FUNCTION>": "ctor  0 ****************************************",
                        "_overloaded": true,
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "_constructor": true,
                                    "_name": "ctor"
                                },
                                "metaattrs": {
                                    "intent": "ctor"
                                },
                                "params": [],
                                "typemap_name": "classes::Class1"
                            },
                            "is_ctor": true,
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "classes::Class1"
                        },
                        "decl": "Class1()",
                        "declgen": "Class1(void)",
                        "name": "ctor",
                        "options": {
                            "F_create_generic": true
                        },
                        "user_fmt": {
                            "function_suffix": "_default"
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "ctor"
                                    },
                                    "stmt": "c_ctor_shadow_scalar_capptr"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "ctor"
                                    },
                                    "stmt": "f_ctor_shadow_scalar_capptr"
                                }
                            },
                            "py": {
                                "+result": {
                                    "meta": {
                                        "intent": "ctor"
                                    }
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "ctor"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->ctor(\t)",
                                    "C_name": "CLA_Class1_ctor_default",
                                    "C_prototype": "CLA_Class1 * SHC_rv",
                                    "C_return_type": "CLA_Class1 *",
                                    "F_C_name": "c_class1_ctor_default",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "CLA_Class1",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "classes::Class1 SHCXX_rv",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_rv",
                                    "f_local_ptr": "SHT_prv",
                                    "idtor": "1",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "c_ctor_shadow_scalar_capptr"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->ctor(\t)",
                                    "C_name": "CLA_Class1_ctor_default",
                                    "C_prototype": "CLA_Class1 * SHC_rv",
                                    "C_return_type": "CLA_Class1 *",
                                    "F_C_arguments": "SHT_rv",
                                    "F_C_call": "c_class1_ctor_default",
                                    "F_C_name": "c_class1_ctor_default",
                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "SHT_rv%cxxmem",
                                    "F_arguments": "",
                                    "F_result": "SHT_prv",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "CLA_Class1",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "classes::Class1 SHCXX_rv",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_rv",
                                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                    "f_derived_type": "class1",
                                    "f_intent": "OUT",
                                    "f_local_ptr": "SHT_prv",
                                    "f_type": "type(class1)",
                                    "f_type_module": "classes_mod",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "1",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_ctor_shadow_scalar_capptr"
                                },
                                "fmtl": {
                                    "c_var": "static_cast<LUAc_constvoid *>(\tSHCXX_rv)",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_var": "SHCXX_rv",
                                    "stmt": "lua_ctor_scalar"
                                },
                                "fmtpy": {
                                    "PY_build_format": "O",
                                    "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                                    "PyObject": "PY_Class1",
                                    "PyTypeObject": "PY_Class1_Type",
                                    "c_deref": "",
                                    "c_var": "SHCXX_rv",
                                    "ctor_expr": "SHCXX_rv",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_rv",
                                    "data_var": "SHData_rv",
                                    "numpy_type": null,
                                    "py_var": "SHTPy_rv",
                                    "size_var": "SHSize_rv",
                                    "stmt": "py_default",
                                    "value_var": "SHValue_rv",
                                    "vargs": "SHCXX_rv"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "ctor",
                            "F_name_api": "ctor",
                            "F_name_function": "ctor_default",
                            "F_name_generic": "class1",
                            "F_name_impl": "class1_ctor_default",
                            "LUA_name": "ctor",
                            "LUA_name_api": "ctor",
                            "LUA_name_impl": "l_Class1_ctor",
                            "PY_name_impl": "PY_Class1_tp_init_default",
                            "PY_type_impl": "PY_Class1_tp_init_default",
                            "PY_type_method": "tp_init",
                            "function_name": "ctor",
                            "function_suffix": "_default"
                        }
                    },
                    {
                        "<FUNCTION>": "ctor  1 ****************************************",
                        "_overloaded": true,
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "_constructor": true,
                                    "_name": "ctor"
                                },
                                "metaattrs": {
                                    "intent": "ctor"
                                },
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "flag",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "classes::Class1"
                            },
                            "is_ctor": true,
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "classes::Class1"
                        },
                        "decl": "Class1(int flag)",
                        "declgen": "Class1(int flag +value)",
                        "name": "ctor",
                        "options": {
                            "F_create_generic": true
                        },
                        "user_fmt": {
                            "function_suffix": "_flag"
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "ctor"
                                    },
                                    "stmt": "c_ctor_shadow_scalar_capptr"
                                },
                                "flag": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "c_in_native_scalar"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "ctor"
                                    },
                                    "stmt": "f_ctor_shadow_scalar_capptr"
                                },
                                "flag": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "f_in_native_scalar"
                                }
                            },
                            "py": {
                                "+result": {
                                    "meta": {
                                        "intent": "ctor"
                                    }
                                },
                                "flag": {
                                    "meta": {
                                        "intent": "in"
                                    }
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "ctor"
                                    }
                                },
                                "flag": {
                                    "meta": {
                                        "intent": "in"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->ctor(\tflag)",
                                    "C_call_list": "flag",
                                    "C_name": "CLA_Class1_ctor_flag",
                                    "C_prototype": "int flag,\t CLA_Class1 * SHC_rv",
                                    "C_return_type": "CLA_Class1 *",
                                    "F_C_name": "c_class1_ctor_flag",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "CLA_Class1",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "classes::Class1 SHCXX_rv",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_rv",
                                    "f_local_ptr": "SHT_prv",
                                    "idtor": "1",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "c_ctor_shadow_scalar_capptr"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->ctor(\tflag)",
                                    "C_call_list": "flag",
                                    "C_name": "CLA_Class1_ctor_flag",
                                    "C_prototype": "int flag,\t CLA_Class1 * SHC_rv",
                                    "C_return_type": "CLA_Class1 *",
                                    "F_C_arguments": "flag,\t SHT_rv",
                                    "F_C_call": "c_class1_ctor_flag",
                                    "F_C_name": "c_class1_ctor_flag",
                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "flag,\t SHT_rv%cxxmem",
                                    "F_arguments": "flag",
                                    "F_result": "SHT_prv",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "CLA_Class1",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "classes::Class1 SHCXX_rv",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_rv",
                                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                    "f_derived_type": "class1",
                                    "f_intent": "OUT",
                                    "f_local_ptr": "SHT_prv",
                                    "f_type": "type(class1)",
                                    "f_type_module": "classes_mod",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "1",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_ctor_shadow_scalar_capptr"
                                },
                                "fmtl": {
                                    "c_var": "static_cast<LUAc_constvoid *>(\tSHCXX_rv)",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_var": "SHCXX_rv",
                                    "stmt": "lua_ctor_scalar"
                                },
                                "fmtpy": {
                                    "PY_build_format": "O",
                                    "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                                    "PyObject": "PY_Class1",
                                    "PyTypeObject": "PY_Class1_Type",
                                    "c_deref": "",
                                    "c_var": "SHCXX_rv",
                                    "ctor_expr": "SHCXX_rv",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_rv",
                                    "data_var": "SHData_rv",
                                    "numpy_type": null,
                                    "py_var": "SHTPy_rv",
                                    "size_var": "SHSize_rv",
                                    "stmt": "py_default",
                                    "value_var": "SHValue_rv",
                                    "vargs": "SHCXX_rv"
                                }
                            },
                            "flag": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "flag",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&flag",
                                    "cxx_type": "int",
                                    "cxx_var": "flag",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "c_in_native_scalar"
                                },
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "flag",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&flag",
                                    "cxx_type": "int",
                                    "cxx_var": "flag",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "flag",
                                    "fc_var": "flag",
                                    "i_var": "flag",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_in_native_scalar"
                                },
                                "fmtl": {
                                    "LUA_index": 1,
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "flag",
                                    "c_var_len": "Lflag",
                                    "cxx_member": ".",
                                    "cxx_type": "int",
                                    "cxx_var": "flag",
                                    "lua_var": "SH_Lua_flag",
                                    "pop_expr": "lua_tointeger(L, 1)",
                                    "stmt": "lua_in_native_scalar"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "flag",
                                    "ctor_expr": "flag",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&flag",
                                    "cxx_type": "int",
                                    "cxx_var": "flag",
                                    "data_var": "SHData_flag",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_flag",
                                    "size_var": "SHSize_flag",
                                    "stmt": "py_in_native_scalar",
                                    "value_var": "SHValue_flag"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "ctor",
                            "F_name_api": "ctor",
                            "F_name_function": "ctor_flag",
                            "F_name_generic": "class1",
                            "F_name_impl": "class1_ctor_flag",
                            "PY_name_impl": "PY_Class1_tp_init_flag",
                            "PY_type_impl": "PY_Class1_tp_init_flag",
                            "PY_type_method": "tp_init",
                            "function_name": "ctor",
                            "function_suffix": "_flag"
                        }
                    },
                    {
                        "<FUNCTION>": "delete  2 ****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "_destructor": "Class1",
                                    "_name": "dtor",
                                    "name": "delete"
                                },
                                "metaattrs": {
                                    "intent": "dtor"
                                },
                                "params": [],
                                "typemap_name": "void"
                            },
                            "is_dtor": "Class1",
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "~Class1()        +name(delete)",
                        "declgen": "~Class1(void) +name(delete)",
                        "name": "delete",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "dtor"
                                    },
                                    "stmt": "c_dtor"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "dtor"
                                    },
                                    "stmt": "f_dtor"
                                }
                            },
                            "py": {
                                "+result": {
                                    "meta": {
                                        "intent": "dtor"
                                    }
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "dtor"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->delete(\t)",
                                    "C_name": "CLA_Class1_delete",
                                    "C_prototype": "CLA_Class1 * self",
                                    "C_return_type": "void",
                                    "F_C_name": "c_class1_delete",
                                    "stmt_name": "c_dtor"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->delete(\t)",
                                    "C_name": "CLA_Class1_delete",
                                    "C_prototype": "CLA_Class1 * self",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_class1_delete",
                                    "F_C_name": "c_class1_delete",
                                    "F_C_result_clause": "",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_dtor"
                                },
                                "fmtl": {
                                    "stmt": "lua_dtor_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "delete",
                            "F_name_api": "delete",
                            "F_name_function": "delete",
                            "F_name_generic": "delete",
                            "F_name_impl": "class1_delete",
                            "LUA_name": "delete",
                            "LUA_name_api": "delete",
                            "LUA_name_impl": "l_Class1_delete",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "delete"
                        }
                    },
                    {
                        "<FUNCTION>": "Method1  3 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "Method1",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int Method1()",
                        "declgen": "int Method1(void)",
                        "doxygen": {
                            "brief": "returns the value of flag member"
                        },
                        "name": "Method1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "c_function_native_scalar"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "f_function_native_scalar"
                                }
                            },
                            "py": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->Method1(\t)",
                                    "C_name": "CLA_Class1_Method1",
                                    "C_prototype": "CLA_Class1 * self",
                                    "C_return_type": "int",
                                    "F_C_name": "c_class1_method1",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHC_rv",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "c_function_native_scalar"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->Method1(\t)",
                                    "C_name": "CLA_Class1_Method1",
                                    "C_prototype": "CLA_Class1 * self",
                                    "C_return_type": "int",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_class1_method1",
                                    "F_C_name": "c_class1_method1",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHC_rv",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_function_native_scalar"
                                },
                                "fmtl": {
                                    "c_var": "SHCXX_rv",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_var": "SHCXX_rv",
                                    "push_arg": "SHCXX_rv",
                                    "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                    "stmt": "lua_function_native_scalar"
                                },
                                "fmtpy": {
                                    "c_deref": "",
                                    "c_var": "SHCXX_rv",
                                    "ctor_expr": "SHCXX_rv",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHCXX_rv",
                                    "data_var": "SHData_rv",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHTPy_rv",
                                    "size_var": "SHSize_rv",
                                    "stmt": "py_function_native_scalar",
                                    "value_var": "SHValue_rv"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "Method1",
                            "F_name_api": "method1",
                            "F_name_function": "method1",
                            "F_name_generic": "method1",
                            "F_name_impl": "class1_method1",
                            "LUA_name": "Method1",
                            "LUA_name_api": "Method1",
                            "LUA_name_impl": "l_Class1_Method1",
                            "PY_name_impl": "PY_Method1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "Method1"
                        }
                    },
                    {
                        "<FUNCTION>": "equivalent  4 ****************************************",
                        "ast": {
                            "declarator": {
                                "func_const": true,
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "equivalent",
                                "params": [
                                    {
                                        "const": true,
                                        "declarator": {
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "obj2",
                                            "pointer": [
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "classes::Class1"
                                        },
                                        "specifier": [
                                            "Class1"
                                        ],
                                        "typemap_name": "classes::Class1"
                                    }
                                ],
                                "typemap_name": "bool"
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        },
                        "decl": "bool equivalent(Class1 const &obj2) const;",
                        "declgen": "bool equivalent(const Class1 & obj2) const",
                        "doxygen": {
                            "brief": "Pass in reference to instance"
                        },
                        "name": "equivalent",
                        "options": {
                            "wrap_lua": false
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "c_function_bool_scalar"
                                },
                                "obj2": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "c_in_shadow_&"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "f_function_bool_scalar"
                                },
                                "obj2": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "f_in_shadow_&"
                                }
                            },
                            "py": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                },
                                "obj2": {
                                    "meta": {
                                        "intent": "in"
                                    }
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                },
                                "obj2": {
                                    "meta": {
                                        "intent": "in"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->equivalent(\t*SHCXX_obj2)",
                                    "C_call_list": "*SHCXX_obj2",
                                    "C_name": "CLA_Class1_equivalent",
                                    "C_prototype": "const CLA_Class1 * self,\t CLA_Class1 * obj2",
                                    "C_return_type": "bool",
                                    "F_C_name": "c_class1_equivalent",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "bool",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_Bool",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHC_rv",
                                    "cxx_rv_decl": "bool SHC_rv",
                                    "cxx_type": "bool",
                                    "cxx_var": "SHC_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_BOOL",
                                    "stmt_name": "c_function_bool_scalar"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->equivalent(\t*SHCXX_obj2)",
                                    "C_call_list": "*SHCXX_obj2",
                                    "C_name": "CLA_Class1_equivalent",
                                    "C_prototype": "const CLA_Class1 * self,\t CLA_Class1 * obj2",
                                    "C_return_type": "bool",
                                    "F_C_arguments": "self,\t obj2",
                                    "F_C_call": "c_class1_equivalent",
                                    "F_C_name": "c_class1_equivalent",
                                    "F_C_pure_clause": "pure ",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem,\t obj2%cxxmem",
                                    "F_arguments": "obj,\t obj2",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "bool",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_Bool",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHC_rv",
                                    "cxx_rv_decl": "bool SHC_rv",
                                    "cxx_type": "bool",
                                    "cxx_var": "SHC_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_BOOL",
                                    "f_type": "logical",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_BOOL",
                                    "stmt_name": "f_function_bool_scalar"
                                },
                                "fmtpy": {
                                    "PyTypeObject": "PyBool_Type",
                                    "c_deref": "",
                                    "c_var": "SHCXX_rv",
                                    "ctor_expr": "SHCXX_rv",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                    "cxx_type": "bool",
                                    "cxx_var": "SHCXX_rv",
                                    "data_var": "SHData_rv",
                                    "numpy_type": "NPY_BOOL",
                                    "py_var": "SHTPy_rv",
                                    "size_var": "SHSize_rv",
                                    "stmt": "py_function_bool_scalar",
                                    "value_var": "SHValue_rv"
                                }
                            },
                            "obj2": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "const ",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "CLA_Class1",
                                    "c_var": "obj2",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(SHCXX_obj2)",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_obj2",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "c_in_shadow_&"
                                },
                                "fmtf": {
                                    "c_addr": "",
                                    "c_const": "const ",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "CLA_Class1",
                                    "c_var": "obj2",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(SHCXX_obj2)",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_obj2",
                                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                    "f_derived_type": "class1",
                                    "f_intent": "IN",
                                    "f_type": "type(class1)",
                                    "f_type_module": "classes_mod",
                                    "f_var": "obj2",
                                    "fc_var": "obj2",
                                    "i_var": "obj2",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_in_shadow_&"
                                },
                                "fmtpy": {
                                    "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                                    "PyObject": "PY_Class1",
                                    "PyTypeObject": "PY_Class1_Type",
                                    "array_size": "1",
                                    "c_const": "const ",
                                    "c_deref": "",
                                    "c_type": "CLA_Class1",
                                    "c_var": "obj2",
                                    "ctor_expr": "obj2",
                                    "cxx_addr": "&",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(&obj2)",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "obj2",
                                    "data_var": "SHData_obj2",
                                    "numpy_type": null,
                                    "py_object": "PY_Class1",
                                    "py_var": "SHPy_obj2",
                                    "size_var": "SHSize_obj2",
                                    "stmt": "py_in_shadow_&",
                                    "value_var": "SHValue_obj2"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "equivalent",
                            "F_name_api": "equivalent",
                            "F_name_function": "equivalent",
                            "F_name_generic": "equivalent",
                            "F_name_impl": "class1_equivalent",
                            "PY_name_impl": "PY_equivalent",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "equivalent"
                        }
                    },
                    {
                        "<FUNCTION>": "returnThis  5 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "returnThis",
                                "params": [],
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "classes::Class1"
                            },
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "classes::Class1"
                        },
                        "decl": "Class1 * returnThis();",
                        "declgen": "Class1 * returnThis(void)",
                        "doxygen": {
                            "brief": "Return pointer to 'this' to allow chaining calls"
                        },
                        "name": "returnThis",
                        "options": {
                            "wrap_lua": false,
                            "wrap_python": false
                        },
                        "return_this": true,
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "api": "this",
                                        "intent": "function"
                                    },
                                    "stmt": "c_function_shadow_*_this"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "api": "this",
                                        "intent": "function"
                                    },
                                    "stmt": "f_function_shadow_*_this"
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->returnThis(\t)",
                                    "C_name": "CLA_Class1_returnThis",
                                    "C_prototype": "CLA_Class1 * self",
                                    "C_return_type": "void",
                                    "F_C_name": "c_class1_return_this",
                                    "c_const": "",
                                    "c_type": "CLA_Class1",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_rv_decl": "classes::Class1 * SHCXX_rv",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "c_function_shadow_*_this"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->returnThis(\t)",
                                    "C_name": "CLA_Class1_returnThis",
                                    "C_prototype": "CLA_Class1 * self",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_class1_return_this",
                                    "F_C_name": "c_class1_return_this",
                                    "F_C_result_clause": "",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_subprogram": "subroutine",
                                    "c_const": "",
                                    "c_type": "CLA_Class1",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_rv_decl": "classes::Class1 * SHCXX_rv",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_rv",
                                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                    "f_derived_type": "class1",
                                    "f_intent": "OUT",
                                    "f_type": "type(class1)",
                                    "f_type_module": "classes_mod",
                                    "f_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_function_shadow_*_this"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "returnThis",
                            "F_name_api": "return_this",
                            "F_name_function": "return_this",
                            "F_name_generic": "return_this",
                            "F_name_impl": "class1_return_this",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "returnThis"
                        }
                    },
                    {
                        "<FUNCTION>": "returnThisBuffer  6 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "returnThisBuffer",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "in"
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "name",
                                            "pointer": [
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "std::string"
                                        },
                                        "specifier": [
                                            "std::string"
                                        ],
                                        "typemap_name": "std::string"
                                    },
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "flag",
                                            "typemap_name": "bool"
                                        },
                                        "specifier": [
                                            "bool"
                                        ],
                                        "typemap_name": "bool"
                                    }
                                ],
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "classes::Class1"
                            },
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "classes::Class1"
                        },
                        "decl": "Class1 * returnThisBuffer(std::string & name +intent(in), bool flag);",
                        "declgen": "Class1 * returnThisBuffer(std::string & name +intent(in), bool flag +value)",
                        "doxygen": {
                            "brief": "Return pointer to 'this' to allow chaining calls"
                        },
                        "helpers": {
                            "c": [
                                "char_len_trim"
                            ]
                        },
                        "name": "returnThisBuffer",
                        "options": {
                            "wrap_lua": false,
                            "wrap_python": false
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "function"
                                    },
                                    "stmt": "c_function_shadow_*_capptr"
                                },
                                "flag": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "c_in_bool_scalar"
                                },
                                "name": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "c_in_string_&"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "function"
                                    },
                                    "stmt": "f_function_shadow_*_capptr"
                                },
                                "flag": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "f_in_bool_scalar"
                                },
                                "name": {
                                    "meta": {
                                        "api": "buf",
                                        "intent": "in"
                                    },
                                    "stmt": "f_in_string_&_buf"
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                },
                                "flag": {
                                    "meta": {
                                        "intent": "in"
                                    }
                                },
                                "name": {
                                    "meta": {
                                        "intent": "in"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->returnThisBuffer(\tSHCXX_name,\t flag)",
                                    "C_call_list": "SHCXX_name,\t flag",
                                    "C_name": "CLA_Class1_returnThisBuffer",
                                    "C_prototype": "CLA_Class1 * self,\t char * name,\t bool flag,\t CLA_Class1 * SHC_rv",
                                    "C_return_type": "CLA_Class1 *",
                                    "F_C_arguments": "self,\t name,\t flag,\t SHT_rv",
                                    "F_C_name": "c_class1_return_this_buffer",
                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                    "F_C_subprogram": "function",
                                    "F_result": "SHT_prv",
                                    "c_const": "",
                                    "c_type": "CLA_Class1",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "SHCXX_rv",
                                    "cxx_rv_decl": "classes::Class1 * SHCXX_rv",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_rv",
                                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                    "f_derived_type": "class1",
                                    "f_intent": "OUT",
                                    "f_local_ptr": "SHT_prv",
                                    "f_type": "type(class1)",
                                    "f_type_module": "classes_mod",
                                    "f_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "c_function_shadow_*_capptr"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->returnThisBuffer(\tSHCXX_name,\t flag)",
                                    "C_call_list": "SHCXX_name,\t flag",
                                    "C_name": "CLA_Class1_returnThisBuffer_bufferify",
                                    "C_prototype": "CLA_Class1 * self,\t char *name,\t int SHT_name_len,\t bool flag,\t CLA_Class1 * SHC_rv",
                                    "C_return_type": "CLA_Class1 *",
                                    "F_C_arguments": "self,\t name,\t SHT_name_len,\t flag,\t SHT_rv",
                                    "F_C_call": "c_class1_return_this_buffer_bufferify",
                                    "F_C_name": "c_class1_return_this_buffer_bufferify",
                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem,\t name,\t SHT_name_len,\t SHT_flag_cxx,\t SHT_rv%cxxmem",
                                    "F_arguments": "obj,\t name,\t flag",
                                    "F_result": "SHT_prv",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_type": "CLA_Class1",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "SHCXX_rv",
                                    "cxx_rv_decl": "classes::Class1 * SHCXX_rv",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_rv",
                                    "f_c_suffix": "_bufferify",
                                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                    "f_derived_type": "class1",
                                    "f_intent": "OUT",
                                    "f_local_ptr": "SHT_prv",
                                    "f_type": "type(class1)",
                                    "f_type_module": "classes_mod",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_function_shadow_*_capptr"
                                }
                            },
                            "flag": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "bool",
                                    "c_var": "flag",
                                    "cfi_type": "CFI_type_Bool",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&flag",
                                    "cxx_type": "bool",
                                    "cxx_var": "flag",
                                    "f_intent": "IN",
                                    "f_kind": "C_BOOL",
                                    "f_type": "logical",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "flag",
                                    "i_var": "flag",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_BOOL",
                                    "stmt_name": "c_in_bool_scalar"
                                },
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "bool",
                                    "c_var": "flag",
                                    "cfi_type": "CFI_type_Bool",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&flag",
                                    "cxx_type": "bool",
                                    "cxx_var": "flag",
                                    "f_intent": "IN",
                                    "f_kind": "C_BOOL",
                                    "f_type": "logical",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "flag",
                                    "f_var_cxx": "SHT_flag_cxx",
                                    "fc_var": "flag",
                                    "i_var": "flag",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_BOOL",
                                    "stmt_name": "f_in_bool_scalar"
                                }
                            },
                            "name": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "char",
                                    "c_var": "name",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_name",
                                    "cxx_type": "std::string",
                                    "cxx_var": "SHCXX_name",
                                    "f_intent": "IN",
                                    "f_kind": "C_CHAR",
                                    "f_type": "character(*)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "name",
                                    "i_var": "name",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "c_in_string_&"
                                },
                                "fmtf": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_helper_char_len_trim": "ShroudCharLenTrim",
                                    "c_member": "->",
                                    "c_type": "char",
                                    "c_var": "name",
                                    "c_var_len": "SHT_name_len",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_name",
                                    "cxx_type": "std::string",
                                    "cxx_var": "SHCXX_name",
                                    "f_intent": "IN",
                                    "f_kind": "C_CHAR",
                                    "f_type": "character(*)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "name",
                                    "f_var_len": "SHT_name_len",
                                    "fc_var": "name",
                                    "i_var": "name",
                                    "i_var_len": "SHT_name_len",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_in_string_&_buf"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "returnThisBuffer",
                            "F_name_api": "return_this_buffer",
                            "F_name_function": "return_this_buffer",
                            "F_name_generic": "return_this_buffer",
                            "F_name_impl": "class1_return_this_buffer",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "returnThisBuffer"
                        }
                    },
                    {
                        "<FUNCTION>": "getclass3  7 ****************************************",
                        "ast": {
                            "declarator": {
                                "func_const": true,
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "getclass3",
                                "params": [],
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "classes::Class1"
                            },
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "classes::Class1"
                        },
                        "decl": "Class1 *getclass3() const",
                        "declgen": "Class1 * getclass3(void) const",
                        "doxygen": {
                            "brief": "Test const method"
                        },
                        "name": "getclass3",
                        "options": {
                            "wrap_lua": false
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "function"
                                    },
                                    "stmt": "c_function_shadow_*_capptr"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "function"
                                    },
                                    "stmt": "f_function_shadow_*_capptr"
                                }
                            },
                            "py": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->getclass3(\t)",
                                    "C_name": "CLA_Class1_getclass3",
                                    "C_prototype": "const CLA_Class1 * self,\t CLA_Class1 * SHC_rv",
                                    "C_return_type": "CLA_Class1 *",
                                    "F_C_name": "c_class1_getclass3",
                                    "c_const": "",
                                    "c_type": "CLA_Class1",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "SHCXX_rv",
                                    "cxx_rv_decl": "classes::Class1 * SHCXX_rv",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_rv",
                                    "f_local_ptr": "SHT_prv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "c_function_shadow_*_capptr"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->getclass3(\t)",
                                    "C_name": "CLA_Class1_getclass3",
                                    "C_prototype": "const CLA_Class1 * self,\t CLA_Class1 * SHC_rv",
                                    "C_return_type": "CLA_Class1 *",
                                    "F_C_arguments": "self,\t SHT_rv",
                                    "F_C_call": "c_class1_getclass3",
                                    "F_C_name": "c_class1_getclass3",
                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem,\t SHT_rv%cxxmem",
                                    "F_arguments": "obj",
                                    "F_result": "SHT_prv",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_type": "CLA_Class1",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "SHCXX_rv",
                                    "cxx_rv_decl": "classes::Class1 * SHCXX_rv",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_rv",
                                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                    "f_derived_type": "class1",
                                    "f_intent": "OUT",
                                    "f_local_ptr": "SHT_prv",
                                    "f_type": "type(class1)",
                                    "f_type_module": "classes_mod",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_function_shadow_*_capptr"
                                },
                                "fmtpy": {
                                    "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                                    "PyObject": "PY_Class1",
                                    "PyTypeObject": "PY_Class1_Type",
                                    "array_size": "1",
                                    "c_deref": "*",
                                    "c_var": "SHCXX_rv",
                                    "ctor_expr": "*SHCXX_rv",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "SHCXX_rv",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_rv",
                                    "data_var": "SHData_rv",
                                    "numpy_type": null,
                                    "py_var": "SHTPy_rv",
                                    "size_var": "SHSize_rv",
                                    "stmt": "py_function_shadow_*",
                                    "value_var": "SHValue_rv"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "getclass3",
                            "F_name_api": "getclass3",
                            "F_name_function": "getclass3",
                            "F_name_generic": "getclass3",
                            "F_name_impl": "class1_getclass3",
                            "PY_name_impl": "PY_getclass3",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "getclass3"
                        }
                    },
                    {
                        "<FUNCTION>": "getName  8 ****************************************",
                        "ast": {
                            "const": true,
                            "declarator": {
                                "metaattrs": {
                                    "deref": "allocatable",
                                    "intent": "function"
                                },
                                "name": "getName",
                                "params": [],
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ],
                                "typemap_name": "std::string"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        "decl": "const std::string& getName();",
                        "declgen": "const std::string & getName(void)",
                        "doxygen": {
                            "brief": "test helper"
                        },
                        "helpers": {
                            "c": [
                                "array_context",
                                "string_to_cdesc",
                                "copy_string"
                            ],
                            "f": [
                                "array_context",
                                "copy_string",
                                "capsule_dtor"
                            ]
                        },
                        "name": "getName",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "c_function_string_&"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "api": "cdesc",
                                        "deref": "allocatable",
                                        "intent": "function"
                                    },
                                    "stmt": "f_function_string_&_cdesc_allocatable"
                                }
                            },
                            "py": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->getName(\t)",
                                    "C_name": "CLA_Class1_getName",
                                    "C_prototype": "CLA_Class1 * self",
                                    "C_return_type": "const char *",
                                    "F_C_arguments": "self",
                                    "F_C_name": "c_class1_get_name",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "c_const": "const ",
                                    "c_rv_decl": "const char * SHC_rv",
                                    "c_type": "char",
                                    "c_val": "SHCXX_rv.c_str()",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                                    "cxx_type": "std::string",
                                    "cxx_var": "SHCXX_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_CHAR",
                                    "f_type": "character(*)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "c_function_string_&"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->getName(\t)",
                                    "C_name": "CLA_Class1_getName_bufferify",
                                    "C_prototype": "CLA_Class1 * self,\t CLA_SHROUD_array *SHT_rv_cdesc,\t CLA_SHROUD_capsule_data *SHT_rv_capsule",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t SHT_rv_cdesc,\t SHT_rv_capsule",
                                    "F_C_call": "c_class1_get_name_bufferify",
                                    "F_C_name": "c_class1_get_name_bufferify",
                                    "F_C_result_clause": "",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t SHT_rv_cdesc,\t SHT_rv_capsule",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "const ",
                                    "c_helper_array_context": "CLA_SHROUD_array",
                                    "c_helper_copy_string": "CLA_ShroudCopyString",
                                    "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                                    "c_type": "char",
                                    "c_var": "SHC_rv",
                                    "c_var_capsule": "SHT_rv_capsule",
                                    "c_var_cdesc": "SHT_rv_cdesc",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                                    "cxx_type": "std::string",
                                    "cxx_var": "SHCXX_rv",
                                    "f_c_suffix": "_bufferify",
                                    "f_helper_array_context": "CLA_SHROUD_array",
                                    "f_helper_capsule_dtor": "CLA_SHROUD_capsule_dtor",
                                    "f_helper_copy_string": "CLA_SHROUD_copy_string",
                                    "f_intent": "OUT",
                                    "f_kind": "C_CHAR",
                                    "f_type": "character(*)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "f_var_capsule": "SHT_rv_capsule",
                                    "f_var_cdesc": "SHT_rv_cdesc",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "i_var_capsule": "SHT_rv_capsule",
                                    "i_var_cdesc": "SHT_rv_cdesc",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_function_string_&_cdesc_allocatable"
                                },
                                "fmtl": {
                                    "c_var": "SHCXX_rv.c_str()",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_var": "SHCXX_rv",
                                    "push_arg": "SHCXX_rv.c_str()",
                                    "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                    "stmt": "lua_function_string_&"
                                },
                                "fmtpy": {
                                    "array_size": "1",
                                    "c_deref": "",
                                    "c_var": "SHCXX_rv",
                                    "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                    "cxx_type": "std::string",
                                    "cxx_var": "SHCXX_rv",
                                    "data_var": "SHData_rv",
                                    "numpy_type": null,
                                    "py_var": "SHTPy_rv",
                                    "size_var": "SHSize_rv",
                                    "stmt": "py_function_string_&",
                                    "value_var": "SHValue_rv"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "getName",
                            "F_name_api": "get_name",
                            "F_name_function": "get_name",
                            "F_name_generic": "get_name",
                            "F_name_impl": "class1_get_name",
                            "LUA_name": "getName",
                            "LUA_name_api": "getName",
                            "LUA_name_impl": "l_Class1_getName",
                            "PY_name_impl": "PY_getName",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "getName"
                        }
                    },
                    {
                        "<FUNCTION>": "directionFunc  9 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "directionFunc",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "arg",
                                            "typemap_name": "classes::Class1::DIRECTION"
                                        },
                                        "specifier": [
                                            "DIRECTION"
                                        ],
                                        "typemap_name": "classes::Class1::DIRECTION"
                                    }
                                ],
                                "typemap_name": "classes::Class1::DIRECTION"
                            },
                            "specifier": [
                                "DIRECTION"
                            ],
                            "typemap_name": "classes::Class1::DIRECTION"
                        },
                        "decl": "DIRECTION directionFunc(DIRECTION arg);",
                        "declgen": "DIRECTION directionFunc(DIRECTION arg +value)",
                        "name": "directionFunc",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "c_function_native_scalar"
                                },
                                "arg": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "c_in_native_scalar"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "f_function_native_scalar"
                                },
                                "arg": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "f_in_native_scalar"
                                }
                            },
                            "py": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                },
                                "arg": {
                                    "meta": {
                                        "intent": "in"
                                    }
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                },
                                "arg": {
                                    "meta": {
                                        "intent": "in"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->directionFunc(\tSHCXX_arg)",
                                    "C_call_list": "SHCXX_arg",
                                    "C_name": "CLA_Class1_directionFunc",
                                    "C_prototype": "CLA_Class1 * self,\t int arg",
                                    "C_return_type": "int",
                                    "F_C_name": "c_class1_direction_func",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_rv_decl": "int SHC_rv",
                                    "c_type": "int",
                                    "c_val": "static_cast<int>(SHCXX_rv)",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                    "cxx_rv_decl": "classes::Class1::DIRECTION SHCXX_rv",
                                    "cxx_type": "classes::Class1::DIRECTION",
                                    "cxx_var": "SHCXX_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "c_function_native_scalar"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->directionFunc(\tSHCXX_arg)",
                                    "C_call_list": "SHCXX_arg",
                                    "C_name": "CLA_Class1_directionFunc",
                                    "C_prototype": "CLA_Class1 * self,\t int arg",
                                    "C_return_type": "int",
                                    "F_C_arguments": "self,\t arg",
                                    "F_C_call": "c_class1_direction_func",
                                    "F_C_name": "c_class1_direction_func",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem,\t arg",
                                    "F_arguments": "obj,\t arg",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_rv_decl": "int SHC_rv",
                                    "c_type": "int",
                                    "c_val": "static_cast<int>(SHCXX_rv)",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                    "cxx_rv_decl": "classes::Class1::DIRECTION SHCXX_rv",
                                    "cxx_type": "classes::Class1::DIRECTION",
                                    "cxx_var": "SHCXX_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_function_native_scalar"
                                },
                                "fmtl": {
                                    "c_var": "static_cast<int>(SHCXX_rv)",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_var": "SHCXX_rv",
                                    "push_arg": "static_cast<int>(SHCXX_rv)",
                                    "push_expr": "lua_pushinteger(L, static_cast<int>(SHCXX_rv))",
                                    "stmt": "lua_function_native_scalar"
                                },
                                "fmtpy": {
                                    "c_deref": "",
                                    "c_var": "SHCXX_rv",
                                    "ctor_expr": "SHCXX_rv",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                    "cxx_type": "classes::Class1::DIRECTION",
                                    "cxx_var": "SHCXX_rv",
                                    "data_var": "SHData_rv",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHTPy_rv",
                                    "size_var": "SHSize_rv",
                                    "stmt": "py_function_native_scalar",
                                    "value_var": "SHValue_rv"
                                }
                            },
                            "arg": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "arg",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_decl": "classes::Class1::DIRECTION SHCXX_arg",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_arg",
                                    "cxx_type": "classes::Class1::DIRECTION",
                                    "cxx_val": "static_cast<classes::Class1::DIRECTION>(arg)",
                                    "cxx_var": "SHCXX_arg",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "c_in_native_scalar"
                                },
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "arg",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_decl": "classes::Class1::DIRECTION SHCXX_arg",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_arg",
                                    "cxx_type": "classes::Class1::DIRECTION",
                                    "cxx_val": "static_cast<classes::Class1::DIRECTION>(arg)",
                                    "cxx_var": "SHCXX_arg",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "arg",
                                    "fc_var": "arg",
                                    "i_var": "arg",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_in_native_scalar"
                                },
                                "fmtl": {
                                    "LUA_index": 1,
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "lua_tointeger(L, 1)",
                                    "c_var_len": "Larg",
                                    "cxx_member": ".",
                                    "cxx_type": "classes::Class1::DIRECTION",
                                    "cxx_var": "arg",
                                    "lua_var": "SH_Lua_arg",
                                    "pop_expr": "static_cast<classes::Class1::DIRECTION>(lua_tointeger(L, 1))",
                                    "stmt": "lua_in_native_scalar"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "arg",
                                    "ctor_expr": "arg",
                                    "cxx_addr": "&",
                                    "cxx_decl": "classes::Class1::DIRECTION SH_arg",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&arg",
                                    "cxx_type": "classes::Class1::DIRECTION",
                                    "cxx_val": "static_cast<classes::Class1::DIRECTION>(arg)",
                                    "cxx_var": "SH_arg",
                                    "data_var": "SHData_arg",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_arg",
                                    "size_var": "SHSize_arg",
                                    "stmt": "py_in_native_scalar",
                                    "value_var": "SHValue_arg"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "directionFunc",
                            "F_name_api": "direction_func",
                            "F_name_function": "direction_func",
                            "F_name_generic": "direction_func",
                            "F_name_impl": "class1_direction_func",
                            "LUA_name": "directionFunc",
                            "LUA_name_api": "directionFunc",
                            "LUA_name_impl": "l_Class1_directionFunc",
                            "PY_name_impl": "PY_directionFunc",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "directionFunc"
                        }
                    },
                    {
                        "<FUNCTION>": "get_m_flag  10 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "name": "get_m_flag",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int get_m_flag()",
                        "declgen": "int get_m_flag(void)",
                        "name": "get_m_flag",
                        "options": {},
                        "user_fmt": {
                            "field_name": "m_flag",
                            "struct_name": "Class1",
                            "wrapped_name": "m_flag"
                        },
                        "wrap": {
                            "fortran": true
                        },
                        "zz_bind": {
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "getter"
                                    },
                                    "stmt": "f_getter_native_scalar"
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtf": {
                                    "C_call_function": "SH_this->get_m_flag(\t)",
                                    "C_name": "CLA_Class1_get_m_flag",
                                    "C_prototype": "CLA_Class1 * self",
                                    "C_return_type": "int",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_class1_get_m_flag",
                                    "F_C_name": "c_class1_get_m_flag",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_getter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "get_m_flag",
                            "F_name_api": "get_m_flag",
                            "F_name_function": "get_m_flag",
                            "F_name_generic": "get_m_flag",
                            "F_name_impl": "class1_get_m_flag",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "m_flag",
                            "function_name": "get_m_flag",
                            "struct_name": "Class1",
                            "wrapped_name": "m_flag"
                        }
                    },
                    {
                        "<FUNCTION>": "get_test  11 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "name": "get_test",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int get_test()",
                        "declgen": "int get_test(void)",
                        "name": "get_test",
                        "options": {},
                        "user_fmt": {
                            "field_name": "m_test",
                            "struct_name": "Class1",
                            "wrapped_name": "test"
                        },
                        "wrap": {
                            "fortran": true
                        },
                        "zz_bind": {
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "getter"
                                    },
                                    "stmt": "f_getter_native_scalar"
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtf": {
                                    "C_call_function": "SH_this->get_test(\t)",
                                    "C_name": "CLA_Class1_get_test",
                                    "C_prototype": "CLA_Class1 * self",
                                    "C_return_type": "int",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_class1_get_test",
                                    "F_C_name": "c_class1_get_test",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_getter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "get_test",
                            "F_name_api": "get_test",
                            "F_name_function": "get_test",
                            "F_name_generic": "get_test",
                            "F_name_impl": "class1_get_test",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "m_test",
                            "function_name": "get_test",
                            "struct_name": "Class1",
                            "wrapped_name": "test"
                        }
                    },
                    {
                        "<FUNCTION>": "set_test  12 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "setter"
                                },
                                "name": "set_test",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "in",
                                                "value": true
                                            },
                                            "name": "val",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_test(int val)",
                        "declgen": "void set_test(int val +intent(in)+value)",
                        "name": "set_test",
                        "options": {},
                        "user_fmt": {
                            "field_name": "m_test",
                            "struct_name": "Class1",
                            "wrapped_name": "test"
                        },
                        "wrap": {
                            "fortran": true
                        },
                        "zz_bind": {
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "setter"
                                    },
                                    "stmt": "f_setter"
                                },
                                "val": {
                                    "meta": {
                                        "intent": "setter"
                                    },
                                    "stmt": "f_setter_native_scalar"
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    }
                                },
                                "val": {
                                    "meta": {
                                        "intent": "in"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtf": {
                                    "C_call_function": "SH_this->set_test(\tval)",
                                    "C_call_list": "val",
                                    "C_name": "CLA_Class1_set_test",
                                    "C_prototype": "CLA_Class1 * self,\t int val",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t val",
                                    "F_C_call": "c_class1_set_test",
                                    "F_C_name": "c_class1_set_test",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t val",
                                    "F_arguments": "obj,\t val",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_setter"
                                }
                            },
                            "val": {
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "val",
                                    "fc_var": "val",
                                    "i_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "set_test",
                            "F_name_api": "set_test",
                            "F_name_function": "set_test",
                            "F_name_generic": "set_test",
                            "F_name_impl": "class1_set_test",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "m_test",
                            "function_name": "set_test",
                            "struct_name": "Class1",
                            "wrapped_name": "test"
                        }
                    },
                    {
                        "<FUNCTION>": "get_m_name  13 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "name": "get_m_name",
                                "params": [],
                                "typemap_name": "std::string"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        "decl": "std::string get_m_name()",
                        "declgen": "std::string get_m_name(void)",
                        "helpers": {
                            "c": [
                                "array_context",
                                "copy_string"
                            ],
                            "f": [
                                "array_context",
                                "copy_string"
                            ]
                        },
                        "name": "get_m_name",
                        "options": {},
                        "user_fmt": {
                            "field_name": "m_name",
                            "struct_name": "Class1",
                            "wrapped_name": "m_name"
                        },
                        "wrap": {
                            "fortran": true
                        },
                        "zz_bind": {
                            "f": {
                                "+result": {
                                    "meta": {
                                        "api": "cdesc",
                                        "deref": "allocatable",
                                        "intent": "getter"
                                    },
                                    "stmt": "f_getter_string_scalar_cdesc_allocatable"
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtf": {
                                    "C_call_function": "SH_this->get_m_name(\t)",
                                    "C_name": "CLA_Class1_get_m_name",
                                    "C_prototype": "CLA_Class1 * self,\t CLA_SHROUD_array *SHT_rv_cdesc",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t SHT_rv_cdesc",
                                    "F_C_call": "c_class1_get_m_name",
                                    "F_C_name": "c_class1_get_m_name",
                                    "F_C_result_clause": "",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t SHT_rv_cdesc",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_helper_array_context": "CLA_SHROUD_array",
                                    "c_helper_copy_string": "CLA_ShroudCopyString",
                                    "c_type": "char",
                                    "c_var": "SHC_rv",
                                    "c_var_cdesc": "SHT_rv_cdesc",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "std::string SHCXX_rv",
                                    "cxx_type": "std::string",
                                    "cxx_var": "SHCXX_rv",
                                    "f_helper_array_context": "CLA_SHROUD_array",
                                    "f_helper_copy_string": "CLA_SHROUD_copy_string",
                                    "f_intent": "OUT",
                                    "f_kind": "C_CHAR",
                                    "f_type": "character(*)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "f_var_cdesc": "SHT_rv_cdesc",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "i_var_cdesc": "SHT_rv_cdesc",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_getter_string_scalar_cdesc_allocatable"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "get_m_name",
                            "F_name_api": "get_m_name",
                            "F_name_function": "get_m_name",
                            "F_name_generic": "get_m_name",
                            "F_name_impl": "class1_get_m_name",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "m_name",
                            "function_name": "get_m_name",
                            "struct_name": "Class1",
                            "wrapped_name": "m_name"
                        }
                    },
                    {
                        "<FUNCTION>": "set_m_name  14 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "setter"
                                },
                                "name": "set_m_name",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "in"
                                            },
                                            "name": "val",
                                            "typemap_name": "std::string"
                                        },
                                        "specifier": [
                                            "std::string"
                                        ],
                                        "typemap_name": "std::string"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_m_name(std::string val)",
                        "declgen": "void set_m_name(std::string val +intent(in))",
                        "name": "set_m_name",
                        "options": {},
                        "user_fmt": {
                            "field_name": "m_name",
                            "struct_name": "Class1",
                            "wrapped_name": "m_name"
                        },
                        "wrap": {
                            "fortran": true
                        },
                        "zz_bind": {
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "setter"
                                    },
                                    "stmt": "f_setter"
                                },
                                "val": {
                                    "meta": {
                                        "api": "buf",
                                        "intent": "setter"
                                    },
                                    "stmt": "f_setter_string_scalar_buf"
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    }
                                },
                                "val": {
                                    "meta": {
                                        "intent": "in"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtf": {
                                    "C_call_function": "SH_this->set_m_name(\tval)",
                                    "C_call_list": "val",
                                    "C_name": "CLA_Class1_set_m_name",
                                    "C_prototype": "CLA_Class1 * self,\t char *val,\t int SHT_val_len",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t val,\t SHT_val_len",
                                    "F_C_call": "c_class1_set_m_name",
                                    "F_C_name": "c_class1_set_m_name",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t val,\t SHT_val_len",
                                    "F_arguments": "obj,\t val",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_setter"
                                }
                            },
                            "val": {
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "char",
                                    "c_var": "val",
                                    "c_var_len": "SHT_val_len",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "std::string",
                                    "cxx_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_CHAR",
                                    "f_type": "character(*)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "val",
                                    "f_var_len": "SHT_val_len",
                                    "fc_var": "val",
                                    "i_var": "val",
                                    "i_var_len": "SHT_val_len",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_setter_string_scalar_buf"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "set_m_name",
                            "F_name_api": "set_m_name",
                            "F_name_function": "set_m_name",
                            "F_name_generic": "set_m_name",
                            "F_name_impl": "class1_set_m_name",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "m_name",
                            "function_name": "set_m_name",
                            "struct_name": "Class1",
                            "wrapped_name": "m_name"
                        }
                    }
                ],
                "name": "Class1",
                "options": {
                    "literalinclude": true
                },
                "parse_keyword": "class",
                "scope": "classes::Class1::",
                "typemap_name": "classes::Class1",
                "variables": [
                    {
                        "<VARIABLE>": "m_flag ****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "readonly": true
                                },
                                "name": "m_flag",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "m_flag",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "PY_getter": "PY_Class1_m_flag_getter",
                            "PY_setter": "nullptr",
                            "PY_struct_context": "self->obj->",
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "m_flag",
                            "variable_lower": "m_flag",
                            "variable_name": "m_flag",
                            "variable_upper": "M_FLAG"
                        }
                    },
                    {
                        "<VARIABLE>": "test ****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "name": "test"
                                },
                                "name": "m_test",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "test",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "PY_getter": "PY_Class1_test_getter",
                            "PY_setter": "PY_Class1_test_setter",
                            "PY_struct_context": "self->obj->",
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "m_test",
                            "variable_lower": "test",
                            "variable_name": "test",
                            "variable_upper": "TEST"
                        }
                    },
                    {
                        "<VARIABLE>": "m_name ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "m_name",
                                "typemap_name": "std::string"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        "name": "m_name",
                        "options": {
                            "wrap_python": false
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true
                        },
                        "zz_fmtdict": {
                            "c_type": "char",
                            "cxx_type": "std::string",
                            "field_name": "m_name",
                            "variable_lower": "m_name",
                            "variable_name": "m_name",
                            "variable_upper": "M_NAME"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapClass1.h",
                    "C_impl_filename": "wrapClass1.cpp",
                    "C_name_api": "Class1",
                    "C_name_scope": "Class1_",
                    "C_type_name": "CLA_Class1",
                    "F_derived_name": "class1",
                    "F_name_api": "class1",
                    "F_name_scope": "class1_",
                    "LUA_class_reg": "l_Class1_Reg",
                    "LUA_ctor_name": "Class1",
                    "LUA_metadata": "Class1.metatable",
                    "LUA_name_api": "Class1",
                    "LUA_this_call": "SH_this->self->",
                    "LUA_userdata_member": "self",
                    "LUA_userdata_type": "l_Class1_Type",
                    "LUA_userdata_var": "SH_this",
                    "PY_PyObject": "PY_Class1",
                    "PY_PyTypeObject": "PY_Class1_Type",
                    "PY_capsule_name": "PY_Class1_capsule_name",
                    "PY_from_object_func": "PP_Class1_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Class1_to_Object",
                    "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                    "PY_type_filename": "pyClass1type.cpp",
                    "class_scope": "Class1::",
                    "cxx_class": "Class1",
                    "cxx_type": "Class1",
                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "CLA_SHROUD_capsule_data",
                    "file_scope": "Class1"
                }
            },
            {
                "<CLASS>": "Class2 ****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "getName  15 ****************************************",
                        "ast": {
                            "const": true,
                            "declarator": {
                                "metaattrs": {
                                    "deref": "allocatable",
                                    "intent": "function"
                                },
                                "name": "getName",
                                "params": [],
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ],
                                "typemap_name": "std::string"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        "decl": "const std::string& getName();",
                        "declgen": "const std::string & getName(void)",
                        "doxygen": {
                            "brief": "test helper"
                        },
                        "helpers": {
                            "c": [
                                "array_context",
                                "string_to_cdesc",
                                "copy_string"
                            ],
                            "f": [
                                "array_context",
                                "copy_string",
                                "capsule_dtor"
                            ]
                        },
                        "name": "getName",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "c_function_string_&"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "api": "cdesc",
                                        "deref": "allocatable",
                                        "intent": "function"
                                    },
                                    "stmt": "f_function_string_&_cdesc_allocatable"
                                }
                            },
                            "py": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->getName(\t)",
                                    "C_name": "CLA_Class2_getName",
                                    "C_prototype": "CLA_Class2 * self",
                                    "C_return_type": "const char *",
                                    "F_C_arguments": "self",
                                    "F_C_name": "c_class2_get_name",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "c_const": "const ",
                                    "c_rv_decl": "const char * SHC_rv",
                                    "c_type": "char",
                                    "c_val": "SHCXX_rv.c_str()",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                                    "cxx_type": "std::string",
                                    "cxx_var": "SHCXX_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_CHAR",
                                    "f_type": "character(*)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "c_function_string_&"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->getName(\t)",
                                    "C_name": "CLA_Class2_getName_bufferify",
                                    "C_prototype": "CLA_Class2 * self,\t CLA_SHROUD_array *SHT_rv_cdesc,\t CLA_SHROUD_capsule_data *SHT_rv_capsule",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t SHT_rv_cdesc,\t SHT_rv_capsule",
                                    "F_C_call": "c_class2_get_name_bufferify",
                                    "F_C_name": "c_class2_get_name_bufferify",
                                    "F_C_result_clause": "",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t SHT_rv_cdesc,\t SHT_rv_capsule",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "const ",
                                    "c_helper_array_context": "CLA_SHROUD_array",
                                    "c_helper_copy_string": "CLA_ShroudCopyString",
                                    "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                                    "c_type": "char",
                                    "c_var": "SHC_rv",
                                    "c_var_capsule": "SHT_rv_capsule",
                                    "c_var_cdesc": "SHT_rv_cdesc",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                                    "cxx_type": "std::string",
                                    "cxx_var": "SHCXX_rv",
                                    "f_c_suffix": "_bufferify",
                                    "f_helper_array_context": "CLA_SHROUD_array",
                                    "f_helper_capsule_dtor": "CLA_SHROUD_capsule_dtor",
                                    "f_helper_copy_string": "CLA_SHROUD_copy_string",
                                    "f_intent": "OUT",
                                    "f_kind": "C_CHAR",
                                    "f_type": "character(*)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "f_var_capsule": "SHT_rv_capsule",
                                    "f_var_cdesc": "SHT_rv_cdesc",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "i_var_capsule": "SHT_rv_capsule",
                                    "i_var_cdesc": "SHT_rv_cdesc",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_function_string_&_cdesc_allocatable"
                                },
                                "fmtl": {
                                    "c_var": "SHCXX_rv.c_str()",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_var": "SHCXX_rv",
                                    "push_arg": "SHCXX_rv.c_str()",
                                    "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                    "stmt": "lua_function_string_&"
                                },
                                "fmtpy": {
                                    "array_size": "1",
                                    "c_deref": "",
                                    "c_var": "SHCXX_rv",
                                    "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                    "cxx_type": "std::string",
                                    "cxx_var": "SHCXX_rv",
                                    "data_var": "SHData_rv",
                                    "numpy_type": null,
                                    "py_var": "SHTPy_rv",
                                    "size_var": "SHSize_rv",
                                    "stmt": "py_function_string_&",
                                    "value_var": "SHValue_rv"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "getName",
                            "F_name_api": "get_name",
                            "F_name_function": "get_name",
                            "F_name_generic": "get_name",
                            "F_name_impl": "class2_get_name",
                            "LUA_name": "getName",
                            "LUA_name_api": "getName",
                            "LUA_name_impl": "l_Class2_getName",
                            "PY_name_impl": "PY_getName",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "getName"
                        }
                    }
                ],
                "name": "Class2",
                "options": {},
                "parse_keyword": "class",
                "scope": "classes::Class2::",
                "typemap_name": "classes::Class2",
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapClass2.h",
                    "C_impl_filename": "wrapClass2.cpp",
                    "C_name_api": "Class2",
                    "C_name_scope": "Class2_",
                    "C_type_name": "CLA_Class2",
                    "F_derived_name": "class2",
                    "F_name_api": "class2",
                    "F_name_scope": "class2_",
                    "LUA_class_reg": "l_Class2_Reg",
                    "LUA_ctor_name": "Class2",
                    "LUA_metadata": "Class2.metatable",
                    "LUA_name_api": "Class2",
                    "LUA_this_call": "SH_this->self->",
                    "LUA_userdata_member": "self",
                    "LUA_userdata_type": "l_Class2_Type",
                    "LUA_userdata_var": "SH_this",
                    "PY_PyObject": "PY_Class2",
                    "PY_PyTypeObject": "PY_Class2_Type",
                    "PY_capsule_name": "PY_Class2_capsule_name",
                    "PY_from_object_func": "PP_Class2_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Class2_to_Object",
                    "PY_to_object_idtor_func": "PP_Class2_to_Object_idtor",
                    "PY_type_filename": "pyClass2type.cpp",
                    "class_scope": "Class2::",
                    "cxx_class": "Class2",
                    "cxx_type": "Class2",
                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "CLA_SHROUD_capsule_data",
                    "file_scope": "Class2"
                }
            },
            {
                "<CLASS>": "Singleton ****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "getReference  16 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "getReference",
                                "params": [],
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ],
                                "typemap_name": "classes::Singleton"
                            },
                            "specifier": [
                                "Singleton"
                            ],
                            "storage": [
                                "static"
                            ],
                            "typemap_name": "classes::Singleton"
                        },
                        "decl": "static Singleton& getReference()",
                        "declgen": "static Singleton & getReference(void)",
                        "name": "getReference",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "function"
                                    },
                                    "stmt": "c_function_shadow_&_capptr"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "function"
                                    },
                                    "stmt": "f_function_shadow_&_capptr"
                                }
                            },
                            "py": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "classes::Singleton::getReference(\t)",
                                    "C_name": "CLA_Singleton_getReference",
                                    "C_prototype": "CLA_Singleton * SHC_rv",
                                    "C_return_type": "CLA_Singleton *",
                                    "F_C_name": "c_singleton_get_reference",
                                    "c_const": "",
                                    "c_type": "CLA_Singleton",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                    "cxx_rv_decl": "classes::Singleton & SHCXX_rv",
                                    "cxx_type": "classes::Singleton",
                                    "cxx_var": "SHCXX_rv",
                                    "f_local_ptr": "SHT_prv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "c_function_shadow_&_capptr"
                                },
                                "fmtf": {
                                    "C_call_function": "classes::Singleton::getReference(\t)",
                                    "C_name": "CLA_Singleton_getReference",
                                    "C_prototype": "CLA_Singleton * SHC_rv",
                                    "C_return_type": "CLA_Singleton *",
                                    "F_C_arguments": "SHT_rv",
                                    "F_C_call": "c_singleton_get_reference",
                                    "F_C_name": "c_singleton_get_reference",
                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "SHT_rv%cxxmem",
                                    "F_arguments": "",
                                    "F_result": "SHT_prv",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_type": "CLA_Singleton",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                    "cxx_rv_decl": "classes::Singleton & SHCXX_rv",
                                    "cxx_type": "classes::Singleton",
                                    "cxx_var": "SHCXX_rv",
                                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                    "f_derived_type": "singleton",
                                    "f_intent": "OUT",
                                    "f_local_ptr": "SHT_prv",
                                    "f_type": "type(singleton)",
                                    "f_type_module": "classes_mod",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_function_shadow_&_capptr"
                                },
                                "fmtpy": {
                                    "PY_to_object_idtor_func": "PP_Singleton_to_Object_idtor",
                                    "PyObject": "PY_Singleton",
                                    "PyTypeObject": "PY_Singleton_Type",
                                    "array_size": "1",
                                    "c_deref": "",
                                    "c_var": "SHCXX_rv",
                                    "ctor_expr": "SHCXX_rv",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                    "cxx_type": "classes::Singleton",
                                    "cxx_var": "SHCXX_rv",
                                    "data_var": "SHData_rv",
                                    "numpy_type": null,
                                    "py_var": "SHTPy_rv",
                                    "size_var": "SHSize_rv",
                                    "stmt": "py_function_shadow_&",
                                    "value_var": "SHValue_rv"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "classes::Singleton::",
                            "C_name_api": "getReference",
                            "F_name_api": "get_reference",
                            "F_name_function": "get_reference",
                            "F_name_generic": "get_reference",
                            "F_name_impl": "singleton_get_reference",
                            "PY_name_impl": "PY_getReference",
                            "PY_this_call": "classes::Singleton::",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "getReference"
                        }
                    }
                ],
                "name": "Singleton",
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false
                },
                "parse_keyword": "class",
                "scope": "classes::Singleton::",
                "typemap_name": "classes::Singleton",
                "user_fmt": {
                    "F_name_associated": "",
                    "F_name_instance_get": "",
                    "F_name_instance_set": ""
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapSingleton.h",
                    "C_impl_filename": "wrapSingleton.cpp",
                    "C_name_api": "Singleton",
                    "C_name_scope": "Singleton_",
                    "C_type_name": "CLA_Singleton",
                    "F_derived_name": "singleton",
                    "F_name_api": "singleton",
                    "F_name_associated": null,
                    "F_name_instance_get": null,
                    "F_name_instance_set": null,
                    "F_name_scope": "singleton_",
                    "PY_PyObject": "PY_Singleton",
                    "PY_PyTypeObject": "PY_Singleton_Type",
                    "PY_capsule_name": "PY_Singleton_capsule_name",
                    "PY_from_object_func": "PP_Singleton_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Singleton_to_Object",
                    "PY_to_object_idtor_func": "PP_Singleton_to_Object_idtor",
                    "PY_type_filename": "pySingletontype.cpp",
                    "class_scope": "Singleton::",
                    "cxx_class": "Singleton",
                    "cxx_type": "Singleton",
                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "CLA_SHROUD_capsule_data",
                    "file_scope": "Singleton"
                }
            },
            {
                "<CLASS>": "Shape ****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "ctor  17 ****************************************",
                        "_overloaded": true,
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "_constructor": true,
                                    "_name": "ctor"
                                },
                                "metaattrs": {
                                    "intent": "ctor"
                                },
                                "params": [],
                                "typemap_name": "classes::Shape"
                            },
                            "is_ctor": true,
                            "specifier": [
                                "Shape"
                            ],
                            "typemap_name": "classes::Shape"
                        },
                        "decl": "Shape()",
                        "declgen": "Shape(void)",
                        "name": "ctor",
                        "options": {
                            "F_create_generic": true
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "ctor"
                                    },
                                    "stmt": "c_ctor_shadow_scalar_capptr"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "ctor"
                                    },
                                    "stmt": "f_ctor_shadow_scalar_capptr"
                                }
                            },
                            "py": {
                                "+result": {
                                    "meta": {
                                        "intent": "ctor"
                                    }
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "ctor"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->ctor(\t)",
                                    "C_name": "CLA_Shape_ctor",
                                    "C_prototype": "CLA_Shape * SHC_rv",
                                    "C_return_type": "CLA_Shape *",
                                    "F_C_name": "c_shape_ctor",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "CLA_Shape",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "classes::Shape SHCXX_rv",
                                    "cxx_type": "classes::Shape",
                                    "cxx_var": "SHCXX_rv",
                                    "f_local_ptr": "SHT_prv",
                                    "idtor": "2",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "c_ctor_shadow_scalar_capptr"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->ctor(\t)",
                                    "C_name": "CLA_Shape_ctor",
                                    "C_prototype": "CLA_Shape * SHC_rv",
                                    "C_return_type": "CLA_Shape *",
                                    "F_C_arguments": "SHT_rv",
                                    "F_C_call": "c_shape_ctor",
                                    "F_C_name": "c_shape_ctor",
                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "SHT_rv%cxxmem",
                                    "F_arguments": "",
                                    "F_result": "SHT_prv",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "CLA_Shape",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "classes::Shape SHCXX_rv",
                                    "cxx_type": "classes::Shape",
                                    "cxx_var": "SHCXX_rv",
                                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                    "f_derived_type": "shape",
                                    "f_intent": "OUT",
                                    "f_local_ptr": "SHT_prv",
                                    "f_type": "type(shape)",
                                    "f_type_module": "classes_mod",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "2",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_ctor_shadow_scalar_capptr"
                                },
                                "fmtl": {
                                    "c_var": "static_cast<LUAc_constvoid *>(\tSHCXX_rv)",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_var": "SHCXX_rv",
                                    "stmt": "lua_ctor_scalar"
                                },
                                "fmtpy": {
                                    "PY_build_format": "O",
                                    "PY_to_object_idtor_func": "PP_Shape_to_Object_idtor",
                                    "PyObject": "PY_Shape",
                                    "PyTypeObject": "PY_Shape_Type",
                                    "c_deref": "",
                                    "c_var": "SHCXX_rv",
                                    "ctor_expr": "SHCXX_rv",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                    "cxx_type": "classes::Shape",
                                    "cxx_var": "SHCXX_rv",
                                    "data_var": "SHData_rv",
                                    "numpy_type": null,
                                    "py_var": "SHTPy_rv",
                                    "size_var": "SHSize_rv",
                                    "stmt": "py_default",
                                    "value_var": "SHValue_rv",
                                    "vargs": "SHCXX_rv"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "ctor",
                            "F_name_api": "ctor",
                            "F_name_function": "ctor",
                            "F_name_generic": "shape",
                            "F_name_impl": "shape_ctor",
                            "LUA_name": "ctor",
                            "LUA_name_api": "ctor",
                            "LUA_name_impl": "l_Shape_ctor",
                            "PY_name_impl": "PY_Shape_tp_init",
                            "PY_type_impl": "PY_Shape_tp_init",
                            "PY_type_method": "tp_init",
                            "function_name": "ctor"
                        }
                    },
                    {
                        "<FUNCTION>": "get_ivar  18 ****************************************",
                        "ast": {
                            "declarator": {
                                "func_const": true,
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "get_ivar",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int get_ivar() const",
                        "declgen": "int get_ivar(void) const",
                        "name": "get_ivar",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "c_function_native_scalar"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "f_function_native_scalar"
                                }
                            },
                            "py": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->get_ivar(\t)",
                                    "C_name": "CLA_Shape_get_ivar",
                                    "C_prototype": "const CLA_Shape * self",
                                    "C_return_type": "int",
                                    "F_C_name": "c_shape_get_ivar",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHC_rv",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "c_function_native_scalar"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->get_ivar(\t)",
                                    "C_name": "CLA_Shape_get_ivar",
                                    "C_prototype": "const CLA_Shape * self",
                                    "C_return_type": "int",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_shape_get_ivar",
                                    "F_C_name": "c_shape_get_ivar",
                                    "F_C_pure_clause": "pure ",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHC_rv",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_function_native_scalar"
                                },
                                "fmtl": {
                                    "c_var": "SHCXX_rv",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_var": "SHCXX_rv",
                                    "push_arg": "SHCXX_rv",
                                    "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                    "stmt": "lua_function_native_scalar"
                                },
                                "fmtpy": {
                                    "c_deref": "",
                                    "c_var": "SHCXX_rv",
                                    "ctor_expr": "SHCXX_rv",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHCXX_rv",
                                    "data_var": "SHData_rv",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHTPy_rv",
                                    "size_var": "SHSize_rv",
                                    "stmt": "py_function_native_scalar",
                                    "value_var": "SHValue_rv"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "get_ivar",
                            "F_name_api": "get_ivar",
                            "F_name_function": "get_ivar",
                            "F_name_generic": "get_ivar",
                            "F_name_impl": "shape_get_ivar",
                            "LUA_name": "get_ivar",
                            "LUA_name_api": "get_ivar",
                            "LUA_name_impl": "l_Shape_get_ivar",
                            "PY_name_impl": "PY_get_ivar",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "get_ivar"
                        }
                    }
                ],
                "name": "Shape",
                "options": {},
                "parse_keyword": "class",
                "scope": "classes::Shape::",
                "typemap_name": "classes::Shape",
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapShape.h",
                    "C_impl_filename": "wrapShape.cpp",
                    "C_name_api": "Shape",
                    "C_name_scope": "Shape_",
                    "C_type_name": "CLA_Shape",
                    "F_derived_name": "shape",
                    "F_name_api": "shape",
                    "F_name_scope": "shape_",
                    "LUA_class_reg": "l_Shape_Reg",
                    "LUA_ctor_name": "Shape",
                    "LUA_metadata": "Shape.metatable",
                    "LUA_name_api": "Shape",
                    "LUA_this_call": "SH_this->self->",
                    "LUA_userdata_member": "self",
                    "LUA_userdata_type": "l_Shape_Type",
                    "LUA_userdata_var": "SH_this",
                    "PY_PyObject": "PY_Shape",
                    "PY_PyTypeObject": "PY_Shape_Type",
                    "PY_capsule_name": "PY_Shape_capsule_name",
                    "PY_from_object_func": "PP_Shape_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Shape_to_Object",
                    "PY_to_object_idtor_func": "PP_Shape_to_Object_idtor",
                    "PY_type_filename": "pyShapetype.cpp",
                    "class_scope": "Shape::",
                    "cxx_class": "Shape",
                    "cxx_type": "Shape",
                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "CLA_SHROUD_capsule_data",
                    "file_scope": "Shape"
                }
            },
            {
                "<CLASS>": "Circle ****************************************",
                "baseclass": [
                    [
                        "public",
                        "Shape",
                        "classes::Shape"
                    ]
                ],
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "ctor  19 ****************************************",
                        "_overloaded": true,
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "_constructor": true,
                                    "_name": "ctor"
                                },
                                "metaattrs": {
                                    "intent": "ctor"
                                },
                                "params": [],
                                "typemap_name": "classes::Circle"
                            },
                            "is_ctor": true,
                            "specifier": [
                                "Circle"
                            ],
                            "typemap_name": "classes::Circle"
                        },
                        "decl": "Circle()",
                        "declgen": "Circle(void)",
                        "name": "ctor",
                        "options": {
                            "F_create_generic": true
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "ctor"
                                    },
                                    "stmt": "c_ctor_shadow_scalar_capptr"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "ctor"
                                    },
                                    "stmt": "f_ctor_shadow_scalar_capptr"
                                }
                            },
                            "py": {
                                "+result": {
                                    "meta": {
                                        "intent": "ctor"
                                    }
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "ctor"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->ctor(\t)",
                                    "C_name": "CLA_Circle_ctor",
                                    "C_prototype": "CLA_Circle * SHC_rv",
                                    "C_return_type": "CLA_Circle *",
                                    "F_C_name": "c_circle_ctor",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "CLA_Circle",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "classes::Circle SHCXX_rv",
                                    "cxx_type": "classes::Circle",
                                    "cxx_var": "SHCXX_rv",
                                    "f_local_ptr": "SHT_prv",
                                    "idtor": "3",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "c_ctor_shadow_scalar_capptr"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->ctor(\t)",
                                    "C_name": "CLA_Circle_ctor",
                                    "C_prototype": "CLA_Circle * SHC_rv",
                                    "C_return_type": "CLA_Circle *",
                                    "F_C_arguments": "SHT_rv",
                                    "F_C_call": "c_circle_ctor",
                                    "F_C_name": "c_circle_ctor",
                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "SHT_rv%cxxmem",
                                    "F_arguments": "",
                                    "F_result": "SHT_prv",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "CLA_Circle",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "classes::Circle SHCXX_rv",
                                    "cxx_type": "classes::Circle",
                                    "cxx_var": "SHCXX_rv",
                                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                    "f_derived_type": "circle",
                                    "f_intent": "OUT",
                                    "f_local_ptr": "SHT_prv",
                                    "f_type": "type(circle)",
                                    "f_type_module": "classes_mod",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "3",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_ctor_shadow_scalar_capptr"
                                },
                                "fmtl": {
                                    "c_var": "static_cast<LUAc_constvoid *>(\tSHCXX_rv)",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_var": "SHCXX_rv",
                                    "stmt": "lua_ctor_scalar"
                                },
                                "fmtpy": {
                                    "PY_build_format": "O",
                                    "PY_to_object_idtor_func": "PP_Circle_to_Object_idtor",
                                    "PyObject": "PY_Circle",
                                    "PyTypeObject": "PY_Circle_Type",
                                    "c_deref": "",
                                    "c_var": "SHCXX_rv",
                                    "ctor_expr": "SHCXX_rv",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                    "cxx_type": "classes::Circle",
                                    "cxx_var": "SHCXX_rv",
                                    "data_var": "SHData_rv",
                                    "numpy_type": null,
                                    "py_var": "SHTPy_rv",
                                    "size_var": "SHSize_rv",
                                    "stmt": "py_default",
                                    "value_var": "SHValue_rv",
                                    "vargs": "SHCXX_rv"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "ctor",
                            "F_name_api": "ctor",
                            "F_name_function": "ctor",
                            "F_name_generic": "circle",
                            "F_name_impl": "circle_ctor",
                            "LUA_name": "ctor",
                            "LUA_name_api": "ctor",
                            "LUA_name_impl": "l_Circle_ctor",
                            "PY_name_impl": "PY_Circle_tp_init",
                            "PY_type_impl": "PY_Circle_tp_init",
                            "PY_type_method": "tp_init",
                            "function_name": "ctor"
                        }
                    }
                ],
                "name": "Circle",
                "options": {},
                "parse_keyword": "class",
                "scope": "classes::Circle::",
                "typemap_name": "classes::Circle",
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapCircle.h",
                    "C_impl_filename": "wrapCircle.cpp",
                    "C_name_api": "Circle",
                    "C_name_scope": "Circle_",
                    "C_type_name": "CLA_Circle",
                    "F_derived_member_base": "shape",
                    "F_derived_name": "circle",
                    "F_name_api": "circle",
                    "F_name_scope": "circle_",
                    "LUA_class_reg": "l_Circle_Reg",
                    "LUA_ctor_name": "Circle",
                    "LUA_metadata": "Circle.metatable",
                    "LUA_name_api": "Circle",
                    "LUA_this_call": "SH_this->self->",
                    "LUA_userdata_member": "self",
                    "LUA_userdata_type": "l_Circle_Type",
                    "LUA_userdata_var": "SH_this",
                    "PY_PyObject": "PY_Circle",
                    "PY_PyTypeObject": "PY_Circle_Type",
                    "PY_PyTypeObject_base": "PY_Shape_Type",
                    "PY_capsule_name": "PY_Circle_capsule_name",
                    "PY_from_object_func": "PP_Circle_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Circle_to_Object",
                    "PY_to_object_idtor_func": "PP_Circle_to_Object_idtor",
                    "PY_type_filename": "pyCircletype.cpp",
                    "class_scope": "Circle::",
                    "cxx_class": "Circle",
                    "cxx_type": "Circle",
                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "CLA_SHROUD_capsule_data",
                    "file_scope": "Circle"
                }
            },
            {
                "<CLASS>": "Data ****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "allocate  20 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "allocate",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "n",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void allocate(int n);",
                        "declgen": "void allocate(int n +value)",
                        "name": "allocate",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    },
                                    "stmt": "c_subroutine"
                                },
                                "n": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "c_in_native_scalar"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    },
                                    "stmt": "f_subroutine"
                                },
                                "n": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "f_in_native_scalar"
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    }
                                },
                                "n": {
                                    "meta": {
                                        "intent": "in"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->allocate(\tn)",
                                    "C_call_list": "n",
                                    "C_name": "CLA_Data_allocate",
                                    "C_prototype": "CLA_Data * self,\t int n",
                                    "C_return_type": "void",
                                    "F_C_name": "c_data_allocate",
                                    "stmt_name": "c_subroutine"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->allocate(\tn)",
                                    "C_call_list": "n",
                                    "C_name": "CLA_Data_allocate",
                                    "C_prototype": "CLA_Data * self,\t int n",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t n",
                                    "F_C_call": "c_data_allocate",
                                    "F_C_name": "c_data_allocate",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t n",
                                    "F_arguments": "obj,\t n",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_subroutine"
                                }
                            },
                            "n": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "n",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&n",
                                    "cxx_type": "int",
                                    "cxx_var": "n",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "c_in_native_scalar"
                                },
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "n",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&n",
                                    "cxx_type": "int",
                                    "cxx_var": "n",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "n",
                                    "fc_var": "n",
                                    "i_var": "n",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_in_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "allocate",
                            "F_name_api": "allocate",
                            "F_name_function": "allocate",
                            "F_name_generic": "allocate",
                            "F_name_impl": "data_allocate",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "allocate"
                        }
                    },
                    {
                        "<FUNCTION>": "free  21 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "free",
                                "params": [],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void free();",
                        "declgen": "void free(void)",
                        "name": "free",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    },
                                    "stmt": "c_subroutine"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    },
                                    "stmt": "f_subroutine"
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->free(\t)",
                                    "C_name": "CLA_Data_free",
                                    "C_prototype": "CLA_Data * self",
                                    "C_return_type": "void",
                                    "F_C_name": "c_data_free",
                                    "stmt_name": "c_subroutine"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->free(\t)",
                                    "C_name": "CLA_Data_free",
                                    "C_prototype": "CLA_Data * self",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_data_free",
                                    "F_C_name": "c_data_free",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_subroutine"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "free",
                            "F_name_api": "free",
                            "F_name_function": "free",
                            "F_name_generic": "free",
                            "F_name_impl": "data_free",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "free"
                        }
                    },
                    {
                        "<FUNCTION>": "ctor  22 ****************************************",
                        "_overloaded": true,
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "_constructor": true,
                                    "_name": "ctor"
                                },
                                "metaattrs": {
                                    "intent": "ctor"
                                },
                                "params": [],
                                "typemap_name": "classes::Data"
                            },
                            "is_ctor": true,
                            "specifier": [
                                "Data"
                            ],
                            "typemap_name": "classes::Data"
                        },
                        "decl": "Data()",
                        "declgen": "Data(void)",
                        "name": "ctor",
                        "options": {
                            "F_create_generic": true
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "ctor"
                                    },
                                    "stmt": "c_ctor_shadow_scalar_capptr"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "ctor"
                                    },
                                    "stmt": "f_ctor_shadow_scalar_capptr"
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "ctor"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->ctor(\t)",
                                    "C_name": "CLA_Data_ctor",
                                    "C_prototype": "CLA_Data * SHC_rv",
                                    "C_return_type": "CLA_Data *",
                                    "F_C_name": "c_data_ctor",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "CLA_Data",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "classes::Data SHCXX_rv",
                                    "cxx_type": "classes::Data",
                                    "cxx_var": "SHCXX_rv",
                                    "f_local_ptr": "SHT_prv",
                                    "idtor": "4",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "c_ctor_shadow_scalar_capptr"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->ctor(\t)",
                                    "C_name": "CLA_Data_ctor",
                                    "C_prototype": "CLA_Data * SHC_rv",
                                    "C_return_type": "CLA_Data *",
                                    "F_C_arguments": "SHT_rv",
                                    "F_C_call": "c_data_ctor",
                                    "F_C_name": "c_data_ctor",
                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "SHT_rv%cxxmem",
                                    "F_arguments": "",
                                    "F_result": "SHT_prv",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "CLA_Data",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "classes::Data SHCXX_rv",
                                    "cxx_type": "classes::Data",
                                    "cxx_var": "SHCXX_rv",
                                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                    "f_derived_type": "data",
                                    "f_intent": "OUT",
                                    "f_local_ptr": "SHT_prv",
                                    "f_type": "type(data)",
                                    "f_type_module": "classes_mod",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "4",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_ctor_shadow_scalar_capptr"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "ctor",
                            "F_name_api": "ctor",
                            "F_name_function": "ctor",
                            "F_name_generic": "data",
                            "F_name_impl": "data_ctor",
                            "function_name": "ctor"
                        }
                    },
                    {
                        "<FUNCTION>": "dtor  23 ****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "_destructor": "Data",
                                    "_name": "dtor"
                                },
                                "metaattrs": {
                                    "intent": "dtor"
                                },
                                "params": [],
                                "typemap_name": "void"
                            },
                            "is_dtor": "Data",
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "~Data()",
                        "declgen": "~Data(void)",
                        "name": "dtor",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "dtor"
                                    },
                                    "stmt": "c_dtor"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "dtor"
                                    },
                                    "stmt": "f_dtor"
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "dtor"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->dtor(\t)",
                                    "C_name": "CLA_Data_dtor",
                                    "C_prototype": "CLA_Data * self",
                                    "C_return_type": "void",
                                    "F_C_name": "c_data_dtor",
                                    "stmt_name": "c_dtor"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->dtor(\t)",
                                    "C_name": "CLA_Data_dtor",
                                    "C_prototype": "CLA_Data * self",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_data_dtor",
                                    "F_C_name": "c_data_dtor",
                                    "F_C_result_clause": "",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_dtor"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "dtor",
                            "F_name_api": "dtor",
                            "F_name_function": "dtor",
                            "F_name_generic": "dtor",
                            "F_name_impl": "data_dtor",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "dtor"
                        }
                    },
                    {
                        "<FUNCTION>": "get_nitems  24 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "name": "get_nitems",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int get_nitems()",
                        "declgen": "int get_nitems(void)",
                        "name": "get_nitems",
                        "options": {},
                        "user_fmt": {
                            "field_name": "nitems",
                            "struct_name": "Data",
                            "wrapped_name": "nitems"
                        },
                        "wrap": {
                            "fortran": true
                        },
                        "zz_bind": {
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "getter"
                                    },
                                    "stmt": "f_getter_native_scalar"
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtf": {
                                    "C_call_function": "SH_this->get_nitems(\t)",
                                    "C_name": "CLA_Data_get_nitems",
                                    "C_prototype": "CLA_Data * self",
                                    "C_return_type": "int",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_data_get_nitems",
                                    "F_C_name": "c_data_get_nitems",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_getter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "get_nitems",
                            "F_name_api": "get_nitems",
                            "F_name_function": "get_nitems",
                            "F_name_generic": "get_nitems",
                            "F_name_impl": "data_get_nitems",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "nitems",
                            "function_name": "get_nitems",
                            "struct_name": "Data",
                            "wrapped_name": "nitems"
                        }
                    },
                    {
                        "<FUNCTION>": "set_nitems  25 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "setter"
                                },
                                "name": "set_nitems",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "in",
                                                "value": true
                                            },
                                            "name": "val",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_nitems(int val)",
                        "declgen": "void set_nitems(int val +intent(in)+value)",
                        "name": "set_nitems",
                        "options": {},
                        "user_fmt": {
                            "field_name": "nitems",
                            "struct_name": "Data",
                            "wrapped_name": "nitems"
                        },
                        "wrap": {
                            "fortran": true
                        },
                        "zz_bind": {
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "setter"
                                    },
                                    "stmt": "f_setter"
                                },
                                "val": {
                                    "meta": {
                                        "intent": "setter"
                                    },
                                    "stmt": "f_setter_native_scalar"
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    }
                                },
                                "val": {
                                    "meta": {
                                        "intent": "in"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtf": {
                                    "C_call_function": "SH_this->set_nitems(\tval)",
                                    "C_call_list": "val",
                                    "C_name": "CLA_Data_set_nitems",
                                    "C_prototype": "CLA_Data * self,\t int val",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t val",
                                    "F_C_call": "c_data_set_nitems",
                                    "F_C_name": "c_data_set_nitems",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t val",
                                    "F_arguments": "obj,\t val",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_setter"
                                }
                            },
                            "val": {
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "val",
                                    "fc_var": "val",
                                    "i_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "set_nitems",
                            "F_name_api": "set_nitems",
                            "F_name_function": "set_nitems",
                            "F_name_generic": "set_nitems",
                            "F_name_impl": "data_set_nitems",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "nitems",
                            "function_name": "set_nitems",
                            "struct_name": "Data",
                            "wrapped_name": "nitems"
                        }
                    },
                    {
                        "<FUNCTION>": "get_items  26 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "dimension": [
                                        {
                                            "name": "nitems"
                                        }
                                    ]
                                },
                                "name": "get_items",
                                "params": [],
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int * get_items()",
                        "declgen": "int * get_items(void)",
                        "helpers": {
                            "c": [
                                "type_defines",
                                "array_context"
                            ],
                            "f": [
                                "array_context"
                            ]
                        },
                        "name": "get_items",
                        "options": {},
                        "user_fmt": {
                            "field_name": "items",
                            "struct_name": "Data",
                            "wrapped_name": "items"
                        },
                        "wrap": {
                            "fortran": true
                        },
                        "zz_bind": {
                            "f": {
                                "+result": {
                                    "meta": {
                                        "api": "cdesc",
                                        "deref": "pointer",
                                        "intent": "getter"
                                    },
                                    "stmt": "f_getter_native_*_cdesc_pointer"
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtf": {
                                    "C_call_function": "SH_this->get_items(\t)",
                                    "C_name": "CLA_Data_get_items",
                                    "C_prototype": "CLA_Data * self,\t CLA_SHROUD_array *SHT_rv_cdesc",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t SHT_rv_cdesc",
                                    "F_C_call": "c_data_get_items",
                                    "F_C_name": "c_data_get_items",
                                    "F_C_result_clause": "",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t SHT_rv_cdesc",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_array_shape": "\nSHT_rv_cdesc->shape[0] = SH_this->nitems;",
                                    "c_array_size": "SHT_rv_cdesc->shape[0]",
                                    "c_array_size2": "SH_this->nitems",
                                    "c_const": "",
                                    "c_helper_array_context": "CLA_SHROUD_array",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "c_var_cdesc": "SHT_rv_cdesc",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_rv_decl": "int * SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "f_array_allocate": "(SHT_rv_cdesc%shape(1))",
                                    "f_array_shape": ",\t SHT_rv_cdesc%shape(1:1)",
                                    "f_assumed_shape": "(:)",
                                    "f_cdesc_shape": "\nSHT_rv_cdesc%shape(1:1) = shape(SHT_rv)",
                                    "f_helper_array_context": "CLA_SHROUD_array",
                                    "f_intent": "OUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "f_var_cdesc": "SHT_rv_cdesc",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "i_var_cdesc": "SHT_rv_cdesc",
                                    "idtor": "0",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_getter_native_*_cdesc_pointer"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "get_items",
                            "F_name_api": "get_items",
                            "F_name_function": "get_items",
                            "F_name_generic": "get_items",
                            "F_name_impl": "data_get_items",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "items",
                            "function_name": "get_items",
                            "struct_name": "Data",
                            "wrapped_name": "items"
                        }
                    },
                    {
                        "<FUNCTION>": "set_items  27 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "setter"
                                },
                                "name": "set_items",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "in",
                                                "rank": 1
                                            },
                                            "metaattrs": {
                                                "dimension": [
                                                    {
                                                        "name": "nitems"
                                                    }
                                                ]
                                            },
                                            "name": "val",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                }
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_items(int * val)",
                        "declgen": "void set_items(int * val +intent(in)+rank(1))",
                        "name": "set_items",
                        "options": {},
                        "user_fmt": {
                            "field_name": "items",
                            "struct_name": "Data",
                            "wrapped_name": "items"
                        },
                        "wrap": {
                            "fortran": true
                        },
                        "zz_bind": {
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "setter"
                                    },
                                    "stmt": "f_setter"
                                },
                                "val": {
                                    "meta": {
                                        "intent": "setter"
                                    },
                                    "stmt": "f_setter_native_*"
                                }
                            },
                            "share": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    }
                                },
                                "val": {
                                    "meta": {
                                        "intent": "in"
                                    }
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtf": {
                                    "C_call_function": "SH_this->set_items(\tval)",
                                    "C_call_list": "val",
                                    "C_name": "CLA_Data_set_items",
                                    "C_prototype": "CLA_Data * self,\t int * val",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t val",
                                    "F_C_call": "c_data_set_items",
                                    "F_C_name": "c_data_set_items",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t val",
                                    "F_arguments": "obj,\t val",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_setter"
                                }
                            },
                            "val": {
                                "fmtf": {
                                    "c_addr": "",
                                    "c_array_size2": "SH_this->nitems",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "f_assumed_shape": "(:)",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "val",
                                    "fc_var": "val",
                                    "i_dimension": "(*)",
                                    "i_var": "val",
                                    "idtor": "0",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_INT",
                                    "size": "size(val)",
                                    "stmt_name": "f_setter_native_*"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "set_items",
                            "F_name_api": "set_items",
                            "F_name_function": "set_items",
                            "F_name_generic": "set_items",
                            "F_name_impl": "data_set_items",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "items",
                            "function_name": "set_items",
                            "struct_name": "Data",
                            "wrapped_name": "items"
                        }
                    }
                ],
                "name": "Data",
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "parse_keyword": "class",
                "scope": "classes::Data::",
                "typemap_name": "classes::Data",
                "user_fmt": {
                    "F_name_associated": "",
                    "F_name_instance_get": "",
                    "F_name_instance_set": ""
                },
                "variables": [
                    {
                        "<VARIABLE>": "nitems ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "nitems",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "nitems",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "nitems",
                            "variable_lower": "nitems",
                            "variable_name": "nitems",
                            "variable_upper": "NITEMS"
                        }
                    },
                    {
                        "<VARIABLE>": "items ****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "nitems"
                                },
                                "metaattrs": {
                                    "dimension": [
                                        {
                                            "name": "nitems"
                                        }
                                    ]
                                },
                                "name": "items",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "items",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "items",
                            "variable_lower": "items",
                            "variable_name": "items",
                            "variable_upper": "ITEMS"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapData.h",
                    "C_impl_filename": "wrapData.cpp",
                    "C_name_api": "Data",
                    "C_name_scope": "Data_",
                    "C_type_name": "CLA_Data",
                    "F_derived_name": "data",
                    "F_name_api": "data",
                    "F_name_associated": null,
                    "F_name_instance_get": null,
                    "F_name_instance_set": null,
                    "F_name_scope": "data_",
                    "class_scope": "Data::",
                    "cxx_class": "Data",
                    "cxx_type": "Data",
                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "CLA_SHROUD_capsule_data",
                    "file_scope": "Data"
                }
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "classes.hpp"
        ],
        "functions": [
            {
                "<FUNCTION>": "directionFunc  28 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "directionFunc",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "classes::Class1::DIRECTION"
                                },
                                "specifier": [
                                    "Class1::DIRECTION"
                                ],
                                "typemap_name": "classes::Class1::DIRECTION"
                            }
                        ],
                        "typemap_name": "classes::Class1::DIRECTION"
                    },
                    "specifier": [
                        "Class1::DIRECTION"
                    ],
                    "typemap_name": "classes::Class1::DIRECTION"
                },
                "decl": "Class1::DIRECTION directionFunc(Class1::DIRECTION arg);",
                "declgen": "Class1::DIRECTION directionFunc(Class1::DIRECTION arg +value)",
                "name": "directionFunc",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "classes::directionFunc(\tSHCXX_arg)",
                            "C_call_list": "SHCXX_arg",
                            "C_name": "CLA_directionFunc",
                            "C_prototype": "int arg",
                            "C_return_type": "int",
                            "F_C_name": "c_direction_func",
                            "c_const": "",
                            "c_get_value": "",
                            "c_rv_decl": "int SHC_rv",
                            "c_type": "int",
                            "c_val": "static_cast<int>(SHCXX_rv)",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_rv_decl": "classes::Class1::DIRECTION SHCXX_rv",
                            "cxx_type": "classes::Class1::DIRECTION",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "classes::directionFunc(\tSHCXX_arg)",
                            "C_call_list": "SHCXX_arg",
                            "C_name": "CLA_directionFunc",
                            "C_prototype": "int arg",
                            "C_return_type": "int",
                            "F_C_arguments": "arg",
                            "F_C_call": "c_direction_func",
                            "F_C_name": "direction_func",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "arg",
                            "F_arguments": "arg",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_rv_decl": "int SHC_rv",
                            "c_type": "int",
                            "c_val": "static_cast<int>(SHCXX_rv)",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_rv_decl": "classes::Class1::DIRECTION SHCXX_rv",
                            "cxx_type": "classes::Class1::DIRECTION",
                            "cxx_var": "SHCXX_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtl": {
                            "c_var": "static_cast<int>(SHCXX_rv)",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_var": "SHCXX_rv",
                            "push_arg": "static_cast<int>(SHCXX_rv)",
                            "push_expr": "lua_pushinteger(L, static_cast<int>(SHCXX_rv))",
                            "stmt": "lua_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "classes::Class1::DIRECTION",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_decl": "classes::Class1::DIRECTION SHCXX_arg",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg",
                            "cxx_type": "classes::Class1::DIRECTION",
                            "cxx_val": "static_cast<classes::Class1::DIRECTION>(arg)",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_decl": "classes::Class1::DIRECTION SHCXX_arg",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg",
                            "cxx_type": "classes::Class1::DIRECTION",
                            "cxx_val": "static_cast<classes::Class1::DIRECTION>(arg)",
                            "cxx_var": "SHCXX_arg",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "classes::Class1::DIRECTION",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg",
                            "pop_expr": "static_cast<classes::Class1::DIRECTION>(lua_tointeger(L, 1))",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "classes::Class1::DIRECTION SH_arg",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "classes::Class1::DIRECTION",
                            "cxx_val": "static_cast<classes::Class1::DIRECTION>(arg)",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "directionFunc",
                    "F_name_api": "direction_func",
                    "F_name_function": "direction_func",
                    "F_name_generic": "direction_func",
                    "F_name_impl": "direction_func",
                    "LUA_name": "directionFunc",
                    "LUA_name_api": "directionFunc",
                    "LUA_name_impl": "l_directionFunc",
                    "PY_name_impl": "PY_directionFunc",
                    "function_name": "directionFunc"
                }
            },
            {
                "<FUNCTION>": "passClassByValue  29 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "passClassByValue",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "classes::Class1"
                                },
                                "specifier": [
                                    "Class1"
                                ],
                                "typemap_name": "classes::Class1"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passClassByValue(Class1 arg)",
                "declgen": "void passClassByValue(Class1 arg +value)",
                "doxygen": {
                    "brief": "Pass arguments to a function."
                },
                "name": "passClassByValue",
                "options": {
                    "wrap_lua": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_shadow_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_shadow_scalar"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "classes::passClassByValue(\t*SHCXX_arg)",
                            "C_call_list": "*SHCXX_arg",
                            "C_name": "CLA_passClassByValue",
                            "C_prototype": "CLA_Class1 arg",
                            "C_return_type": "void",
                            "F_C_name": "c_pass_class_by_value",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "classes::passClassByValue(\t*SHCXX_arg)",
                            "C_call_list": "*SHCXX_arg",
                            "C_name": "CLA_passClassByValue",
                            "C_prototype": "CLA_Class1 arg",
                            "C_return_type": "void",
                            "F_C_arguments": "arg",
                            "F_C_call": "c_pass_class_by_value",
                            "F_C_name": "c_pass_class_by_value",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg%cxxmem",
                            "F_arguments": "arg",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "CLA_Class1",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_arg",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_shadow_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "CLA_Class1",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_arg",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_arg",
                            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                            "f_derived_type": "class1",
                            "f_intent": "IN",
                            "f_type": "type(class1)",
                            "f_type_module": "classes_mod",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_shadow_scalar"
                        },
                        "fmtpy": {
                            "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                            "PyObject": "PY_Class1",
                            "PyTypeObject": "PY_Class1_Type",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "CLA_Class1",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": null,
                            "py_object": "PY_Class1",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_in_shadow_scalar",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passClassByValue",
                    "F_name_api": "pass_class_by_value",
                    "F_name_function": "pass_class_by_value",
                    "F_name_generic": "pass_class_by_value",
                    "F_name_impl": "pass_class_by_value",
                    "PY_name_impl": "PY_passClassByValue",
                    "function_name": "passClassByValue"
                }
            },
            {
                "<FUNCTION>": "useclass  30 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "useclass",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "classes::Class1"
                                },
                                "specifier": [
                                    "Class1"
                                ],
                                "typemap_name": "classes::Class1"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int useclass(const Class1 *arg)",
                "declgen": "int useclass(const Class1 * arg)",
                "name": "useclass",
                "options": {
                    "wrap_lua": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_shadow_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_shadow_*"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "classes::useclass(\tSHCXX_arg)",
                            "C_call_list": "SHCXX_arg",
                            "C_name": "CLA_useclass",
                            "C_prototype": "CLA_Class1 * arg",
                            "C_return_type": "int",
                            "F_C_name": "c_useclass",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "classes::useclass(\tSHCXX_arg)",
                            "C_call_list": "SHCXX_arg",
                            "C_name": "CLA_useclass",
                            "C_prototype": "CLA_Class1 * arg",
                            "C_return_type": "int",
                            "F_C_arguments": "arg",
                            "F_C_call": "c_useclass",
                            "F_C_name": "c_useclass",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "arg%cxxmem",
                            "F_arguments": "arg",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "CLA_Class1",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(SHCXX_arg)",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_shadow_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "CLA_Class1",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(SHCXX_arg)",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_arg",
                            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                            "f_derived_type": "class1",
                            "f_intent": "IN",
                            "f_type": "type(class1)",
                            "f_type_module": "classes_mod",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_shadow_*"
                        },
                        "fmtpy": {
                            "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                            "PyObject": "PY_Class1",
                            "PyTypeObject": "PY_Class1_Type",
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "CLA_Class1",
                            "c_var": "arg",
                            "ctor_expr": "*arg",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(arg)",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": null,
                            "py_object": "PY_Class1",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_in_shadow_*",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "useclass",
                    "F_name_api": "useclass",
                    "F_name_function": "useclass",
                    "F_name_generic": "useclass",
                    "F_name_impl": "useclass",
                    "PY_name_impl": "PY_useclass",
                    "function_name": "useclass"
                }
            },
            {
                "<FUNCTION>": "getclass2  31 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "getclass2",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "classes::Class1"
                    },
                    "specifier": [
                        "Class1"
                    ],
                    "typemap_name": "classes::Class1"
                },
                "decl": "const Class1 *getclass2()",
                "declgen": "const Class1 * getclass2(void)",
                "doxygen": {
                    "brief": "Return const class pointer"
                },
                "name": "getclass2",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "api": "capptr",
                                "intent": "function"
                            },
                            "stmt": "c_function_shadow_*_capptr"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "capptr",
                                "intent": "function"
                            },
                            "stmt": "f_function_shadow_*_capptr"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "classes::getclass2(\t)",
                            "C_name": "CLA_getclass2",
                            "C_prototype": "CLA_Class1 * SHC_rv",
                            "C_return_type": "CLA_Class1 *",
                            "F_C_name": "c_getclass2",
                            "c_const": "const ",
                            "c_type": "CLA_Class1",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const classes::Class1 * SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "f_local_ptr": "SHT_prv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_shadow_*_capptr"
                        },
                        "fmtf": {
                            "C_call_function": "classes::getclass2(\t)",
                            "C_name": "CLA_getclass2",
                            "C_prototype": "CLA_Class1 * SHC_rv",
                            "C_return_type": "CLA_Class1 *",
                            "F_C_arguments": "SHT_rv",
                            "F_C_call": "c_getclass2",
                            "F_C_name": "c_getclass2",
                            "F_C_result_clause": "\fresult(SHT_prv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_result": "SHT_prv",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_type": "CLA_Class1",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const classes::Class1 * SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                            "f_derived_type": "class1",
                            "f_intent": "OUT",
                            "f_local_ptr": "SHT_prv",
                            "f_type": "type(class1)",
                            "f_type_module": "classes_mod",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_shadow_*_capptr"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getclass2",
                    "F_name_api": "getclass2",
                    "F_name_function": "getclass2",
                    "F_name_generic": "getclass2",
                    "F_name_impl": "getclass2",
                    "function_name": "getclass2"
                }
            },
            {
                "<FUNCTION>": "getclass3  32 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "getclass3",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "classes::Class1"
                    },
                    "specifier": [
                        "Class1"
                    ],
                    "typemap_name": "classes::Class1"
                },
                "decl": "Class1 *getclass3()",
                "declgen": "Class1 * getclass3(void)",
                "doxygen": {
                    "brief": "Return class pointer"
                },
                "name": "getclass3",
                "options": {
                    "wrap_lua": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "api": "capptr",
                                "intent": "function"
                            },
                            "stmt": "c_function_shadow_*_capptr"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "capptr",
                                "intent": "function"
                            },
                            "stmt": "f_function_shadow_*_capptr"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "classes::getclass3(\t)",
                            "C_name": "CLA_getclass3",
                            "C_prototype": "CLA_Class1 * SHC_rv",
                            "C_return_type": "CLA_Class1 *",
                            "F_C_name": "c_getclass3",
                            "c_const": "",
                            "c_type": "CLA_Class1",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_rv_decl": "classes::Class1 * SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "f_local_ptr": "SHT_prv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_shadow_*_capptr"
                        },
                        "fmtf": {
                            "C_call_function": "classes::getclass3(\t)",
                            "C_name": "CLA_getclass3",
                            "C_prototype": "CLA_Class1 * SHC_rv",
                            "C_return_type": "CLA_Class1 *",
                            "F_C_arguments": "SHT_rv",
                            "F_C_call": "c_getclass3",
                            "F_C_name": "c_getclass3",
                            "F_C_result_clause": "\fresult(SHT_prv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_result": "SHT_prv",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_type": "CLA_Class1",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_rv_decl": "classes::Class1 * SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                            "f_derived_type": "class1",
                            "f_intent": "OUT",
                            "f_local_ptr": "SHT_prv",
                            "f_type": "type(class1)",
                            "f_type_module": "classes_mod",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_shadow_*_capptr"
                        },
                        "fmtpy": {
                            "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                            "PyObject": "PY_Class1",
                            "PyTypeObject": "PY_Class1_Type",
                            "array_size": "1",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "*SHCXX_rv",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_shadow_*",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getclass3",
                    "F_name_api": "getclass3",
                    "F_name_function": "getclass3",
                    "F_name_generic": "getclass3",
                    "F_name_impl": "getclass3",
                    "PY_name_impl": "PY_getclass3",
                    "function_name": "getclass3"
                }
            },
            {
                "<FUNCTION>": "getclass2_void  33 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "getclass2_void",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "classes::Class1"
                    },
                    "specifier": [
                        "Class1"
                    ],
                    "typemap_name": "classes::Class1"
                },
                "decl": "const Class1 *getclass2_void()",
                "declgen": "const Class1 * getclass2_void(void)",
                "doxygen": {
                    "brief": "C wrapper will return void"
                },
                "name": "getclass2_void",
                "options": {
                    "C_shadow_result": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "api": "capsule",
                                "intent": "function"
                            },
                            "stmt": "c_function_shadow_*_capsule"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "capsule",
                                "intent": "function"
                            },
                            "stmt": "f_function_shadow_*_capsule"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "classes::getclass2_void(\t)",
                            "C_name": "CLA_getclass2_void",
                            "C_prototype": "CLA_Class1 * SHC_rv",
                            "C_return_type": "void",
                            "F_C_name": "c_getclass2_void",
                            "c_const": "const ",
                            "c_type": "CLA_Class1",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const classes::Class1 * SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_shadow_*_capsule"
                        },
                        "fmtf": {
                            "C_call_function": "classes::getclass2_void(\t)",
                            "C_name": "CLA_getclass2_void",
                            "C_prototype": "CLA_Class1 * SHC_rv",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv",
                            "F_C_call": "c_getclass2_void",
                            "F_C_name": "c_getclass2_void",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_type": "CLA_Class1",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const classes::Class1 * SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                            "f_derived_type": "class1",
                            "f_intent": "OUT",
                            "f_type": "type(class1)",
                            "f_type_module": "classes_mod",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_shadow_*_capsule"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getclass2_void",
                    "F_name_api": "getclass2_void",
                    "F_name_function": "getclass2_void",
                    "F_name_generic": "getclass2_void",
                    "F_name_impl": "getclass2_void",
                    "function_name": "getclass2_void"
                }
            },
            {
                "<FUNCTION>": "getclass3_void  34 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "getclass3_void",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "classes::Class1"
                    },
                    "specifier": [
                        "Class1"
                    ],
                    "typemap_name": "classes::Class1"
                },
                "decl": "Class1 *getclass3_void()",
                "declgen": "Class1 * getclass3_void(void)",
                "doxygen": {
                    "brief": "C wrapper will return void"
                },
                "name": "getclass3_void",
                "options": {
                    "C_shadow_result": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "api": "capsule",
                                "intent": "function"
                            },
                            "stmt": "c_function_shadow_*_capsule"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "capsule",
                                "intent": "function"
                            },
                            "stmt": "f_function_shadow_*_capsule"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "classes::getclass3_void(\t)",
                            "C_name": "CLA_getclass3_void",
                            "C_prototype": "CLA_Class1 * SHC_rv",
                            "C_return_type": "void",
                            "F_C_name": "c_getclass3_void",
                            "c_const": "",
                            "c_type": "CLA_Class1",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_rv_decl": "classes::Class1 * SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_shadow_*_capsule"
                        },
                        "fmtf": {
                            "C_call_function": "classes::getclass3_void(\t)",
                            "C_name": "CLA_getclass3_void",
                            "C_prototype": "CLA_Class1 * SHC_rv",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv",
                            "F_C_call": "c_getclass3_void",
                            "F_C_name": "c_getclass3_void",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_type": "CLA_Class1",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_rv_decl": "classes::Class1 * SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                            "f_derived_type": "class1",
                            "f_intent": "OUT",
                            "f_type": "type(class1)",
                            "f_type_module": "classes_mod",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_shadow_*_capsule"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getclass3_void",
                    "F_name_api": "getclass3_void",
                    "F_name_function": "getclass3_void",
                    "F_name_generic": "getclass3_void",
                    "F_name_impl": "getclass3_void",
                    "function_name": "getclass3_void"
                }
            },
            {
                "<FUNCTION>": "getConstClassReference  35 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "getConstClassReference",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ],
                        "typemap_name": "classes::Class1"
                    },
                    "specifier": [
                        "Class1"
                    ],
                    "typemap_name": "classes::Class1"
                },
                "decl": "const Class1 &getConstClassReference()",
                "declgen": "const Class1 & getConstClassReference(void)",
                "name": "getConstClassReference",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "api": "capptr",
                                "intent": "function"
                            },
                            "stmt": "c_function_shadow_&_capptr"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "capptr",
                                "intent": "function"
                            },
                            "stmt": "f_function_shadow_&_capptr"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "classes::getConstClassReference(\t)",
                            "C_name": "CLA_getConstClassReference",
                            "C_prototype": "CLA_Class1 * SHC_rv",
                            "C_return_type": "CLA_Class1 *",
                            "F_C_name": "c_get_const_class_reference",
                            "c_const": "const ",
                            "c_type": "CLA_Class1",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const classes::Class1 & SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "f_local_ptr": "SHT_prv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_shadow_&_capptr"
                        },
                        "fmtf": {
                            "C_call_function": "classes::getConstClassReference(\t)",
                            "C_name": "CLA_getConstClassReference",
                            "C_prototype": "CLA_Class1 * SHC_rv",
                            "C_return_type": "CLA_Class1 *",
                            "F_C_arguments": "SHT_rv",
                            "F_C_call": "c_get_const_class_reference",
                            "F_C_name": "c_get_const_class_reference",
                            "F_C_result_clause": "\fresult(SHT_prv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_result": "SHT_prv",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_type": "CLA_Class1",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const classes::Class1 & SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                            "f_derived_type": "class1",
                            "f_intent": "OUT",
                            "f_local_ptr": "SHT_prv",
                            "f_type": "type(class1)",
                            "f_type_module": "classes_mod",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_shadow_&_capptr"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getConstClassReference",
                    "F_name_api": "get_const_class_reference",
                    "F_name_function": "get_const_class_reference",
                    "F_name_generic": "get_const_class_reference",
                    "F_name_impl": "get_const_class_reference",
                    "function_name": "getConstClassReference"
                }
            },
            {
                "<FUNCTION>": "getClassReference  36 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "getClassReference",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ],
                        "typemap_name": "classes::Class1"
                    },
                    "specifier": [
                        "Class1"
                    ],
                    "typemap_name": "classes::Class1"
                },
                "decl": "Class1 &getClassReference()",
                "declgen": "Class1 & getClassReference(void)",
                "name": "getClassReference",
                "options": {
                    "wrap_lua": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "api": "capptr",
                                "intent": "function"
                            },
                            "stmt": "c_function_shadow_&_capptr"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "capptr",
                                "intent": "function"
                            },
                            "stmt": "f_function_shadow_&_capptr"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "classes::getClassReference(\t)",
                            "C_name": "CLA_getClassReference",
                            "C_prototype": "CLA_Class1 * SHC_rv",
                            "C_return_type": "CLA_Class1 *",
                            "F_C_name": "c_get_class_reference",
                            "c_const": "",
                            "c_type": "CLA_Class1",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_rv_decl": "classes::Class1 & SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "f_local_ptr": "SHT_prv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_shadow_&_capptr"
                        },
                        "fmtf": {
                            "C_call_function": "classes::getClassReference(\t)",
                            "C_name": "CLA_getClassReference",
                            "C_prototype": "CLA_Class1 * SHC_rv",
                            "C_return_type": "CLA_Class1 *",
                            "F_C_arguments": "SHT_rv",
                            "F_C_call": "c_get_class_reference",
                            "F_C_name": "c_get_class_reference",
                            "F_C_result_clause": "\fresult(SHT_prv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_result": "SHT_prv",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_type": "CLA_Class1",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_rv_decl": "classes::Class1 & SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                            "f_derived_type": "class1",
                            "f_intent": "OUT",
                            "f_local_ptr": "SHT_prv",
                            "f_type": "type(class1)",
                            "f_type_module": "classes_mod",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_shadow_&_capptr"
                        },
                        "fmtpy": {
                            "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                            "PyObject": "PY_Class1",
                            "PyTypeObject": "PY_Class1_Type",
                            "array_size": "1",
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_shadow_&",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getClassReference",
                    "F_name_api": "get_class_reference",
                    "F_name_function": "get_class_reference",
                    "F_name_generic": "get_class_reference",
                    "F_name_impl": "get_class_reference",
                    "PY_name_impl": "PY_getClassReference",
                    "function_name": "getClassReference"
                }
            },
            {
                "<FUNCTION>": "getClassCopy  37 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "getClassCopy",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "flag",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "classes::Class1"
                    },
                    "specifier": [
                        "Class1"
                    ],
                    "typemap_name": "classes::Class1"
                },
                "decl": "Class1 getClassCopy(int flag)",
                "declgen": "Class1 getClassCopy(int flag +value)",
                "doxygen": {
                    "brief": "Return Class1 instance by value, uses copy constructor"
                },
                "name": "getClassCopy",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "api": "capptr",
                                "intent": "function"
                            },
                            "stmt": "c_function_shadow_scalar_capptr"
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "capptr",
                                "intent": "function"
                            },
                            "stmt": "f_function_shadow_scalar_capptr"
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "classes::getClassCopy(\tflag)",
                            "C_call_list": "flag",
                            "C_name": "CLA_getClassCopy",
                            "C_prototype": "int flag,\t CLA_Class1 * SHC_rv",
                            "C_return_type": "CLA_Class1 *",
                            "F_C_name": "c_get_class_copy",
                            "c_const": "",
                            "c_type": "CLA_Class1",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_rv_decl": "*SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "f_local_ptr": "SHT_prv",
                            "idtor": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_shadow_scalar_capptr"
                        },
                        "fmtf": {
                            "C_call_function": "classes::getClassCopy(\tflag)",
                            "C_call_list": "flag",
                            "C_name": "CLA_getClassCopy",
                            "C_prototype": "int flag,\t CLA_Class1 * SHC_rv",
                            "C_return_type": "CLA_Class1 *",
                            "F_C_arguments": "flag,\t SHT_rv",
                            "F_C_call": "c_get_class_copy",
                            "F_C_name": "c_get_class_copy",
                            "F_C_result_clause": "\fresult(SHT_prv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "flag,\t SHT_rv%cxxmem",
                            "F_arguments": "flag",
                            "F_result": "SHT_prv",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_type": "CLA_Class1",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_rv_decl": "*SHCXX_rv",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_rv",
                            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                            "f_derived_type": "class1",
                            "f_intent": "OUT",
                            "f_local_ptr": "SHT_prv",
                            "f_type": "type(class1)",
                            "f_type_module": "classes_mod",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_shadow_scalar_capptr"
                        }
                    },
                    "flag": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "flag",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "int",
                            "cxx_var": "flag",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "flag",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "int",
                            "cxx_var": "flag",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "flag",
                            "fc_var": "flag",
                            "i_var": "flag",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getClassCopy",
                    "F_name_api": "get_class_copy",
                    "F_name_function": "get_class_copy",
                    "F_name_generic": "get_class_copy",
                    "F_name_impl": "get_class_copy",
                    "function_name": "getClassCopy"
                }
            },
            {
                "<FUNCTION>": "set_global_flag  38 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "set_global_flag",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void set_global_flag(int arg)",
                "declgen": "void set_global_flag(int arg +value)",
                "name": "set_global_flag",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "classes::set_global_flag(\targ)",
                            "C_call_list": "arg",
                            "C_name": "CLA_set_global_flag",
                            "C_prototype": "int arg",
                            "C_return_type": "void",
                            "F_C_name": "c_set_global_flag",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "classes::set_global_flag(\targ)",
                            "C_call_list": "arg",
                            "C_name": "CLA_set_global_flag",
                            "C_prototype": "int arg",
                            "C_return_type": "void",
                            "F_C_arguments": "arg",
                            "F_C_call": "c_set_global_flag",
                            "F_C_name": "set_global_flag",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg",
                            "F_arguments": "arg",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        },
                        "fmtl": {
                            "stmt": "lua_subroutine"
                        }
                    },
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg",
                            "pop_expr": "lua_tointeger(L, 1)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "set_global_flag",
                    "F_name_api": "set_global_flag",
                    "F_name_function": "set_global_flag",
                    "F_name_generic": "set_global_flag",
                    "F_name_impl": "set_global_flag",
                    "LUA_name": "set_global_flag",
                    "LUA_name_api": "set_global_flag",
                    "LUA_name_impl": "l_set_global_flag",
                    "PY_name_impl": "PY_set_global_flag",
                    "function_name": "set_global_flag"
                }
            },
            {
                "<FUNCTION>": "get_global_flag  39 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "get_global_flag",
                        "params": [],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int get_global_flag()",
                "declgen": "int get_global_flag(void)",
                "name": "get_global_flag",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "classes::get_global_flag(\t)",
                            "C_name": "CLA_get_global_flag",
                            "C_prototype": "void",
                            "C_return_type": "int",
                            "F_C_name": "c_get_global_flag",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "classes::get_global_flag(\t)",
                            "C_name": "CLA_get_global_flag",
                            "C_prototype": "void",
                            "C_return_type": "int",
                            "F_C_arguments": "",
                            "F_C_call": "c_get_global_flag",
                            "F_C_name": "get_global_flag",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtl": {
                            "c_var": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_var": "SHCXX_rv",
                            "push_arg": "SHCXX_rv",
                            "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                            "stmt": "lua_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "get_global_flag",
                    "F_name_api": "get_global_flag",
                    "F_name_function": "get_global_flag",
                    "F_name_generic": "get_global_flag",
                    "F_name_impl": "get_global_flag",
                    "LUA_name": "get_global_flag",
                    "LUA_name_api": "get_global_flag",
                    "LUA_name_impl": "l_get_global_flag",
                    "PY_name_impl": "PY_get_global_flag",
                    "function_name": "get_global_flag"
                }
            },
            {
                "<FUNCTION>": "LastFunctionCalled  40 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "len": "30"
                        },
                        "metaattrs": {
                            "deref": "copy",
                            "intent": "function"
                        },
                        "name": "LastFunctionCalled",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& LastFunctionCalled() +len(30)",
                "declgen": "const std::string & LastFunctionCalled(void) +len(30)",
                "helpers": {
                    "c": [
                        "char_copy"
                    ]
                },
                "name": "LastFunctionCalled",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_&"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "buf",
                                "deref": "copy",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_&_buf_copy"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "classes::LastFunctionCalled(\t)",
                            "C_name": "CLA_LastFunctionCalled",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_last_function_called",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_char_len": "30",
                            "c_const": "const ",
                            "c_rv_decl": "const char * SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv.c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_&"
                        },
                        "fmtf": {
                            "C_call_function": "classes::LastFunctionCalled(\t)",
                            "C_name": "CLA_LastFunctionCalled_bufferify",
                            "C_prototype": "char *SHC_rv,\t int SHT_rv_len",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv,\t SHT_rv_len",
                            "F_C_call": "c_last_function_called_bufferify",
                            "F_C_name": "c_last_function_called_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv,\t SHT_rv_len",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_char_len": "30",
                            "c_const": "const ",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_len": "SHT_rv_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_len": "SHT_rv_len",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_len": "SHT_rv_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_&_buf_copy"
                        },
                        "fmtl": {
                            "c_var": "SHCXX_rv.c_str()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_var": "SHCXX_rv",
                            "push_arg": "SHCXX_rv.c_str()",
                            "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                            "stmt": "lua_function_string_&"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_&",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "LastFunctionCalled",
                    "F_name_api": "last_function_called",
                    "F_name_function": "last_function_called",
                    "F_name_generic": "last_function_called",
                    "F_name_impl": "last_function_called",
                    "LUA_name": "LastFunctionCalled",
                    "LUA_name_api": "LastFunctionCalled",
                    "LUA_name_impl": "l_LastFunctionCalled",
                    "PY_name_impl": "PY_LastFunctionCalled",
                    "function_name": "LastFunctionCalled"
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "classes"
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "lua": true,
            "python": true
        }
    },
    "symtab": {
        "classes": {
            "Circle": "classes::Circle",
            "Class1": "classes::Class1",
            "Class2": "classes::Class2",
            "Data": "classes::Data",
            "Shape": "classes::Shape",
            "Singleton": "classes::Singleton"
        }
    },
    "types": {
        "classes::Circle": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Circle",
            "PY_PyTypeObject": "PY_Circle_Type",
            "PY_from_object": "PP_Circle_from_Object",
            "PY_to_object": "PP_Circle_to_Object",
            "PY_to_object_idtor": "PP_Circle_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}classes::Circle *>\t({c_var}->addr)",
            "c_type": "CLA_Circle",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "classes::Circle",
            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
            "f_class": "class(circle)",
            "f_derived_type": "circle",
            "f_module": {
                "classes_mod": [
                    "circle"
                ]
            },
            "f_module_name": "classes_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(circle)",
            "flat_name": "classes_Circle",
            "i_module": {
                "classes_mod": [
                    "CLA_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(CLA_SHROUD_capsule_data)",
            "idtor": "3",
            "impl_header": [
                "classes.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesclasses.h"
            ]
        },
        "classes::Class1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Class1",
            "PY_PyTypeObject": "PY_Class1_Type",
            "PY_from_object": "PP_Class1_from_Object",
            "PY_to_object": "PP_Class1_to_Object",
            "PY_to_object_idtor": "PP_Class1_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}classes::Class1 *>\t({c_var}->addr)",
            "c_type": "CLA_Class1",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "classes::Class1",
            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
            "f_class": "class(class1)",
            "f_derived_type": "class1",
            "f_module": {
                "classes_mod": [
                    "class1"
                ]
            },
            "f_module_name": "classes_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(class1)",
            "flat_name": "classes_Class1",
            "i_module": {
                "classes_mod": [
                    "CLA_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(CLA_SHROUD_capsule_data)",
            "idtor": "1",
            "impl_header": [
                "classes.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesclasses.h"
            ]
        },
        "classes::Class1::DIRECTION": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({ctor_expr})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "base": "integer",
            "c_to_cxx": "static_cast<classes::Class1::DIRECTION>({c_var})",
            "c_type": "int",
            "cfi_type": "CFI_type_int",
            "cxx_to_c": "static_cast<int>({cxx_var})",
            "cxx_type": "classes::Class1::DIRECTION",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_module_name": "iso_c_binding",
            "f_type": "integer(C_INT)",
            "flat_name": "int",
            "sgroup": "native",
            "sh_type": "SH_TYPE_INT"
        },
        "classes::Class2": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Class2",
            "PY_PyTypeObject": "PY_Class2_Type",
            "PY_from_object": "PP_Class2_from_Object",
            "PY_to_object": "PP_Class2_to_Object",
            "PY_to_object_idtor": "PP_Class2_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}classes::Class2 *>\t({c_var}->addr)",
            "c_type": "CLA_Class2",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "classes::Class2",
            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
            "f_class": "class(class2)",
            "f_derived_type": "class2",
            "f_module": {
                "classes_mod": [
                    "class2"
                ]
            },
            "f_module_name": "classes_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(class2)",
            "flat_name": "classes_Class2",
            "i_module": {
                "classes_mod": [
                    "CLA_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(CLA_SHROUD_capsule_data)",
            "impl_header": [
                "classes.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesclasses.h"
            ]
        },
        "classes::Data": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}classes::Data *>\t({c_var}->addr)",
            "c_type": "CLA_Data",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "classes::Data",
            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
            "f_class": "class(data)",
            "f_derived_type": "data",
            "f_module": {
                "classes_mod": [
                    "data"
                ]
            },
            "f_module_name": "classes_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(data)",
            "flat_name": "classes_Data",
            "i_module": {
                "classes_mod": [
                    "CLA_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(CLA_SHROUD_capsule_data)",
            "idtor": "4",
            "impl_header": [
                "classes.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesclasses.h"
            ]
        },
        "classes::Shape": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Shape",
            "PY_PyTypeObject": "PY_Shape_Type",
            "PY_from_object": "PP_Shape_from_Object",
            "PY_to_object": "PP_Shape_to_Object",
            "PY_to_object_idtor": "PP_Shape_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}classes::Shape *>\t({c_var}->addr)",
            "c_type": "CLA_Shape",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "classes::Shape",
            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
            "f_class": "class(shape)",
            "f_derived_type": "shape",
            "f_module": {
                "classes_mod": [
                    "shape"
                ]
            },
            "f_module_name": "classes_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(shape)",
            "flat_name": "classes_Shape",
            "i_module": {
                "classes_mod": [
                    "CLA_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(CLA_SHROUD_capsule_data)",
            "idtor": "2",
            "impl_header": [
                "classes.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesclasses.h"
            ]
        },
        "classes::Singleton": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Singleton",
            "PY_PyTypeObject": "PY_Singleton_Type",
            "PY_from_object": "PP_Singleton_from_Object",
            "PY_to_object": "PP_Singleton_to_Object",
            "PY_to_object_idtor": "PP_Singleton_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}classes::Singleton *>\t({c_var}->addr)",
            "c_type": "CLA_Singleton",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "classes::Singleton",
            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
            "f_class": "class(singleton)",
            "f_derived_type": "singleton",
            "f_module": {
                "classes_mod": [
                    "singleton"
                ]
            },
            "f_module_name": "classes_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(singleton)",
            "flat_name": "classes_Singleton",
            "i_module": {
                "classes_mod": [
                    "CLA_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(CLA_SHROUD_capsule_data)",
            "impl_header": [
                "classes.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesclasses.h"
            ]
        }
    }
}