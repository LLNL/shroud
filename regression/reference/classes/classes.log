Read yaml classes.yaml
Close classes_types.yaml
class Class1
C c Class1(void)
C f Class1(void)
C c Class1(int flag)
C f Class1(int flag)
C c ~Class1(void) +name(delete)
C f ~Class1(void) +name(delete)
C c int Method1(void)
C f int Method1(void)
C c bool equivalent(const Class1 & obj2) const
C f bool equivalent(const Class1 & obj2) const
C c Class1 * returnThis(void)
C f Class1 * returnThis(void)
C c Class1 * returnThisBuffer(std::string & name +intent(in), bool flag)
C f Class1 * returnThisBuffer(std::string & name +intent(in), bool flag)
C c Class1 * getclass3(void) const
C f Class1 * getclass3(void) const
C c const std::string & getName(void)
C f const std::string & getName(void)
C c DIRECTION directionFunc(DIRECTION arg)
C f DIRECTION directionFunc(DIRECTION arg)
C f int get_m_flag(void) +intent(getter)
C f int get_test(void) +intent(getter)
C f void set_test(int val +intent(setter)) +intent(setter)
C f std::string get_m_name(void) +intent(getter)
C f void set_m_name(std::string val +intent(setter)) +intent(setter)
Close wrapClass1.h
Close wrapClass1.cpp
class Class2
C c const std::string & getName(void)
C f const std::string & getName(void)
Close wrapClass2.h
Close wrapClass2.cpp
class Singleton
C c static Singleton & getReference(void)
C f static Singleton & getReference(void)
Close wrapSingleton.h
Close wrapSingleton.cpp
class Shape
C c Shape(void)
C f Shape(void)
C c int get_ivar(void) const
C f int get_ivar(void) const
Close wrapShape.h
Close wrapShape.cpp
class Circle
C c Circle(void)
C f Circle(void)
Close wrapCircle.h
Close wrapCircle.cpp
class Data
C c void allocate(int n)
C f void allocate(int n)
C c void free(void)
C f void free(void)
C c Data(void)
C f Data(void)
C c ~Data(void)
C f ~Data(void)
C f int get_nitems(void) +intent(getter)
C f void set_nitems(int val +intent(setter)) +intent(setter)
C f int * get_items(void) +dimension(nitems)+intent(getter)
C f void set_items(int * val +intent(setter)+rank(1)) +intent(setter)
Close wrapData.h
Close wrapData.cpp
C c Class1::DIRECTION directionFunc(Class1::DIRECTION arg)
C f Class1::DIRECTION directionFunc(Class1::DIRECTION arg)
C c void passClassByValue(Class1 arg)
C f void passClassByValue(Class1 arg)
C c int useclass(const Class1 * arg)
C f int useclass(const Class1 * arg)
C c const Class1 * getclass2(void)
C f const Class1 * getclass2(void)
C c Class1 * getclass3(void)
C f Class1 * getclass3(void)
C c const Class1 * getclass2_void(void)
C f const Class1 * getclass2_void(void)
C c Class1 * getclass3_void(void)
C f Class1 * getclass3_void(void)
C c const Class1 & getConstClassReference(void)
C f const Class1 & getConstClassReference(void)
C c Class1 & getClassReference(void)
C f Class1 & getClassReference(void)
C c Class1 getClassCopy(int flag)
C f Class1 getClassCopy(int flag)
C c void set_global_flag(int arg)
C f void set_global_flag(int arg)
C c int get_global_flag(void)
C f int get_global_flag(void)
C c const std::string & LastFunctionCalled(void) +len(30)
C f const std::string & LastFunctionCalled(void) +len(30)
Close wrapclasses.h
Close wrapclasses.cpp
class Class1
Fortran Class1(void)
Fortran Class1(int flag)
Fortran ~Class1(void) +name(delete)
Fortran int Method1(void)
Fortran bool equivalent(const Class1 & obj2) const
Fortran Class1 * returnThis(void)
Fortran Class1 * returnThisBuffer(std::string & name +intent(in), bool flag)
Fortran Class1 * getclass3(void) const
Fortran const std::string & getName(void)
Fortran DIRECTION directionFunc(DIRECTION arg)
Fortran int get_m_flag(void) +intent(getter)
Fortran int get_test(void) +intent(getter)
Fortran void set_test(int val +intent(setter)) +intent(setter)
Fortran std::string get_m_name(void) +intent(getter)
Fortran void set_m_name(std::string val +intent(setter)) +intent(setter)
C-interface f Class1(void)
C-interface f Class1(int flag)
C-interface f ~Class1(void) +name(delete)
C-interface f int Method1(void)
C-interface f bool equivalent(const Class1 & obj2) const
C-interface f Class1 * returnThis(void)
C-interface c Class1 * returnThisBuffer(std::string & name +intent(in), bool flag)
C-interface f Class1 * returnThisBuffer(std::string & name +intent(in), bool flag)
C-interface f Class1 * getclass3(void) const
C-interface c const std::string & getName(void)
C-interface f const std::string & getName(void)
C-interface f DIRECTION directionFunc(DIRECTION arg)
C-interface f int get_m_flag(void) +intent(getter)
C-interface f int get_test(void) +intent(getter)
C-interface f void set_test(int val +intent(setter)) +intent(setter)
C-interface f std::string get_m_name(void) +intent(getter)
C-interface f void set_m_name(std::string val +intent(setter)) +intent(setter)
class Class2
Fortran const std::string & getName(void)
C-interface c const std::string & getName(void)
C-interface f const std::string & getName(void)
class Singleton
Fortran static Singleton & getReference(void)
C-interface f static Singleton & getReference(void)
class Shape
Fortran Shape(void)
Fortran int get_ivar(void) const
C-interface f Shape(void)
C-interface f int get_ivar(void) const
class Circle
Fortran Circle(void)
C-interface f Circle(void)
class Data
Fortran void allocate(int n)
Fortran void free(void)
Fortran Data(void)
Fortran ~Data(void)
Fortran int get_nitems(void) +intent(getter)
Fortran void set_nitems(int val +intent(setter)) +intent(setter)
Fortran int * get_items(void) +dimension(nitems)+intent(getter)
Fortran void set_items(int * val +intent(setter)+rank(1)) +intent(setter)
C-interface f void allocate(int n)
C-interface f void free(void)
C-interface f Data(void)
C-interface f ~Data(void)
C-interface f int get_nitems(void) +intent(getter)
C-interface f void set_nitems(int val +intent(setter)) +intent(setter)
C-interface f int * get_items(void) +dimension(nitems)+intent(getter)
C-interface f void set_items(int * val +intent(setter)+rank(1)) +intent(setter)
Fortran Class1::DIRECTION directionFunc(Class1::DIRECTION arg)
Fortran void passClassByValue(Class1 arg)
Fortran int useclass(const Class1 * arg)
Fortran const Class1 * getclass2(void)
Fortran Class1 * getclass3(void)
Fortran const Class1 * getclass2_void(void)
Fortran Class1 * getclass3_void(void)
Fortran const Class1 & getConstClassReference(void)
Fortran Class1 & getClassReference(void)
Fortran Class1 getClassCopy(int flag)
Fortran void set_global_flag(int arg)
Fortran int get_global_flag(void)
Fortran const std::string & LastFunctionCalled(void) +len(30)
C-interface f Class1::DIRECTION directionFunc(Class1::DIRECTION arg)
C-interface f void passClassByValue(Class1 arg)
C-interface f int useclass(const Class1 * arg)
C-interface f const Class1 * getclass2(void)
C-interface f Class1 * getclass3(void)
C-interface f const Class1 * getclass2_void(void)
C-interface f Class1 * getclass3_void(void)
C-interface f const Class1 & getConstClassReference(void)
C-interface f Class1 & getClassReference(void)
C-interface f Class1 getClassCopy(int flag)
C-interface f void set_global_flag(int arg)
C-interface f int get_global_flag(void)
C-interface c const std::string & LastFunctionCalled(void) +len(30)
C-interface f const std::string & LastFunctionCalled(void) +len(30)
Close wrapfclasses.f
Close utilclasses.cpp
Close typesclasses.h
class Class1
Python method Class1(void)
Python method Class1(int flag)
Python method ~Class1(void) +name(delete)
Python method int Method1(void)
Python method bool equivalent(const Class1 & obj2) const
Python method Class1 * getclass3(void) const
Python method const std::string & getName(void)
Python method DIRECTION directionFunc(DIRECTION arg)
Close pyClass1type.cpp
class Class2
Python method const std::string & getName(void)
Close pyClass2type.cpp
class Singleton
Python method static Singleton & getReference(void)
Close pySingletontype.cpp
class Shape
Python method Shape(void)
Python method int get_ivar(void) const
Close pyShapetype.cpp
class Circle
Python method Circle(void)
Close pyCircletype.cpp
Python function Class1::DIRECTION directionFunc(Class1::DIRECTION arg)
Python function void passClassByValue(Class1 arg)
Python function int useclass(const Class1 * arg)
Python function Class1 * getclass3(void)
Python function Class1 & getClassReference(void)
Python function void set_global_flag(int arg)
Python function int get_global_flag(void)
Python function const std::string & LastFunctionCalled(void) +len(30)
Close pyclassesmodule.cpp
Close pyclassesutil.cpp
Close pyclassesmodule.hpp
Close setup.py
Lua method Class1(void)
Lua method Class1(int flag)
Lua method ~Class1(void) +name(delete)
Lua method int Method1(void)
Lua method const std::string & getName(void)
Lua method DIRECTION directionFunc(DIRECTION arg)
Lua method const std::string & getName(void)
Lua method Shape(void)
Lua method int get_ivar(void) const
Lua method Circle(void)
Lua function Class1::DIRECTION directionFunc(Class1::DIRECTION arg)
Lua function void set_global_flag(int arg)
Lua function int get_global_flag(void)
Lua function const std::string & LastFunctionCalled(void) +len(30)
Close luaclassesmodule.hpp
Close luaclassesmodule.cpp
