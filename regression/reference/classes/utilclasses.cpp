// utilclasses.cpp
// This file is generated by Shroud nowrite-version. Do not edit.
// Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
// other Shroud Project Developers.
// See the top-level COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//

// typemap
#include "classes.hpp"
// shroud
#include "typesclasses.h"
#include <cstddef>
#include <cstring>


#ifdef __cplusplus
extern "C" {
#endif

// start helper copy_string
// helper copy_string
// Copy the char* or std::string in context into c_var.
// Called by Fortran to deal with allocatable character.
void CLA_ShroudCopyStringAndFree(CLA_SHROUD_array *data, char *c_var, size_t c_var_len) {
    const char *cxx_var = data->addr.ccharp;
    size_t n = c_var_len;
    if (data->elem_len < n) n = data->elem_len;
    std::strncpy(c_var, cxx_var, n);
    CLA_SHROUD_memory_destructor(&data->cxx); // delete data->cxx.addr
}
// end helper copy_string


// start release allocated memory
// Release library allocated memory.
void CLA_SHROUD_memory_destructor(CLA_SHROUD_capsule_data *cap)
{
    void *ptr = cap->addr;
    switch (cap->idtor) {
    case 0:   // --none--
    {
        // Nothing to delete
        break;
    }
    case 1:   // classes::Class1
    {
        classes::Class1 *cxx_ptr = 
            reinterpret_cast<classes::Class1 *>(ptr);
        delete cxx_ptr;
        break;
    }
    case 2:   // classes::Shape
    {
        classes::Shape *cxx_ptr =
            reinterpret_cast<classes::Shape *>(ptr);
        delete cxx_ptr;
        break;
    }
    case 3:   // classes::Circle
    {
        classes::Circle *cxx_ptr =
            reinterpret_cast<classes::Circle *>(ptr);
        delete cxx_ptr;
        break;
    }
    case 4:   // classes::Data
    {
        classes::Data *cxx_ptr = reinterpret_cast<classes::Data *>(ptr);
        delete cxx_ptr;
        break;
    }
    default:
    {
        // Unexpected case in destructor
        break;
    }
    }
    cap->addr = nullptr;
    cap->idtor = 0;  // avoid deleting again
}
// end release allocated memory

#ifdef __cplusplus
}
#endif
