{
    "__NOTICE__": "This file is generated by Shroud 0.11.0 and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "cdesc.hpp"
        ],
        "functions": [
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg",
                            "c_var_context": "Darg",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_in_cdesc",
                            "stmt1": "c_native_*_cdesc"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arg",
                            "c_var": "arg",
                            "c_var_context": "Darg",
                            "f_assumed_shape": "(:,:)",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "rank": "2",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(arg)",
                            "stmt0": "f_native_*_in_cdesc",
                            "stmt1": "f_native_*_in_cdesc",
                            "stmtc0": "c_native_*_in_cdesc",
                            "stmtc1": "c_native_*_cdesc"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "Rank2In",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "cdesc": true,
                                "context": "Darg",
                                "intent": "in",
                                "rank": 2
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void Rank2In(int *arg +intent(in)+rank(2)+cdesc)",
                "declgen": "void Rank2In(int * arg +cdesc+context(Darg)+intent(in)+rank(2))",
                "fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "CDE_rank2_in",
                    "C_prototype": "CDE_SHROUD_array *Darg",
                    "C_return_type": "void",
                    "F_C_call": "c_rank2_in",
                    "F_C_name": "c_rank2_in",
                    "F_arg_c_call": "Darg",
                    "F_arguments": "arg",
                    "F_name_function": "rank2_in",
                    "F_name_generic": "rank2_in",
                    "F_name_impl": "rank2_in",
                    "F_subprogram": "subroutine",
                    "function_name": "Rank2In",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "rank2_in"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_in",
                            "stmt1": "c_string_in"
                        }
                    },
                    "value": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "value",
                            "c_var_context": "Dvalue",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "value",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_*_out_cdesc",
                            "stmt1": "c_unknown_*_cdesc"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GetScalar1",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "cdesc": true,
                                "context": "Dvalue",
                                "intent": "out",
                                "rank": 0,
                                "value": true
                            },
                            "declarator": {
                                "name": "value",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetScalar1(std::string & name+intent(in), void *value+intent(out)+rank(0)+cdesc)",
                "declgen": "void GetScalar1(std::string & name +intent(in), void * value +cdesc+context(Dvalue)+intent(out)+rank(0)+value)",
                "doxygen": {
                    "description": "Create several Fortran generic functions which call a single\nC wrapper that checkes the type of the Fortran argument\nand calls the correct templated function.\nAdding the string argument forces a bufferified function\nto be create.\nXXX The non-bufferified version should not be created since\nusers will not manually create a context struct.\n"
                },
                "fmtdict": {
                    "C_call_list": "SHCXX_name,\t value",
                    "C_name": "CDE_get_scalar1",
                    "C_prototype": "char * name,\t CDE_SHROUD_array *Dvalue",
                    "C_return_type": "void",
                    "F_C_name": "c_get_scalar1",
                    "function_name": "GetScalar1",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "get_scalar1"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in"
                                },
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "cdesc": true,
                                    "context": "Dvalue",
                                    "intent": "out",
                                    "rank": 0
                                },
                                "declarator": {
                                    "name": "value",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_0",
                        "generic": "(int *value+intent(out)+rank(0)+cdesc)"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in"
                                },
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "cdesc": true,
                                    "context": "Dvalue",
                                    "intent": "out",
                                    "rank": 0
                                },
                                "declarator": {
                                    "name": "value",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "function_suffix": "_1",
                        "generic": "(double *value+intent(out)+rank(0)+cdesc)"
                    }
                ],
                "options": {
                    "wrap_fortran": false
                },
                "splicer": {
                    "c": [
                        "// This function should not exist"
                    ],
                    "c_buf": [
                        "switch(Dvalue->type) {",
                        "case SH_TYPE_INT: {",
                        "  *static_cast<int *>(const_cast<void *>(Dvalue->addr.base)) = getData<int>();",
                        "  break;",
                        "}",
                        "case SH_TYPE_LONG: {",
                        "  *static_cast<long *>(const_cast<void *>(Dvalue->addr.base)) = getData<long>();",
                        "  break;",
                        "}",
                        "case SH_TYPE_FLOAT: {",
                        "  *static_cast<float *>(const_cast<void *>(Dvalue->addr.base)) = getData<float>();",
                        "  break;",
                        "}",
                        "case SH_TYPE_DOUBLE: {",
                        "  *static_cast<double *>(const_cast<void *>(Dvalue->addr.base)) = getData<double>();",
                        "  break;",
                        "}",
                        "// default:",
                        "}"
                    ]
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GetScalar1",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "cdesc": true,
                                "context": "Dvalue",
                                "intent": "out",
                                "rank": 0
                            },
                            "declarator": {
                                "name": "value",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetScalar1(std::string & name+intent(in), void *value+intent(out)+rank(0)+cdesc)",
                "declgen": "void GetScalar1(std::string & name +intent(in), int * value +cdesc+context(Dvalue)+intent(out)+rank(0))",
                "doxygen": {
                    "description": "Create several Fortran generic functions which call a single\nC wrapper that checkes the type of the Fortran argument\nand calls the correct templated function.\nAdding the string argument forces a bufferified function\nto be create.\nXXX The non-bufferified version should not be created since\nusers will not manually create a context struct.\n"
                },
                "fmtdict": {
                    "F_C_call": "c_get_scalar1_bufferify",
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT),\t Dvalue",
                    "F_arguments": "name,\t value",
                    "F_name_function": "get_scalar1_0",
                    "F_name_generic": "get_scalar1",
                    "F_name_impl": "get_scalar1_0",
                    "F_subprogram": "subroutine",
                    "function_name": "GetScalar1",
                    "function_suffix": "_0",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_scalar1"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "splicer": {
                    "c": [
                        "// This function should not exist"
                    ],
                    "c_buf": [
                        "switch(Dvalue->type) {",
                        "case SH_TYPE_INT: {",
                        "  *static_cast<int *>(const_cast<void *>(Dvalue->addr.base)) = getData<int>();",
                        "  break;",
                        "}",
                        "case SH_TYPE_LONG: {",
                        "  *static_cast<long *>(const_cast<void *>(Dvalue->addr.base)) = getData<long>();",
                        "  break;",
                        "}",
                        "case SH_TYPE_FLOAT: {",
                        "  *static_cast<float *>(const_cast<void *>(Dvalue->addr.base)) = getData<float>();",
                        "  break;",
                        "}",
                        "case SH_TYPE_DOUBLE: {",
                        "  *static_cast<double *>(const_cast<void *>(Dvalue->addr.base)) = getData<double>();",
                        "  break;",
                        "}",
                        "// default:",
                        "}"
                    ]
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GetScalar1",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "cdesc": true,
                                "context": "Dvalue",
                                "intent": "out",
                                "rank": 0
                            },
                            "declarator": {
                                "name": "value",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetScalar1(std::string & name+intent(in), void *value+intent(out)+rank(0)+cdesc)",
                "declgen": "void GetScalar1(std::string & name +intent(in), double * value +cdesc+context(Dvalue)+intent(out)+rank(0))",
                "doxygen": {
                    "description": "Create several Fortran generic functions which call a single\nC wrapper that checkes the type of the Fortran argument\nand calls the correct templated function.\nAdding the string argument forces a bufferified function\nto be create.\nXXX The non-bufferified version should not be created since\nusers will not manually create a context struct.\n"
                },
                "fmtdict": {
                    "F_C_call": "c_get_scalar1_bufferify",
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT),\t Dvalue",
                    "F_arguments": "name,\t value",
                    "F_name_function": "get_scalar1_1",
                    "F_name_generic": "get_scalar1",
                    "F_name_impl": "get_scalar1_1",
                    "F_subprogram": "subroutine",
                    "function_name": "GetScalar1",
                    "function_suffix": "_1",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_scalar1"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "splicer": {
                    "c": [
                        "// This function should not exist"
                    ],
                    "c_buf": [
                        "switch(Dvalue->type) {",
                        "case SH_TYPE_INT: {",
                        "  *static_cast<int *>(const_cast<void *>(Dvalue->addr.base)) = getData<int>();",
                        "  break;",
                        "}",
                        "case SH_TYPE_LONG: {",
                        "  *static_cast<long *>(const_cast<void *>(Dvalue->addr.base)) = getData<long>();",
                        "  break;",
                        "}",
                        "case SH_TYPE_FLOAT: {",
                        "  *static_cast<float *>(const_cast<void *>(Dvalue->addr.base)) = getData<float>();",
                        "  break;",
                        "}",
                        "case SH_TYPE_DOUBLE: {",
                        "  *static_cast<double *>(const_cast<void *>(Dvalue->addr.base)) = getData<double>();",
                        "  break;",
                        "}",
                        "// default:",
                        "}"
                    ]
                }
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "c_var_trim": "Lname",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_in_buf",
                            "stmt1": "c_string_in_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_name",
                            "c_var": "name",
                            "c_var_trim": "Lname",
                            "f_intent": "IN",
                            "f_type": "character(*)",
                            "f_var": "name",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_in_buf",
                            "stmtc1": "c_string_in_buf"
                        }
                    },
                    "value": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "value",
                            "c_var_context": "Dvalue",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "value",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_unknown_*_out_buf_cdesc",
                            "stmt1": "c_unknown_*_cdesc"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_value",
                            "c_var": "value",
                            "c_var_context": "Dvalue",
                            "f_intent": "OUT",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "value",
                            "rank": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "size": "1",
                            "stmt0": "f_native_*_out_cdesc",
                            "stmt1": "f_native_*_out_cdesc",
                            "stmtc0": "c_unknown_*_out_buf_cdesc",
                            "stmtc1": "c_unknown_*_cdesc"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "GetScalar1",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "len_trim": "Lname"
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "cdesc": true,
                                "context": "Dvalue",
                                "intent": "out",
                                "rank": 0,
                                "value": true
                            },
                            "declarator": {
                                "name": "value",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "void"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetScalar1(std::string & name+intent(in), void *value+intent(out)+rank(0)+cdesc)",
                "declgen": "void GetScalar1(std::string & name +intent(in)+len_trim(Lname), void * value +cdesc+context(Dvalue)+intent(out)+rank(0)+value)",
                "doxygen": {
                    "description": "Create several Fortran generic functions which call a single\nC wrapper that checkes the type of the Fortran argument\nand calls the correct templated function.\nAdding the string argument forces a bufferified function\nto be create.\nXXX The non-bufferified version should not be created since\nusers will not manually create a context struct.\n"
                },
                "fmtdict": {
                    "C_call_list": "SHCXX_name,\t value",
                    "C_name": "CDE_get_scalar1_bufferify",
                    "C_prototype": "char * name,\t int Lname,\t CDE_SHROUD_array *Dvalue",
                    "C_return_type": "void",
                    "F_C_name": "c_get_scalar1_bufferify",
                    "function_name": "GetScalar1",
                    "function_suffix": "_bufferify",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "get_scalar1"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in"
                                },
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "cdesc": true,
                                    "context": "Dvalue",
                                    "intent": "out",
                                    "rank": 0
                                },
                                "declarator": {
                                    "name": "value",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_0",
                        "generic": "(int *value+intent(out)+rank(0)+cdesc)"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in"
                                },
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "cdesc": true,
                                    "context": "Dvalue",
                                    "intent": "out",
                                    "rank": 0
                                },
                                "declarator": {
                                    "name": "value",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "function_suffix": "_1",
                        "generic": "(double *value+intent(out)+rank(0)+cdesc)"
                    }
                ],
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "splicer": {
                    "c": [
                        "// This function should not exist"
                    ],
                    "c_buf": [
                        "switch(Dvalue->type) {",
                        "case SH_TYPE_INT: {",
                        "  *static_cast<int *>(const_cast<void *>(Dvalue->addr.base)) = getData<int>();",
                        "  break;",
                        "}",
                        "case SH_TYPE_LONG: {",
                        "  *static_cast<long *>(const_cast<void *>(Dvalue->addr.base)) = getData<long>();",
                        "  break;",
                        "}",
                        "case SH_TYPE_FLOAT: {",
                        "  *static_cast<float *>(const_cast<void *>(Dvalue->addr.base)) = getData<float>();",
                        "  break;",
                        "}",
                        "case SH_TYPE_DOUBLE: {",
                        "  *static_cast<double *>(const_cast<void *>(Dvalue->addr.base)) = getData<double>();",
                        "  break;",
                        "}",
                        "// default:",
                        "}"
                    ]
                }
            },
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "getData",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "DataType"
                    ],
                    "typemap_name": "DataType"
                },
                "cxx_template": {
                    "DataType": [
                        "int",
                        "double"
                    ]
                },
                "decl": "template<typename DataType> DataType getData();",
                "declgen": "DataType getData()",
                "doxygen": {
                    "description": "Wrapper for function which is templated on the return value.\n"
                },
                "fmtdict": {
                    "function_name": "getData",
                    "underscore_name": "get_data"
                },
                "have_template_args": true,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "DataType"
                ]
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "getData",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "template<typename DataType> DataType getData();",
                "declgen": "int getData()",
                "doxygen": {
                    "description": "Wrapper for function which is templated on the return value.\n"
                },
                "fmtdict": {
                    "CXX_template": "<int>",
                    "C_name": "CDE_get_data_int",
                    "C_prototype": "",
                    "C_return_type": "int",
                    "F_C_call": "c_get_data_int",
                    "F_C_name": "c_get_data_int",
                    "F_arguments": "",
                    "F_name_function": "get_data_int",
                    "F_name_generic": "get_data",
                    "F_name_impl": "get_data_int",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "getData",
                    "template_suffix": "_int",
                    "underscore_name": "get_data"
                },
                "have_template_args": true,
                "options": {
                    "F_create_generic": false,
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "DataType"
                ]
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_type": "real(C_DOUBLE)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "getData",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "template<typename DataType> DataType getData();",
                "declgen": "double getData()",
                "doxygen": {
                    "description": "Wrapper for function which is templated on the return value.\n"
                },
                "fmtdict": {
                    "CXX_template": "<double>",
                    "C_name": "CDE_get_data_double",
                    "C_prototype": "",
                    "C_return_type": "double",
                    "F_C_call": "c_get_data_double",
                    "F_C_name": "c_get_data_double",
                    "F_arguments": "",
                    "F_name_function": "get_data_double",
                    "F_name_generic": "get_data",
                    "F_name_impl": "get_data_double",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "getData",
                    "template_suffix": "_double",
                    "underscore_name": "get_data"
                },
                "gen_headers_typedef": [
                    "double",
                    "int"
                ],
                "have_template_args": true,
                "options": {
                    "F_create_generic": false,
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "DataType"
                ]
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtf": {
                            "F_pointer": "SHPTR_name",
                            "c_var": "name",
                            "f_intent": "IN",
                            "f_type": "character(*)",
                            "f_var": "name",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_in",
                            "stmtc1": "c_string_in"
                        }
                    },
                    "value": {
                        "fmtf": {
                            "F_pointer": "SHPTR_value",
                            "c_var": "value",
                            "f_intent": "OUT",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "value",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_unknown_*_out",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GetScalar2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": true
                            },
                            "declarator": {
                                "name": "value",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetScalar2(std::string & name+intent(in), void *value+intent(out))",
                "declgen": "void GetScalar2(std::string & name +intent(in), void * value +intent(out)+value)",
                "doxygen": {
                    "description": "Call a C++ function which is templated on the return value.\nCreate a Fortran function with the result passed in as an\nargument.  Change the function call clause to directly call the\nwrapped templated function.  fstatements is required instead of\nsplicer in order to get {stype} expanded.\n"
                },
                "fmtdict": {
                    "function_name": "GetScalar2",
                    "underscore_name": "get_scalar2"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in"
                                },
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "intent": "out"
                                },
                                "declarator": {
                                    "name": "value",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "fmtdict": {
                            "stype": "int"
                        },
                        "function_suffix": "_0",
                        "generic": "(int *value+intent(out))"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in"
                                },
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "intent": "out"
                                },
                                "declarator": {
                                    "name": "value",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "stype": "double"
                        },
                        "function_suffix": "_1",
                        "generic": "(double *value+intent(out))"
                    }
                ],
                "fstatements": {
                    "f": {
                        "call": [
                            "value = c_get_data_{stype}()"
                        ]
                    }
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false
                },
                "splicer": {
                    "c_buf": [
                        "// This function does not need to exist."
                    ]
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GetScalar2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "value",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetScalar2(std::string & name+intent(in), void *value+intent(out))",
                "declgen": "void GetScalar2(std::string & name +intent(in), int * value +intent(out))",
                "doxygen": {
                    "description": "Call a C++ function which is templated on the return value.\nCreate a Fortran function with the result passed in as an\nargument.  Change the function call clause to directly call the\nwrapped templated function.  fstatements is required instead of\nsplicer in order to get {stype} expanded.\n"
                },
                "fmtdict": {
                    "F_C_call": "-F_C_name-",
                    "F_arg_c_call": "name,\t value",
                    "F_arguments": "name,\t value",
                    "F_name_function": "get_scalar2_0",
                    "F_name_generic": "get_scalar2",
                    "F_name_impl": "get_scalar2_0",
                    "F_subprogram": "subroutine",
                    "function_name": "GetScalar2",
                    "function_suffix": "_0",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "stype": "int",
                    "underscore_name": "get_scalar2"
                },
                "fstatements": {
                    "f": {
                        "call": [
                            "value = c_get_data_{stype}()"
                        ]
                    }
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "splicer": {
                    "c_buf": [
                        "// This function does not need to exist."
                    ]
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GetScalar2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "value",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetScalar2(std::string & name+intent(in), void *value+intent(out))",
                "declgen": "void GetScalar2(std::string & name +intent(in), double * value +intent(out))",
                "doxygen": {
                    "description": "Call a C++ function which is templated on the return value.\nCreate a Fortran function with the result passed in as an\nargument.  Change the function call clause to directly call the\nwrapped templated function.  fstatements is required instead of\nsplicer in order to get {stype} expanded.\n"
                },
                "fmtdict": {
                    "F_C_call": "-F_C_name-",
                    "F_arg_c_call": "name,\t value",
                    "F_arguments": "name,\t value",
                    "F_name_function": "get_scalar2_1",
                    "F_name_generic": "get_scalar2",
                    "F_name_impl": "get_scalar2_1",
                    "F_subprogram": "subroutine",
                    "function_name": "GetScalar2",
                    "function_suffix": "_1",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "stype": "double",
                    "underscore_name": "get_scalar2"
                },
                "fstatements": {
                    "f": {
                        "call": [
                            "value = c_get_data_{stype}()"
                        ]
                    }
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "splicer": {
                    "c_buf": [
                        "// This function does not need to exist."
                    ]
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "cdesc"
        ]
    }
}