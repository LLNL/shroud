{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "vectors.hpp"
        ],
        "functions": [
            {
                "<FUNCTION>": "0 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "vector_sum",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "specifier": [
                                    "std::vector"
                                ],
                                "template_arguments": [
                                    {
                                        "declarator": {
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "std::vector"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int vector_sum(const std::vector<int> &arg)",
                "declgen": "int vector_sum(const std::vector<int> & arg +rank(1))",
                "name": "vector_sum",
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false
                },
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": null,
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_T": "int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::vector<int> *>\t(&arg)",
                            "cxx_type": "std::vector<int>",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "hnamefunc0": "SHROUD_create_from_PyObject_vector_int",
                            "npy_dims_var": "SHD_arg",
                            "npy_intp_asgn": "SHD_arg[0] = arg->size();\n",
                            "npy_intp_decl": "npy_intp SHD_arg[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "pytmp_var": "SHTPy_arg",
                            "rank": "1",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_in_vector_list",
                            "stmt1": "py_in_vector_list",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "vector_sum",
                    "F_name_api": "vector_sum",
                    "PY_name_impl": "PY_vector_sum",
                    "function_name": "vector_sum"
                },
                "zz_fmtresult": {
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_native_scalar",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "1 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "vector_iota_out",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "specifier": [
                                    "std::vector"
                                ],
                                "template_arguments": [
                                    {
                                        "declarator": {
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "std::vector"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out(std::vector<int> &arg+intent(out))",
                "declgen": "void vector_iota_out(std::vector<int> & arg +intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran input array"
                },
                "name": "vector_iota_out",
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false
                },
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": null,
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_T": "int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "std::vector<int>",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "hnamefunc0": "SHROUD_to_PyList_vector_int",
                            "npy_dims_var": "SHD_arg",
                            "npy_intp_asgn": "SHD_arg[0] = arg->size();\n",
                            "npy_intp_decl": "npy_intp SHD_arg[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "rank": "1",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_out_vector_list",
                            "stmt1": "py_out_vector_list",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "vector_iota_out",
                    "F_name_api": "vector_iota_out",
                    "PY_name_impl": "PY_vector_iota_out",
                    "function_name": "vector_iota_out"
                }
            },
            {
                "<FUNCTION>": "2 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "vector_iota_out_with_num",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "specifier": [
                                    "std::vector"
                                ],
                                "template_arguments": [
                                    {
                                        "declarator": {
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "std::vector"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_with_num(std::vector<int> &arg+intent(out))",
                "declgen": "void vector_iota_out_with_num(std::vector<int> & arg +intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran input array",
                    "description": "Convert subroutine in to a function and\nreturn the number of items copied into argument\nby setting fstatements for both C and Fortran.\n"
                },
                "fstatements": {
                    "c": {
                        "ret": [
                            "return SHT_arg_cdesc->size;"
                        ],
                        "return_type": "long"
                    },
                    "c_buf": {
                        "ret": [
                            "return SHT_arg_cdesc->size;"
                        ],
                        "return_type": "long"
                    },
                    "f": {
                        "call": [
                            "{F_result} = {F_C_call}({F_arg_c_call})"
                        ],
                        "declare": [
                            "integer(C_LONG) :: {F_result}"
                        ],
                        "f_module": {
                            "iso_c_binding": [
                                "C_LONG"
                            ]
                        },
                        "result": "num"
                    }
                },
                "name": "vector_iota_out_with_num",
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "vector_iota_out_with_num",
                    "F_name_api": "vector_iota_out_with_num",
                    "function_name": "vector_iota_out_with_num"
                }
            },
            {
                "<FUNCTION>": "3 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "vector_iota_out_with_num2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "specifier": [
                                    "std::vector"
                                ],
                                "template_arguments": [
                                    {
                                        "declarator": {
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "std::vector"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_with_num2(std::vector<int> &arg+intent(out))",
                "declgen": "void vector_iota_out_with_num2(std::vector<int> & arg +intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran input array",
                    "description": "Convert subroutine in to a function.\nReturn the number of items copied into argument\nby setting fstatements for the Fortran wrapper only.\n"
                },
                "fstatements": {
                    "f": {
                        "declare": [
                            "integer(C_LONG) :: num"
                        ],
                        "f_module": {
                            "iso_c_binding": [
                                "C_LONG"
                            ]
                        },
                        "post_call": [
                            "num = SHT_arg_cdesc%size"
                        ],
                        "result": "num"
                    }
                },
                "name": "vector_iota_out_with_num2",
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "vector_iota_out_with_num2",
                    "F_name_api": "vector_iota_out_with_num2",
                    "function_name": "vector_iota_out_with_num2"
                }
            },
            {
                "<FUNCTION>": "4 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "vector_iota_out_alloc",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "allocatable",
                                        "intent": "out",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "deref": "allocatable",
                                        "intent": "out"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "specifier": [
                                    "std::vector"
                                ],
                                "template_arguments": [
                                    {
                                        "declarator": {
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "std::vector"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_alloc(std::vector<int> &arg+intent(out)+deref(allocatable))",
                "declgen": "void vector_iota_out_alloc(std::vector<int> & arg +deref(allocatable)+intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran allocatable array"
                },
                "name": "vector_iota_out_alloc",
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "vector_iota_out_alloc",
                    "F_name_api": "vector_iota_out_alloc",
                    "function_name": "vector_iota_out_alloc"
                }
            },
            {
                "<FUNCTION>": "5 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "vector_iota_inout_alloc",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "allocatable",
                                        "intent": "inout",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "deref": "allocatable",
                                        "intent": "inout"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "specifier": [
                                    "std::vector"
                                ],
                                "template_arguments": [
                                    {
                                        "declarator": {
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "std::vector"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_inout_alloc(std::vector<int> &arg+intent(inout)+deref(allocatable))",
                "declgen": "void vector_iota_inout_alloc(std::vector<int> & arg +deref(allocatable)+intent(inout)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran allocatable array"
                },
                "name": "vector_iota_inout_alloc",
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "vector_iota_inout_alloc",
                    "F_name_api": "vector_iota_inout_alloc",
                    "function_name": "vector_iota_inout_alloc"
                }
            },
            {
                "<FUNCTION>": "6 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "vector_increment",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "specifier": [
                                    "std::vector"
                                ],
                                "template_arguments": [
                                    {
                                        "declarator": {
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "std::vector"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_increment(std::vector<int> &arg)",
                "declgen": "void vector_increment(std::vector<int> & arg +rank(1))",
                "name": "vector_increment",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "vector_increment",
                    "F_name_api": "vector_increment",
                    "function_name": "vector_increment"
                }
            },
            {
                "<FUNCTION>": "7 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "vector_iota_out_d",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "specifier": [
                                    "std::vector"
                                ],
                                "template_arguments": [
                                    {
                                        "declarator": {
                                            "typemap_name": "double"
                                        },
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "typemap_name": "std::vector"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_d(std::vector<double> &arg+intent(out))",
                "declgen": "void vector_iota_out_d(std::vector<double> & arg +intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran input array"
                },
                "name": "vector_iota_out_d",
                "options": {
                    "wrap_lua": false
                },
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": null,
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_T": "double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "std::vector<double>",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "hnamefunc0": "SHROUD_to_PyList_vector_double",
                            "npy_dims_var": "SHD_arg",
                            "npy_intp_asgn": "SHD_arg[0] = arg->size();\n",
                            "npy_intp_decl": "npy_intp SHD_arg[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg",
                            "rank": "1",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_out_vector_list",
                            "stmt1": "py_out_vector_list",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "vector_iota_out_d",
                    "F_name_api": "vector_iota_out_d",
                    "PY_name_impl": "PY_vector_iota_out_d",
                    "function_name": "vector_iota_out_d"
                }
            },
            {
                "<FUNCTION>": "8 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "vector_of_pointers",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "specifier": [
                                    "std::vector"
                                ],
                                "template_arguments": [
                                    {
                                        "const": true,
                                        "declarator": {
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                }
                                            ],
                                            "typemap_name": "double"
                                        },
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "typemap_name": "std::vector"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "num",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int vector_of_pointers(std::vector<const double *> &arg1 +intent(in), int num)",
                "declgen": "int vector_of_pointers(std::vector<const double * > & arg1 +intent(in)+rank(1), int num +value)",
                "doxygen": {
                    "brief": "Fortran 2-d array to vector<const double *>"
                },
                "name": "vector_of_pointers",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "vector_of_pointers",
                    "F_name_api": "vector_of_pointers",
                    "function_name": "vector_of_pointers"
                }
            },
            {
                "<FUNCTION>": "9 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "vector_string_count",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "specifier": [
                                    "std::vector"
                                ],
                                "template_arguments": [
                                    {
                                        "declarator": {
                                            "typemap_name": "std::string"
                                        },
                                        "specifier": [
                                            "std::string"
                                        ],
                                        "typemap_name": "std::string"
                                    }
                                ],
                                "typemap_name": "std::vector"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int vector_string_count(const std::vector< std::string > &arg)",
                "declgen": "int vector_string_count(const std::vector<std::string> & arg +rank(1))",
                "doxygen": {
                    "brief": "count number of underscore in vector of strings",
                    "decription": "The input will be copied in order to create the C++ argument\n"
                },
                "name": "vector_string_count",
                "options": {
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "vector_string_count",
                    "F_name_api": "vector_string_count",
                    "function_name": "vector_string_count"
                }
            },
            {
                "<FUNCTION>": "10 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "vector_string_fill",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "specifier": [
                                    "std::vector"
                                ],
                                "template_arguments": [
                                    {
                                        "declarator": {
                                            "typemap_name": "std::string"
                                        },
                                        "specifier": [
                                            "std::string"
                                        ],
                                        "typemap_name": "std::string"
                                    }
                                ],
                                "typemap_name": "std::vector"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_string_fill(std::vector< std::string > &arg+intent(out))",
                "declgen": "void vector_string_fill(std::vector<std::string> & arg +intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Fill in arg with some animal names",
                    "description": "The C++ function returns void. But the C and Fortran wrappers return\nan int with the number of items added to arg.\n"
                },
                "name": "vector_string_fill",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "vector_string_fill",
                    "F_name_api": "vector_string_fill",
                    "function_name": "vector_string_fill"
                }
            },
            {
                "<FUNCTION>": "11 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "vector_string_fill_allocatable",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "allocatable",
                                        "intent": "out",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "deref": "allocatable",
                                        "intent": "out"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "specifier": [
                                    "std::vector"
                                ],
                                "template_arguments": [
                                    {
                                        "declarator": {
                                            "typemap_name": "std::string"
                                        },
                                        "specifier": [
                                            "std::string"
                                        ],
                                        "typemap_name": "std::string"
                                    }
                                ],
                                "typemap_name": "std::vector"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_string_fill_allocatable( std::vector< std::string > &arg+intent(out)+deref(allocatable))",
                "declgen": "void vector_string_fill_allocatable(std::vector<std::string> & arg +deref(allocatable)+intent(out)+rank(1))",
                "name": "vector_string_fill_allocatable",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "vector_string_fill_allocatable",
                    "F_name_api": "vector_string_fill_allocatable",
                    "function_name": "vector_string_fill_allocatable"
                }
            },
            {
                "<FUNCTION>": "12 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "vector_string_fill_allocatable_len",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "allocatable",
                                        "intent": "out",
                                        "len": "20",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "deref": "allocatable",
                                        "intent": "out"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "specifier": [
                                    "std::vector"
                                ],
                                "template_arguments": [
                                    {
                                        "declarator": {
                                            "typemap_name": "std::string"
                                        },
                                        "specifier": [
                                            "std::string"
                                        ],
                                        "typemap_name": "std::string"
                                    }
                                ],
                                "typemap_name": "std::vector"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_string_fill_allocatable_len( std::vector< std::string > &arg+intent(out)+len(20)+deref(allocatable))",
                "declgen": "void vector_string_fill_allocatable_len(std::vector<std::string> & arg +deref(allocatable)+intent(out)+len(20)+rank(1))",
                "name": "vector_string_fill_allocatable_len",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "vector_string_fill_allocatable_len",
                    "F_name_api": "vector_string_fill_allocatable_len",
                    "function_name": "vector_string_fill_allocatable_len"
                }
            },
            {
                "<FUNCTION>": "13 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "vector_string_append",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "inout",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "specifier": [
                                    "std::vector"
                                ],
                                "template_arguments": [
                                    {
                                        "declarator": {
                                            "typemap_name": "std::string"
                                        },
                                        "specifier": [
                                            "std::string"
                                        ],
                                        "typemap_name": "std::string"
                                    }
                                ],
                                "typemap_name": "std::vector"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_string_append(std::vector< std::string > &arg+intent(inout))",
                "declgen": "void vector_string_append(std::vector<std::string> & arg +intent(inout)+rank(1))",
                "doxygen": {
                    "brief": "append '-like' to names."
                },
                "name": "vector_string_append",
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "vector_string_append",
                    "F_name_api": "vector_string_append",
                    "function_name": "vector_string_append"
                }
            },
            {
                "<FUNCTION>": "14 ****************************************",
                "ast": {
                    "declarator": {
                        "attrs": {
                            "rank": 1
                        },
                        "metaattrs": {
                            "deref": "allocatable",
                            "intent": "function"
                        },
                        "name": "ReturnVectorAlloc",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "n",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "std::vector"
                    },
                    "specifier": [
                        "std::vector"
                    ],
                    "template_arguments": [
                        {
                            "declarator": {
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "typemap_name": "std::vector"
                },
                "decl": "std::vector<int> ReturnVectorAlloc(int n)",
                "declgen": "std::vector<int> ReturnVectorAlloc(int n +value) +rank(1)",
                "doxygen": {
                    "description": "Implement iota function.\nReturn a vector as an ALLOCATABLE array.\nCopy results into the new array.\n"
                },
                "name": "ReturnVectorAlloc",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "n": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "n",
                            "ctor_expr": "n",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&n",
                            "cxx_type": "int",
                            "cxx_var": "n",
                            "data_var": "SHData_n",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_n",
                            "size_var": "SHSize_n",
                            "stmt0": "py_in_native_scalar",
                            "stmt1": "py_default",
                            "value_var": "SHValue_n"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "ReturnVectorAlloc",
                    "F_name_api": "return_vector_alloc",
                    "PY_name_impl": "PY_ReturnVectorAlloc",
                    "function_name": "ReturnVectorAlloc"
                },
                "zz_fmtresult": {
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_T": "int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "std::vector<int>",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "npy_dims_var": "SHD_rv",
                        "npy_intp_asgn": "SHD_rv[0] = SHCXX_rv->size();\n",
                        "npy_intp_decl": "npy_intp SHD_rv[1];\n",
                        "npy_rank": "1",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "rank": "1",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_vector_list_targ_native_scalar",
                        "stmt1": "py_function_vector_list",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "15 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "returnDim2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 2
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(arg,2)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "len",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int returnDim2(int *arg +rank(2)+intent(in), int len+implied(size(arg,2)))",
                "declgen": "int returnDim2(int * arg +intent(in)+rank(2), int len +implied(size(arg,2))+value)",
                "name": "returnDim2",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "arg",
                            "ctor_expr": "*arg",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "hnamefunc0": "SHROUD_get_from_object_int_list",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "pytmp_var": "SHTPy_arg",
                            "rank": "2",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_in_native_*_pointer_list",
                            "stmt1": "py_in_native_*_pointer_list",
                            "value_var": "SHValue_arg"
                        }
                    },
                    "len": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "len",
                            "ctor_expr": "len",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&len",
                            "cxx_type": "int",
                            "cxx_var": "len",
                            "data_var": "SHData_len",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "SHSize_arg",
                            "py_var": "SHPy_len",
                            "size_var": "SHSize_len",
                            "value_var": "SHValue_len"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnDim2",
                    "F_name_api": "return_dim2",
                    "PY_name_impl": "PY_returnDim2",
                    "function_name": "returnDim2"
                },
                "zz_fmtresult": {
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_native_scalar",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "vectors"
        ],
        "wrap": {
            "python": true
        }
    }
}