{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "class_map": [
            "s_Struct1"
        ],
        "classes": [
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "name": "Struct1Rename",
                "options": {},
                "parse_keyword": "struct",
                "scope": "s_Struct1::",
                "typemap_name": "s_Struct1",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "i",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "i",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "i",
                            "variable_lower": "i",
                            "variable_name": "i",
                            "variable_upper": "I"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "d",
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "name": "d",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "double",
                            "cxx_type": "double",
                            "field_name": "d",
                            "variable_lower": "d",
                            "variable_name": "d",
                            "variable_upper": "D"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wraps_Struct1.h",
                    "C_impl_filename": "wraps_Struct1.c",
                    "C_name_api": "Struct1Rename",
                    "C_name_scope": "Struct1Rename_",
                    "C_type_name": "Struct1Rename",
                    "F_derived_name": "struct1_rename",
                    "F_name_api": "struct1_rename",
                    "F_name_scope": "struct1_rename_",
                    "PY_PyObject": "PY_Struct1Rename",
                    "PY_PyTypeObject": "PY_Struct1Rename_Type",
                    "PY_from_object_func": "PP_Struct1Rename_from_Object",
                    "PY_struct_array_descr_create": "PY_Struct1Rename_create_array_descr",
                    "PY_struct_array_descr_name": "Struct1Rename_dtype",
                    "PY_struct_array_descr_variable": "PY_Struct1Rename_array_descr",
                    "PY_to_object_func": "PP_Struct1Rename_to_Object",
                    "PY_to_object_idtor_func": "PP_Struct1Rename_to_Object_idtor",
                    "class_scope": "Struct1Rename::",
                    "cxx_class": "Struct1Rename",
                    "cxx_type": "Struct1Rename",
                    "file_scope": "s_Struct1"
                }
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "typedefs.h"
        ],
        "functions": [
            {
                "<FUNCTION>": "0 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "typefunc",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "TypeID"
                                },
                                "specifier": [
                                    "TypeID"
                                ],
                                "typemap_name": "TypeID"
                            }
                        ],
                        "typemap_name": "TypeID"
                    },
                    "specifier": [
                        "TypeID"
                    ],
                    "typemap_name": "TypeID"
                },
                "decl": "TypeID typefunc(TypeID arg);",
                "declgen": "TypeID typefunc(TypeID arg +value)",
                "name": "typefunc",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "TYP_TypeID",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "TypeID",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "f_c_module_line": "--import--:type_id",
                            "f_intent": "IN",
                            "f_kind": "type_id",
                            "f_type": "integer(type_id)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "TYP_TypeID",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "TypeID",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_in_native_scalar",
                            "stmt1": "py_default",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "typefunc",
                    "C_name_api": "typefunc",
                    "C_prototype": "TYP_TypeID arg",
                    "C_return_type": "TYP_TypeID",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_typefunc",
                    "F_C_name": "typefunc",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_api": "typefunc",
                    "F_name_function": "typefunc",
                    "F_name_generic": "typefunc",
                    "F_name_impl": "typefunc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_typefunc",
                    "cxx_rv_decl": "TypeID SHC_rv",
                    "function_name": "typefunc"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "TYP_TypeID",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "TypeID",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "TypeID",
                        "f_c_module_line": "--import--:type_id",
                        "f_intent": "OUT",
                        "f_kind": "type_id",
                        "f_type": "integer(type_id)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "TypeID",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_native_scalar",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "1 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "typestruct",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Struct1Rename"
                                },
                                "specifier": [
                                    "Struct1Rename"
                                ],
                                "typemap_name": "Struct1Rename"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void typestruct(Struct1Rename *arg1);",
                "declgen": "void typestruct(Struct1Rename * arg1)",
                "name": "typestruct",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "TYP_Struct1Rename",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "Struct1Rename",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "c_inout_struct_*",
                            "stmt1": "c_inout_struct"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "c_var": "arg1",
                            "f_c_module_line": "--import--:struct1_rename",
                            "f_intent": "INOUT",
                            "f_kind": "struct1_rename",
                            "f_type": "type(struct1_rename)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "f_inout_struct_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_inout_struct_*",
                            "stmtc1": "c_inout_struct"
                        },
                        "fmtpy": {
                            "PYN_descr": "PY_s_Struct1_array_descr",
                            "PY_build_format": "O",
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "TYP_Struct1Rename",
                            "c_var": "arg1",
                            "ctor_expr": "*arg1",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "Struct1Rename",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_inout_struct_*_list",
                            "stmt1": "py_inout_struct_*_list",
                            "value_var": "SHValue_arg1",
                            "vargs": "arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg1",
                    "C_name": "typestruct",
                    "C_name_api": "typestruct",
                    "C_prototype": "TYP_Struct1Rename * arg1",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1",
                    "F_C_call": "c_typestruct",
                    "F_C_name": "typestruct",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1",
                    "F_arguments": "arg1",
                    "F_name_api": "typestruct",
                    "F_name_function": "typestruct",
                    "F_name_generic": "typestruct",
                    "F_name_impl": "typestruct",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_typestruct",
                    "function_name": "typestruct",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "2 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "returnBytesForIndexType",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "IndexType"
                                },
                                "specifier": [
                                    "IndexType"
                                ],
                                "typemap_name": "IndexType"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int returnBytesForIndexType(IndexType arg);",
                "declgen": "int returnBytesForIndexType(IndexType arg +value)",
                "name": "returnBytesForIndexType",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "TYP_IndexType",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int32_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "IndexType",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT32_T",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "f_c_module_line": "--import--:index_type",
                            "f_intent": "IN",
                            "f_kind": "index_type",
                            "f_type": "integer(index_type)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_INT32_T",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "returnBytesForIndexType",
                    "C_name_api": "returnBytesForIndexType",
                    "C_prototype": "TYP_IndexType arg",
                    "C_return_type": "int",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_return_bytes_for_index_type",
                    "F_C_name": "return_bytes_for_index_type",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_api": "return_bytes_for_index_type",
                    "F_name_function": "return_bytes_for_index_type",
                    "F_name_generic": "return_bytes_for_index_type",
                    "F_name_impl": "return_bytes_for_index_type",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "returnBytesForIndexType"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "int",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    }
                }
            }
        ],
        "language": "c",
        "scope_file": [
            "typedefs"
        ],
        "typedefs": [
            {
                "<TYPEDEF>": "****************************************",
                "ast": {
                    "declarator": {
                        "name": "TypeID",
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "typedef"
                    ],
                    "typemap_name": "TypeID"
                },
                "f_kind": "C_INT",
                "f_module": {
                    "iso_c_binding": [
                        "C_INT"
                    ]
                },
                "name": "TypeID",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name_api": "TypeID",
                    "C_name_typedef": "TYP_TypeID",
                    "F_name_api": "type_id",
                    "F_name_typedef": "type_id",
                    "cxx_type": "TypeID",
                    "typedef_name": "TypeID"
                }
            },
            {
                "<TYPEDEF>": "****************************************",
                "ast": {
                    "declarator": {
                        "name": "Struct1Rename",
                        "typemap_name": "s_Struct1"
                    },
                    "specifier": [
                        "struct s_Struct1"
                    ],
                    "storage": [
                        "typedef"
                    ],
                    "typemap_name": "Struct1Rename"
                },
                "f_kind": "s_struct1",
                "f_module": {
                    "typedefs_mod": [
                        "s_struct1"
                    ]
                },
                "name": "Struct1Rename",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name_api": "Struct1Rename",
                    "C_name_typedef": "TYP_Struct1Rename",
                    "F_name_api": "struct1_rename",
                    "F_name_typedef": "struct1_rename",
                    "cxx_type": "Struct1Rename",
                    "typedef_name": "Struct1Rename"
                }
            },
            {
                "<TYPEDEF>": "****************************************",
                "ast": {
                    "declarator": {
                        "name": "IndexType",
                        "typemap_name": "int32_t"
                    },
                    "specifier": [
                        "int32_t"
                    ],
                    "storage": [
                        "typedef"
                    ],
                    "typemap_name": "IndexType"
                },
                "f_kind": "C_INT32_T",
                "f_module": {
                    "iso_c_binding": [
                        "C_INT32_T"
                    ]
                },
                "name": "IndexType",
                "options": {},
                "user_fields": {
                    "c_to_cxx": "static_cast<IndexType>({c_var})",
                    "cxx_to_c": "static_cast<TYP_IndexType>({cxx_var})"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name_api": "IndexType",
                    "C_name_typedef": "TYP_IndexType",
                    "F_name_api": "index_type",
                    "F_name_typedef": "index_type",
                    "cxx_type": "IndexType",
                    "typedef_name": "IndexType"
                }
            }
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "python": true
        }
    },
    "symtab": {
        "Struct1Rename": "Struct1Rename",
        "s_Struct1": "struct-s_Struct1",
        "struct-s_Struct1": "s_Struct1"
    },
    "types": {
        "IndexType": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT32",
            "PY_ctor": "PyInt_FromLong({ctor_expr})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "base": "integer",
            "c_header": [
                "<stdint.h>"
            ],
            "c_to_cxx": "static_cast<IndexType>({c_var})",
            "c_type": "TYP_IndexType",
            "cfi_type": "CFI_type_int32_t",
            "cxx_header": [
                "<cstdint>"
            ],
            "cxx_to_c": "static_cast<TYP_IndexType>({cxx_var})",
            "cxx_type": "IndexType",
            "f_c_module": {
                "--import--": [
                    "index_type"
                ]
            },
            "f_c_module_line": "--import--:index_type",
            "f_cast": "int({f_var}, C_INT32_t)",
            "f_kind": "index_type",
            "f_module": {
                "typedefs_mod": [
                    "index_type"
                ]
            },
            "f_module_line": "typedefs_mod:index_type",
            "f_type": "integer(index_type)",
            "flat_name": "int32_t",
            "sgroup": "native",
            "sh_type": "SH_TYPE_INT32_T",
            "typedef": "int32_t",
            "wrap_header": [
                "wraptypedefs.h"
            ]
        },
        "Struct1Rename": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_s_Struct1_array_descr",
            "PY_struct_as": "list",
            "base": "struct",
            "c_header": [
                "typedefs.h"
            ],
            "c_type": "TYP_Struct1Rename",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Struct1Rename",
            "f_c_module": {
                "--import--": [
                    "struct1_rename"
                ]
            },
            "f_c_module_line": "--import--:struct1_rename",
            "f_derived_type": "s_struct1",
            "f_kind": "struct1_rename",
            "f_module": {
                "typedefs_mod": [
                    "struct1_rename"
                ]
            },
            "f_module_line": "typedefs_mod:struct1_rename",
            "f_module_name": "typedefs_mod",
            "f_type": "type(struct1_rename)",
            "flat_name": "s_Struct1",
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT",
            "typedef": "s_Struct1",
            "wrap_header": [
                "wraptypedefs.h"
            ]
        },
        "TypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({ctor_expr})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "base": "integer",
            "c_type": "TYP_TypeID",
            "cfi_type": "CFI_type_int",
            "cxx_type": "TypeID",
            "f_c_module": {
                "--import--": [
                    "type_id"
                ]
            },
            "f_c_module_line": "--import--:type_id",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "type_id",
            "f_module": {
                "typedefs_mod": [
                    "type_id"
                ]
            },
            "f_module_line": "typedefs_mod:type_id",
            "f_type": "integer(type_id)",
            "flat_name": "int",
            "sgroup": "native",
            "sh_type": "SH_TYPE_INT",
            "typedef": "int",
            "wrap_header": [
                "wraptypedefs.h"
            ]
        },
        "s_Struct1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Struct1Rename_array_descr",
            "PY_PyObject": "PY_Struct1Rename",
            "PY_PyTypeObject": "PY_Struct1Rename_Type",
            "PY_from_object": "PP_Struct1Rename_from_Object",
            "PY_struct_as": "list",
            "PY_to_object": "PP_Struct1Rename_to_Object",
            "PY_to_object_idtor": "PP_Struct1Rename_to_Object_idtor",
            "base": "struct",
            "c_header": [
                "typedefs.h"
            ],
            "c_type": "Struct1Rename",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Struct1Rename",
            "f_c_module": {
                "--import--": [
                    "struct1_rename"
                ]
            },
            "f_derived_type": "struct1_rename",
            "f_kind": "struct1_rename",
            "f_module": {
                "typedefs_mod": [
                    "struct1_rename"
                ]
            },
            "f_module_name": "typedefs_mod",
            "f_type": "type(struct1_rename)",
            "flat_name": "s_Struct1",
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        }
    }
}