{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "class_map": [
            "StructAsClass"
        ],
        "classes": [
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "name": "StructAsClass",
                "options": {
                    "wrap_struct_as": "class"
                },
                "parse_keyword": "struct",
                "scope": "StructAsClass::",
                "typemap_name": "StructAsClass",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "wrap_as": "class",
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapStructAsClass.h",
                    "C_impl_filename": "wrapStructAsClass.c",
                    "C_name_api": "StructAsClass",
                    "C_name_scope": "StructAsClass_",
                    "C_type_name": "GEN_StructAsClass",
                    "F_derived_name": "struct_as_class",
                    "F_name_api": "struct_as_class",
                    "F_name_scope": "struct_as_class_",
                    "PY_struct_array_descr_create": "PY_StructAsClass_create_array_descr",
                    "PY_struct_array_descr_name": "StructAsClass_dtype",
                    "PY_struct_array_descr_variable": "PY_StructAsClass_array_descr",
                    "class_scope": "StructAsClass::",
                    "cxx_class": "StructAsClass",
                    "cxx_type": "StructAsClass",
                    "f_capsule_data_type": "GEN_SHROUD_capsule_data",
                    "file_scope": "StructAsClass",
                    "hnamefunc0": "capsule_data_helper"
                }
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "generic.h",
            "helper.h"
        ],
        "functions": [
            {
                "<FUNCTION>": "0 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "UpdateAsFloat",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void UpdateAsFloat(float arg)",
                "declgen": "void UpdateAsFloat(float arg +value)",
                "name": "UpdateAsFloat",
                "options": {
                    "F_force_wrapper": true
                },
                "user_fmt": {
                    "F_name_generic": "update_real"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "float",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_float",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "float",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "C_FLOAT",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "UpdateAsFloat",
                    "C_name_api": "UpdateAsFloat",
                    "C_prototype": "float arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_update_as_float",
                    "F_C_name": "c_update_as_float",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_api": "update_as_float",
                    "F_name_function": "update_as_float",
                    "F_name_generic": "update_real",
                    "F_name_impl": "update_as_float",
                    "F_subprogram": "subroutine",
                    "function_name": "UpdateAsFloat",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "1 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "UpdateAsDouble",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void UpdateAsDouble(double arg)",
                "declgen": "void UpdateAsDouble(double arg +value)",
                "name": "UpdateAsDouble",
                "options": {
                    "F_force_wrapper": true
                },
                "user_fmt": {
                    "F_name_generic": "update_real"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "UpdateAsDouble",
                    "C_name_api": "UpdateAsDouble",
                    "C_prototype": "double arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_update_as_double",
                    "F_C_name": "c_update_as_double",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_api": "update_as_double",
                    "F_name_function": "update_as_double",
                    "F_name_generic": "update_real",
                    "F_name_impl": "update_as_double",
                    "F_subprogram": "subroutine",
                    "function_name": "UpdateAsDouble",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "2 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "GetGlobalDouble",
                        "params": [],
                        "typemap_name": "double"
                    },
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double GetGlobalDouble(void)",
                "declgen": "double GetGlobalDouble(void)",
                "name": "GetGlobalDouble",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "GetGlobalDouble",
                    "C_name_api": "GetGlobalDouble",
                    "C_prototype": "void",
                    "C_return_type": "double",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_global_double",
                    "F_C_name": "get_global_double",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arguments": "",
                    "F_name_api": "get_global_double",
                    "F_name_function": "get_global_double",
                    "F_name_generic": "get_global_double",
                    "F_name_impl": "get_global_double",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "GetGlobalDouble"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_double",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "double",
                        "f_intent": "OUT",
                        "f_kind": "C_DOUBLE",
                        "f_type": "real(C_DOUBLE)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    }
                }
            },
            {
                "<FUNCTION>": "3 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "GenericReal",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GenericReal(double arg)",
                "declgen": "void GenericReal(double arg +value)",
                "doxygen": {
                    "brief": "Single argument generic"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            }
                        ],
                        "function_suffix": "_float",
                        "generic": "(float arg)"
                    },
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "function_suffix": "_double",
                        "generic": "(double arg)"
                    }
                ],
                "name": "GenericReal",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "GenericReal",
                    "C_name_api": "GenericReal",
                    "C_prototype": "double arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_name": "c_generic_real",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "generic_real",
                    "function_name": "GenericReal",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "13 ****************************************",
                "C_generated_path": [
                    "fortran_generic"
                ],
                "_PTR_F_C_index": "3",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "GenericReal",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GenericReal(double arg)",
                "declgen": "void GenericReal(float arg +value)",
                "doxygen": {
                    "brief": "Single argument generic"
                },
                "name": "GenericReal",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name_api": "GenericReal",
                    "F_C_call": "c_generic_real",
                    "F_arg_c_call": "real(arg, C_DOUBLE)",
                    "F_arguments": "arg",
                    "F_name_api": "generic_real",
                    "F_name_function": "generic_real_float",
                    "F_name_generic": "generic_real",
                    "F_name_impl": "generic_real_float",
                    "F_subprogram": "subroutine",
                    "function_name": "GenericReal",
                    "function_suffix": "_float",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "14 ****************************************",
                "C_generated_path": [
                    "fortran_generic"
                ],
                "_PTR_F_C_index": "3",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "GenericReal",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GenericReal(double arg)",
                "declgen": "void GenericReal(double arg +value)",
                "doxygen": {
                    "brief": "Single argument generic"
                },
                "name": "GenericReal",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name_api": "GenericReal",
                    "F_C_call": "c_generic_real",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_api": "generic_real",
                    "F_name_function": "generic_real_double",
                    "F_name_generic": "generic_real",
                    "F_name_impl": "generic_real_double",
                    "F_subprogram": "subroutine",
                    "function_name": "GenericReal",
                    "function_suffix": "_double",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "4 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "GenericReal2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1",
                                    "typemap_name": "long"
                                },
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "typemap_name": "long"
                                },
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "typemap_name": "long"
                    },
                    "specifier": [
                        "long"
                    ],
                    "typemap_name": "long"
                },
                "decl": "long GenericReal2(long arg1, long arg2)",
                "declgen": "long GenericReal2(long arg1 +value, long arg2 +value)",
                "doxygen": {
                    "brief": "Two argument generic",
                    "description": "It is not possible to call the function with (int, long)\nor (long, int)\n"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_all_int",
                        "generic": "(int arg1, int arg2)"
                    },
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1",
                                    "typemap_name": "long"
                                },
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "typemap_name": "long"
                                },
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "function_suffix": "_all_long",
                        "generic": "(long arg1, long arg2)"
                    }
                ],
                "name": "GenericReal2",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "long",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_long",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "long",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "c_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_LONG",
                            "f_type": "integer(C_LONG)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "long",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_long",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg2",
                            "c_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_LONG",
                            "f_type": "integer(C_LONG)",
                            "f_var": "arg2",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "GenericReal2",
                    "C_name_api": "GenericReal2",
                    "C_prototype": "long arg1,\t long arg2",
                    "C_return_type": "long",
                    "F_C_arguments": "arg1,\t arg2",
                    "F_C_name": "c_generic_real2",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "generic_real2",
                    "cxx_rv_decl": "long SHC_rv",
                    "function_name": "GenericReal2"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "long",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_long",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "long",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_LONG",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_LONG",
                        "f_type": "integer(C_LONG)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_LONG"
                    }
                }
            },
            {
                "<FUNCTION>": "15 ****************************************",
                "C_generated_path": [
                    "fortran_generic"
                ],
                "_PTR_F_C_index": "4",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "GenericReal2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "long"
                    },
                    "specifier": [
                        "long"
                    ],
                    "typemap_name": "long"
                },
                "decl": "long GenericReal2(long arg1, long arg2)",
                "declgen": "long GenericReal2(int arg1 +value, int arg2 +value)",
                "doxygen": {
                    "brief": "Two argument generic",
                    "description": "It is not possible to call the function with (int, long)\nor (long, int)\n"
                },
                "name": "GenericReal2",
                "options": {},
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name_api": "GenericReal2",
                    "F_C_call": "c_generic_real2",
                    "F_arg_c_call": "int(arg1, C_LONG),\t int(arg2, C_LONG)",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_api": "generic_real2",
                    "F_name_function": "generic_real2_all_int",
                    "F_name_generic": "generic_real2",
                    "F_name_impl": "generic_real2_all_int",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "function_name": "GenericReal2",
                    "function_suffix": "_all_int"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_var": "SHT_rv",
                        "cxx_type": "long",
                        "f_intent": "OUT",
                        "f_kind": "C_LONG",
                        "f_type": "integer(C_LONG)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_LONG",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    }
                }
            },
            {
                "<FUNCTION>": "16 ****************************************",
                "C_generated_path": [
                    "fortran_generic"
                ],
                "_PTR_F_C_index": "4",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "GenericReal2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1",
                                    "typemap_name": "long"
                                },
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "typemap_name": "long"
                                },
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "typemap_name": "long"
                    },
                    "specifier": [
                        "long"
                    ],
                    "typemap_name": "long"
                },
                "decl": "long GenericReal2(long arg1, long arg2)",
                "declgen": "long GenericReal2(long arg1 +value, long arg2 +value)",
                "doxygen": {
                    "brief": "Two argument generic",
                    "description": "It is not possible to call the function with (int, long)\nor (long, int)\n"
                },
                "name": "GenericReal2",
                "options": {},
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name_api": "GenericReal2",
                    "F_C_call": "c_generic_real2",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_api": "generic_real2",
                    "F_name_function": "generic_real2_all_long",
                    "F_name_generic": "generic_real2",
                    "F_name_impl": "generic_real2_all_long",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "function_name": "GenericReal2",
                    "function_suffix": "_all_long"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_var": "SHT_rv",
                        "cxx_type": "long",
                        "f_intent": "OUT",
                        "f_kind": "C_LONG",
                        "f_type": "integer(C_LONG)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_LONG",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    }
                }
            },
            {
                "<FUNCTION>": "5 ****************************************",
                "C_generated_path": [
                    "arg_to_cfi"
                ],
                "_PTR_F_C_index": "28",
                "_gen_fortran_generic": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "SumValues",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "dimension": ".."
                                    },
                                    "metaattrs": {
                                        "assumed-rank": true,
                                        "dimension": {
                                            "assumedrank": true
                                        },
                                        "intent": "in"
                                    },
                                    "name": "values",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nvalues",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int SumValues(const int *values+dimension(..), int nvalues)",
                "declgen": "int SumValues(const int * values +dimension(..), int nvalues +value)",
                "doxygen": {
                    "brief": "scalar or array argument using assumed rank"
                },
                "name": "SumValues",
                "options": {
                    "F_assumed_rank_max": 2,
                    "wrap_fortran": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "nvalues": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "nvalues",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nvalues",
                            "cxx_type": "int",
                            "cxx_var": "nvalues",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nvalues",
                            "c_var": "nvalues",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "nvalues",
                            "sh_type": "SH_TYPE_INT"
                        }
                    },
                    "values": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "values",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(int *) values",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "idtor": "0",
                            "rank": "assumed",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "values",
                            "c_var": "values",
                            "f_assumed_shape": "(..)",
                            "f_c_dimension": "(..)",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "values",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "values,\t nvalues",
                    "C_name": "SumValues",
                    "C_name_api": "SumValues",
                    "C_prototype": "const int * values,\t int nvalues",
                    "C_return_type": "int",
                    "F_C_arguments": "values,\t nvalues",
                    "F_C_call": "c_sum_values_CFI",
                    "F_C_name": "c_sum_values",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "values,\t nvalues",
                    "F_arguments": "values,\t nvalues",
                    "F_name_api": "sum_values",
                    "F_name_function": "sum_values",
                    "F_name_generic": "sum_values",
                    "F_name_impl": "sum_values",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "SumValues"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "int",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    }
                }
            },
            {
                "<FUNCTION>": "28 ****************************************",
                "_PTR_C_CXX_index": "5",
                "_gen_fortran_generic": true,
                "_generated": "arg_to_cfi",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "SumValues",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "dimension": ".."
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "assumed-rank": true,
                                        "dimension": {
                                            "assumedrank": true
                                        },
                                        "intent": "in"
                                    },
                                    "name": "values",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nvalues",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int SumValues(const int *values+dimension(..), int nvalues)",
                "declgen": "int SumValues(const int * values +dimension(..), int nvalues +value)",
                "doxygen": {
                    "brief": "scalar or array argument using assumed rank"
                },
                "name": "SumValues",
                "options": {
                    "F_assumed_rank_max": 2,
                    "wrap_fortran": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "nvalues": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "nvalues",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nvalues",
                            "cxx_type": "int",
                            "cxx_var": "nvalues",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nvalues",
                            "c_var": "nvalues",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "nvalues",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "values": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "values",
                            "c_var_cfi": "SHT_values_cfi",
                            "c_var_extents": "SHT_values_extents",
                            "c_var_lower": "SHT_values_lower",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(int *) SHCXX_values",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_values",
                            "idtor": "0",
                            "rank": "assumed",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_*_cfi",
                            "stmt1": "c_in_native_*_cfi"
                        },
                        "fmtf": {
                            "F_C_var": "values",
                            "c_var": "values",
                            "c_var_cfi": "SHT_values_cfi",
                            "c_var_extents": "SHT_values_extents",
                            "c_var_lower": "SHT_values_lower",
                            "f_assumed_shape": "(..)",
                            "f_c_dimension": "(..)",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "values",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_*_cfi",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_*_cfi",
                            "stmtc1": "c_in_native_*_cfi"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_values,\t nvalues",
                    "C_name": "GEN_SumValues_CFI",
                    "C_name_api": "SumValues",
                    "C_prototype": "CFI_cdesc_t *SHT_values_cfi,\t int nvalues",
                    "C_return_type": "int",
                    "F_C_arguments": "values,\t nvalues",
                    "F_C_name": "sum_values",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "sum_values",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "SumValues",
                    "function_suffix": "_CFI"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT"
                    }
                }
            },
            {
                "<FUNCTION>": "6 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "AssignValues",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "from",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nfrom",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "to",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nto",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssignValues(const int *from, int nfrom, int *to, int nto)",
                "declgen": "void AssignValues(const int * from, int nfrom +value, int * to, int nto +value)",
                "doxygen": {
                    "description": "Broadcast if nfrom == 1\nCopy if nfrom == nto\n"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "from",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nfrom",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "to",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nto",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_scalar",
                        "generic": "(const int *from, int *to)"
                    },
                    {
                        "decls": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "from",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nfrom",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "to",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nto",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_broadcast",
                        "generic": "(const int *from, int *to+rank(1))"
                    },
                    {
                        "decls": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "from",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nfrom",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "to",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nto",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_copy",
                        "generic": "(const int *from+rank(1), int *to+rank(1))"
                    }
                ],
                "name": "AssignValues",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "from": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "from",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(int *) from",
                            "cxx_type": "int",
                            "cxx_var": "from",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "from",
                            "c_var": "from",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "from",
                            "sh_type": "SH_TYPE_INT"
                        }
                    },
                    "nfrom": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "nfrom",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nfrom",
                            "cxx_type": "int",
                            "cxx_var": "nfrom",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nfrom",
                            "c_var": "nfrom",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "nfrom",
                            "sh_type": "SH_TYPE_INT"
                        }
                    },
                    "nto": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "nto",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nto",
                            "cxx_type": "int",
                            "cxx_var": "nto",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nto",
                            "c_var": "nto",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "nto",
                            "sh_type": "SH_TYPE_INT"
                        }
                    },
                    "to": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "to",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "to",
                            "cxx_type": "int",
                            "cxx_var": "to",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_inout_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "to",
                            "c_var": "to",
                            "f_intent": "INOUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "to",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "from,\t nfrom,\t to,\t nto",
                    "C_name": "AssignValues",
                    "C_name_api": "AssignValues",
                    "C_prototype": "const int * from,\t int nfrom,\t int * to,\t int nto",
                    "C_return_type": "void",
                    "F_C_arguments": "from,\t nfrom,\t to,\t nto",
                    "F_C_name": "c_assign_values",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "assign_values",
                    "function_name": "AssignValues",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "17 ****************************************",
                "C_force_wrapper": "True",
                "C_generated_path": [
                    "fortran_generic"
                ],
                "_PTR_C_CXX_index": "6",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "AssignValues",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "from",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nfrom",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "to",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nto",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssignValues(const int *from, int nfrom, int *to, int nto)",
                "declgen": "void AssignValues(const int * from, int nfrom +value, int * to, int nto +value)",
                "doxygen": {
                    "description": "Broadcast if nfrom == 1\nCopy if nfrom == nto\n"
                },
                "name": "AssignValues",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "from": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "from",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(int *) from",
                            "cxx_type": "int",
                            "cxx_var": "from",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "from",
                            "c_var": "from",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "from",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_*",
                            "stmtc1": "c_default"
                        }
                    },
                    "nfrom": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "nfrom",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nfrom",
                            "cxx_type": "int",
                            "cxx_var": "nfrom",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nfrom",
                            "c_var": "nfrom",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "nfrom",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "nto": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "nto",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nto",
                            "cxx_type": "int",
                            "cxx_var": "nto",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nto",
                            "c_var": "nto",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "nto",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "to": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "to",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "to",
                            "cxx_type": "int",
                            "cxx_var": "to",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_inout_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "to",
                            "c_var": "to",
                            "f_intent": "INOUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "to",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_inout_native_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_inout_native_*",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "from,\t nfrom,\t to,\t nto",
                    "C_name": "GEN_AssignValues_scalar",
                    "C_name_api": "AssignValues",
                    "C_prototype": "const int * from,\t int nfrom,\t int * to,\t int nto",
                    "C_return_type": "void",
                    "F_C_arguments": "from,\t nfrom,\t to,\t nto",
                    "F_C_call": "c_assign_values_scalar",
                    "F_C_name": "c_assign_values_scalar",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "from,\t nfrom,\t to,\t nto",
                    "F_arguments": "from,\t nfrom,\t to,\t nto",
                    "F_name_api": "assign_values",
                    "F_name_function": "assign_values_scalar",
                    "F_name_generic": "assign_values",
                    "F_name_impl": "assign_values_scalar",
                    "F_subprogram": "subroutine",
                    "function_name": "AssignValues",
                    "function_suffix": "_scalar",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "18 ****************************************",
                "C_force_wrapper": "True",
                "C_generated_path": [
                    "fortran_generic",
                    "arg_to_cfi"
                ],
                "_PTR_C_CXX_index": "6",
                "_PTR_F_C_index": "29",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "AssignValues",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "from",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nfrom",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "to",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nto",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssignValues(const int *from, int nfrom, int *to, int nto)",
                "declgen": "void AssignValues(const int * from, int nfrom +value, int * to +rank(1), int nto +value)",
                "doxygen": {
                    "description": "Broadcast if nfrom == 1\nCopy if nfrom == nto\n"
                },
                "name": "AssignValues",
                "options": {
                    "wrap_fortran": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name_api": "AssignValues",
                    "F_C_call": "c_assign_values_broadcast_CFI",
                    "F_arg_c_call": "from,\t nfrom,\t to,\t nto",
                    "F_arguments": "from,\t nfrom,\t to,\t nto",
                    "F_name_api": "assign_values",
                    "F_name_function": "assign_values_broadcast",
                    "F_name_generic": "assign_values",
                    "F_name_impl": "assign_values_broadcast",
                    "F_subprogram": "subroutine",
                    "function_name": "AssignValues",
                    "function_suffix": "_broadcast",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "29 ****************************************",
                "C_force_wrapper": "True",
                "_PTR_C_CXX_index": "18",
                "_generated": "arg_to_cfi",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "AssignValues",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "from",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nfrom",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "inout"
                                    },
                                    "name": "to",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nto",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssignValues(const int *from, int nfrom, int *to, int nto)",
                "declgen": "void AssignValues(const int * from, int nfrom +value, int * to +rank(1), int nto +value)",
                "doxygen": {
                    "description": "Broadcast if nfrom == 1\nCopy if nfrom == nto\n"
                },
                "name": "AssignValues",
                "options": {
                    "wrap_fortran": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "from": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "from",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(int *) from",
                            "cxx_type": "int",
                            "cxx_var": "from",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "from",
                            "c_var": "from",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "from",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_*",
                            "stmtc1": "c_default"
                        }
                    },
                    "nfrom": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "nfrom",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nfrom",
                            "cxx_type": "int",
                            "cxx_var": "nfrom",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nfrom",
                            "c_var": "nfrom",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "nfrom",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "nto": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "nto",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nto",
                            "cxx_type": "int",
                            "cxx_var": "nto",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nto",
                            "c_var": "nto",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "nto",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "to": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "to",
                            "c_var_cfi": "SHT_to_cfi",
                            "c_var_extents": "SHT_to_extents",
                            "c_var_lower": "SHT_to_lower",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_to",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_to",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_inout_native_*_cfi",
                            "stmt1": "c_inout_native_*_cfi"
                        },
                        "fmtf": {
                            "F_C_var": "to",
                            "c_var": "to",
                            "c_var_cfi": "SHT_to_cfi",
                            "c_var_extents": "SHT_to_extents",
                            "c_var_lower": "SHT_to_lower",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "INOUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "to",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(to)",
                            "stmt0": "f_inout_native_*_cfi",
                            "stmt1": "f_default",
                            "stmtc0": "c_inout_native_*_cfi",
                            "stmtc1": "c_inout_native_*_cfi"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "from,\t nfrom,\t SHCXX_to,\t nto",
                    "C_name": "GEN_AssignValues_broadcast_CFI",
                    "C_name_api": "AssignValues",
                    "C_prototype": "const int * from,\t int nfrom,\t CFI_cdesc_t *SHT_to_cfi,\t int nto",
                    "C_return_type": "void",
                    "F_C_arguments": "from,\t nfrom,\t to,\t nto",
                    "F_C_name": "c_assign_values_broadcast_CFI",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "assign_values",
                    "function_name": "AssignValues",
                    "function_suffix": "_broadcast_CFI",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "19 ****************************************",
                "C_force_wrapper": "True",
                "C_generated_path": [
                    "fortran_generic",
                    "arg_to_cfi"
                ],
                "_PTR_C_CXX_index": "6",
                "_PTR_F_C_index": "30",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "AssignValues",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "from",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nfrom",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "to",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nto",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssignValues(const int *from, int nfrom, int *to, int nto)",
                "declgen": "void AssignValues(const int * from +rank(1), int nfrom +value, int * to +rank(1), int nto +value)",
                "doxygen": {
                    "description": "Broadcast if nfrom == 1\nCopy if nfrom == nto\n"
                },
                "name": "AssignValues",
                "options": {
                    "wrap_fortran": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name_api": "AssignValues",
                    "F_C_call": "c_assign_values_copy_CFI",
                    "F_arg_c_call": "from,\t nfrom,\t to,\t nto",
                    "F_arguments": "from,\t nfrom,\t to,\t nto",
                    "F_name_api": "assign_values",
                    "F_name_function": "assign_values_copy",
                    "F_name_generic": "assign_values",
                    "F_name_impl": "assign_values_copy",
                    "F_subprogram": "subroutine",
                    "function_name": "AssignValues",
                    "function_suffix": "_copy",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "30 ****************************************",
                "C_force_wrapper": "True",
                "_PTR_C_CXX_index": "19",
                "_generated": "arg_to_cfi",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "AssignValues",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "in"
                                    },
                                    "name": "from",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nfrom",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "inout"
                                    },
                                    "name": "to",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nto",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssignValues(const int *from, int nfrom, int *to, int nto)",
                "declgen": "void AssignValues(const int * from +rank(1), int nfrom +value, int * to +rank(1), int nto +value)",
                "doxygen": {
                    "description": "Broadcast if nfrom == 1\nCopy if nfrom == nto\n"
                },
                "name": "AssignValues",
                "options": {
                    "wrap_fortran": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "from": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "from",
                            "c_var_cfi": "SHT_from_cfi",
                            "c_var_extents": "SHT_from_extents",
                            "c_var_lower": "SHT_from_lower",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(int *) SHCXX_from",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_from",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_*_cfi",
                            "stmt1": "c_in_native_*_cfi"
                        },
                        "fmtf": {
                            "F_C_var": "from",
                            "c_var": "from",
                            "c_var_cfi": "SHT_from_cfi",
                            "c_var_extents": "SHT_from_extents",
                            "c_var_lower": "SHT_from_lower",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "from",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(from)",
                            "stmt0": "f_in_native_*_cfi",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_*_cfi",
                            "stmtc1": "c_in_native_*_cfi"
                        }
                    },
                    "nfrom": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "nfrom",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nfrom",
                            "cxx_type": "int",
                            "cxx_var": "nfrom",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nfrom",
                            "c_var": "nfrom",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "nfrom",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "nto": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "nto",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nto",
                            "cxx_type": "int",
                            "cxx_var": "nto",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nto",
                            "c_var": "nto",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "nto",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "to": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "to",
                            "c_var_cfi": "SHT_to_cfi",
                            "c_var_extents": "SHT_to_extents",
                            "c_var_lower": "SHT_to_lower",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_to",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_to",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_inout_native_*_cfi",
                            "stmt1": "c_inout_native_*_cfi"
                        },
                        "fmtf": {
                            "F_C_var": "to",
                            "c_var": "to",
                            "c_var_cfi": "SHT_to_cfi",
                            "c_var_extents": "SHT_to_extents",
                            "c_var_lower": "SHT_to_lower",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "INOUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "to",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(to)",
                            "stmt0": "f_inout_native_*_cfi",
                            "stmt1": "f_default",
                            "stmtc0": "c_inout_native_*_cfi",
                            "stmtc1": "c_inout_native_*_cfi"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_from,\t nfrom,\t SHCXX_to,\t nto",
                    "C_name": "GEN_AssignValues_copy_CFI",
                    "C_name_api": "AssignValues",
                    "C_prototype": "CFI_cdesc_t *SHT_from_cfi,\t int nfrom,\t CFI_cdesc_t *SHT_to_cfi,\t int nto",
                    "C_return_type": "void",
                    "F_C_arguments": "from,\t nfrom,\t to,\t nto",
                    "F_C_name": "c_assign_values_copy_CFI",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "assign_values",
                    "function_name": "AssignValues",
                    "function_suffix": "_copy_CFI",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "7 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "SavePointer",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "size",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer(void *addr, int type, size_t size+implied(size(addr)))",
                "declgen": "void SavePointer(void * addr +value, int type +value, size_t size +implied(size(addr))+value)",
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "T_FLOAT",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "size",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float1d",
                        "generic": "(float *addr+rank(1)+intent(in),    int type+implied(T_FLOAT))"
                    },
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 2
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "T_FLOAT",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "size",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float2d",
                        "generic": "(float *addr+rank(2)+intent(in),  int type+implied(T_FLOAT))"
                    }
                ],
                "name": "SavePointer",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "addr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "addr",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_in_void_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "addr",
                            "c_var": "addr",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_var": "addr",
                            "sh_type": "SH_TYPE_CPTR"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "size_t",
                            "c_var": "size",
                            "cfi_type": "CFI_type_size_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&size",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "size",
                            "c_var": "size",
                            "f_intent": "IN",
                            "f_kind": "C_SIZE_T",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "sh_type": "SH_TYPE_SIZE_T"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "c_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "addr,\t type,\t size",
                    "C_name": "SavePointer",
                    "C_name_api": "SavePointer",
                    "C_prototype": "void * addr,\t int type,\t size_t size",
                    "C_return_type": "void",
                    "F_C_arguments": "addr,\t type,\t size",
                    "F_C_name": "c_save_pointer",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "save_pointer",
                    "function_name": "SavePointer",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "20 ****************************************",
                "C_force_wrapper": "True",
                "C_generated_path": [
                    "fortran_generic",
                    "arg_to_cfi"
                ],
                "_PTR_C_CXX_index": "7",
                "_PTR_F_C_index": "31",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "SavePointer",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "T_FLOAT",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "size",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer(void *addr, int type, size_t size+implied(size(addr)))",
                "declgen": "void SavePointer(float * addr +intent(in)+rank(1), int type +implied(T_FLOAT)+value, size_t size +implied(size(addr))+value)",
                "name": "SavePointer",
                "options": {
                    "wrap_fortran": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name_api": "SavePointer",
                    "F_C_call": "c_save_pointer_float1d_CFI",
                    "F_arg_c_call": "addr,\t SH_type,\t SH_size",
                    "F_arguments": "addr",
                    "F_name_api": "save_pointer",
                    "F_name_function": "save_pointer_float1d",
                    "F_name_generic": "save_pointer",
                    "F_name_impl": "save_pointer_float1d",
                    "F_subprogram": "subroutine",
                    "function_name": "SavePointer",
                    "function_suffix": "_float1d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "31 ****************************************",
                "C_force_wrapper": "True",
                "_PTR_C_CXX_index": "20",
                "_generated": "arg_to_cfi",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "SavePointer",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "T_FLOAT",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "size",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer(void *addr, int type, size_t size+implied(size(addr)))",
                "declgen": "void SavePointer(float * addr +intent(in)+rank(1), int type +implied(T_FLOAT)+value, size_t size +implied(size(addr))+value)",
                "name": "SavePointer",
                "options": {
                    "wrap_fortran": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "float",
                            "c_var": "addr",
                            "c_var_cfi": "SHT_addr_cfi",
                            "c_var_extents": "SHT_addr_extents",
                            "c_var_lower": "SHT_addr_lower",
                            "cfi_type": "CFI_type_float",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_addr",
                            "cxx_type": "float",
                            "cxx_var": "SHCXX_addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt0": "c_in_native_*_cfi",
                            "stmt1": "c_in_native_*_cfi"
                        },
                        "fmtf": {
                            "F_C_var": "addr",
                            "c_var": "addr",
                            "c_var_cfi": "SHT_addr_cfi",
                            "c_var_extents": "SHT_addr_extents",
                            "c_var_lower": "SHT_addr_lower",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "IN",
                            "f_kind": "C_FLOAT",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "addr",
                            "rank": "1",
                            "sh_type": "SH_TYPE_FLOAT",
                            "size": "size(addr)",
                            "stmt0": "f_in_native_*_cfi",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_*_cfi",
                            "stmtc1": "c_in_native_*_cfi"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "size_t",
                            "c_var": "size",
                            "cfi_type": "CFI_type_size_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&size",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "size",
                            "c_var": "size",
                            "f_intent": "IN",
                            "f_kind": "C_SIZE_T",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "pre_call_intent": "size(addr,kind=C_SIZE_T)",
                            "sh_type": "SH_TYPE_SIZE_T"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "c_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "pre_call_intent": "T_FLOAT",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_addr,\t type,\t size",
                    "C_name": "GEN_SavePointer_float1d_CFI",
                    "C_name_api": "SavePointer",
                    "C_prototype": "CFI_cdesc_t *SHT_addr_cfi,\t int type,\t size_t size",
                    "C_return_type": "void",
                    "F_C_arguments": "addr,\t type,\t size",
                    "F_C_name": "c_save_pointer_float1d_CFI",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "save_pointer",
                    "function_name": "SavePointer",
                    "function_suffix": "_float1d_CFI",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "21 ****************************************",
                "C_force_wrapper": "True",
                "C_generated_path": [
                    "fortran_generic",
                    "arg_to_cfi"
                ],
                "_PTR_C_CXX_index": "7",
                "_PTR_F_C_index": "32",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "SavePointer",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 2
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "T_FLOAT",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "size",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer(void *addr, int type, size_t size+implied(size(addr)))",
                "declgen": "void SavePointer(float * addr +intent(in)+rank(2), int type +implied(T_FLOAT)+value, size_t size +implied(size(addr))+value)",
                "name": "SavePointer",
                "options": {
                    "wrap_fortran": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name_api": "SavePointer",
                    "F_C_call": "c_save_pointer_float2d_CFI",
                    "F_arg_c_call": "addr,\t SH_type,\t SH_size",
                    "F_arguments": "addr",
                    "F_name_api": "save_pointer",
                    "F_name_function": "save_pointer_float2d",
                    "F_name_generic": "save_pointer",
                    "F_name_impl": "save_pointer_float2d",
                    "F_subprogram": "subroutine",
                    "function_name": "SavePointer",
                    "function_suffix": "_float2d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "32 ****************************************",
                "C_force_wrapper": "True",
                "_PTR_C_CXX_index": "21",
                "_generated": "arg_to_cfi",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "SavePointer",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 2
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "T_FLOAT",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "size",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer(void *addr, int type, size_t size+implied(size(addr)))",
                "declgen": "void SavePointer(float * addr +intent(in)+rank(2), int type +implied(T_FLOAT)+value, size_t size +implied(size(addr))+value)",
                "name": "SavePointer",
                "options": {
                    "wrap_fortran": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "float",
                            "c_var": "addr",
                            "c_var_cfi": "SHT_addr_cfi",
                            "c_var_extents": "SHT_addr_extents",
                            "c_var_lower": "SHT_addr_lower",
                            "cfi_type": "CFI_type_float",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_addr",
                            "cxx_type": "float",
                            "cxx_var": "SHCXX_addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt0": "c_in_native_*_cfi",
                            "stmt1": "c_in_native_*_cfi"
                        },
                        "fmtf": {
                            "F_C_var": "addr",
                            "c_var": "addr",
                            "c_var_cfi": "SHT_addr_cfi",
                            "c_var_extents": "SHT_addr_extents",
                            "c_var_lower": "SHT_addr_lower",
                            "f_assumed_shape": "(:,:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "IN",
                            "f_kind": "C_FLOAT",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "addr",
                            "rank": "2",
                            "sh_type": "SH_TYPE_FLOAT",
                            "size": "size(addr)",
                            "stmt0": "f_in_native_*_cfi",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_*_cfi",
                            "stmtc1": "c_in_native_*_cfi"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "size_t",
                            "c_var": "size",
                            "cfi_type": "CFI_type_size_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&size",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "size",
                            "c_var": "size",
                            "f_intent": "IN",
                            "f_kind": "C_SIZE_T",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "pre_call_intent": "size(addr,kind=C_SIZE_T)",
                            "sh_type": "SH_TYPE_SIZE_T"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "c_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "pre_call_intent": "T_FLOAT",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_addr,\t type,\t size",
                    "C_name": "GEN_SavePointer_float2d_CFI",
                    "C_name_api": "SavePointer",
                    "C_prototype": "CFI_cdesc_t *SHT_addr_cfi,\t int type,\t size_t size",
                    "C_return_type": "void",
                    "F_C_arguments": "addr,\t type,\t size",
                    "F_C_name": "c_save_pointer_float2d_CFI",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "save_pointer",
                    "function_name": "SavePointer",
                    "function_suffix": "_float2d_CFI",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "8 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "SavePointer2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "type(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "size",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer2(void *addr, int type+implied(type(addr)), size_t size+implied(size(addr)))",
                "declgen": "void SavePointer2(void * addr +value, int type +implied(type(addr))+value, size_t size +implied(size(addr))+value)",
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "type(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "size",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float1d",
                        "generic": "(float *addr+rank(1)+intent(in))"
                    },
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 2
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "type(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "size",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float2d",
                        "generic": "(float *addr+rank(2)+intent(in))"
                    }
                ],
                "fstatements": {
                    "c": {
                        "c_helper": "ShroudTypeDefines",
                        "pre_call": [
                            "// Test adding a blank line below.",
                            "",
                            "type = convert_type(type);"
                        ]
                    }
                },
                "name": "SavePointer2",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "addr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "addr",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_in_void_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "addr",
                            "c_var": "addr",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_var": "addr",
                            "sh_type": "SH_TYPE_CPTR"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "size_t",
                            "c_var": "size",
                            "cfi_type": "CFI_type_size_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&size",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "size",
                            "c_var": "size",
                            "f_intent": "IN",
                            "f_kind": "C_SIZE_T",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "sh_type": "SH_TYPE_SIZE_T"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "c_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "addr,\t type,\t size",
                    "C_name": "GEN_SavePointer2",
                    "C_name_api": "SavePointer2",
                    "C_prototype": "void * addr,\t int type,\t size_t size",
                    "C_return_type": "void",
                    "F_C_arguments": "addr,\t type,\t size",
                    "F_C_name": "c_save_pointer2",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "save_pointer2",
                    "function_name": "SavePointer2",
                    "hnamefunc0": "ShroudTypeDefines",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "22 ****************************************",
                "C_force_wrapper": "True",
                "C_generated_path": [
                    "fortran_generic",
                    "arg_to_cfi"
                ],
                "_PTR_C_CXX_index": "8",
                "_PTR_F_C_index": "33",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "SavePointer2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "type(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "size",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer2(void *addr, int type+implied(type(addr)), size_t size+implied(size(addr)))",
                "declgen": "void SavePointer2(float * addr +intent(in)+rank(1), int type +implied(type(addr))+value, size_t size +implied(size(addr))+value)",
                "fstatements": {
                    "c": {
                        "c_helper": "ShroudTypeDefines",
                        "pre_call": [
                            "// Test adding a blank line below.",
                            "",
                            "type = convert_type(type);"
                        ]
                    }
                },
                "name": "SavePointer2",
                "options": {
                    "wrap_fortran": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name_api": "SavePointer2",
                    "F_C_call": "c_save_pointer2_float1d_CFI",
                    "F_arg_c_call": "addr,\t SH_type,\t SH_size",
                    "F_arguments": "addr",
                    "F_name_api": "save_pointer2",
                    "F_name_function": "save_pointer2_float1d",
                    "F_name_generic": "save_pointer2",
                    "F_name_impl": "save_pointer2_float1d",
                    "F_subprogram": "subroutine",
                    "function_name": "SavePointer2",
                    "function_suffix": "_float1d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "33 ****************************************",
                "C_force_wrapper": "True",
                "_PTR_C_CXX_index": "22",
                "_generated": "arg_to_cfi",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "SavePointer2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "type(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "size",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer2(void *addr, int type+implied(type(addr)), size_t size+implied(size(addr)))",
                "declgen": "void SavePointer2(float * addr +intent(in)+rank(1), int type +implied(type(addr))+value, size_t size +implied(size(addr))+value)",
                "fstatements": {
                    "c": {
                        "c_helper": "ShroudTypeDefines",
                        "pre_call": [
                            "// Test adding a blank line below.",
                            "",
                            "type = convert_type(type);"
                        ]
                    }
                },
                "name": "SavePointer2",
                "options": {
                    "wrap_fortran": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "float",
                            "c_var": "addr",
                            "c_var_cfi": "SHT_addr_cfi",
                            "c_var_extents": "SHT_addr_extents",
                            "c_var_lower": "SHT_addr_lower",
                            "cfi_type": "CFI_type_float",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_addr",
                            "cxx_type": "float",
                            "cxx_var": "SHCXX_addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt0": "c_in_native_*_cfi",
                            "stmt1": "c_in_native_*_cfi"
                        },
                        "fmtf": {
                            "F_C_var": "addr",
                            "c_var": "addr",
                            "c_var_cfi": "SHT_addr_cfi",
                            "c_var_extents": "SHT_addr_extents",
                            "c_var_lower": "SHT_addr_lower",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "IN",
                            "f_kind": "C_FLOAT",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "addr",
                            "rank": "1",
                            "sh_type": "SH_TYPE_FLOAT",
                            "size": "size(addr)",
                            "stmt0": "f_in_native_*_cfi",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_*_cfi",
                            "stmtc1": "c_in_native_*_cfi"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "size_t",
                            "c_var": "size",
                            "cfi_type": "CFI_type_size_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&size",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "size",
                            "c_var": "size",
                            "f_intent": "IN",
                            "f_kind": "C_SIZE_T",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "pre_call_intent": "size(addr,kind=C_SIZE_T)",
                            "sh_type": "SH_TYPE_SIZE_T"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "c_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "pre_call_intent": "SH_TYPE_FLOAT",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_addr,\t type,\t size",
                    "C_name": "GEN_SavePointer2_float1d_CFI",
                    "C_name_api": "SavePointer2",
                    "C_prototype": "CFI_cdesc_t *SHT_addr_cfi,\t int type,\t size_t size",
                    "C_return_type": "void",
                    "F_C_arguments": "addr,\t type,\t size",
                    "F_C_name": "c_save_pointer2_float1d_CFI",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "save_pointer2",
                    "function_name": "SavePointer2",
                    "function_suffix": "_float1d_CFI",
                    "hnamefunc0": "ShroudTypeDefines",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "23 ****************************************",
                "C_force_wrapper": "True",
                "C_generated_path": [
                    "fortran_generic",
                    "arg_to_cfi"
                ],
                "_PTR_C_CXX_index": "8",
                "_PTR_F_C_index": "34",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "SavePointer2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 2
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "type(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "size",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer2(void *addr, int type+implied(type(addr)), size_t size+implied(size(addr)))",
                "declgen": "void SavePointer2(float * addr +intent(in)+rank(2), int type +implied(type(addr))+value, size_t size +implied(size(addr))+value)",
                "fstatements": {
                    "c": {
                        "c_helper": "ShroudTypeDefines",
                        "pre_call": [
                            "// Test adding a blank line below.",
                            "",
                            "type = convert_type(type);"
                        ]
                    }
                },
                "name": "SavePointer2",
                "options": {
                    "wrap_fortran": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name_api": "SavePointer2",
                    "F_C_call": "c_save_pointer2_float2d_CFI",
                    "F_arg_c_call": "addr,\t SH_type,\t SH_size",
                    "F_arguments": "addr",
                    "F_name_api": "save_pointer2",
                    "F_name_function": "save_pointer2_float2d",
                    "F_name_generic": "save_pointer2",
                    "F_name_impl": "save_pointer2_float2d",
                    "F_subprogram": "subroutine",
                    "function_name": "SavePointer2",
                    "function_suffix": "_float2d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "34 ****************************************",
                "C_force_wrapper": "True",
                "_PTR_C_CXX_index": "23",
                "_generated": "arg_to_cfi",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "SavePointer2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 2
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "type(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(addr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "size",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer2(void *addr, int type+implied(type(addr)), size_t size+implied(size(addr)))",
                "declgen": "void SavePointer2(float * addr +intent(in)+rank(2), int type +implied(type(addr))+value, size_t size +implied(size(addr))+value)",
                "fstatements": {
                    "c": {
                        "c_helper": "ShroudTypeDefines",
                        "pre_call": [
                            "// Test adding a blank line below.",
                            "",
                            "type = convert_type(type);"
                        ]
                    }
                },
                "name": "SavePointer2",
                "options": {
                    "wrap_fortran": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "float",
                            "c_var": "addr",
                            "c_var_cfi": "SHT_addr_cfi",
                            "c_var_extents": "SHT_addr_extents",
                            "c_var_lower": "SHT_addr_lower",
                            "cfi_type": "CFI_type_float",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_addr",
                            "cxx_type": "float",
                            "cxx_var": "SHCXX_addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt0": "c_in_native_*_cfi",
                            "stmt1": "c_in_native_*_cfi"
                        },
                        "fmtf": {
                            "F_C_var": "addr",
                            "c_var": "addr",
                            "c_var_cfi": "SHT_addr_cfi",
                            "c_var_extents": "SHT_addr_extents",
                            "c_var_lower": "SHT_addr_lower",
                            "f_assumed_shape": "(:,:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "IN",
                            "f_kind": "C_FLOAT",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "addr",
                            "rank": "2",
                            "sh_type": "SH_TYPE_FLOAT",
                            "size": "size(addr)",
                            "stmt0": "f_in_native_*_cfi",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_*_cfi",
                            "stmtc1": "c_in_native_*_cfi"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "size_t",
                            "c_var": "size",
                            "cfi_type": "CFI_type_size_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&size",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "size",
                            "c_var": "size",
                            "f_intent": "IN",
                            "f_kind": "C_SIZE_T",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "pre_call_intent": "size(addr,kind=C_SIZE_T)",
                            "sh_type": "SH_TYPE_SIZE_T"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "c_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "pre_call_intent": "SH_TYPE_FLOAT",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_addr,\t type,\t size",
                    "C_name": "GEN_SavePointer2_float2d_CFI",
                    "C_name_api": "SavePointer2",
                    "C_prototype": "CFI_cdesc_t *SHT_addr_cfi,\t int type,\t size_t size",
                    "C_return_type": "void",
                    "F_C_arguments": "addr,\t type,\t size",
                    "F_C_name": "c_save_pointer2_float2d_CFI",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "save_pointer2",
                    "function_name": "SavePointer2",
                    "function_suffix": "_float2d_CFI",
                    "hnamefunc0": "ShroudTypeDefines",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "9 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "GetPointer",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "type",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "size",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetPointer(void **addr+intent(out), int *type+intent(out), size_t *size+intent(out))",
                "declgen": "void GetPointer(void * * addr +intent(out), int * type +intent(out), size_t * size +intent(out))",
                "name": "GetPointer",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "addr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "addr",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_out_void_**",
                            "stmt1": "c_out_void_**"
                        },
                        "fmtf": {
                            "F_C_var": "addr",
                            "c_var": "addr",
                            "f_intent": "OUT",
                            "f_type": "type(C_PTR)",
                            "f_var": "addr",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "f_out_void_**",
                            "stmt1": "f_out_void_**",
                            "stmtc0": "c_out_void_**",
                            "stmtc1": "c_out_void_**"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "size_t",
                            "c_var": "size",
                            "cfi_type": "CFI_type_size_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "size",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "c_out_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "size",
                            "c_var": "size",
                            "f_intent": "OUT",
                            "f_kind": "C_SIZE_T",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "f_out_native_*",
                            "stmt1": "f_out_native_*",
                            "stmtc0": "c_out_native_*",
                            "stmtc1": "c_default"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_out_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "c_var": "type",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_out_native_*",
                            "stmt1": "f_out_native_*",
                            "stmtc0": "c_out_native_*",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "addr,\t type,\t size",
                    "C_name": "GetPointer",
                    "C_name_api": "GetPointer",
                    "C_prototype": "void **addr,\t int * type,\t size_t * size",
                    "C_return_type": "void",
                    "F_C_arguments": "addr,\t type,\t size",
                    "F_C_call": "c_get_pointer",
                    "F_C_name": "get_pointer",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "addr,\t type,\t size",
                    "F_arguments": "addr,\t type,\t size",
                    "F_name_api": "get_pointer",
                    "F_name_function": "get_pointer",
                    "F_name_generic": "get_pointer",
                    "F_name_impl": "get_pointer",
                    "F_subprogram": "subroutine",
                    "function_name": "GetPointer",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "10 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "GetPointerAsPointer",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "type",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "size",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetPointerAsPointer( void **addr+intent(out), int *type+intent(out)+hidden, size_t *size+intent(out)+hidden)",
                "declgen": "void GetPointerAsPointer(void * * addr +intent(out), int * type +hidden+intent(out), size_t * size +hidden+intent(out))",
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "pointer",
                                        "intent": "out",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "deref": "pointer",
                                        "intent": "out"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "type",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "size",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float1d",
                        "generic": "(float **addr+intent(out)+rank(1)+deref(pointer))"
                    },
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "pointer",
                                        "intent": "out",
                                        "rank": 2
                                    },
                                    "metaattrs": {
                                        "deref": "pointer",
                                        "intent": "out"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "type",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "size",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float2d",
                        "generic": "(float **addr+intent(out)+rank(2)+deref(pointer))"
                    }
                ],
                "name": "GetPointerAsPointer",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "addr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "addr",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "c_out_void_**",
                            "stmt1": "c_out_void_**"
                        },
                        "fmtf": {
                            "F_C_var": "addr",
                            "c_var": "addr",
                            "f_intent": "OUT",
                            "f_type": "type(C_PTR)",
                            "f_var": "addr",
                            "sh_type": "SH_TYPE_CPTR"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "size_t",
                            "c_var": "size",
                            "cfi_type": "CFI_type_size_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "size",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "c_out_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "size",
                            "c_var": "size",
                            "f_intent": "OUT",
                            "f_kind": "C_SIZE_T",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "sh_type": "SH_TYPE_SIZE_T"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_out_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "c_var": "type",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "addr,\t type,\t size",
                    "C_name": "GetPointerAsPointer",
                    "C_name_api": "GetPointerAsPointer",
                    "C_prototype": "void **addr,\t int * type,\t size_t * size",
                    "C_return_type": "void",
                    "F_C_arguments": "addr,\t type,\t size",
                    "F_C_name": "c_get_pointer_as_pointer",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "get_pointer_as_pointer",
                    "function_name": "GetPointerAsPointer",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "24 ****************************************",
                "C_force_wrapper": "True",
                "C_generated_path": [
                    "fortran_generic",
                    "arg_to_cfi"
                ],
                "_PTR_C_CXX_index": "10",
                "_PTR_F_C_index": "35",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "GetPointerAsPointer",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "pointer",
                                        "intent": "out",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "deref": "pointer",
                                        "intent": "out"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "type",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "size",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetPointerAsPointer( void **addr+intent(out), int *type+intent(out)+hidden, size_t *size+intent(out)+hidden)",
                "declgen": "void GetPointerAsPointer(float * * addr +deref(pointer)+intent(out)+rank(1), int * type +hidden+intent(out), size_t * size +hidden+intent(out))",
                "name": "GetPointerAsPointer",
                "options": {
                    "wrap_fortran": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name_api": "GetPointerAsPointer",
                    "F_C_call": "c_get_pointer_as_pointer_float1d_CFI",
                    "F_arg_c_call": "addr",
                    "F_arguments": "addr",
                    "F_name_api": "get_pointer_as_pointer",
                    "F_name_function": "get_pointer_as_pointer_float1d",
                    "F_name_generic": "get_pointer_as_pointer",
                    "F_name_impl": "get_pointer_as_pointer_float1d",
                    "F_subprogram": "subroutine",
                    "function_name": "GetPointerAsPointer",
                    "function_suffix": "_float1d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "35 ****************************************",
                "C_force_wrapper": "True",
                "_PTR_C_CXX_index": "24",
                "_generated": "arg_to_cfi",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "GetPointerAsPointer",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "pointer",
                                        "intent": "out",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "deref": "pointer",
                                        "intent": "out"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "type",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "size",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetPointerAsPointer( void **addr+intent(out), int *type+intent(out)+hidden, size_t *size+intent(out)+hidden)",
                "declgen": "void GetPointerAsPointer(float * * addr +deref(pointer)+intent(out)+rank(1), int * type +hidden+intent(out), size_t * size +hidden+intent(out))",
                "name": "GetPointerAsPointer",
                "options": {
                    "wrap_fortran": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_local_cdesc": "SHC_addr_cdesc",
                            "c_local_cptr": "SHC_addr_cptr",
                            "c_local_err": "SHC_addr_err",
                            "c_local_fptr": "SHC_addr_fptr",
                            "c_member": "->",
                            "c_type": "float",
                            "c_var": "addr",
                            "c_var_cfi": "SHT_addr_cfi",
                            "c_var_extents": "SHT_addr_extents",
                            "c_var_lower": "SHT_addr_lower",
                            "cfi_type": "CFI_type_float",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_addr",
                            "cxx_type": "float",
                            "cxx_var": "SHCXX_addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt0": "c_out_native_**_cfi_pointer",
                            "stmt1": "c_out_native_**_cfi_pointer"
                        },
                        "fmtf": {
                            "F_C_var": "addr",
                            "c_local_cdesc": "SHC_addr_cdesc",
                            "c_local_cptr": "SHC_addr_cptr",
                            "c_local_err": "SHC_addr_err",
                            "c_local_fptr": "SHC_addr_fptr",
                            "c_var": "addr",
                            "c_var_cfi": "SHT_addr_cfi",
                            "c_var_extents": "SHT_addr_extents",
                            "c_var_lower": "SHT_addr_lower",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "OUT",
                            "f_kind": "C_FLOAT",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "addr",
                            "rank": "1",
                            "sh_type": "SH_TYPE_FLOAT",
                            "size": "size(addr)",
                            "stmt0": "f_out_native_**_cfi_pointer",
                            "stmt1": "f_default",
                            "stmtc0": "c_out_native_**_cfi_pointer",
                            "stmtc1": "c_out_native_**_cfi_pointer"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "size_t",
                            "c_var": "size",
                            "cfi_type": "CFI_type_size_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "size",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "c_out_native_*_hidden",
                            "stmt1": "c_out_native_*_hidden"
                        },
                        "fmtf": {
                            "F_C_var": "size",
                            "c_var": "size",
                            "f_intent": "OUT",
                            "f_kind": "C_SIZE_T",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "sh_type": "SH_TYPE_SIZE_T"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_out_native_*_hidden",
                            "stmt1": "c_out_native_*_hidden"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "c_var": "type",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_addr,\t &type,\t &size",
                    "C_name": "GEN_GetPointerAsPointer_float1d_CFI",
                    "C_name_api": "GetPointerAsPointer",
                    "C_prototype": "CFI_cdesc_t *SHT_addr_cfi",
                    "C_return_type": "void",
                    "F_C_arguments": "addr",
                    "F_C_name": "c_get_pointer_as_pointer_float1d_CFI",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "get_pointer_as_pointer",
                    "function_name": "GetPointerAsPointer",
                    "function_suffix": "_float1d_CFI",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "25 ****************************************",
                "C_force_wrapper": "True",
                "C_generated_path": [
                    "fortran_generic",
                    "arg_to_cfi"
                ],
                "_PTR_C_CXX_index": "10",
                "_PTR_F_C_index": "36",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "GetPointerAsPointer",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "pointer",
                                        "intent": "out",
                                        "rank": 2
                                    },
                                    "metaattrs": {
                                        "deref": "pointer",
                                        "intent": "out"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "type",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "size",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetPointerAsPointer( void **addr+intent(out), int *type+intent(out)+hidden, size_t *size+intent(out)+hidden)",
                "declgen": "void GetPointerAsPointer(float * * addr +deref(pointer)+intent(out)+rank(2), int * type +hidden+intent(out), size_t * size +hidden+intent(out))",
                "name": "GetPointerAsPointer",
                "options": {
                    "wrap_fortran": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name_api": "GetPointerAsPointer",
                    "F_C_call": "c_get_pointer_as_pointer_float2d_CFI",
                    "F_arg_c_call": "addr",
                    "F_arguments": "addr",
                    "F_name_api": "get_pointer_as_pointer",
                    "F_name_function": "get_pointer_as_pointer_float2d",
                    "F_name_generic": "get_pointer_as_pointer",
                    "F_name_impl": "get_pointer_as_pointer_float2d",
                    "F_subprogram": "subroutine",
                    "function_name": "GetPointerAsPointer",
                    "function_suffix": "_float2d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "36 ****************************************",
                "C_force_wrapper": "True",
                "_PTR_C_CXX_index": "25",
                "_generated": "arg_to_cfi",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "GetPointerAsPointer",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "pointer",
                                        "intent": "out",
                                        "rank": 2
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "deref": "pointer",
                                        "intent": "out"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "type",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "size",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetPointerAsPointer( void **addr+intent(out), int *type+intent(out)+hidden, size_t *size+intent(out)+hidden)",
                "declgen": "void GetPointerAsPointer(float * * addr +deref(pointer)+intent(out)+rank(2), int * type +hidden+intent(out), size_t * size +hidden+intent(out))",
                "name": "GetPointerAsPointer",
                "options": {
                    "wrap_fortran": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_local_cdesc": "SHC_addr_cdesc",
                            "c_local_cptr": "SHC_addr_cptr",
                            "c_local_err": "SHC_addr_err",
                            "c_local_fptr": "SHC_addr_fptr",
                            "c_member": "->",
                            "c_type": "float",
                            "c_var": "addr",
                            "c_var_cfi": "SHT_addr_cfi",
                            "c_var_extents": "SHT_addr_extents",
                            "c_var_lower": "SHT_addr_lower",
                            "cfi_type": "CFI_type_float",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_addr",
                            "cxx_type": "float",
                            "cxx_var": "SHCXX_addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt0": "c_out_native_**_cfi_pointer",
                            "stmt1": "c_out_native_**_cfi_pointer"
                        },
                        "fmtf": {
                            "F_C_var": "addr",
                            "c_local_cdesc": "SHC_addr_cdesc",
                            "c_local_cptr": "SHC_addr_cptr",
                            "c_local_err": "SHC_addr_err",
                            "c_local_fptr": "SHC_addr_fptr",
                            "c_var": "addr",
                            "c_var_cfi": "SHT_addr_cfi",
                            "c_var_extents": "SHT_addr_extents",
                            "c_var_lower": "SHT_addr_lower",
                            "f_assumed_shape": "(:,:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "OUT",
                            "f_kind": "C_FLOAT",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "addr",
                            "rank": "2",
                            "sh_type": "SH_TYPE_FLOAT",
                            "size": "size(addr)",
                            "stmt0": "f_out_native_**_cfi_pointer",
                            "stmt1": "f_default",
                            "stmtc0": "c_out_native_**_cfi_pointer",
                            "stmtc1": "c_out_native_**_cfi_pointer"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "size_t",
                            "c_var": "size",
                            "cfi_type": "CFI_type_size_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "size",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "c_out_native_*_hidden",
                            "stmt1": "c_out_native_*_hidden"
                        },
                        "fmtf": {
                            "F_C_var": "size",
                            "c_var": "size",
                            "f_intent": "OUT",
                            "f_kind": "C_SIZE_T",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "sh_type": "SH_TYPE_SIZE_T"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "type",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_out_native_*_hidden",
                            "stmt1": "c_out_native_*_hidden"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "c_var": "type",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_addr,\t &type,\t &size",
                    "C_name": "GEN_GetPointerAsPointer_float2d_CFI",
                    "C_name_api": "GetPointerAsPointer",
                    "C_prototype": "CFI_cdesc_t *SHT_addr_cfi",
                    "C_return_type": "void",
                    "F_C_arguments": "addr",
                    "F_C_name": "c_get_pointer_as_pointer_float2d_CFI",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "get_pointer_as_pointer",
                    "function_name": "GetPointerAsPointer",
                    "function_suffix": "_float2d_CFI",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "11 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "api": "capptr",
                            "intent": "function"
                        },
                        "name": "CreateStructAsClass",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "StructAsClass"
                    },
                    "specifier": [
                        "StructAsClass"
                    ],
                    "typemap_name": "StructAsClass"
                },
                "decl": "StructAsClass *CreateStructAsClass(void)",
                "declgen": "StructAsClass * CreateStructAsClass(void)",
                "name": "CreateStructAsClass",
                "options": {
                    "class_ctor": "StructAsClass"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "GEN_CreateStructAsClass",
                    "C_name_api": "CreateStructAsClass",
                    "C_prototype": "GEN_StructAsClass * SHC_rv",
                    "C_return_type": "GEN_StructAsClass *",
                    "F_C_arguments": "SHT_rv",
                    "F_C_call": "c_create_struct_as_class",
                    "F_C_name": "c_create_struct_as_class",
                    "F_C_result_clause": "\fresult(SHT_prv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "SHT_rv%cxxmem",
                    "F_arguments": "",
                    "F_name_api": "create_struct_as_class",
                    "F_name_function": "create_struct_as_class",
                    "F_name_generic": "struct_as_class",
                    "F_name_impl": "create_struct_as_class",
                    "F_result": "SHT_prv",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "StructAsClass * SHCXX_rv",
                    "function_name": "CreateStructAsClass"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "GEN_StructAsClass",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_other",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "StructAsClass",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_shadow_*_capptr",
                        "stmt1": "c_function_shadow_*_capptr"
                    },
                    "fmtf": {
                        "C_result": "SHT_prv",
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "StructAsClass",
                        "f_c_module_line": "--import--:GEN_SHROUD_capsule_data",
                        "f_capsule_data_type": "GEN_SHROUD_capsule_data",
                        "f_intent": "OUT",
                        "f_type": "type(struct_as_class)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_shadow_*_capptr",
                        "stmt1": "f_function_shadow_*_capptr",
                        "stmtc0": "c_function_shadow_*_capptr",
                        "stmtc1": "c_function_shadow_*_capptr"
                    }
                }
            },
            {
                "<FUNCTION>": "12 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "UpdateStructAsClass",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "StructAsClass"
                                },
                                "specifier": [
                                    "StructAsClass"
                                ],
                                "typemap_name": "StructAsClass"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "inew",
                                    "typemap_name": "long"
                                },
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "typemap_name": "long"
                    },
                    "specifier": [
                        "long"
                    ],
                    "typemap_name": "long"
                },
                "decl": "long UpdateStructAsClass(StructAsClass *arg, long inew)",
                "declgen": "long UpdateStructAsClass(StructAsClass * arg, long inew +value)",
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "StructAsClass"
                                },
                                "specifier": [
                                    "StructAsClass"
                                ],
                                "typemap_name": "StructAsClass"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "inew",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_int",
                        "generic": "(int inew)"
                    },
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "StructAsClass"
                                },
                                "specifier": [
                                    "StructAsClass"
                                ],
                                "typemap_name": "StructAsClass"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "inew",
                                    "typemap_name": "long"
                                },
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "function_suffix": "_long",
                        "generic": "(long inew)"
                    }
                ],
                "name": "UpdateStructAsClass",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "GEN_StructAsClass",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_arg",
                            "cxx_type": "StructAsClass",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_inout_shadow_*",
                            "stmt1": "c_inout_shadow_*"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "f_c_module_line": "--import--:GEN_SHROUD_capsule_data",
                            "f_capsule_data_type": "GEN_SHROUD_capsule_data",
                            "f_intent": "INOUT",
                            "f_type": "type(struct_as_class)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_OTHER"
                        }
                    },
                    "inew": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "long",
                            "c_var": "inew",
                            "cfi_type": "CFI_type_long",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&inew",
                            "cxx_type": "long",
                            "cxx_var": "inew",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "inew",
                            "c_var": "inew",
                            "f_intent": "IN",
                            "f_kind": "C_LONG",
                            "f_type": "integer(C_LONG)",
                            "f_var": "inew",
                            "sh_type": "SH_TYPE_LONG"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_arg,\t inew",
                    "C_name": "GEN_UpdateStructAsClass",
                    "C_name_api": "UpdateStructAsClass",
                    "C_prototype": "GEN_StructAsClass * arg,\t long inew",
                    "C_return_type": "long",
                    "F_C_arguments": "arg,\t inew",
                    "F_C_name": "c_update_struct_as_class",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "update_struct_as_class",
                    "cxx_rv_decl": "long SHC_rv",
                    "function_name": "UpdateStructAsClass"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "long",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_long",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "long",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_LONG",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_LONG",
                        "f_type": "integer(C_LONG)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_LONG"
                    }
                }
            },
            {
                "<FUNCTION>": "26 ****************************************",
                "C_force_wrapper": "True",
                "C_generated_path": [
                    "fortran_generic"
                ],
                "_PTR_C_CXX_index": "12",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "UpdateStructAsClass",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "StructAsClass"
                                },
                                "specifier": [
                                    "StructAsClass"
                                ],
                                "typemap_name": "StructAsClass"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "inew",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "long"
                    },
                    "specifier": [
                        "long"
                    ],
                    "typemap_name": "long"
                },
                "decl": "long UpdateStructAsClass(StructAsClass *arg, long inew)",
                "declgen": "long UpdateStructAsClass(StructAsClass * arg, int inew +value)",
                "name": "UpdateStructAsClass",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "GEN_StructAsClass",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_arg",
                            "cxx_type": "StructAsClass",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_inout_shadow_*",
                            "stmt1": "c_inout_shadow_*"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "f_c_module_line": "--import--:GEN_SHROUD_capsule_data",
                            "f_capsule_data_type": "GEN_SHROUD_capsule_data",
                            "f_intent": "INOUT",
                            "f_type": "type(struct_as_class)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_inout_shadow_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_inout_shadow_*",
                            "stmtc1": "c_inout_shadow_*"
                        }
                    },
                    "inew": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "inew",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&inew",
                            "cxx_type": "int",
                            "cxx_var": "inew",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "inew",
                            "c_var": "inew",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "inew",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_arg,\t inew",
                    "C_name": "GEN_UpdateStructAsClass_int",
                    "C_name_api": "UpdateStructAsClass",
                    "C_prototype": "GEN_StructAsClass * arg,\t int inew",
                    "C_return_type": "long",
                    "F_C_arguments": "arg,\t inew",
                    "F_C_call": "c_update_struct_as_class_int",
                    "F_C_name": "c_update_struct_as_class_int",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arg%cxxmem,\t inew",
                    "F_arguments": "arg,\t inew",
                    "F_name_api": "update_struct_as_class",
                    "F_name_function": "update_struct_as_class_int",
                    "F_name_generic": "update_struct_as_class",
                    "F_name_impl": "update_struct_as_class_int",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "long SHC_rv",
                    "function_name": "UpdateStructAsClass",
                    "function_suffix": "_int"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "long",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_long",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "long",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_LONG",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "long",
                        "f_intent": "OUT",
                        "f_kind": "C_LONG",
                        "f_type": "integer(C_LONG)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_LONG",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    }
                }
            },
            {
                "<FUNCTION>": "27 ****************************************",
                "C_force_wrapper": "True",
                "C_generated_path": [
                    "fortran_generic"
                ],
                "_PTR_C_CXX_index": "12",
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "UpdateStructAsClass",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "StructAsClass"
                                },
                                "specifier": [
                                    "StructAsClass"
                                ],
                                "typemap_name": "StructAsClass"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "inew",
                                    "typemap_name": "long"
                                },
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "typemap_name": "long"
                    },
                    "specifier": [
                        "long"
                    ],
                    "typemap_name": "long"
                },
                "decl": "long UpdateStructAsClass(StructAsClass *arg, long inew)",
                "declgen": "long UpdateStructAsClass(StructAsClass * arg, long inew +value)",
                "name": "UpdateStructAsClass",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "GEN_StructAsClass",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_arg",
                            "cxx_type": "StructAsClass",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_inout_shadow_*",
                            "stmt1": "c_inout_shadow_*"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "f_c_module_line": "--import--:GEN_SHROUD_capsule_data",
                            "f_capsule_data_type": "GEN_SHROUD_capsule_data",
                            "f_intent": "INOUT",
                            "f_type": "type(struct_as_class)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_inout_shadow_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_inout_shadow_*",
                            "stmtc1": "c_inout_shadow_*"
                        }
                    },
                    "inew": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "long",
                            "c_var": "inew",
                            "cfi_type": "CFI_type_long",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&inew",
                            "cxx_type": "long",
                            "cxx_var": "inew",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "inew",
                            "c_var": "inew",
                            "f_intent": "IN",
                            "f_kind": "C_LONG",
                            "f_type": "integer(C_LONG)",
                            "f_var": "inew",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_arg,\t inew",
                    "C_name": "GEN_UpdateStructAsClass_long",
                    "C_name_api": "UpdateStructAsClass",
                    "C_prototype": "GEN_StructAsClass * arg,\t long inew",
                    "C_return_type": "long",
                    "F_C_arguments": "arg,\t inew",
                    "F_C_call": "c_update_struct_as_class_long",
                    "F_C_name": "c_update_struct_as_class_long",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arg%cxxmem,\t inew",
                    "F_arguments": "arg,\t inew",
                    "F_name_api": "update_struct_as_class",
                    "F_name_function": "update_struct_as_class_long",
                    "F_name_generic": "update_struct_as_class",
                    "F_name_impl": "update_struct_as_class_long",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "long SHC_rv",
                    "function_name": "UpdateStructAsClass",
                    "function_suffix": "_long"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "long",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_long",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "long",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_LONG",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "long",
                        "f_intent": "OUT",
                        "f_kind": "C_LONG",
                        "f_type": "integer(C_LONG)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_LONG",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    }
                }
            }
        ],
        "language": "c",
        "scope_file": [
            "generic"
        ],
        "wrap": {
            "c": true,
            "fortran": true
        }
    },
    "symtab": {
        "StructAsClass": "struct-StructAsClass",
        "struct-StructAsClass": "StructAsClass"
    },
    "types": {
        "StructAsClass": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}StructAsClass *>\t({c_var}->addr)",
            "c_type": "GEN_StructAsClass",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "StructAsClass",
            "f_c_module": {
                "--import--": [
                    "GEN_SHROUD_capsule_data"
                ]
            },
            "f_c_module_line": "--import--:GEN_SHROUD_capsule_data",
            "f_c_type": "type(GEN_SHROUD_capsule_data)",
            "f_capsule_data_type": "GEN_SHROUD_capsule_data",
            "f_class": "class(struct_as_class)",
            "f_derived_type": "struct_as_class",
            "f_module": {
                "generic_mod": [
                    "struct_as_class"
                ]
            },
            "f_module_line": "generic_mod:struct_as_class",
            "f_module_name": "generic_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(struct_as_class)",
            "flat_name": "StructAsClass",
            "impl_header": [
                "generic.h",
                "helper.h"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesgeneric.h"
            ]
        }
    }
}