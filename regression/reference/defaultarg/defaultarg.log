Read yaml defaultarg.yaml
Close defaultarg_types.yaml
class Class1
C c Class1(int arg1 +value) +name(new)
C f Class1(int arg1 +value) +name(new)
C c Class1(int arg1 +value, int arg2=1 +value) +name(new)
C f Class1(int arg1 +value, int arg2=1 +value) +name(new)
C c Class1(int arg1 +value, int arg2=1 +value, int arg3=2 +value) +name(new)
C f Class1(int arg1 +value, int arg2=1 +value, int arg3=2 +value) +name(new)
C c ~Class1(void) +name(delete)
C f ~Class1(void) +name(delete)
C c void DefaultArguments(int arg1 +value)
C f void DefaultArguments(int arg1 +value)
C c void DefaultArguments(int arg1 +value, int arg2=1 +value)
C f void DefaultArguments(int arg1 +value, int arg2=1 +value)
C c void DefaultArguments(int arg1 +value, int arg2=1 +value, int arg3=2 +value)
C f void DefaultArguments(int arg1 +value, int arg2=1 +value, int arg3=2 +value)
C f int get_field1(void)
C f int get_field2(void)
C f int get_field3(void)
Close wrapClass1.h
Close wrapClass1.cpp
C c void apply_generic(IndexType num_elems +value)
C f void apply_generic(IndexType num_elems +value)
C c void apply_generic(IndexType num_elems +value, IndexType offset=0 +value)
C f void apply_generic(IndexType num_elems +value, IndexType offset=0 +value)
C c void apply_generic(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C f void apply_generic(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C c void apply_generic(TypeID type +value, IndexType num_elems +value)
C f void apply_generic(TypeID type +value, IndexType num_elems +value)
C c void apply_generic(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value)
C f void apply_generic(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value)
C c void apply_generic(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C f void apply_generic(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C c void apply_require(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C f void apply_require(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C c void apply_require(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C f void apply_require(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C c void apply_optional(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C f void apply_optional(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C c void apply_optional(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C f void apply_optional(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
Close wrapdefaultarg.h
Close wrapdefaultarg.cpp
class Class1
Fortran Class1(int arg1 +value) +name(new)
Fortran Class1(int arg1 +value, int arg2=1 +value) +name(new)
Fortran Class1(int arg1 +value, int arg2=1 +value, int arg3=2 +value) +name(new)
Fortran ~Class1(void) +name(delete)
Fortran void DefaultArguments(int arg1 +value)
Fortran void DefaultArguments(int arg1 +value, int arg2=1 +value)
Fortran void DefaultArguments(int arg1 +value, int arg2=1 +value, int arg3=2 +value)
Fortran int get_field1(void)
Fortran int get_field2(void)
Fortran int get_field3(void)
C-interface f Class1(int arg1 +value) +name(new)
C-interface f Class1(int arg1 +value, int arg2=1 +value) +name(new)
C-interface f Class1(int arg1 +value, int arg2=1 +value, int arg3=2 +value) +name(new)
C-interface f ~Class1(void) +name(delete)
C-interface f void DefaultArguments(int arg1 +value)
C-interface f void DefaultArguments(int arg1 +value, int arg2=1 +value)
C-interface f void DefaultArguments(int arg1 +value, int arg2=1 +value, int arg3=2 +value)
C-interface f int get_field1(void)
C-interface f int get_field2(void)
C-interface f int get_field3(void)
typedef TypeID
Fortran void apply_generic(IndexType num_elems +value)
Fortran void apply_generic(IndexType num_elems +value, IndexType offset=0 +value)
Fortran void apply_generic(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
Fortran void apply_generic(TypeID type +value, IndexType num_elems +value)
Fortran void apply_generic(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value)
Fortran void apply_generic(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
Fortran void apply_require(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
Fortran void apply_require(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
Fortran void apply_optional(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
Fortran void apply_optional(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C-interface f void apply_generic(IndexType num_elems +value)
C-interface f void apply_generic(IndexType num_elems +value, IndexType offset=0 +value)
C-interface f void apply_generic(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C-interface f void apply_generic(TypeID type +value, IndexType num_elems +value)
C-interface f void apply_generic(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value)
C-interface f void apply_generic(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C-interface f void apply_require(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C-interface f void apply_require(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C-interface f void apply_optional(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
C-interface f void apply_optional(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)
Close wrapfdefaultarg.f
Close utildefaultarg.cpp
Close typesdefaultarg.h
