Read yaml defaultarg.yaml
Close defaultarg_types.yaml
class Class1
C c Class1(int arg1) +name(new)
C f Class1(int arg1) +name(new)
C c Class1(int arg1, int arg2=1) +name(new)
C f Class1(int arg1, int arg2=1) +name(new)
C c Class1(int arg1, int arg2=1, int arg3=2) +name(new)
C f Class1(int arg1, int arg2=1, int arg3=2) +name(new)
C c ~Class1(void) +name(delete)
C f ~Class1(void) +name(delete)
C c void DefaultArguments(int arg1)
C f void DefaultArguments(int arg1)
C c void DefaultArguments(int arg1, int arg2=1)
C f void DefaultArguments(int arg1, int arg2=1)
C c void DefaultArguments(int arg1, int arg2=1, int arg3=2)
C f void DefaultArguments(int arg1, int arg2=1, int arg3=2)
C f int get_field1(void) +intent(getter)
C f int get_field2(void) +intent(getter)
C f int get_field3(void) +intent(getter)
Close wrapClass1.h
Close wrapClass1.cpp
C c void apply_generic(IndexType num_elems)
C f void apply_generic(IndexType num_elems)
C c void apply_generic(IndexType num_elems, IndexType offset=0)
C f void apply_generic(IndexType num_elems, IndexType offset=0)
C c void apply_generic(IndexType num_elems, IndexType offset=0, IndexType stride=1)
C f void apply_generic(IndexType num_elems, IndexType offset=0, IndexType stride=1)
C c void apply_generic(TypeID type, IndexType num_elems)
C f void apply_generic(TypeID type, IndexType num_elems)
C c void apply_generic(TypeID type, IndexType num_elems, IndexType offset=0)
C f void apply_generic(TypeID type, IndexType num_elems, IndexType offset=0)
C c void apply_generic(TypeID type, IndexType num_elems, IndexType offset=0, IndexType stride=1)
C f void apply_generic(TypeID type, IndexType num_elems, IndexType offset=0, IndexType stride=1)
C c void apply_require(IndexType num_elems, IndexType offset=0, IndexType stride=1)
C f void apply_require(IndexType num_elems, IndexType offset=0, IndexType stride=1)
C c void apply_require(TypeID type, IndexType num_elems, IndexType offset=0, IndexType stride=1)
C f void apply_require(TypeID type, IndexType num_elems, IndexType offset=0, IndexType stride=1)
C c void apply_optional(IndexType num_elems, IndexType offset=0, IndexType stride=1)
C f void apply_optional(IndexType num_elems, IndexType offset=0, IndexType stride=1)
C c void apply_optional(TypeID type, IndexType num_elems, IndexType offset=0, IndexType stride=1)
C f void apply_optional(TypeID type, IndexType num_elems, IndexType offset=0, IndexType stride=1)
Close wrapdefaultarg.h
Close wrapdefaultarg.cpp
class Class1
Fortran Class1(int arg1) +name(new)
Fortran Class1(int arg1, int arg2=1) +name(new)
Fortran Class1(int arg1, int arg2=1, int arg3=2) +name(new)
Fortran ~Class1(void) +name(delete)
Fortran void DefaultArguments(int arg1)
Fortran void DefaultArguments(int arg1, int arg2=1)
Fortran void DefaultArguments(int arg1, int arg2=1, int arg3=2)
Fortran int get_field1(void) +intent(getter)
Fortran int get_field2(void) +intent(getter)
Fortran int get_field3(void) +intent(getter)
C-interface f Class1(int arg1) +name(new)
C-interface f Class1(int arg1, int arg2=1) +name(new)
C-interface f Class1(int arg1, int arg2=1, int arg3=2) +name(new)
C-interface f ~Class1(void) +name(delete)
C-interface f void DefaultArguments(int arg1)
C-interface f void DefaultArguments(int arg1, int arg2=1)
C-interface f void DefaultArguments(int arg1, int arg2=1, int arg3=2)
C-interface f int get_field1(void) +intent(getter)
C-interface f int get_field2(void) +intent(getter)
C-interface f int get_field3(void) +intent(getter)
typedef TypeID
Fortran void apply_generic(IndexType num_elems)
Fortran void apply_generic(IndexType num_elems, IndexType offset=0)
Fortran void apply_generic(IndexType num_elems, IndexType offset=0, IndexType stride=1)
Fortran void apply_generic(TypeID type, IndexType num_elems)
Fortran void apply_generic(TypeID type, IndexType num_elems, IndexType offset=0)
Fortran void apply_generic(TypeID type, IndexType num_elems, IndexType offset=0, IndexType stride=1)
Fortran void apply_require(IndexType num_elems, IndexType offset=0, IndexType stride=1)
Fortran void apply_require(TypeID type, IndexType num_elems, IndexType offset=0, IndexType stride=1)
Fortran void apply_optional(IndexType num_elems, IndexType offset=0, IndexType stride=1)
Fortran void apply_optional(TypeID type, IndexType num_elems, IndexType offset=0, IndexType stride=1)
C-interface f void apply_generic(IndexType num_elems)
C-interface f void apply_generic(IndexType num_elems, IndexType offset=0)
C-interface f void apply_generic(IndexType num_elems, IndexType offset=0, IndexType stride=1)
C-interface f void apply_generic(TypeID type, IndexType num_elems)
C-interface f void apply_generic(TypeID type, IndexType num_elems, IndexType offset=0)
C-interface f void apply_generic(TypeID type, IndexType num_elems, IndexType offset=0, IndexType stride=1)
C-interface f void apply_require(IndexType num_elems, IndexType offset=0, IndexType stride=1)
C-interface f void apply_require(TypeID type, IndexType num_elems, IndexType offset=0, IndexType stride=1)
C-interface f void apply_optional(IndexType num_elems, IndexType offset=0, IndexType stride=1)
C-interface f void apply_optional(TypeID type, IndexType num_elems, IndexType offset=0, IndexType stride=1)
Close wrapfdefaultarg.f
Close utildefaultarg.cpp
Close typesdefaultarg.h
