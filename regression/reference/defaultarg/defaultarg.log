Read yaml defaultarg.yaml
Close defaultarg_types.yaml
class Class1
C Class1(int arg1 +value) +name(new)  +api(capptr)+intent(ctor)
C Class1(int arg1 +value, int arg2=1 +value) +name(new)  +api(capptr)+intent(ctor)
C Class1(int arg1 +value, int arg2=1 +value, int arg3=2 +value) +name(new)  +api(capptr)+intent(ctor)
C ~Class1(void) +name(delete)  +intent(dtor)
C void DefaultArguments(int arg1 +value)  +intent(subroutine)
C void DefaultArguments(int arg1 +value, int arg2=1 +value)  +intent(subroutine)
C void DefaultArguments(int arg1 +value, int arg2=1 +value, int arg3=2 +value)  +intent(subroutine)
C int get_field1(void)  +intent(getter)
C int get_field2(void)  +intent(getter)
C int get_field3(void)  +intent(getter)
Close wrapClass1.h
Close wrapClass1.cpp
C void apply_generic(IndexType num_elems +value)  +intent(subroutine)
C void apply_generic(IndexType num_elems +value, IndexType offset=0 +value)  +intent(subroutine)
C void apply_generic(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
C void apply_generic(TypeID type +value, IndexType num_elems +value)  +intent(subroutine)
C void apply_generic(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value)  +intent(subroutine)
C void apply_generic(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
C void apply_require(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
C void apply_require(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
C void apply_optional(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
C void apply_optional(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
Close wrapdefaultarg.h
Close wrapdefaultarg.cpp
class Class1
Fortran Class1(int arg1 +value) +name(new)  +api(capptr)+intent(ctor)
Fortran Class1(int arg1 +value, int arg2=1 +value) +name(new)  +api(capptr)+intent(ctor)
Fortran Class1(int arg1 +value, int arg2=1 +value, int arg3=2 +value) +name(new)  +api(capptr)+intent(ctor)
Fortran ~Class1(void) +name(delete)  +intent(dtor)
Fortran void DefaultArguments(int arg1 +value)  +intent(subroutine)
Fortran void DefaultArguments(int arg1 +value, int arg2=1 +value)  +intent(subroutine)
Fortran void DefaultArguments(int arg1 +value, int arg2=1 +value, int arg3=2 +value)  +intent(subroutine)
Fortran int get_field1(void)  +intent(getter)
Fortran int get_field2(void)  +intent(getter)
Fortran int get_field3(void)  +intent(getter)
C-interface Class1(int arg1 +value) +name(new)  +api(capptr)+intent(ctor)
C-interface Class1(int arg1 +value, int arg2=1 +value) +name(new)  +api(capptr)+intent(ctor)
C-interface Class1(int arg1 +value, int arg2=1 +value, int arg3=2 +value) +name(new)  +api(capptr)+intent(ctor)
C-interface ~Class1(void) +name(delete)  +intent(dtor)
C-interface void DefaultArguments(int arg1 +value)  +intent(subroutine)
C-interface void DefaultArguments(int arg1 +value, int arg2=1 +value)  +intent(subroutine)
C-interface void DefaultArguments(int arg1 +value, int arg2=1 +value, int arg3=2 +value)  +intent(subroutine)
C-interface int get_field1(void)  +intent(getter)
C-interface int get_field2(void)  +intent(getter)
C-interface int get_field3(void)  +intent(getter)
typedef TypeID
Fortran void apply_generic(IndexType num_elems +value)  +intent(subroutine)
Fortran void apply_generic(IndexType num_elems +value, IndexType offset=0 +value)  +intent(subroutine)
Fortran void apply_generic(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
Fortran void apply_generic(TypeID type +value, IndexType num_elems +value)  +intent(subroutine)
Fortran void apply_generic(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value)  +intent(subroutine)
Fortran void apply_generic(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
Fortran void apply_require(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
Fortran void apply_require(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
Fortran void apply_optional(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
Fortran void apply_optional(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
C-interface void apply_generic(IndexType num_elems +value)  +intent(subroutine)
C-interface void apply_generic(IndexType num_elems +value, IndexType offset=0 +value)  +intent(subroutine)
C-interface void apply_generic(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
C-interface void apply_generic(TypeID type +value, IndexType num_elems +value)  +intent(subroutine)
C-interface void apply_generic(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value)  +intent(subroutine)
C-interface void apply_generic(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
C-interface void apply_require(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
C-interface void apply_require(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
C-interface void apply_optional(IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
C-interface void apply_optional(TypeID type +value, IndexType num_elems +value, IndexType offset=0 +value, IndexType stride=1 +value)  +intent(subroutine)
Close wrapfdefaultarg.f
Close utildefaultarg.cpp
Close typesdefaultarg.h
