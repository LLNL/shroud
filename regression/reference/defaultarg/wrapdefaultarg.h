// wrapdefaultarg.h
// This file is generated by Shroud nowrite-version. Do not edit.
// Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
// other Shroud Project Developers.
// See the top-level COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//
/**
 * \file wrapdefaultarg.h
 * \brief Shroud generated wrapper for defaultarg library
 */
// For C users and C++ implementation

#ifndef WRAPDEFAULTARG_H
#define WRAPDEFAULTARG_H

// typemap
#include "wrapdefaultarg.h"
// shroud
#include "typesdefaultarg.h"

// splicer begin CXX_declarations
// splicer end CXX_declarations

#ifdef __cplusplus
extern "C" {
#endif

// typedef TypeID
// splicer begin typedef.TypeID
typedef int DEF_TypeID;
// splicer end typedef.TypeID

// splicer begin C_declarations
// splicer end C_declarations

void DEF_apply_generic_nelems(IndexType num_elems);

void DEF_apply_generic_nelems_offset(IndexType num_elems,
    IndexType offset);

void DEF_apply_generic_nelems_offset_stride(IndexType num_elems,
    IndexType offset, IndexType stride);

#if INDETYPE_SIZE == 64
void DEF_apply_generic_type_nelems(DEF_TypeID type,
    IndexType num_elems);
#endif

#if INDETYPE_SIZE == 64
void DEF_apply_generic_type_nelems_offset(DEF_TypeID type,
    IndexType num_elems, IndexType offset);
#endif

#if INDETYPE_SIZE == 64
void DEF_apply_generic_type_nelems_offset_stride(DEF_TypeID type,
    IndexType num_elems, IndexType offset, IndexType stride);
#endif

void DEF_apply_require_0(IndexType num_elems, IndexType offset,
    IndexType stride);

void DEF_apply_require_1(DEF_TypeID type, IndexType num_elems,
    IndexType offset, IndexType stride);

void DEF_apply_optional_0(IndexType num_elems, IndexType offset,
    IndexType stride);

#if INDETYPE_SIZE == 64
void DEF_apply_optional_1(DEF_TypeID type, IndexType num_elems,
    IndexType offset, IndexType stride);
#endif

#ifdef __cplusplus
}
#endif

#endif  // WRAPDEFAULTARG_H
