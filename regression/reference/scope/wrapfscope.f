! wrapfscope.f
! This file is generated by Shroud nowrite-version. Do not edit.
! Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
! other Shroud Project Developers.
! See the top-level COPYRIGHT file for details.
!
! SPDX-License-Identifier: (BSD-3-Clause)
!
!>
!! \file wrapfscope.f
!! \brief Shroud generated wrapper for scope library
!<
! splicer begin file_top
! splicer end file_top
module scope_mod
    use iso_c_binding, only : C_INT, C_LONG, C_NULL_PTR, C_PTR, C_SIZE_T
    ! splicer begin module_use
    ! splicer end module_use
    implicit none

    ! splicer begin module_top
    ! splicer end module_top

    ! helper capsule_data_helper
    type, bind(C) :: SCO_SHROUD_capsule_data
        type(C_PTR) :: addr = C_NULL_PTR  ! address of C++ memory
        integer(C_INT) :: idtor = 0       ! index of destructor
    end type SCO_SHROUD_capsule_data

    ! helper array_context
    type, bind(C) :: SCO_SHROUD_array
        ! address of C++ memory
        type(SCO_SHROUD_capsule_data) :: cxx
        ! address of data in cxx
        type(C_PTR) :: base_addr = C_NULL_PTR
        ! type of element
        integer(C_INT) :: type
        ! bytes-per-item or character len of data in cxx
        integer(C_SIZE_T) :: elem_len = 0_C_SIZE_T
        ! size of data in cxx
        integer(C_SIZE_T) :: size = 0_C_SIZE_T
        ! number of dimensions
        integer(C_INT) :: rank = -1
        integer(C_LONG) :: shape(7) = 0
    end type SCO_SHROUD_array

    !  enum Class1::Color
    integer(C_INT), parameter :: class1_red = 40
    integer(C_INT), parameter :: class1_blue = 41
    integer(C_INT), parameter :: class1_white = 42

    !  enum Class2::Color
    integer(C_INT), parameter :: class2_red = 50
    integer(C_INT), parameter :: class2_blue = 51
    integer(C_INT), parameter :: class2_white = 52

    !  enum Color
    integer(C_INT), parameter :: red = 10
    integer(C_INT), parameter :: blue = 11
    integer(C_INT), parameter :: white = 12

    !  enum ns3::Color
    integer(C_INT), parameter :: ns3_red = 70
    integer(C_INT), parameter :: ns3_blue = 71
    integer(C_INT), parameter :: ns3_white = 72

    !  enum class ColorEnum
    integer(C_INT), parameter :: colorenum_red = 60
    integer(C_INT), parameter :: colorenum_blue = 61
    integer(C_INT), parameter :: colorenum_white = 62


    type, bind(C) :: data_pointer
        integer(C_INT) :: nitems
        type(C_PTR) :: items
    end type data_pointer

    type class1
        type(SCO_SHROUD_capsule_data) :: cxxmem
        ! splicer begin class.Class1.component_part
        ! splicer end class.Class1.component_part
    contains
        procedure :: get_instance => class1_get_instance
        procedure :: set_instance => class1_set_instance
        procedure :: associated => class1_associated
        ! splicer begin class.Class1.type_bound_procedure_part
        ! splicer end class.Class1.type_bound_procedure_part
    end type class1

    type class2
        type(SCO_SHROUD_capsule_data) :: cxxmem
        ! splicer begin class.Class2.component_part
        ! splicer end class.Class2.component_part
    contains
        procedure :: get_instance => class2_get_instance
        procedure :: set_instance => class2_set_instance
        procedure :: associated => class2_associated
        ! splicer begin class.Class2.type_bound_procedure_part
        ! splicer end class.Class2.type_bound_procedure_part
    end type class2

    interface operator (.eq.)
        module procedure class1_eq
        module procedure class2_eq
    end interface

    interface operator (.ne.)
        module procedure class1_ne
        module procedure class2_ne
    end interface

    interface

        ! ----------------------------------------
        ! Function:  int * DataPointer_get_items
        ! Attrs:     +api(cdesc)+deref(pointer)+intent(getter)+struct(ns3_DataPointer)
        ! Requested: c_getter_native_*_cdesc_pointer
        ! Match:     c_getter_native_*_cdesc
        ! ----------------------------------------
        ! Argument:  ns3::DataPointer * SH_this
        ! Attrs:     +intent(in)+struct(ns3_DataPointer)
        ! Requested: c_in_struct_*
        ! Match:     c_in_struct
        subroutine c_data_pointer_get_items_bufferify(SH_this, SHT_rv) &
                bind(C, name="SCO_DataPointer_get_items_bufferify")
            import :: SCO_SHROUD_array, data_pointer
            implicit none
            type(data_pointer), intent(IN) :: SH_this
            type(SCO_SHROUD_array), intent(OUT) :: SHT_rv
        end subroutine c_data_pointer_get_items_bufferify

        ! ----------------------------------------
        ! Function:  void DataPointer_set_items
        ! Attrs:     +intent(setter)
        ! Requested: c_setter_void_scalar
        ! Match:     c_setter
        ! ----------------------------------------
        ! Argument:  ns3::DataPointer * SH_this
        ! Attrs:     +intent(inout)+struct(ns3_DataPointer)
        ! Requested: c_inout_struct_*
        ! Match:     c_inout_struct
        ! ----------------------------------------
        ! Argument:  int * val +intent(in)+rank(1)
        ! Attrs:     +intent(setter)
        ! Exact:     c_setter_native_*
        subroutine data_pointer_set_items(SH_this, val) &
                bind(C, name="SCO_DataPointer_set_items")
            use iso_c_binding, only : C_INT
            import :: data_pointer
            implicit none
            type(data_pointer), intent(INOUT) :: SH_this
            integer(C_INT), intent(IN) :: val(*)
        end subroutine data_pointer_set_items
    end interface

    ! splicer begin additional_declarations
    ! splicer end additional_declarations

contains

    ! Return pointer to C++ memory.
    function class1_get_instance(obj) result (cxxptr)
        use iso_c_binding, only: C_PTR
        class(class1), intent(IN) :: obj
        type(C_PTR) :: cxxptr
        cxxptr = obj%cxxmem%addr
    end function class1_get_instance

    subroutine class1_set_instance(obj, cxxmem)
        use iso_c_binding, only: C_PTR
        class(class1), intent(INOUT) :: obj
        type(C_PTR), intent(IN) :: cxxmem
        obj%cxxmem%addr = cxxmem
        obj%cxxmem%idtor = 0
    end subroutine class1_set_instance

    function class1_associated(obj) result (rv)
        use iso_c_binding, only: c_associated
        class(class1), intent(IN) :: obj
        logical rv
        rv = c_associated(obj%cxxmem%addr)
    end function class1_associated

    ! splicer begin class.Class1.additional_functions
    ! splicer end class.Class1.additional_functions

    ! Return pointer to C++ memory.
    function class2_get_instance(obj) result (cxxptr)
        use iso_c_binding, only: C_PTR
        class(class2), intent(IN) :: obj
        type(C_PTR) :: cxxptr
        cxxptr = obj%cxxmem%addr
    end function class2_get_instance

    subroutine class2_set_instance(obj, cxxmem)
        use iso_c_binding, only: C_PTR
        class(class2), intent(INOUT) :: obj
        type(C_PTR), intent(IN) :: cxxmem
        obj%cxxmem%addr = cxxmem
        obj%cxxmem%idtor = 0
    end subroutine class2_set_instance

    function class2_associated(obj) result (rv)
        use iso_c_binding, only: c_associated
        class(class2), intent(IN) :: obj
        logical rv
        rv = c_associated(obj%cxxmem%addr)
    end function class2_associated

    ! splicer begin class.Class2.additional_functions
    ! splicer end class.Class2.additional_functions

    ! Generated by getter/setter - arg_to_buffer
    ! ----------------------------------------
    ! Function:  int * DataPointer_get_items
    ! Attrs:     +deref(pointer)+intent(getter)+struct(ns3_DataPointer)
    ! Exact:     f_getter_native_*_cdesc_pointer
    ! Attrs:     +api(cdesc)+deref(pointer)+intent(getter)+struct(ns3_DataPointer)
    ! Requested: c_getter_native_*_cdesc_pointer
    ! Match:     c_getter_native_*_cdesc
    ! ----------------------------------------
    ! Argument:  ns3::DataPointer * SH_this
    ! Attrs:     +intent(in)+struct(ns3_DataPointer)
    ! Requested: f_in_struct_*
    ! Match:     f_default
    ! Attrs:     +intent(in)+struct(ns3_DataPointer)
    ! Requested: c_in_struct_*
    ! Match:     c_in_struct
    function data_pointer_get_items(SH_this) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, c_f_pointer
        use scope_ns3_mod, only : data_pointer
        type(data_pointer), intent(IN) :: SH_this
        integer(C_INT), pointer :: SHT_rv(:)
        ! splicer begin function.data_pointer_get_items
        type(SCO_SHROUD_array) :: SHT_rv_cdesc
        call c_data_pointer_get_items_bufferify(SH_this, SHT_rv_cdesc)
        call c_f_pointer(SHT_rv_cdesc%base_addr, SHT_rv, &
            SHT_rv_cdesc%shape(1:1))
        ! splicer end function.data_pointer_get_items
    end function data_pointer_get_items

#if 0
    ! Only the interface is needed
    ! Generated by getter/setter
    ! ----------------------------------------
    ! Function:  void DataPointer_set_items
    ! Attrs:     +intent(setter)
    ! Exact:     f_setter
    ! Attrs:     +intent(setter)
    ! Exact:     c_setter
    ! ----------------------------------------
    ! Argument:  ns3::DataPointer * SH_this
    ! Attrs:     +intent(inout)+struct(ns3_DataPointer)
    ! Requested: f_inout_struct_*
    ! Match:     f_default
    ! Attrs:     +intent(inout)+struct(ns3_DataPointer)
    ! Requested: c_inout_struct_*
    ! Match:     c_inout_struct
    ! ----------------------------------------
    ! Argument:  int * val +intent(in)+rank(1)
    ! Attrs:     +intent(setter)
    ! Requested: f_setter_native_*
    ! Match:     f_setter_native
    ! Attrs:     +intent(setter)
    ! Exact:     c_setter_native_*
    subroutine data_pointer_set_items(SH_this, val)
        use iso_c_binding, only : C_INT
        use scope_ns3_mod, only : data_pointer
        type(data_pointer), intent(INOUT) :: SH_this
        integer(C_INT), intent(IN) :: val(:)
        ! splicer begin function.data_pointer_set_items
        call c_data_pointer_set_items(SH_this, val)
        ! splicer end function.data_pointer_set_items
    end subroutine data_pointer_set_items
#endif

    ! splicer begin additional_functions
    ! splicer end additional_functions

    function class1_eq(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(class1), intent(IN) ::a,b
        logical :: rv
        if (c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function class1_eq

    function class1_ne(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(class1), intent(IN) ::a,b
        logical :: rv
        if (.not. c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function class1_ne

    function class2_eq(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(class2), intent(IN) ::a,b
        logical :: rv
        if (c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function class2_eq

    function class2_ne(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(class2), intent(IN) ::a,b
        logical :: rv
        if (.not. c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function class2_ne

end module scope_mod
