{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "class_map": [
            "Arrays1",
            "Cstruct1",
            "Cstruct_as_class",
            "Cstruct_as_subclass",
            "Cstruct_list",
            "Cstruct_numpy",
            "Cstruct_ptr"
        ],
        "classes": [
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "name": "Cstruct1",
                "options": {
                    "literalinclude": true
                },
                "parse_keyword": "struct",
                "scope": "Cstruct1::",
                "typemap_name": "Cstruct1",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "ifield",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "ifield",
                        "options": {},
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "ifield",
                            "variable_lower": "ifield",
                            "variable_name": "ifield",
                            "variable_upper": "IFIELD"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "dfield",
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "name": "dfield",
                        "options": {},
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "double",
                            "cxx_type": "double",
                            "field_name": "dfield",
                            "variable_lower": "dfield",
                            "variable_name": "dfield",
                            "variable_upper": "DFIELD"
                        }
                    }
                ],
                "wrap": {
                    "python": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapCstruct1.h",
                    "C_impl_filename": "wrapCstruct1.cpp",
                    "C_name_api": "Cstruct1",
                    "C_name_scope": "Cstruct1_",
                    "C_type_name": "STR_cstruct1",
                    "F_derived_name": "cstruct1",
                    "F_name_api": "cstruct1",
                    "F_name_scope": "cstruct1_",
                    "PY_PyObject": "PY_Cstruct1",
                    "PY_PyTypeObject": "PY_Cstruct1_Type",
                    "PY_from_object_func": "PP_Cstruct1_from_Object",
                    "PY_struct_array_descr_create": "PY_Cstruct1_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct1_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct1_array_descr",
                    "PY_to_object_func": "PP_Cstruct1_to_Object",
                    "PY_to_object_idtor_func": "PP_Cstruct1_to_Object_idtor",
                    "class_scope": "Cstruct1::",
                    "cxx_class": "Cstruct1",
                    "cxx_type": "Cstruct1",
                    "file_scope": "Cstruct1"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "name": "Cstruct_ptr",
                "options": {},
                "parse_keyword": "struct",
                "scope": "Cstruct_ptr::",
                "typemap_name": "Cstruct_ptr",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "cfield",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "char"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        "name": "cfield",
                        "options": {},
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "char",
                            "cxx_type": "char",
                            "field_name": "cfield",
                            "variable_lower": "cfield",
                            "variable_name": "cfield",
                            "variable_upper": "CFIELD"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "const": true,
                            "declarator": {
                                "name": "const_dvalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "name": "const_dvalue",
                        "options": {},
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "double",
                            "cxx_type": "double",
                            "field_name": "const_dvalue",
                            "variable_lower": "const_dvalue",
                            "variable_name": "const_dvalue",
                            "variable_upper": "CONST_DVALUE"
                        }
                    }
                ],
                "wrap": {
                    "python": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapCstruct_ptr.h",
                    "C_impl_filename": "wrapCstruct_ptr.cpp",
                    "C_name_api": "Cstruct_ptr",
                    "C_name_scope": "Cstruct_ptr_",
                    "C_type_name": "STR_cstruct_ptr",
                    "F_derived_name": "cstruct_ptr",
                    "F_name_api": "cstruct_ptr",
                    "F_name_scope": "cstruct_ptr_",
                    "PY_PyObject": "PY_Cstruct_ptr",
                    "PY_PyTypeObject": "PY_Cstruct_ptr_Type",
                    "PY_from_object_func": "PP_Cstruct_ptr_from_Object",
                    "PY_struct_array_descr_create": "PY_Cstruct_ptr_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_ptr_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_ptr_array_descr",
                    "PY_to_object_func": "PP_Cstruct_ptr_to_Object",
                    "PY_to_object_idtor_func": "PP_Cstruct_ptr_to_Object_idtor",
                    "class_scope": "Cstruct_ptr::",
                    "cxx_class": "Cstruct_ptr",
                    "cxx_type": "Cstruct_ptr",
                    "file_scope": "Cstruct_ptr"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "name": "Cstruct_list",
                "options": {
                    "PY_array_arg": "list"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct_list::",
                "typemap_name": "Cstruct_list",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "nitems",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "nitems",
                        "options": {},
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "nitems",
                            "variable_lower": "nitems",
                            "variable_name": "nitems",
                            "variable_upper": "NITEMS"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "nitems+nitems"
                                },
                                "metaattrs": {
                                    "dimension": [
                                        {
                                            "left": {
                                                "name": "nitems"
                                            },
                                            "op": "+",
                                            "right": {
                                                "name": "nitems"
                                            }
                                        }
                                    ]
                                },
                                "name": "ivalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "ivalue",
                        "options": {},
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "ivalue",
                            "variable_lower": "ivalue",
                            "variable_name": "ivalue",
                            "variable_upper": "IVALUE"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "nitems*TWO"
                                },
                                "metaattrs": {
                                    "dimension": [
                                        {
                                            "left": {
                                                "name": "nitems"
                                            },
                                            "op": "*",
                                            "right": {
                                                "name": "TWO"
                                            }
                                        }
                                    ]
                                },
                                "name": "dvalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "name": "dvalue",
                        "options": {},
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "double",
                            "cxx_type": "double",
                            "field_name": "dvalue",
                            "variable_lower": "dvalue",
                            "variable_name": "dvalue",
                            "variable_upper": "DVALUE"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "nitems"
                                },
                                "metaattrs": {
                                    "dimension": [
                                        {
                                            "name": "nitems"
                                        }
                                    ]
                                },
                                "name": "svalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "char"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        "name": "svalue",
                        "options": {},
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "char",
                            "cxx_type": "char",
                            "field_name": "svalue",
                            "variable_lower": "svalue",
                            "variable_name": "svalue",
                            "variable_upper": "SVALUE"
                        }
                    }
                ],
                "wrap": {
                    "python": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapCstruct_list.h",
                    "C_impl_filename": "wrapCstruct_list.cpp",
                    "C_name_api": "Cstruct_list",
                    "C_name_scope": "Cstruct_list_",
                    "C_type_name": "STR_cstruct_list",
                    "F_derived_name": "cstruct_list",
                    "F_name_api": "cstruct_list",
                    "F_name_scope": "cstruct_list_",
                    "PY_PyObject": "PY_Cstruct_list",
                    "PY_PyTypeObject": "PY_Cstruct_list_Type",
                    "PY_from_object_func": "PP_Cstruct_list_from_Object",
                    "PY_struct_array_descr_create": "PY_Cstruct_list_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_list_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_list_array_descr",
                    "PY_to_object_func": "PP_Cstruct_list_to_Object",
                    "PY_to_object_idtor_func": "PP_Cstruct_list_to_Object_idtor",
                    "class_scope": "Cstruct_list::",
                    "cxx_class": "Cstruct_list",
                    "cxx_type": "Cstruct_list",
                    "file_scope": "Cstruct_list"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "name": "Cstruct_numpy",
                "options": {
                    "F_struct_getter_setter": false,
                    "PY_array_arg": "numpy"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct_numpy::",
                "typemap_name": "Cstruct_numpy",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "nitems",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "nitems",
                        "options": {},
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "nitems",
                            "variable_lower": "nitems",
                            "variable_name": "nitems",
                            "variable_upper": "NITEMS"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "nitems"
                                },
                                "metaattrs": {
                                    "dimension": [
                                        {
                                            "name": "nitems"
                                        }
                                    ]
                                },
                                "name": "ivalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "ivalue",
                        "options": {},
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "ivalue",
                            "variable_lower": "ivalue",
                            "variable_name": "ivalue",
                            "variable_upper": "IVALUE"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "nitems"
                                },
                                "metaattrs": {
                                    "dimension": [
                                        {
                                            "name": "nitems"
                                        }
                                    ]
                                },
                                "name": "dvalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "name": "dvalue",
                        "options": {},
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "double",
                            "cxx_type": "double",
                            "field_name": "dvalue",
                            "variable_lower": "dvalue",
                            "variable_name": "dvalue",
                            "variable_upper": "DVALUE"
                        }
                    }
                ],
                "wrap": {
                    "python": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapCstruct_numpy.h",
                    "C_impl_filename": "wrapCstruct_numpy.cpp",
                    "C_name_api": "Cstruct_numpy",
                    "C_name_scope": "Cstruct_numpy_",
                    "C_type_name": "STR_cstruct_numpy",
                    "F_derived_name": "cstruct_numpy",
                    "F_name_api": "cstruct_numpy",
                    "F_name_scope": "cstruct_numpy_",
                    "PY_PyObject": "PY_Cstruct_numpy",
                    "PY_PyTypeObject": "PY_Cstruct_numpy_Type",
                    "PY_from_object_func": "PP_Cstruct_numpy_from_Object",
                    "PY_struct_array_descr_create": "PY_Cstruct_numpy_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_numpy_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_numpy_array_descr",
                    "PY_to_object_func": "PP_Cstruct_numpy_to_Object",
                    "PY_to_object_idtor_func": "PP_Cstruct_numpy_to_Object_idtor",
                    "class_scope": "Cstruct_numpy::",
                    "cxx_class": "Cstruct_numpy",
                    "cxx_type": "Cstruct_numpy",
                    "file_scope": "Cstruct_numpy"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "name": "Arrays1",
                "options": {
                    "PY_array_arg": "numpy"
                },
                "parse_keyword": "struct",
                "scope": "Arrays1::",
                "typemap_name": "Arrays1",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "array": [
                                    {
                                        "constant": "20"
                                    }
                                ],
                                "name": "name",
                                "typemap_name": "char"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        "name": "name",
                        "options": {},
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "char",
                            "cxx_type": "char",
                            "field_name": "name",
                            "variable_lower": "name",
                            "variable_name": "name",
                            "variable_upper": "NAME"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "array": [
                                    {
                                        "constant": "10"
                                    }
                                ],
                                "name": "count",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "count",
                        "options": {},
                        "wrap": {
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "count",
                            "variable_lower": "count",
                            "variable_name": "count",
                            "variable_upper": "COUNT"
                        }
                    }
                ],
                "wrap": {
                    "python": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapArrays1.h",
                    "C_impl_filename": "wrapArrays1.cpp",
                    "C_name_api": "Arrays1",
                    "C_name_scope": "Arrays1_",
                    "C_type_name": "STR_arrays1",
                    "F_derived_name": "arrays1",
                    "F_name_api": "arrays1",
                    "F_name_scope": "arrays1_",
                    "PY_PyObject": "PY_Arrays1",
                    "PY_PyTypeObject": "PY_Arrays1_Type",
                    "PY_from_object_func": "PP_Arrays1_from_Object",
                    "PY_struct_array_descr_create": "PY_Arrays1_create_array_descr",
                    "PY_struct_array_descr_name": "Arrays1_dtype",
                    "PY_struct_array_descr_variable": "PY_Arrays1_array_descr",
                    "PY_to_object_func": "PP_Arrays1_to_Object",
                    "PY_to_object_idtor_func": "PP_Arrays1_to_Object_idtor",
                    "class_scope": "Arrays1::",
                    "cxx_class": "Arrays1",
                    "cxx_type": "Arrays1",
                    "file_scope": "Arrays1"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "name": "Cstruct_as_class",
                "options": {
                    "literalinclude": true,
                    "wrap_python": false,
                    "wrap_struct_as": "class"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct_as_class::",
                "typemap_name": "Cstruct_as_class",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "x1",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "x1",
                        "options": {},
                        "wrap": {},
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "x1",
                            "variable_lower": "x1",
                            "variable_name": "x1",
                            "variable_upper": "X1"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "y1",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "y1",
                        "options": {},
                        "wrap": {},
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "y1",
                            "variable_lower": "y1",
                            "variable_name": "y1",
                            "variable_upper": "Y1"
                        }
                    }
                ],
                "wrap": {},
                "wrap_as": "class",
                "zz_fmtdict": {
                    "C_header_filename": "wrapCstruct_as_class.h",
                    "C_impl_filename": "wrapCstruct_as_class.cpp",
                    "C_name_api": "Cstruct_as_class",
                    "C_name_scope": "Cstruct_as_class_",
                    "C_type_name": "STR_Cstruct_as_class",
                    "F_derived_name": "cstruct_as_class",
                    "F_name_api": "cstruct_as_class",
                    "F_name_scope": "cstruct_as_class_",
                    "PY_struct_array_descr_create": "PY_Cstruct_as_class_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_as_class_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_as_class_array_descr",
                    "class_scope": "Cstruct_as_class::",
                    "cxx_class": "Cstruct_as_class",
                    "cxx_type": "Cstruct_as_class",
                    "file_scope": "Cstruct_as_class"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "name": "Cstruct_as_subclass",
                "options": {
                    "class_baseclass": "Cstruct_as_class",
                    "literalinclude": true,
                    "wrap_python": false,
                    "wrap_struct_as": "class"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct_as_subclass::",
                "typemap_name": "Cstruct_as_subclass",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "x1",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "x1",
                        "options": {},
                        "wrap": {},
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "x1",
                            "variable_lower": "x1",
                            "variable_name": "x1",
                            "variable_upper": "X1"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "y1",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "y1",
                        "options": {},
                        "wrap": {},
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "y1",
                            "variable_lower": "y1",
                            "variable_name": "y1",
                            "variable_upper": "Y1"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "z1",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "z1",
                        "options": {},
                        "wrap": {},
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "z1",
                            "variable_lower": "z1",
                            "variable_name": "z1",
                            "variable_upper": "Z1"
                        }
                    }
                ],
                "wrap": {},
                "wrap_as": "class",
                "zz_fmtdict": {
                    "C_header_filename": "wrapCstruct_as_subclass.h",
                    "C_impl_filename": "wrapCstruct_as_subclass.cpp",
                    "C_name_api": "Cstruct_as_subclass",
                    "C_name_scope": "Cstruct_as_subclass_",
                    "C_type_name": "STR_Cstruct_as_subclass",
                    "F_derived_name": "cstruct_as_subclass",
                    "F_name_api": "cstruct_as_subclass",
                    "F_name_scope": "cstruct_as_subclass_",
                    "PY_struct_array_descr_create": "PY_Cstruct_as_subclass_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_as_subclass_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_as_subclass_array_descr",
                    "class_scope": "Cstruct_as_subclass::",
                    "cxx_class": "Cstruct_as_subclass",
                    "cxx_type": "Cstruct_as_subclass",
                    "file_scope": "Cstruct_as_subclass"
                }
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "struct.h"
        ],
        "functions": [
            {
                "<FUNCTION>": "0 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "passStructByValue",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "Cstruct1"
                                },
                                "specifier": [
                                    "Cstruct1"
                                ],
                                "typemap_name": "Cstruct1"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStructByValue(Cstruct1 arg)",
                "declgen": "int passStructByValue(Cstruct1 arg +value)",
                "name": "passStructByValue",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "PYN_descr": "PY_Cstruct1_array_descr",
                            "PY_to_object_idtor_func": "PP_Cstruct1_to_Object_idtor",
                            "PyObject": "PY_Cstruct1",
                            "PyTypeObject": "PY_Cstruct1_Type",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "STR_cstruct1",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": null,
                            "py_object": "PY_Cstruct1",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_in_struct_scalar_list",
                            "stmt1": "py_in_struct_scalar_list",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passStructByValue",
                    "F_name_api": "pass_struct_by_value",
                    "PY_name_impl": "PY_passStructByValue",
                    "function_name": "passStructByValue"
                },
                "zz_fmtresult": {
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_native_scalar",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "1 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "passStruct1",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct1"
                                },
                                "specifier": [
                                    "Cstruct1"
                                ],
                                "typemap_name": "Cstruct1"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStruct1(const Cstruct1 *arg)",
                "declgen": "int passStruct1(const Cstruct1 * arg)",
                "name": "passStruct1",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "PYN_descr": "PY_Cstruct1_array_descr",
                            "PY_to_object_idtor_func": "PP_Cstruct1_to_Object_idtor",
                            "PyObject": "PY_Cstruct1",
                            "PyTypeObject": "PY_Cstruct1_Type",
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "STR_cstruct1",
                            "c_var": "arg",
                            "ctor_expr": "*arg",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<Cstruct1 *>\t(arg)",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": null,
                            "py_object": "PY_Cstruct1",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_in_struct_*_list",
                            "stmt1": "py_in_struct_*_list",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passStruct1",
                    "F_name_api": "pass_struct1",
                    "PY_name_impl": "PY_passStruct1",
                    "function_name": "passStruct1"
                },
                "zz_fmtresult": {
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_native_scalar",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "2 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "passStruct2",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "s1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct1"
                                },
                                "specifier": [
                                    "Cstruct1"
                                ],
                                "typemap_name": "Cstruct1"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "charlen": "LENOUTBUF",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "outbuf",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStruct2(const Cstruct1 *s1, char *outbuf+intent(out)+charlen(LENOUTBUF))",
                "declgen": "int passStruct2(const Cstruct1 * s1, char * outbuf +charlen(LENOUTBUF)+intent(out))",
                "doxygen": {
                    "description": "Pass name argument which will build a bufferify function.\n"
                },
                "name": "passStruct2",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "outbuf": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "charlen": "LENOUTBUF",
                            "ctor_expr": "outbuf",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "data_var": "SHData_outbuf",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_outbuf",
                            "size_var": "SHSize_outbuf",
                            "stmt0": "py_out_char_*_charlen",
                            "stmt1": "py_out_char_*_charlen",
                            "value_var": "SHValue_outbuf"
                        }
                    },
                    "s1": {
                        "fmtpy": {
                            "PYN_descr": "PY_Cstruct1_array_descr",
                            "PY_to_object_idtor_func": "PP_Cstruct1_to_Object_idtor",
                            "PyObject": "PY_Cstruct1",
                            "PyTypeObject": "PY_Cstruct1_Type",
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "STR_cstruct1",
                            "c_var": "s1",
                            "ctor_expr": "*s1",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<Cstruct1 *>\t(s1)",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "s1",
                            "data_var": "SHData_s1",
                            "numpy_type": null,
                            "py_object": "PY_Cstruct1",
                            "py_var": "SHPy_s1",
                            "size_var": "SHSize_s1",
                            "stmt0": "py_in_struct_*_list",
                            "stmt1": "py_in_struct_*_list",
                            "value_var": "SHValue_s1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passStruct2",
                    "F_name_api": "pass_struct2",
                    "PY_name_impl": "PY_passStruct2",
                    "function_name": "passStruct2"
                },
                "zz_fmtresult": {
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_native_scalar",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "3 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "acceptStructInPtr",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in"
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct1"
                                },
                                "specifier": [
                                    "Cstruct1"
                                ],
                                "typemap_name": "Cstruct1"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int acceptStructInPtr(Cstruct1 *arg +intent(in))",
                "declgen": "int acceptStructInPtr(Cstruct1 * arg +intent(in))",
                "name": "acceptStructInPtr",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "PYN_descr": "PY_Cstruct1_array_descr",
                            "PY_to_object_idtor_func": "PP_Cstruct1_to_Object_idtor",
                            "PyObject": "PY_Cstruct1",
                            "PyTypeObject": "PY_Cstruct1_Type",
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "STR_cstruct1",
                            "c_var": "arg",
                            "ctor_expr": "*arg",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": null,
                            "py_object": "PY_Cstruct1",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_in_struct_*_list",
                            "stmt1": "py_in_struct_*_list",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "acceptStructInPtr",
                    "F_name_api": "accept_struct_in_ptr",
                    "PY_name_impl": "PY_acceptStructInPtr",
                    "function_name": "acceptStructInPtr"
                },
                "zz_fmtresult": {
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_native_scalar",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "4 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "acceptStructOutPtr",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct1"
                                },
                                "specifier": [
                                    "Cstruct1"
                                ],
                                "typemap_name": "Cstruct1"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "i",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "d",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStructOutPtr(Cstruct1 *arg +intent(out), int i, double d)",
                "declgen": "void acceptStructOutPtr(Cstruct1 * arg +intent(out), int i +value, double d +value)",
                "doxygen": {
                    "description": "Pass name argument which will build a bufferify function.\n"
                },
                "name": "acceptStructOutPtr",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "PYN_descr": "PY_Cstruct1_array_descr",
                            "PY_build_format": "O",
                            "PY_to_object_idtor_func": "PP_Cstruct1_to_Object_idtor",
                            "PyObject": "PY_Cstruct1",
                            "PyTypeObject": "PY_Cstruct1_Type",
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "STR_cstruct1",
                            "c_var": "arg",
                            "ctor_expr": "*arg",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": null,
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_out_struct_*_list",
                            "stmt1": "py_out_struct_*_list",
                            "value_var": "SHValue_arg",
                            "vargs": "arg"
                        }
                    },
                    "d": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "d",
                            "ctor_expr": "d",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&d",
                            "cxx_type": "double",
                            "cxx_var": "d",
                            "data_var": "SHData_d",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_d",
                            "size_var": "SHSize_d",
                            "stmt0": "py_in_native_scalar",
                            "stmt1": "py_default",
                            "value_var": "SHValue_d"
                        }
                    },
                    "i": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "i",
                            "ctor_expr": "i",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "data_var": "SHData_i",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_i",
                            "size_var": "SHSize_i",
                            "stmt0": "py_in_native_scalar",
                            "stmt1": "py_default",
                            "value_var": "SHValue_i"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "acceptStructOutPtr",
                    "F_name_api": "accept_struct_out_ptr",
                    "PY_name_impl": "PY_acceptStructOutPtr",
                    "function_name": "acceptStructOutPtr"
                }
            },
            {
                "<FUNCTION>": "5 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "acceptStructInOutPtr",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "inout"
                                    },
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct1"
                                },
                                "specifier": [
                                    "Cstruct1"
                                ],
                                "typemap_name": "Cstruct1"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStructInOutPtr(Cstruct1 *arg +intent(inout))",
                "declgen": "void acceptStructInOutPtr(Cstruct1 * arg +intent(inout))",
                "name": "acceptStructInOutPtr",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "PYN_descr": "PY_Cstruct1_array_descr",
                            "PY_build_format": "O",
                            "PY_to_object_idtor_func": "PP_Cstruct1_to_Object_idtor",
                            "PyObject": "PY_Cstruct1",
                            "PyTypeObject": "PY_Cstruct1_Type",
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "STR_cstruct1",
                            "c_var": "arg",
                            "ctor_expr": "*arg",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": null,
                            "py_object": "PY_Cstruct1",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_inout_struct_*_list",
                            "stmt1": "py_inout_struct_*_list",
                            "value_var": "SHValue_arg",
                            "vargs": "arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "acceptStructInOutPtr",
                    "F_name_api": "accept_struct_in_out_ptr",
                    "PY_name_impl": "PY_acceptStructInOutPtr",
                    "function_name": "acceptStructInOutPtr"
                }
            },
            {
                "<FUNCTION>": "6 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "returnStructByValue",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "i",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "d",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "Cstruct1"
                    },
                    "specifier": [
                        "Cstruct1"
                    ],
                    "typemap_name": "Cstruct1"
                },
                "decl": "Cstruct1 returnStructByValue(int i, double d);",
                "declgen": "Cstruct1 returnStructByValue(int i +value, double d +value)",
                "name": "returnStructByValue",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "d": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "d",
                            "ctor_expr": "d",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&d",
                            "cxx_type": "double",
                            "cxx_var": "d",
                            "data_var": "SHData_d",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_d",
                            "size_var": "SHSize_d",
                            "stmt0": "py_in_native_scalar",
                            "stmt1": "py_default",
                            "value_var": "SHValue_d"
                        }
                    },
                    "i": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "i",
                            "ctor_expr": "i",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "data_var": "SHData_i",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_i",
                            "size_var": "SHSize_i",
                            "stmt0": "py_in_native_scalar",
                            "stmt1": "py_default",
                            "value_var": "SHValue_i"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnStructByValue",
                    "F_name_api": "return_struct_by_value",
                    "PY_name_impl": "PY_returnStructByValue",
                    "function_name": "returnStructByValue"
                },
                "zz_fmtresult": {
                    "fmtpy": {
                        "PYN_descr": "PY_Cstruct1_array_descr",
                        "PY_build_format": "O",
                        "PY_to_object_idtor_func": "PP_Cstruct1_to_Object_idtor",
                        "PyObject": "PY_Cstruct1",
                        "PyTypeObject": "PY_Cstruct1_Type",
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "Cstruct1",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_struct_list",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv",
                        "vargs": "SHCXX_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "7 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "deref": "pointer",
                            "intent": "function"
                        },
                        "name": "returnStructPtr1",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "i",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "d",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "Cstruct1"
                    },
                    "specifier": [
                        "Cstruct1"
                    ],
                    "typemap_name": "Cstruct1"
                },
                "decl": "Cstruct1 *returnStructPtr1(int i, double d)",
                "declgen": "Cstruct1 * returnStructPtr1(int i +value, double d +value)",
                "doxygen": {
                    "brief": "Return a pointer to a struct",
                    "description": "Does not generate a bufferify C wrapper.\n"
                },
                "name": "returnStructPtr1",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "d": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "d",
                            "ctor_expr": "d",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&d",
                            "cxx_type": "double",
                            "cxx_var": "d",
                            "data_var": "SHData_d",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_d",
                            "size_var": "SHSize_d",
                            "stmt0": "py_in_native_scalar",
                            "stmt1": "py_default",
                            "value_var": "SHValue_d"
                        }
                    },
                    "i": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "i",
                            "ctor_expr": "i",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "data_var": "SHData_i",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_i",
                            "size_var": "SHSize_i",
                            "stmt0": "py_in_native_scalar",
                            "stmt1": "py_default",
                            "value_var": "SHValue_i"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnStructPtr1",
                    "F_name_api": "return_struct_ptr1",
                    "PY_name_impl": "PY_returnStructPtr1",
                    "function_name": "returnStructPtr1"
                },
                "zz_fmtresult": {
                    "fmtpy": {
                        "PYN_descr": "PY_Cstruct1_array_descr",
                        "PY_build_format": "O",
                        "PY_to_object_idtor_func": "PP_Cstruct1_to_Object_idtor",
                        "PyObject": "PY_Cstruct1",
                        "PyTypeObject": "PY_Cstruct1_Type",
                        "array_size": "1",
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "*SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "Cstruct1",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_struct_list",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv",
                        "vargs": "SHCXX_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "8 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "deref": "pointer",
                            "intent": "function"
                        },
                        "name": "returnStructPtr2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "i",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "d",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "charlen": "LENOUTBUF",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "outbuf",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "Cstruct1"
                    },
                    "specifier": [
                        "Cstruct1"
                    ],
                    "typemap_name": "Cstruct1"
                },
                "decl": "Cstruct1 *returnStructPtr2(int i, double d, char *outbuf+intent(out)+charlen(LENOUTBUF))",
                "declgen": "Cstruct1 * returnStructPtr2(int i +value, double d +value, char * outbuf +charlen(LENOUTBUF)+intent(out))",
                "doxygen": {
                    "brief": "Return a pointer to a struct",
                    "description": "Generates a bufferify C wrapper function.\n"
                },
                "name": "returnStructPtr2",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "d": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "d",
                            "ctor_expr": "d",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&d",
                            "cxx_type": "double",
                            "cxx_var": "d",
                            "data_var": "SHData_d",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_d",
                            "size_var": "SHSize_d",
                            "stmt0": "py_in_native_scalar",
                            "stmt1": "py_default",
                            "value_var": "SHValue_d"
                        }
                    },
                    "i": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "i",
                            "ctor_expr": "i",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "data_var": "SHData_i",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_i",
                            "size_var": "SHSize_i",
                            "stmt0": "py_in_native_scalar",
                            "stmt1": "py_default",
                            "value_var": "SHValue_i"
                        }
                    },
                    "outbuf": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "charlen": "LENOUTBUF",
                            "ctor_expr": "outbuf",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "data_var": "SHData_outbuf",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_outbuf",
                            "size_var": "SHSize_outbuf",
                            "stmt0": "py_out_char_*_charlen",
                            "stmt1": "py_out_char_*_charlen",
                            "value_var": "SHValue_outbuf"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnStructPtr2",
                    "F_name_api": "return_struct_ptr2",
                    "PY_name_impl": "PY_returnStructPtr2",
                    "function_name": "returnStructPtr2"
                },
                "zz_fmtresult": {
                    "fmtpy": {
                        "PYN_descr": "PY_Cstruct1_array_descr",
                        "PY_build_format": "O",
                        "PY_to_object_idtor_func": "PP_Cstruct1_to_Object_idtor",
                        "PyObject": "PY_Cstruct1",
                        "PyTypeObject": "PY_Cstruct1_Type",
                        "array_size": "1",
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "*SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "Cstruct1",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_struct_list",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv",
                        "vargs": "SHCXX_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "9 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "deref": "pointer",
                            "intent": "function"
                        },
                        "name": "get_global_struct_list",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "Cstruct_list"
                    },
                    "specifier": [
                        "Cstruct_list"
                    ],
                    "typemap_name": "Cstruct_list"
                },
                "decl": "Cstruct_list *get_global_struct_list();",
                "declgen": "Cstruct_list * get_global_struct_list(void)",
                "name": "get_global_struct_list",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name_api": "get_global_struct_list",
                    "F_name_api": "get_global_struct_list",
                    "PY_name_impl": "PY_get_global_struct_list",
                    "function_name": "get_global_struct_list"
                },
                "zz_fmtresult": {
                    "fmtpy": {
                        "PYN_descr": "PY_Cstruct_list_array_descr",
                        "PY_build_format": "O",
                        "PY_to_object_idtor_func": "PP_Cstruct_list_to_Object_idtor",
                        "PyObject": "PY_Cstruct_list",
                        "PyTypeObject": "PY_Cstruct_list_Type",
                        "array_size": "1",
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "*SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "Cstruct_list",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_struct_list",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv",
                        "vargs": "SHCXX_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "10 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "api": "capptr",
                            "intent": "function"
                        },
                        "name": "Create_Cstruct_as_class",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "Cstruct_as_class"
                    },
                    "specifier": [
                        "Cstruct_as_class"
                    ],
                    "typemap_name": "Cstruct_as_class"
                },
                "decl": "Cstruct_as_class *Create_Cstruct_as_class(void)",
                "declgen": "Cstruct_as_class * Create_Cstruct_as_class(void)",
                "name": "Create_Cstruct_as_class",
                "options": {
                    "class_ctor": "Cstruct_as_class",
                    "literalinclude": true,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "Create_Cstruct_as_class",
                    "F_name_api": "create_cstruct_as_class",
                    "function_name": "Create_Cstruct_as_class"
                }
            },
            {
                "<FUNCTION>": "11 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "api": "capptr",
                            "intent": "function"
                        },
                        "name": "Create_Cstruct_as_class_args",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "x",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "y",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "Cstruct_as_class"
                    },
                    "specifier": [
                        "Cstruct_as_class"
                    ],
                    "typemap_name": "Cstruct_as_class"
                },
                "decl": "Cstruct_as_class *Create_Cstruct_as_class_args(int x, int y)",
                "declgen": "Cstruct_as_class * Create_Cstruct_as_class_args(int x +value, int y +value)",
                "name": "Create_Cstruct_as_class_args",
                "options": {
                    "class_ctor": "Cstruct_as_class",
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "Create_Cstruct_as_class_args",
                    "F_name_api": "create_cstruct_as_class_args",
                    "function_name": "Create_Cstruct_as_class_args"
                }
            },
            {
                "<FUNCTION>": "12 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "Cstruct_as_class_sum",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "pass": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "point",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct_as_class"
                                },
                                "specifier": [
                                    "Cstruct_as_class"
                                ],
                                "typemap_name": "Cstruct_as_class"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int Cstruct_as_class_sum(const Cstruct_as_class *point +pass)",
                "declgen": "int Cstruct_as_class_sum(const Cstruct_as_class * point +pass)",
                "name": "Cstruct_as_class_sum",
                "options": {
                    "class_method": "Cstruct_as_class",
                    "wrap_python": false
                },
                "user_fmt": {
                    "F_name_function": "sum"
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "Cstruct_as_class_sum",
                    "F_name_api": "cstruct_as_class_sum",
                    "F_name_function": "sum",
                    "function_name": "Cstruct_as_class_sum"
                }
            },
            {
                "<FUNCTION>": "13 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "api": "capptr",
                            "intent": "function"
                        },
                        "name": "Create_Cstruct_as_subclass_args",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "x",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "y",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "z",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "Cstruct_as_subclass"
                    },
                    "specifier": [
                        "Cstruct_as_subclass"
                    ],
                    "typemap_name": "Cstruct_as_subclass"
                },
                "decl": "Cstruct_as_subclass *Create_Cstruct_as_subclass_args(int x, int y, int z)",
                "declgen": "Cstruct_as_subclass * Create_Cstruct_as_subclass_args(int x +value, int y +value, int z +value)",
                "name": "Create_Cstruct_as_subclass_args",
                "options": {
                    "class_ctor": "Cstruct_as_subclass",
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "Create_Cstruct_as_subclass_args",
                    "F_name_api": "create_cstruct_as_subclass_args",
                    "function_name": "Create_Cstruct_as_subclass_args"
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "struct"
        ],
        "user_fmt": {
            "F_name_associated": "",
            "F_name_instance_get": "",
            "F_name_instance_set": "",
            "PY_module_name": "cstruct"
        },
        "wrap": {
            "python": true
        }
    },
    "symtab": {
        "Arrays1": "struct-Arrays1",
        "Cstruct1": "struct-Cstruct1",
        "Cstruct_as_class": "struct-Cstruct_as_class",
        "Cstruct_as_subclass": "struct-Cstruct_as_subclass",
        "Cstruct_list": "struct-Cstruct_list",
        "Cstruct_numpy": "struct-Cstruct_numpy",
        "Cstruct_ptr": "struct-Cstruct_ptr",
        "struct-Arrays1": "Arrays1",
        "struct-Cstruct1": "Cstruct1",
        "struct-Cstruct_as_class": "Cstruct_as_class",
        "struct-Cstruct_as_subclass": "Cstruct_as_subclass",
        "struct-Cstruct_list": "Cstruct_list",
        "struct-Cstruct_numpy": "Cstruct_numpy",
        "struct-Cstruct_ptr": "Cstruct_ptr"
    },
    "types": {
        "Arrays1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Arrays1_array_descr",
            "PY_PyObject": "PY_Arrays1",
            "PY_PyTypeObject": "PY_Arrays1_Type",
            "PY_from_object": "PP_Arrays1_from_Object",
            "PY_struct_as": "list",
            "PY_to_object": "PP_Arrays1_to_Object",
            "PY_to_object_idtor": "PP_Arrays1_to_Object_idtor",
            "base": "struct",
            "c_type": "STR_arrays1",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Arrays1",
            "f_c_module": {
                "--import--": [
                    "arrays1"
                ]
            },
            "f_derived_type": "arrays1",
            "f_kind": "arrays1",
            "f_module": {
                "struct_mod": [
                    "arrays1"
                ]
            },
            "f_module_name": "struct_mod",
            "f_type": "type(arrays1)",
            "flat_name": "Arrays1",
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        },
        "Cstruct1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Cstruct1_array_descr",
            "PY_PyObject": "PY_Cstruct1",
            "PY_PyTypeObject": "PY_Cstruct1_Type",
            "PY_from_object": "PP_Cstruct1_from_Object",
            "PY_struct_as": "list",
            "PY_to_object": "PP_Cstruct1_to_Object",
            "PY_to_object_idtor": "PP_Cstruct1_to_Object_idtor",
            "base": "struct",
            "c_type": "STR_cstruct1",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Cstruct1",
            "f_c_module": {
                "--import--": [
                    "cstruct1"
                ]
            },
            "f_derived_type": "cstruct1",
            "f_kind": "cstruct1",
            "f_module": {
                "struct_mod": [
                    "cstruct1"
                ]
            },
            "f_module_name": "struct_mod",
            "f_type": "type(cstruct1)",
            "flat_name": "Cstruct1",
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        },
        "Cstruct_as_class": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}Cstruct_as_class *>\t({c_var}->addr)",
            "c_type": "STR_Cstruct_as_class",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "Cstruct_as_class",
            "f_c_module": {
                "--import--": [
                    "STR_SHROUD_capsule_data"
                ]
            },
            "f_c_module_line": "--import--:STR_SHROUD_capsule_data",
            "f_c_type": "type(STR_SHROUD_capsule_data)",
            "f_capsule_data_type": "STR_SHROUD_capsule_data",
            "f_class": "class(cstruct_as_class)",
            "f_derived_type": "cstruct_as_class",
            "f_module": {
                "struct_mod": [
                    "cstruct_as_class"
                ]
            },
            "f_module_line": "struct_mod:cstruct_as_class",
            "f_module_name": "struct_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(cstruct_as_class)",
            "flat_name": "Cstruct_as_class",
            "impl_header": [
                "struct.h"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesstruct.h"
            ]
        },
        "Cstruct_as_subclass": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}Cstruct_as_subclass *>\t({c_var}->addr)",
            "c_type": "STR_Cstruct_as_subclass",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "Cstruct_as_subclass",
            "f_c_module": {
                "--import--": [
                    "STR_SHROUD_capsule_data"
                ]
            },
            "f_c_module_line": "--import--:STR_SHROUD_capsule_data",
            "f_c_type": "type(STR_SHROUD_capsule_data)",
            "f_capsule_data_type": "STR_SHROUD_capsule_data",
            "f_class": "class(cstruct_as_subclass)",
            "f_derived_type": "cstruct_as_subclass",
            "f_module": {
                "struct_mod": [
                    "cstruct_as_subclass"
                ]
            },
            "f_module_line": "struct_mod:cstruct_as_subclass",
            "f_module_name": "struct_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(cstruct_as_subclass)",
            "flat_name": "Cstruct_as_subclass",
            "impl_header": [
                "struct.h"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesstruct.h"
            ]
        },
        "Cstruct_list": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Cstruct_list_array_descr",
            "PY_PyObject": "PY_Cstruct_list",
            "PY_PyTypeObject": "PY_Cstruct_list_Type",
            "PY_from_object": "PP_Cstruct_list_from_Object",
            "PY_struct_as": "list",
            "PY_to_object": "PP_Cstruct_list_to_Object",
            "PY_to_object_idtor": "PP_Cstruct_list_to_Object_idtor",
            "base": "struct",
            "c_type": "STR_cstruct_list",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Cstruct_list",
            "f_c_module": {
                "--import--": [
                    "cstruct_list"
                ]
            },
            "f_derived_type": "cstruct_list",
            "f_kind": "cstruct_list",
            "f_module": {
                "struct_mod": [
                    "cstruct_list"
                ]
            },
            "f_module_name": "struct_mod",
            "f_type": "type(cstruct_list)",
            "flat_name": "Cstruct_list",
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        },
        "Cstruct_numpy": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Cstruct_numpy_array_descr",
            "PY_PyObject": "PY_Cstruct_numpy",
            "PY_PyTypeObject": "PY_Cstruct_numpy_Type",
            "PY_from_object": "PP_Cstruct_numpy_from_Object",
            "PY_struct_as": "list",
            "PY_to_object": "PP_Cstruct_numpy_to_Object",
            "PY_to_object_idtor": "PP_Cstruct_numpy_to_Object_idtor",
            "base": "struct",
            "c_type": "STR_cstruct_numpy",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Cstruct_numpy",
            "f_c_module": {
                "--import--": [
                    "cstruct_numpy"
                ]
            },
            "f_derived_type": "cstruct_numpy",
            "f_kind": "cstruct_numpy",
            "f_module": {
                "struct_mod": [
                    "cstruct_numpy"
                ]
            },
            "f_module_name": "struct_mod",
            "f_type": "type(cstruct_numpy)",
            "flat_name": "Cstruct_numpy",
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        },
        "Cstruct_ptr": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Cstruct_ptr_array_descr",
            "PY_PyObject": "PY_Cstruct_ptr",
            "PY_PyTypeObject": "PY_Cstruct_ptr_Type",
            "PY_from_object": "PP_Cstruct_ptr_from_Object",
            "PY_struct_as": "list",
            "PY_to_object": "PP_Cstruct_ptr_to_Object",
            "PY_to_object_idtor": "PP_Cstruct_ptr_to_Object_idtor",
            "base": "struct",
            "c_type": "STR_cstruct_ptr",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Cstruct_ptr",
            "f_c_module": {
                "--import--": [
                    "cstruct_ptr"
                ]
            },
            "f_derived_type": "cstruct_ptr",
            "f_kind": "cstruct_ptr",
            "f_module": {
                "struct_mod": [
                    "cstruct_ptr"
                ]
            },
            "f_module_name": "struct_mod",
            "f_type": "type(cstruct_ptr)",
            "flat_name": "Cstruct_ptr",
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        }
    }
}