! wrapferror.f
! This file is generated by Shroud nowrite-version. Do not edit.
! Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
! other Shroud Project Developers.
! See the top-level COPYRIGHT file for details.
!
! SPDX-License-Identifier: (BSD-3-Clause)
!
!>
!! \file wrapferror.f
!! \brief Shroud generated wrapper for error library
!<
! splicer begin file_top
! splicer end file_top
module error_mod
    use iso_c_binding, only : C_INT, C_PTR
    ! splicer begin module_use
    ! splicer end module_use
    implicit none

    ! splicer begin module_top
    ! splicer end module_top


    type, bind(C) :: struct1
        integer(C_INT) :: arg1(10)
        integer(C_INT) :: narg2
        type(C_PTR) :: arg2
    end type struct1


    type, bind(C) :: nested
        integer(C_INT) :: sublevels
    end type nested

    interface

        ! Generated by getter/setter
        ! ----------------------------------------
        ! Function:  int * struct1_get_arg2 +deref(pointerxx)+dimension(narg2)+intent(getter)
        ! Statement: f_mixin_unknown
        ! ----------------------------------------
        ! Argument:  struct1 * SH_this +intent(in)
        ! Statement: f_in_struct_*
        function struct1_get_arg2(SH_this, struct1_get_arg2) &
                result(SHT_rv) &
                bind(C, name="ERR_struct1_get_arg2")
            use iso_c_binding, only : C_INT
            import :: struct1
            implicit none
            type(struct1), intent(IN) :: SH_this
            integer(C_INT) :: struct1_get_arg2(*)
            integer(C_INT) :: SHT_rv(*)
        end function struct1_get_arg2

        ! Generated by getter/setter
        ! ----------------------------------------
        ! Function:  void struct1_set_arg2 +intent(setter)
        ! Statement: f_setter
        ! ----------------------------------------
        ! Argument:  struct1 * SH_this
        ! Statement: f_inout_struct_*
        ! ----------------------------------------
        ! Argument:  int * val +intent(setter)+rank(1)
        ! Statement: f_setter_native_*
        subroutine struct1_set_arg2(SH_this, val) &
                bind(C, name="ERR_struct1_set_arg2")
            use iso_c_binding, only : C_INT
            import :: struct1
            implicit none
            type(struct1), intent(INOUT) :: SH_this
            integer(C_INT), intent(IN) :: val(*)
        end subroutine struct1_set_arg2
    end interface

    ! splicer begin additional_declarations
    ! splicer end additional_declarations

contains

#if 0
    ! Only the interface is needed
    ! Generated by getter/setter
    ! ----------------------------------------
    ! Function:  int * struct1_get_arg2 +deref(pointerxx)+dimension(narg2)+intent(getter)
    ! Statement: f_mixin_unknown
    ! ----------------------------------------
    ! Argument:  struct1 * SH_this +intent(in)
    ! Statement: f_in_struct_*
    function struct1_get_arg2(SH_this) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        type(struct1), intent(IN) :: SH_this
        integer(C_INT) :: SHT_rv(narg2)
        ! splicer begin function.struct1_get_arg2
        SHT_rv = c_struct1_get_arg2(SH_this, SHT_rv)
        ! splicer end function.struct1_get_arg2
    end function struct1_get_arg2
#endif

#if 0
    ! Only the interface is needed
    ! Generated by getter/setter
    ! ----------------------------------------
    ! Function:  void struct1_set_arg2 +intent(setter)
    ! Statement: f_setter
    ! ----------------------------------------
    ! Argument:  struct1 * SH_this
    ! Statement: f_inout_struct_*
    ! ----------------------------------------
    ! Argument:  int * val +intent(setter)+rank(1)
    ! Statement: f_setter_native_*
    subroutine struct1_set_arg2(SH_this, val)
        use iso_c_binding, only : C_INT
        type(struct1), intent(INOUT) :: SH_this
        integer(C_INT), intent(IN) :: val(:)
        ! splicer begin function.struct1_set_arg2
        call c_struct1_set_arg2(SH_this, val)
        ! splicer end function.struct1_set_arg2
    end subroutine struct1_set_arg2
#endif

    ! splicer begin additional_functions
    ! splicer end additional_functions

end module error_mod
