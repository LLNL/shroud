Read yaml example.yaml
Read splicer csplicer.c
Read splicer fsplicer.f
Read splicer pysplicer.c
Close userlibrary_types.yaml
class ExClass1
C c ExClass1(void)  +api(capptr)+intent(ctor)
C f ExClass1(void)  +api(capptr)+intent(ctor)
C c ExClass1(const string * name)  +api(capptr)+intent(ctor)
C f ExClass1(const string * name)  +api(capptr)+intent(ctor)
C c ~ExClass1(void)  +intent(dtor)
C f ~ExClass1(void)  +intent(dtor)
C c int incrementCount(int incr +value)  +intent(function)
C f int incrementCount(int incr +value)  +intent(function)
C c const string & getNameErrorCheck(void) const  +deref(allocatable)+intent(function)
C f const string & getNameErrorCheck(void) const  +api(cdesc)+deref(allocatable)+intent(function)
C c const string & getNameArg(void) const  +intent(function)
C f const string & getNameArg(void) const  +api(buf)+deref(arg)+intent(function)
C c int getValue(int value +value)  +intent(function)
C f int getValue(int value +value)  +intent(function)
C c long getValue(long value +value)  +intent(function)
C f long getValue(long value +value)  +intent(function)
C c bool hasAddr(bool in +value)  +intent(function)
C f bool hasAddr(bool in +value)  +intent(function)
C c void SplicerSpecial(void)  +intent(subroutine)
C f void SplicerSpecial(void)  +intent(subroutine)
Close wrapexample_nested_ExClass1.h
Close wrapexample_nested_ExClass1.cpp
class ExClass2
C c ExClass2(const string * name +len_trim(trim_name))  +api(capptr)+intent(ctor)
C f ExClass2(const string * name +len_trim(trim_name))  +api(capptr)+intent(ctor)
C c ~ExClass2(void)  +intent(dtor)
C f ~ExClass2(void)  +intent(dtor)
C c const string & getName(void) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))  +deref(copy)+intent(function)
C f const string & getName(void) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))  +api(buf)+deref(copy)+intent(function)
C c const string & getName2(void)  +deref(allocatable)+intent(function)
C f const string & getName2(void)  +api(cdesc)+deref(allocatable)+intent(function)
C c string & getName3(void) const  +deref(allocatable)+intent(function)
C f string & getName3(void) const  +api(cdesc)+deref(allocatable)+intent(function)
C c string & getName4(void)  +deref(allocatable)+intent(function)
C f string & getName4(void)  +api(cdesc)+deref(allocatable)+intent(function)
C c int GetNameLength(void) const  +intent(function)
C f int GetNameLength(void) const  +intent(function)
C c ExClass1 * get_class1(const ExClass1 * in)  +api(capptr)+intent(function)
C f ExClass1 * get_class1(const ExClass1 * in)  +api(capptr)+intent(function)
C c ExClass2 * declare(TypeID type +value)  +api(this)+intent(function)
C f ExClass2 * declare(TypeID type +value)  +api(this)+intent(function)
C c ExClass2 * declare(TypeID type +value, SidreLength len=1 +value)  +api(this)+intent(function)
C f ExClass2 * declare(TypeID type +value, int len=1 +value)  +api(this)+intent(function)
C f ExClass2 * declare(TypeID type +value, long len=1 +value)  +api(this)+intent(function)
C c void destroyall(void)  +intent(subroutine)
C f void destroyall(void)  +intent(subroutine)
C c TypeID getTypeID(void) const  +intent(function)
C f TypeID getTypeID(void) const  +intent(function)
C c void setValue(int value +value)  +intent(subroutine)
C f void setValue(int value +value)  +intent(subroutine)
C c void setValue(long value +value)  +intent(subroutine)
C f void setValue(long value +value)  +intent(subroutine)
C c void setValue(float value +value)  +intent(subroutine)
C f void setValue(float value +value)  +intent(subroutine)
C c void setValue(double value +value)  +intent(subroutine)
C f void setValue(double value +value)  +intent(subroutine)
C c int getValue(void)  +intent(function)
C f int getValue(void)  +intent(function)
C c double getValue(void)  +intent(function)
C f double getValue(void)  +intent(function)
Close wrapexample_nested_ExClass2.h
Close wrapexample_nested_ExClass2.cpp
C c void local_function1(void)  +intent(subroutine)
C f void local_function1(void)  +intent(subroutine)
C c bool isNameValid(const std::string & name)  +intent(function)
C f bool isNameValid(const std::string & name)  +intent(function)
C c bool isInitialized(void)  +intent(function)
C f bool isInitialized(void)  +intent(function)
C c void test_names(const std::string & name)  +intent(subroutine)
C f void test_names(const std::string & name)  +intent(subroutine)
C c void test_names(const std::string & name, int flag +value)  +intent(subroutine)
C f void test_names(const std::string & name, int flag +value)  +intent(subroutine)
C c void testoptional(void)  +intent(subroutine)
C f void testoptional(void)  +intent(subroutine)
C c void testoptional(int i=1 +value)  +intent(subroutine)
C f void testoptional(int i=1 +value)  +intent(subroutine)
C c void testoptional(int i=1 +value, long j=2 +value)  +intent(subroutine)
C f void testoptional(int i=1 +value, long j=2 +value)  +intent(subroutine)
C c size_t test_size_t(void)  +intent(function)
C f size_t test_size_t(void)  +intent(function)
C c void testmpi(MPI_Comm comm +value)  +intent(subroutine)
C f void testmpi(MPI_Comm comm +value)  +intent(subroutine)
C c void testmpi(void)  +intent(subroutine)
C f void testmpi(void)  +intent(subroutine)
C c void FuncPtr1(void ( * get)(void) +value)  +intent(subroutine)
C f void FuncPtr1(void ( * get)(void) +value)  +intent(subroutine)
C c void FuncPtr2(double * ( * get)(void))  +intent(subroutine)
C f void FuncPtr2(double * ( * get)(void))  +intent(subroutine)
C c void FuncPtr3(double ( * get)(int i +value, int +value) +value)  +intent(subroutine)
C f void FuncPtr3(double ( * get)(int i +value, int +value) +value)  +intent(subroutine)
C c void FuncPtr4(double ( * get)(double +value, int +value) +value)  +intent(subroutine)
C f void FuncPtr4(double ( * get)(double +value, int +value) +value)  +intent(subroutine)
C c void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +value)  +intent(subroutine)
C f void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +value)  +intent(subroutine)
C c void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))  +intent(subroutine)
C f void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))  +intent(subroutine)
C c int verylongfunctionname2(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value)  +intent(function)
C f int verylongfunctionname2(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value)  +intent(function)
C c void cos_doubles(double * in +intent(in)+rank(2), double * out +dimension(shape(in))+intent(out), int sizein +implied(size(in))+value)  +intent(subroutine)
C f void cos_doubles(double * in +intent(in)+rank(2), double * out +dimension(shape(in))+intent(out), int sizein +implied(size(in))+value)  +intent(subroutine)
Close wrapUserLibrary_example_nested.h
Close wrapUserLibrary_example_nested.cpp
Close wrapUserLibrary.h
Close wrapUserLibrary.cpp
typedef SidreLength
typedef TypeID
class ExClass1
Fortran ExClass1(void)  +api(capptr)+intent(ctor)
Fortran ExClass1(const string * name)  +api(capptr)+intent(ctor)
Fortran ~ExClass1(void)  +intent(dtor)
Fortran int incrementCount(int incr +value)  +intent(function)
Fortran const string & getNameErrorCheck(void) const  +api(cdesc)+deref(allocatable)+intent(function)
Fortran const string & getNameArg(void) const  +api(buf)+deref(arg)+intent(function)
Fortran int getValue(int value +value)  +intent(function)
Fortran long getValue(long value +value)  +intent(function)
Fortran bool hasAddr(bool in +value)  +intent(function)
Fortran void SplicerSpecial(void)  +intent(subroutine)
C-interface f ExClass1(void)  +api(capptr)+intent(ctor)
C-interface c ExClass1(const string * name)  +api(capptr)+intent(ctor)
C-interface f ExClass1(const string * name)  +api(capptr)+intent(ctor)
C-interface f ~ExClass1(void)  +intent(dtor)
C-interface f int incrementCount(int incr +value)  +intent(function)
C-interface c const string & getNameErrorCheck(void) const  +deref(allocatable)+intent(function)
C-interface f const string & getNameErrorCheck(void) const  +api(cdesc)+deref(allocatable)+intent(function)
C-interface c const string & getNameArg(void) const  +intent(function)
C-interface f const string & getNameArg(void) const  +api(buf)+deref(arg)+intent(function)
C-interface f int getValue(int value +value)  +intent(function)
C-interface f long getValue(long value +value)  +intent(function)
C-interface f bool hasAddr(bool in +value)  +intent(function)
C-interface f void SplicerSpecial(void)  +intent(subroutine)
class ExClass2
Fortran ExClass2(const string * name +len_trim(trim_name))  +api(capptr)+intent(ctor)
Fortran ~ExClass2(void)  +intent(dtor)
Fortran const string & getName(void) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))  +api(buf)+deref(copy)+intent(function)
Fortran const string & getName2(void)  +api(cdesc)+deref(allocatable)+intent(function)
Fortran string & getName3(void) const  +api(cdesc)+deref(allocatable)+intent(function)
Fortran string & getName4(void)  +api(cdesc)+deref(allocatable)+intent(function)
Fortran int GetNameLength(void) const  +intent(function)
Fortran ExClass1 * get_class1(const ExClass1 * in)  +api(capptr)+intent(function)
Fortran ExClass2 * declare(TypeID type +value)  +api(this)+intent(function)
Fortran ExClass2 * declare(TypeID type +value, int len=1 +value)  +api(this)+intent(function)
Fortran ExClass2 * declare(TypeID type +value, long len=1 +value)  +api(this)+intent(function)
Fortran void destroyall(void)  +intent(subroutine)
Fortran TypeID getTypeID(void) const  +intent(function)
Fortran void setValue(int value +value)  +intent(subroutine)
Fortran void setValue(long value +value)  +intent(subroutine)
Fortran void setValue(float value +value)  +intent(subroutine)
Fortran void setValue(double value +value)  +intent(subroutine)
Fortran int getValue(void)  +intent(function)
Fortran double getValue(void)  +intent(function)
C-interface c ExClass2(const string * name +len_trim(trim_name))  +api(capptr)+intent(ctor)
C-interface f ExClass2(const string * name +len_trim(trim_name))  +api(capptr)+intent(ctor)
C-interface f ~ExClass2(void)  +intent(dtor)
C-interface c const string & getName(void) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))  +deref(copy)+intent(function)
C-interface f const string & getName(void) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))  +api(buf)+deref(copy)+intent(function)
C-interface c const string & getName2(void)  +deref(allocatable)+intent(function)
C-interface f const string & getName2(void)  +api(cdesc)+deref(allocatable)+intent(function)
C-interface c string & getName3(void) const  +deref(allocatable)+intent(function)
C-interface f string & getName3(void) const  +api(cdesc)+deref(allocatable)+intent(function)
C-interface c string & getName4(void)  +deref(allocatable)+intent(function)
C-interface f string & getName4(void)  +api(cdesc)+deref(allocatable)+intent(function)
C-interface f int GetNameLength(void) const  +intent(function)
C-interface f ExClass1 * get_class1(const ExClass1 * in)  +api(capptr)+intent(function)
C-interface f ExClass2 * declare(TypeID type +value)  +api(this)+intent(function)
C-interface c ExClass2 * declare(TypeID type +value, SidreLength len=1 +value)  +api(this)+intent(function)
C-interface f ExClass2 * declare(TypeID type +value, int len=1 +value)  +api(this)+intent(function)
C-interface f ExClass2 * declare(TypeID type +value, long len=1 +value)  +api(this)+intent(function)
C-interface f void destroyall(void)  +intent(subroutine)
C-interface f TypeID getTypeID(void) const  +intent(function)
C-interface f void setValue(int value +value)  +intent(subroutine)
C-interface f void setValue(long value +value)  +intent(subroutine)
C-interface f void setValue(float value +value)  +intent(subroutine)
C-interface f void setValue(double value +value)  +intent(subroutine)
C-interface f int getValue(void)  +intent(function)
C-interface f double getValue(void)  +intent(function)
Fortran void local_function1(void)  +intent(subroutine)
Fortran bool isNameValid(const std::string & name)  +intent(function)
Fortran bool isInitialized(void)  +intent(function)
Fortran void test_names(const std::string & name)  +intent(subroutine)
Fortran void test_names(const std::string & name, int flag +value)  +intent(subroutine)
Fortran void testoptional(void)  +intent(subroutine)
Fortran void testoptional(int i=1 +value)  +intent(subroutine)
Fortran void testoptional(int i=1 +value, long j=2 +value)  +intent(subroutine)
Fortran size_t test_size_t(void)  +intent(function)
Fortran void testmpi(MPI_Comm comm +value)  +intent(subroutine)
Fortran void testmpi(void)  +intent(subroutine)
Fortran void FuncPtr1(void ( * get)(void) +value)  +intent(subroutine)
Fortran void FuncPtr2(double * ( * get)(void))  +intent(subroutine)
Fortran void FuncPtr3(double ( * get)(int i +value, int +value) +value)  +intent(subroutine)
Fortran void FuncPtr4(double ( * get)(double +value, int +value) +value)  +intent(subroutine)
Fortran void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +value)  +intent(subroutine)
Fortran void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))  +intent(subroutine)
Fortran int verylongfunctionname2(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value)  +intent(function)
Fortran void cos_doubles(double * in +intent(in)+rank(2), double * out +dimension(shape(in))+intent(out), int sizein +implied(size(in))+value)  +intent(subroutine)
C-interface f void local_function1(void)  +intent(subroutine)
C-interface c bool isNameValid(const std::string & name)  +intent(function)
C-interface f bool isNameValid(const std::string & name)  +intent(function)
C-interface f bool isInitialized(void)  +intent(function)
C-interface c void test_names(const std::string & name)  +intent(subroutine)
C-interface f void test_names(const std::string & name)  +intent(subroutine)
C-interface c void test_names(const std::string & name, int flag +value)  +intent(subroutine)
C-interface f void test_names(const std::string & name, int flag +value)  +intent(subroutine)
C-interface f void testoptional(void)  +intent(subroutine)
C-interface f void testoptional(int i=1 +value)  +intent(subroutine)
C-interface f void testoptional(int i=1 +value, long j=2 +value)  +intent(subroutine)
C-interface f size_t test_size_t(void)  +intent(function)
C-interface f void testmpi(MPI_Comm comm +value)  +intent(subroutine)
C-interface f void testmpi(void)  +intent(subroutine)
C-interface f void FuncPtr1(void ( * get)(void) +value)  +intent(subroutine)
C-interface f void FuncPtr2(double * ( * get)(void))  +intent(subroutine)
C-interface f void FuncPtr3(double ( * get)(int i +value, int +value) +value)  +intent(subroutine)
C-interface f void FuncPtr4(double ( * get)(double +value, int +value) +value)  +intent(subroutine)
C-interface f void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +value)  +intent(subroutine)
C-interface f void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))  +intent(subroutine)
C-interface f int verylongfunctionname2(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value)  +intent(function)
C-interface f void cos_doubles(double * in +intent(in)+rank(2), double * out +dimension(shape(in))+intent(out), int sizein +implied(size(in))+value)  +intent(subroutine)
Close wrapfUserLibrary_example_nested.f
Close wrapfUserLibrary_example.f
Close wrapfuserlibrary.f
Close utilUserLibrary.cpp
Close typesUserLibrary.h
class ExClass1
Python method ExClass1(void)
Python method ExClass1(const string * name)
Python method ~ExClass1(void)
Python method int incrementCount(int incr +value)
Python method const string & getNameErrorCheck(void) const
Python method const string & getNameArg(void) const
Python method int getValue(int value +value)
Python method long getValue(long value +value)
Python method bool hasAddr(bool in +value)
Python method void SplicerSpecial(void)
Close pyexample_nested_ExClass1type.cpp
class ExClass2
Python method ExClass2(const string * name +len_trim(trim_name))
Python method ~ExClass2(void)
Python method const string & getName(void) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))
Python method const string & getName2(void)
Python method string & getName3(void) const
Python method string & getName4(void)
Python method int GetNameLength(void) const
Python method ExClass1 * get_class1(const ExClass1 * in)
Python method ExClass2 * declare(TypeID type +value, SidreLength len=1 +value)
Python method void destroyall(void)
Python method TypeID getTypeID(void) const
Python method void setValue(int value +value)
Python method void setValue(long value +value)
Python method void setValue(float value +value)
Python method void setValue(double value +value)
Python method int getValue(void)
Python method double getValue(void)
Close pyexample_nested_ExClass2type.cpp
Python function void local_function1(void)
Python function bool isNameValid(const std::string & name)
Python function bool isInitialized(void)
Python function void test_names(const std::string & name)
Python function void test_names(const std::string & name, int flag +value)
Python function void testoptional(int i=1 +value, long j=2 +value)
Python function size_t test_size_t(void)
Python function void testmpi(MPI_Comm comm +value)
Python function void testmpi(void)
Python function void FuncPtr1(void ( * get)(void) +value)
Python function void FuncPtr2(double * ( * get)(void))
Python function void FuncPtr3(double ( * get)(int i +value, int +value) +value)
Python function void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +value)
Python function void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))
Python function int verylongfunctionname2(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value)
Python function void cos_doubles(double * in +intent(in)+rank(2), double * out +dimension(shape(in))+intent(out), int sizein +implied(size(in))+value)
Close pyUserLibrary_example_nestedmodule.cpp
Close pyUserLibrary_examplemodule.cpp
Close pyUserLibrarymodule.cpp
Close pyUserLibraryutil.cpp
Close pyUserLibrarymodule.hpp
Close setup.py
Lua method ExClass1(void)
Lua method ExClass1(const string * name)
Lua method ~ExClass1(void)
Lua method int incrementCount(int incr +value)
Lua method const string & getNameErrorCheck(void) const
Lua method const string & getNameArg(void) const
Lua method int getValue(int value +value)
Lua method long getValue(long value +value)
Lua method bool hasAddr(bool in +value)
Lua method void SplicerSpecial(void)
Lua method ExClass2(const string * name +len_trim(trim_name))
Lua method ~ExClass2(void)
Lua method const string & getName(void) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))
Lua method const string & getName2(void)
Lua method string & getName3(void) const
Lua method string & getName4(void)
Lua method int GetNameLength(void) const
Lua method ExClass1 * get_class1(const ExClass1 * in)
Lua method ExClass2 * declare(TypeID type +value, SidreLength len=1 +value)
Lua method ExClass2 * declare(TypeID type +value, SidreLength len=1 +value)
Lua method void destroyall(void)
Lua method TypeID getTypeID(void) const
Lua method void setValue(int value +value)
Lua method void setValue(long value +value)
Lua method void setValue(float value +value)
Lua method void setValue(double value +value)
Lua method int getValue(void)
Lua method double getValue(void)
Lua function void local_function1(void)
Lua function bool isNameValid(const std::string & name)
Lua function bool isInitialized(void)
Lua function void test_names(const std::string & name)
Lua function void test_names(const std::string & name, int flag +value)
Lua function void testoptional(int i=1 +value, long j=2 +value)
Lua function void testoptional(int i=1 +value, long j=2 +value)
Lua function void testoptional(int i=1 +value, long j=2 +value)
Lua function size_t test_size_t(void)
Lua function void testmpi(void)
Lua function void testmpi(MPI_Comm comm +value)
Lua function void FuncPtr1(void ( * get)(void) +value)
Lua function void FuncPtr2(double * ( * get)(void))
Lua function void FuncPtr3(double ( * get)(int i +value, int +value) +value)
Lua function void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +value)
Lua function void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))
Lua function int verylongfunctionname2(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value)
Lua function void cos_doubles(double * in +intent(in)+rank(2), double * out +dimension(shape(in))+intent(out), int sizein +implied(size(in))+value)
Close luaUserLibrarymodule.hpp
Close luaUserLibrarymodule.cpp
