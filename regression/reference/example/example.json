{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "class_map": [
            "example_nested_ExClass1",
            "example_nested_ExClass2",
            "example_nested_ExClass2Nested"
        ],
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "language": "cxx",
        "namespaces": [
            {
                "<NAMESPACE>": "example ****************************************",
                "name": "example",
                "namespaces": [
                    {
                        "<NAMESPACE>": "nested ****************************************",
                        "classes": [
                            {
                                "<CLASS>": "ExClass1 ****************************************",
                                "cxx_header": [
                                    "ExClass1.hpp"
                                ],
                                "functions": [
                                    {
                                        "<FUNCTION>": "ctor  0 ****************************************",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "default_name": "ctor",
                                                "is_ctor": true,
                                                "params": [],
                                                "typemap_name": "example::nested::ExClass1"
                                            },
                                            "is_ctor": true,
                                            "specifier": [
                                                "ExClass1"
                                            ],
                                            "typemap_name": "example::nested::ExClass1"
                                        },
                                        "decl": "ExClass1()",
                                        "declgen": "ExClass1(void)",
                                        "name": "ctor",
                                        "options": {
                                            "F_create_generic": true
                                        },
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "capptr",
                                                        "intent": "ctor"
                                                    },
                                                    "stmt": "c_ctor_shadow_scalar_capptr"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "capptr",
                                                        "intent": "ctor"
                                                    },
                                                    "stmt": "f_ctor_shadow_scalar_capptr"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "ctor"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "ctor"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "ctor"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->ctor(\t)",
                                                    "C_name": "AA_example_nested_ExClass1_ctor_0",
                                                    "C_prototype": "AA_example_nested_ExClass1 * SHC_rv",
                                                    "C_return_type": "AA_example_nested_ExClass1 *",
                                                    "F_C_name": "c_ex_class1_ctor_0",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "AA_example_nested_ExClass1",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_rv_decl": "example::nested::ExClass1 SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_local_ptr": "SHT_prv",
                                                    "idtor": "1",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "c_ctor_shadow_scalar_capptr"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->ctor(\t)",
                                                    "C_name": "AA_example_nested_ExClass1_ctor_0",
                                                    "C_prototype": "AA_example_nested_ExClass1 * SHC_rv",
                                                    "C_return_type": "AA_example_nested_ExClass1 *",
                                                    "F_C_arguments": "SHT_rv",
                                                    "F_C_call": "c_ex_class1_ctor_0",
                                                    "F_C_name": "c_ex_class1_ctor_0",
                                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                                    "F_C_subprogram": "function",
                                                    "F_arg_c_call": "SHT_rv%cxxmem",
                                                    "F_arguments": "",
                                                    "F_result": "SHT_prv",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "AA_example_nested_ExClass1",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_rv_decl": "example::nested::ExClass1 SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_capsule_data_type": "AA_SHROUD_capsule_data",
                                                    "f_derived_type": "ex_class1",
                                                    "f_intent": "OUT",
                                                    "f_local_ptr": "SHT_prv",
                                                    "f_type": "type(ex_class1)",
                                                    "f_type_module": "userlibrary_example_nested_mod",
                                                    "f_var": "SHT_rv",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "1",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_ctor_shadow_scalar_capptr"
                                                },
                                                "fmtl": {
                                                    "c_var": "static_cast<LUAc_constvoid *>(\tSHCXX_rv)",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_var": "SHCXX_rv",
                                                    "stmt": "lua_ctor_scalar"
                                                },
                                                "fmtpy": {
                                                    "PY_build_format": "O",
                                                    "PY_to_object_idtor_func": "PP_ExClass1_to_Object_idtor",
                                                    "PyObject": "PP_ExClass1",
                                                    "PyTypeObject": "PP_ExClass1_Type",
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": null,
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_default",
                                                    "value_var": "SHValue_rv",
                                                    "vargs": "SHCXX_rv"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "ctor",
                                            "F_name_api": "ctor",
                                            "F_name_function": "ctor_0",
                                            "F_name_generic": "ex_class1",
                                            "F_name_impl": "ex_class1_ctor_0",
                                            "LUA_name": "ctor",
                                            "LUA_name_api": "ctor",
                                            "LUA_name_impl": "l_example_nested_ExClass1_ctor",
                                            "PY_name_impl": "PP_ExClass1_tp_init_0",
                                            "PY_type_impl": "PP_ExClass1_tp_init_0",
                                            "PY_type_method": "tp_init",
                                            "function_name": "ctor",
                                            "function_suffix": "_0"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "ctor  1 ****************************************",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "default_name": "ctor",
                                                "is_ctor": true,
                                                "params": [
                                                    {
                                                        "const": true,
                                                        "declarator": {
                                                            "name": "name",
                                                            "pointer": [
                                                                {
                                                                    "ptr": "*"
                                                                }
                                                            ],
                                                            "typemap_name": "std::string"
                                                        },
                                                        "specifier": [
                                                            "string"
                                                        ],
                                                        "typemap_name": "std::string"
                                                    }
                                                ],
                                                "typemap_name": "example::nested::ExClass1"
                                            },
                                            "is_ctor": true,
                                            "specifier": [
                                                "ExClass1"
                                            ],
                                            "typemap_name": "example::nested::ExClass1"
                                        },
                                        "decl": "ExClass1( const string *name )",
                                        "declgen": "ExClass1(const string * name)",
                                        "doxygen": {
                                            "brief": "constructor",
                                            "description": "longer description\nusually multiple lines\n",
                                            "return": "return new instance"
                                        },
                                        "helpers": {
                                            "c": [
                                                "char_len_trim"
                                            ]
                                        },
                                        "name": "ctor",
                                        "options": {
                                            "F_create_generic": true
                                        },
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "capptr",
                                                        "intent": "ctor"
                                                    },
                                                    "stmt": "c_ctor_shadow_scalar_capptr"
                                                },
                                                "name": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "c_in_string_*"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "capptr",
                                                        "intent": "ctor"
                                                    },
                                                    "stmt": "f_ctor_shadow_scalar_capptr"
                                                },
                                                "name": {
                                                    "meta": {
                                                        "api": "buf",
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_string_*_buf"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "ctor"
                                                    }
                                                },
                                                "name": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "ctor"
                                                    }
                                                },
                                                "name": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "ctor"
                                                    }
                                                },
                                                "name": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->ctor(\t&SHCXX_name)",
                                                    "C_call_list": "&SHCXX_name",
                                                    "C_name": "AA_example_nested_ExClass1_ctor_1",
                                                    "C_prototype": "const char * name,\t AA_example_nested_ExClass1 * SHC_rv",
                                                    "C_return_type": "AA_example_nested_ExClass1 *",
                                                    "F_C_arguments": "name,\t SHT_rv",
                                                    "F_C_name": "c_ex_class1_ctor_1",
                                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                                    "F_C_subprogram": "function",
                                                    "F_result": "SHT_prv",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "AA_example_nested_ExClass1",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_rv_decl": "example::nested::ExClass1 SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_capsule_data_type": "AA_SHROUD_capsule_data",
                                                    "f_derived_type": "ex_class1",
                                                    "f_intent": "OUT",
                                                    "f_local_ptr": "SHT_prv",
                                                    "f_type": "type(ex_class1)",
                                                    "f_type_module": "userlibrary_example_nested_mod",
                                                    "f_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "1",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "c_ctor_shadow_scalar_capptr"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->ctor(\t&SHCXX_name)",
                                                    "C_call_list": "&SHCXX_name",
                                                    "C_name": "AA_example_nested_ExClass1_ctor_1_bufferify",
                                                    "C_prototype": "char *name,\t int SHT_name_len,\t AA_example_nested_ExClass1 * SHC_rv",
                                                    "C_return_type": "AA_example_nested_ExClass1 *",
                                                    "F_C_arguments": "name,\t SHT_name_len,\t SHT_rv",
                                                    "F_C_call": "c_ex_class1_ctor_1_bufferify",
                                                    "F_C_name": "c_ex_class1_ctor_1_bufferify",
                                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                                    "F_C_subprogram": "function",
                                                    "F_arg_c_call": "name,\t SHT_name_len,\t SHT_rv%cxxmem",
                                                    "F_arguments": "name",
                                                    "F_result": "SHT_prv",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "AA_example_nested_ExClass1",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_rv_decl": "example::nested::ExClass1 SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_c_suffix": "_bufferify",
                                                    "f_capsule_data_type": "AA_SHROUD_capsule_data",
                                                    "f_derived_type": "ex_class1",
                                                    "f_intent": "OUT",
                                                    "f_local_ptr": "SHT_prv",
                                                    "f_type": "type(ex_class1)",
                                                    "f_type_module": "userlibrary_example_nested_mod",
                                                    "f_var": "SHT_rv",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "1",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_ctor_shadow_scalar_capptr"
                                                },
                                                "fmtl": {
                                                    "c_var": "static_cast<LUAc_constvoid *>(\tSHCXX_rv)",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_var": "SHCXX_rv",
                                                    "stmt": "lua_ctor_scalar"
                                                },
                                                "fmtpy": {
                                                    "PY_build_format": "O",
                                                    "PY_to_object_idtor_func": "PP_ExClass1_to_Object_idtor",
                                                    "PyObject": "PP_ExClass1",
                                                    "PyTypeObject": "PP_ExClass1_Type",
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": null,
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_default",
                                                    "value_var": "SHValue_rv",
                                                    "vargs": "SHCXX_rv"
                                                }
                                            },
                                            "name": {
                                                "fmtc": {
                                                    "c_addr": "",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_member": "->",
                                                    "c_type": "char",
                                                    "c_var": "name",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_name",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "name",
                                                    "i_var": "name",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "c_in_string_*"
                                                },
                                                "fmtf": {
                                                    "c_addr": "",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_helper_char_len_trim": "ShroudCharLenTrim",
                                                    "c_member": "->",
                                                    "c_type": "char",
                                                    "c_var": "name",
                                                    "c_var_len": "SHT_name_len",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_name",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "name",
                                                    "f_var_len": "SHT_name_len",
                                                    "fc_var": "name",
                                                    "i_var": "name",
                                                    "i_var_len": "SHT_name_len",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_in_string_*_buf"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": " *",
                                                    "c_member": "->",
                                                    "c_var": "name",
                                                    "c_var_len": "Lname",
                                                    "cxx_member": "->",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "name",
                                                    "lua_var": "SH_Lua_name",
                                                    "pop_expr": "lua_tostring(L, 1)",
                                                    "stmt": "lua_in_string_*"
                                                },
                                                "fmtpy": {
                                                    "array_size": "1",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_type": "char",
                                                    "c_var": "name",
                                                    "ctor_expr": "SH_name.data(),\t SH_name.size()",
                                                    "cxx_addr": "",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(name)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SH_name",
                                                    "data_var": "SHData_name",
                                                    "numpy_type": null,
                                                    "py_var": "SHPy_name",
                                                    "size_var": "SHSize_name",
                                                    "stmt": "py_in_string_*",
                                                    "value_var": "SHValue_name"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "ctor",
                                            "F_name_api": "ctor",
                                            "F_name_function": "ctor_1",
                                            "F_name_generic": "ex_class1",
                                            "F_name_impl": "ex_class1_ctor_1",
                                            "PY_name_impl": "PP_ExClass1_tp_init_1",
                                            "PY_type_impl": "PP_ExClass1_tp_init_1",
                                            "PY_type_method": "tp_init",
                                            "function_name": "ctor",
                                            "function_suffix": "_1"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "dtor  2 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "default_name": "dtor",
                                                "is_dtor": true,
                                                "params": [],
                                                "typemap_name": "void"
                                            },
                                            "is_dtor": "ExClass1",
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "~ExClass1()",
                                        "declgen": "~ExClass1(void)",
                                        "doxygen": {
                                            "brief": "destructor",
                                            "description": "longer description joined with previous line"
                                        },
                                        "name": "dtor",
                                        "options": {},
                                        "user_fmt": {
                                            "F_name_function": "delete"
                                        },
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "dtor"
                                                    },
                                                    "stmt": "c_dtor"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "dtor"
                                                    },
                                                    "stmt": "f_dtor"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "dtor"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "dtor"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "dtor"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->dtor(\t)",
                                                    "C_name": "AA_example_nested_ExClass1_dtor",
                                                    "C_prototype": "AA_example_nested_ExClass1 * self",
                                                    "C_return_type": "void",
                                                    "F_C_name": "c_ex_class1_dtor",
                                                    "stmt_name": "c_dtor"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->dtor(\t)",
                                                    "C_name": "AA_example_nested_ExClass1_dtor",
                                                    "C_prototype": "AA_example_nested_ExClass1 * self",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self",
                                                    "F_C_call": "c_ex_class1_dtor",
                                                    "F_C_name": "c_ex_class1_dtor",
                                                    "F_C_result_clause": "",
                                                    "F_C_subprogram": "subroutine",
                                                    "F_arg_c_call": "obj%cxxmem",
                                                    "F_arguments": "obj",
                                                    "F_subprogram": "subroutine",
                                                    "stmt_name": "f_dtor"
                                                },
                                                "fmtl": {
                                                    "stmt": "lua_dtor_scalar"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "dtor",
                                            "F_name_api": "dtor",
                                            "F_name_function": "delete",
                                            "F_name_generic": "dtor",
                                            "F_name_impl": "ex_class1_dtor",
                                            "LUA_name": "dtor",
                                            "LUA_name_api": "dtor",
                                            "LUA_name_impl": "l_example_nested_ExClass1_dtor",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "dtor"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "incrementCount  3 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "name": "incrementCount",
                                                "params": [
                                                    {
                                                        "declarator": {
                                                            "name": "incr",
                                                            "typemap_name": "int"
                                                        },
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "typemap_name": "int"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "decl": "int incrementCount(int incr)",
                                        "declgen": "int incrementCount(int incr)",
                                        "name": "incrementCount",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_native_scalar"
                                                },
                                                "incr": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "c_in_native_scalar"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_native_scalar"
                                                },
                                                "incr": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_native_scalar"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "incr": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "incr": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "incr": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->incrementCount(\tincr)",
                                                    "C_call_list": "incr",
                                                    "C_name": "AA_example_nested_ExClass1_incrementCount",
                                                    "C_prototype": "AA_example_nested_ExClass1 * self,\t int incr",
                                                    "C_return_type": "int",
                                                    "F_C_name": "c_ex_class1_increment_count",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "int",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHC_rv",
                                                    "cxx_rv_decl": "int SHC_rv",
                                                    "cxx_type": "int",
                                                    "cxx_var": "SHC_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "c_function_native_scalar"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->incrementCount(\tincr)",
                                                    "C_call_list": "incr",
                                                    "C_name": "AA_example_nested_ExClass1_incrementCount",
                                                    "C_prototype": "AA_example_nested_ExClass1 * self,\t int incr",
                                                    "C_return_type": "int",
                                                    "F_C_arguments": "self,\t incr",
                                                    "F_C_call": "c_ex_class1_increment_count",
                                                    "F_C_name": "c_ex_class1_increment_count",
                                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                                    "F_C_subprogram": "function",
                                                    "F_arg_c_call": "obj%cxxmem,\t incr",
                                                    "F_arguments": "obj,\t incr",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "int",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHC_rv",
                                                    "cxx_rv_decl": "int SHC_rv",
                                                    "cxx_type": "int",
                                                    "cxx_var": "SHC_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_INT",
                                                    "f_type": "integer(C_INT)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "f_function_native_scalar"
                                                },
                                                "fmtl": {
                                                    "c_var": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "SHCXX_rv",
                                                    "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                                    "stmt": "lua_function_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "int",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": "NPY_INT",
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_native_scalar",
                                                    "value_var": "SHValue_rv"
                                                }
                                            },
                                            "incr": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "int",
                                                    "c_var": "incr",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&incr",
                                                    "cxx_type": "int",
                                                    "cxx_var": "incr",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "c_in_native_scalar"
                                                },
                                                "fmtf": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "int",
                                                    "c_var": "incr",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&incr",
                                                    "cxx_type": "int",
                                                    "cxx_var": "incr",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_INT",
                                                    "f_type": "integer(C_INT)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "incr",
                                                    "fc_var": "incr",
                                                    "i_var": "incr",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "f_in_native_scalar"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "incr",
                                                    "c_var_len": "Lincr",
                                                    "cxx_member": ".",
                                                    "cxx_type": "int",
                                                    "cxx_var": "incr",
                                                    "lua_var": "SH_Lua_incr",
                                                    "pop_expr": "lua_tointeger(L, 1)",
                                                    "stmt": "lua_in_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "int",
                                                    "c_var": "incr",
                                                    "ctor_expr": "incr",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&incr",
                                                    "cxx_type": "int",
                                                    "cxx_var": "incr",
                                                    "data_var": "SHData_incr",
                                                    "numpy_type": "NPY_INT",
                                                    "py_var": "SHPy_incr",
                                                    "size_var": "SHSize_incr",
                                                    "stmt": "py_in_native_scalar",
                                                    "value_var": "SHValue_incr"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "incrementCount",
                                            "F_name_api": "increment_count",
                                            "F_name_function": "increment_count",
                                            "F_name_generic": "increment_count",
                                            "F_name_impl": "ex_class1_increment_count",
                                            "LUA_name": "incrementCount",
                                            "LUA_name_api": "incrementCount",
                                            "LUA_name_impl": "l_example_nested_ExClass1_incrementCount",
                                            "PY_name_impl": "PP_incrementCount",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "incrementCount"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "getNameErrorCheck  4 ****************************************",
                                        "ast": {
                                            "const": true,
                                            "declarator": {
                                                "func_const": true,
                                                "name": "getNameErrorCheck",
                                                "params": [],
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ],
                                                "typemap_name": "std::string"
                                            },
                                            "specifier": [
                                                "string"
                                            ],
                                            "typemap_name": "std::string"
                                        },
                                        "decl": "const string& getNameErrorCheck() const",
                                        "declgen": "const string & getNameErrorCheck(void) const",
                                        "helpers": {
                                            "c": [
                                                "array_context",
                                                "string_to_cdesc",
                                                "copy_string"
                                            ],
                                            "f": [
                                                "array_context",
                                                "copy_string",
                                                "capsule_dtor"
                                            ]
                                        },
                                        "name": "getNameErrorCheck",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_string_&"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "cdesc",
                                                        "deref": "allocatable",
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_string_&_cdesc_allocatable"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->getNameErrorCheck(\t)",
                                                    "C_name": "AA_example_nested_ExClass1_getNameErrorCheck",
                                                    "C_prototype": "const AA_example_nested_ExClass1 * self",
                                                    "C_return_type": "const char *",
                                                    "F_C_arguments": "self",
                                                    "F_C_name": "c_ex_class1_get_name_error_check",
                                                    "F_C_pure_clause": "pure ",
                                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                                    "F_C_subprogram": "function",
                                                    "c_const": "const ",
                                                    "c_rv_decl": "const char * SHC_rv",
                                                    "c_type": "char",
                                                    "c_val": "SHCXX_rv.c_str()",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "c_function_string_&"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->getNameErrorCheck(\t)",
                                                    "C_name": "AA_example_nested_ExClass1_getNameErrorCheck_bufferify",
                                                    "C_prototype": "const AA_example_nested_ExClass1 * self,\t AA_SHROUD_array *SHT_rv_cdesc,\t AA_SHROUD_capsule_data *SHT_rv_capsule",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self,\t SHT_rv_cdesc,\t SHT_rv_capsule",
                                                    "F_C_call": "c_ex_class1_get_name_error_check_bufferify",
                                                    "F_C_name": "c_ex_class1_get_name_error_check_bufferify",
                                                    "F_C_result_clause": "",
                                                    "F_C_subprogram": "subroutine",
                                                    "F_arg_c_call": "obj%cxxmem,\t SHT_rv_cdesc,\t SHT_rv_capsule",
                                                    "F_arguments": "obj",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "const ",
                                                    "c_helper_array_context": "AA_SHROUD_array",
                                                    "c_helper_copy_string": "AA_ShroudCopyString",
                                                    "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                                                    "c_type": "char",
                                                    "c_var": "SHC_rv",
                                                    "c_var_capsule": "SHT_rv_capsule",
                                                    "c_var_cdesc": "SHT_rv_cdesc",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_c_suffix": "_bufferify",
                                                    "f_helper_array_context": "AA_SHROUD_array",
                                                    "f_helper_capsule_dtor": "AA_SHROUD_capsule_dtor",
                                                    "f_helper_copy_string": "AA_SHROUD_copy_string",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "f_var_capsule": "SHT_rv_capsule",
                                                    "f_var_cdesc": "SHT_rv_cdesc",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "i_var_capsule": "SHT_rv_capsule",
                                                    "i_var_cdesc": "SHT_rv_cdesc",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_function_string_&_cdesc_allocatable"
                                                },
                                                "fmtl": {
                                                    "c_var": "SHCXX_rv.c_str()",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "SHCXX_rv.c_str()",
                                                    "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                                    "stmt": "lua_function_string_&"
                                                },
                                                "fmtpy": {
                                                    "array_size": "1",
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": null,
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_string_&",
                                                    "value_var": "SHValue_rv"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "getNameErrorCheck",
                                            "F_name_api": "get_name_error_check",
                                            "F_name_function": "get_name_error_check",
                                            "F_name_generic": "get_name_error_check",
                                            "F_name_impl": "ex_class1_get_name_error_check",
                                            "LUA_name": "getNameErrorCheck",
                                            "LUA_name_api": "getNameErrorCheck",
                                            "LUA_name_impl": "l_example_nested_ExClass1_getNameErrorCheck",
                                            "PY_name_impl": "PP_getNameErrorCheck",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "getNameErrorCheck"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "getNameArg  5 ****************************************",
                                        "ast": {
                                            "const": true,
                                            "declarator": {
                                                "func_const": true,
                                                "name": "getNameArg",
                                                "params": [],
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ],
                                                "typemap_name": "std::string"
                                            },
                                            "specifier": [
                                                "string"
                                            ],
                                            "typemap_name": "std::string"
                                        },
                                        "decl": "const string& getNameArg() const",
                                        "declgen": "const string & getNameArg(void) const",
                                        "helpers": {
                                            "c": [
                                                "char_copy"
                                            ]
                                        },
                                        "name": "getNameArg",
                                        "options": {},
                                        "user_fmt": {
                                            "F_string_result_as_arg": "name"
                                        },
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_string_&"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "buf",
                                                        "deref": "arg",
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_string_&_buf_arg"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->getNameArg(\t)",
                                                    "C_name": "AA_example_nested_ExClass1_getNameArg",
                                                    "C_prototype": "const AA_example_nested_ExClass1 * self",
                                                    "C_return_type": "const char *",
                                                    "F_C_arguments": "self",
                                                    "F_C_name": "c_ex_class1_get_name_arg",
                                                    "F_C_pure_clause": "pure ",
                                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                                    "F_C_subprogram": "function",
                                                    "c_const": "const ",
                                                    "c_rv_decl": "const char * SHC_rv",
                                                    "c_type": "char",
                                                    "c_val": "SHCXX_rv.c_str()",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "c_function_string_&"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->getNameArg(\t)",
                                                    "C_name": "AA_example_nested_ExClass1_getNameArg_bufferify",
                                                    "C_prototype": "const AA_example_nested_ExClass1 * self,\t char *name,\t int nname",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self,\t name,\t nname",
                                                    "F_C_call": "c_ex_class1_get_name_arg_bufferify",
                                                    "F_C_name": "c_ex_class1_get_name_arg_bufferify",
                                                    "F_C_result_clause": "",
                                                    "F_C_subprogram": "subroutine",
                                                    "F_arg_c_call": "obj%cxxmem,\t name,\t nname",
                                                    "F_arguments": "obj,\t name",
                                                    "F_subprogram": "subroutine",
                                                    "c_const": "const ",
                                                    "c_helper_char_copy": "ShroudCharCopy",
                                                    "c_type": "char",
                                                    "c_var": "name",
                                                    "c_var_len": "nname",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_c_suffix": "_bufferify",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "name",
                                                    "f_var_len": "nname",
                                                    "i_var": "name",
                                                    "i_var_len": "nname",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_function_string_&_buf_arg"
                                                },
                                                "fmtl": {
                                                    "c_var": "SHCXX_rv.c_str()",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "SHCXX_rv.c_str()",
                                                    "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                                    "stmt": "lua_function_string_&"
                                                },
                                                "fmtpy": {
                                                    "array_size": "1",
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": null,
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_string_&",
                                                    "value_var": "SHValue_rv"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "getNameArg",
                                            "F_name_api": "get_name_arg",
                                            "F_name_function": "get_name_arg",
                                            "F_name_generic": "get_name_arg",
                                            "F_name_impl": "ex_class1_get_name_arg",
                                            "F_string_result_as_arg": "name",
                                            "LUA_name": "getNameArg",
                                            "LUA_name_api": "getNameArg",
                                            "LUA_name_impl": "l_example_nested_ExClass1_getNameArg",
                                            "PY_name_impl": "PP_getNameArg",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "getNameArg"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "getValue  6 ****************************************",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "getValue",
                                                "params": [
                                                    {
                                                        "declarator": {
                                                            "name": "value",
                                                            "typemap_name": "int"
                                                        },
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "typemap_name": "int"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "decl": "int  getValue(int value)",
                                        "declgen": "int getValue(int value)",
                                        "name": "getValue",
                                        "options": {},
                                        "user_fmt": {
                                            "function_suffix": "_from_int"
                                        },
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_native_scalar"
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "c_in_native_scalar"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_native_scalar"
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_native_scalar"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->getValue(\tvalue)",
                                                    "C_call_list": "value",
                                                    "C_name": "AA_example_nested_ExClass1_getValue_from_int",
                                                    "C_prototype": "AA_example_nested_ExClass1 * self,\t int value",
                                                    "C_return_type": "int",
                                                    "F_C_name": "c_ex_class1_get_value_from_int",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "int",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHC_rv",
                                                    "cxx_rv_decl": "int SHC_rv",
                                                    "cxx_type": "int",
                                                    "cxx_var": "SHC_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "c_function_native_scalar"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->getValue(\tvalue)",
                                                    "C_call_list": "value",
                                                    "C_name": "AA_example_nested_ExClass1_getValue_from_int",
                                                    "C_prototype": "AA_example_nested_ExClass1 * self,\t int value",
                                                    "C_return_type": "int",
                                                    "F_C_arguments": "self,\t value",
                                                    "F_C_call": "c_ex_class1_get_value_from_int",
                                                    "F_C_name": "c_ex_class1_get_value_from_int",
                                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                                    "F_C_subprogram": "function",
                                                    "F_arg_c_call": "obj%cxxmem,\t value",
                                                    "F_arguments": "obj,\t value",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "int",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHC_rv",
                                                    "cxx_rv_decl": "int SHC_rv",
                                                    "cxx_type": "int",
                                                    "cxx_var": "SHC_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_INT",
                                                    "f_type": "integer(C_INT)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "f_function_native_scalar"
                                                },
                                                "fmtl": {
                                                    "c_var": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "SHCXX_rv",
                                                    "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                                    "stmt": "lua_function_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "int",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": "NPY_INT",
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_native_scalar",
                                                    "value_var": "SHValue_rv"
                                                }
                                            },
                                            "value": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "int",
                                                    "c_var": "value",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "int",
                                                    "cxx_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "c_in_native_scalar"
                                                },
                                                "fmtf": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "int",
                                                    "c_var": "value",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "int",
                                                    "cxx_var": "value",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_INT",
                                                    "f_type": "integer(C_INT)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "value",
                                                    "fc_var": "value",
                                                    "i_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "f_in_native_scalar"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "c_var_len": "Lvalue",
                                                    "cxx_member": ".",
                                                    "cxx_type": "int",
                                                    "cxx_var": "value",
                                                    "lua_var": "SH_Lua_value",
                                                    "pop_expr": "lua_tointeger(L, 1)",
                                                    "stmt": "lua_in_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "int",
                                                    "c_var": "value",
                                                    "ctor_expr": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "int",
                                                    "cxx_var": "value",
                                                    "data_var": "SHData_value",
                                                    "numpy_type": "NPY_INT",
                                                    "py_var": "SHPy_value",
                                                    "size_var": "SHSize_value",
                                                    "stmt": "py_in_native_scalar",
                                                    "value_var": "SHValue_value"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "getValue",
                                            "F_name_api": "get_value",
                                            "F_name_function": "get_value_from_int",
                                            "F_name_generic": "get_value",
                                            "F_name_impl": "ex_class1_get_value_from_int",
                                            "LUA_name": "getValue",
                                            "LUA_name_api": "getValue",
                                            "LUA_name_impl": "l_example_nested_ExClass1_getValue",
                                            "PY_name_impl": "PP_getValue_from_int",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "getValue",
                                            "function_suffix": "_from_int"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "getValue  7 ****************************************",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "getValue",
                                                "params": [
                                                    {
                                                        "declarator": {
                                                            "name": "value",
                                                            "typemap_name": "long"
                                                        },
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "typemap_name": "long"
                                            },
                                            "specifier": [
                                                "long"
                                            ],
                                            "typemap_name": "long"
                                        },
                                        "decl": "long getValue(long value)",
                                        "declgen": "long getValue(long value)",
                                        "name": "getValue",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_native_scalar"
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "c_in_native_scalar"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_native_scalar"
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_native_scalar"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->getValue(\tvalue)",
                                                    "C_call_list": "value",
                                                    "C_name": "AA_example_nested_ExClass1_getValue_1",
                                                    "C_prototype": "AA_example_nested_ExClass1 * self,\t long value",
                                                    "C_return_type": "long",
                                                    "F_C_name": "c_ex_class1_get_value_1",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "long",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_long",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHC_rv",
                                                    "cxx_rv_decl": "long SHC_rv",
                                                    "cxx_type": "long",
                                                    "cxx_var": "SHC_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_LONG",
                                                    "stmt_name": "c_function_native_scalar"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->getValue(\tvalue)",
                                                    "C_call_list": "value",
                                                    "C_name": "AA_example_nested_ExClass1_getValue_1",
                                                    "C_prototype": "AA_example_nested_ExClass1 * self,\t long value",
                                                    "C_return_type": "long",
                                                    "F_C_arguments": "self,\t value",
                                                    "F_C_call": "c_ex_class1_get_value_1",
                                                    "F_C_name": "c_ex_class1_get_value_1",
                                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                                    "F_C_subprogram": "function",
                                                    "F_arg_c_call": "obj%cxxmem,\t value",
                                                    "F_arguments": "obj,\t value",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "long",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_long",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHC_rv",
                                                    "cxx_rv_decl": "long SHC_rv",
                                                    "cxx_type": "long",
                                                    "cxx_var": "SHC_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_LONG",
                                                    "f_type": "integer(C_LONG)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_LONG",
                                                    "stmt_name": "f_function_native_scalar"
                                                },
                                                "fmtl": {
                                                    "c_var": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "SHCXX_rv",
                                                    "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                                    "stmt": "lua_function_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "long",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": "NPY_LONG",
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_native_scalar",
                                                    "value_var": "SHValue_rv"
                                                }
                                            },
                                            "value": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "long",
                                                    "c_var": "value",
                                                    "cfi_type": "CFI_type_long",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "long",
                                                    "cxx_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_LONG",
                                                    "stmt_name": "c_in_native_scalar"
                                                },
                                                "fmtf": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "long",
                                                    "c_var": "value",
                                                    "cfi_type": "CFI_type_long",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "long",
                                                    "cxx_var": "value",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_LONG",
                                                    "f_type": "integer(C_LONG)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "value",
                                                    "fc_var": "value",
                                                    "i_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_LONG",
                                                    "stmt_name": "f_in_native_scalar"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "c_var_len": "Lvalue",
                                                    "cxx_member": ".",
                                                    "cxx_type": "long",
                                                    "cxx_var": "value",
                                                    "lua_var": "SH_Lua_value",
                                                    "pop_expr": "lua_tointeger(L, 1)",
                                                    "stmt": "lua_in_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "long",
                                                    "c_var": "value",
                                                    "ctor_expr": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "long",
                                                    "cxx_var": "value",
                                                    "data_var": "SHData_value",
                                                    "numpy_type": "NPY_LONG",
                                                    "py_var": "SHPy_value",
                                                    "size_var": "SHSize_value",
                                                    "stmt": "py_in_native_scalar",
                                                    "value_var": "SHValue_value"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "getValue",
                                            "F_name_api": "get_value",
                                            "F_name_function": "get_value_1",
                                            "F_name_generic": "get_value",
                                            "F_name_impl": "ex_class1_get_value_1",
                                            "PY_name_impl": "PP_getValue_1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "getValue",
                                            "function_suffix": "_1"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "hasAddr  8 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "name": "hasAddr",
                                                "params": [
                                                    {
                                                        "declarator": {
                                                            "name": "in",
                                                            "typemap_name": "bool"
                                                        },
                                                        "specifier": [
                                                            "bool"
                                                        ],
                                                        "typemap_name": "bool"
                                                    }
                                                ],
                                                "typemap_name": "bool"
                                            },
                                            "specifier": [
                                                "bool"
                                            ],
                                            "typemap_name": "bool"
                                        },
                                        "decl": "bool hasAddr(bool in)",
                                        "declgen": "bool hasAddr(bool in)",
                                        "name": "hasAddr",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_bool_scalar"
                                                },
                                                "in": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "c_in_bool_scalar"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_bool_scalar"
                                                },
                                                "in": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_bool_scalar"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "in": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "in": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "in": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->hasAddr(\tin)",
                                                    "C_call_list": "in",
                                                    "C_name": "AA_example_nested_ExClass1_hasAddr",
                                                    "C_prototype": "AA_example_nested_ExClass1 * self,\t bool in",
                                                    "C_return_type": "bool",
                                                    "F_C_name": "c_ex_class1_has_addr",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "bool",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_Bool",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHC_rv",
                                                    "cxx_rv_decl": "bool SHC_rv",
                                                    "cxx_type": "bool",
                                                    "cxx_var": "SHC_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_BOOL",
                                                    "stmt_name": "c_function_bool_scalar"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->hasAddr(\tin)",
                                                    "C_call_list": "in",
                                                    "C_name": "AA_example_nested_ExClass1_hasAddr",
                                                    "C_prototype": "AA_example_nested_ExClass1 * self,\t bool in",
                                                    "C_return_type": "bool",
                                                    "F_C_arguments": "self,\t in",
                                                    "F_C_call": "c_ex_class1_has_addr",
                                                    "F_C_name": "c_ex_class1_has_addr",
                                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                                    "F_C_subprogram": "function",
                                                    "F_arg_c_call": "obj%cxxmem,\t SHT_in_cxx",
                                                    "F_arguments": "obj,\t in",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "bool",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_Bool",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHC_rv",
                                                    "cxx_rv_decl": "bool SHC_rv",
                                                    "cxx_type": "bool",
                                                    "cxx_var": "SHC_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_BOOL",
                                                    "f_type": "logical",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_BOOL",
                                                    "stmt_name": "f_function_bool_scalar"
                                                },
                                                "fmtl": {
                                                    "c_var": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "SHCXX_rv",
                                                    "push_expr": "lua_pushboolean(L, SHCXX_rv)",
                                                    "stmt": "lua_function_bool_scalar"
                                                },
                                                "fmtpy": {
                                                    "PyTypeObject": "PyBool_Type",
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "bool",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": "NPY_BOOL",
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_bool_scalar",
                                                    "value_var": "SHValue_rv"
                                                }
                                            },
                                            "in": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "bool",
                                                    "c_var": "in",
                                                    "cfi_type": "CFI_type_Bool",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&in",
                                                    "cxx_type": "bool",
                                                    "cxx_var": "in",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_BOOL",
                                                    "stmt_name": "c_in_bool_scalar"
                                                },
                                                "fmtf": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "bool",
                                                    "c_var": "in",
                                                    "cfi_type": "CFI_type_Bool",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&in",
                                                    "cxx_type": "bool",
                                                    "cxx_var": "in",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_BOOL",
                                                    "f_type": "logical",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "in",
                                                    "f_var_cxx": "SHT_in_cxx",
                                                    "fc_var": "in",
                                                    "i_var": "in",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_BOOL",
                                                    "stmt_name": "f_in_bool_scalar"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "in",
                                                    "c_var_len": "Lin",
                                                    "cxx_member": ".",
                                                    "cxx_type": "bool",
                                                    "cxx_var": "in",
                                                    "lua_var": "SH_Lua_in",
                                                    "pop_expr": "lua_toboolean(L, 1)",
                                                    "stmt": "lua_in_bool_scalar"
                                                },
                                                "fmtpy": {
                                                    "PyTypeObject": "PyBool_Type",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "bool",
                                                    "c_var": "in",
                                                    "ctor_expr": "in",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&in",
                                                    "cxx_type": "bool",
                                                    "cxx_var": "in",
                                                    "data_var": "SHData_in",
                                                    "numpy_type": "NPY_BOOL",
                                                    "py_object": "PyObject",
                                                    "py_var": "SHPy_in",
                                                    "size_var": "SHSize_in",
                                                    "stmt": "py_in_bool_scalar",
                                                    "value_var": "SHValue_in"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "hasAddr",
                                            "F_name_api": "has_addr",
                                            "F_name_function": "has_addr",
                                            "F_name_generic": "has_addr",
                                            "F_name_impl": "ex_class1_has_addr",
                                            "LUA_name": "hasAddr",
                                            "LUA_name_api": "hasAddr",
                                            "LUA_name_impl": "l_example_nested_ExClass1_hasAddr",
                                            "PY_name_impl": "PP_hasAddr",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "hasAddr"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "SplicerSpecial  9 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "name": "SplicerSpecial",
                                                "params": [],
                                                "typemap_name": "void"
                                            },
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "void SplicerSpecial()",
                                        "declgen": "void SplicerSpecial(void)",
                                        "name": "SplicerSpecial",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    },
                                                    "stmt": "c_subroutine"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    },
                                                    "stmt": "f_subroutine"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->SplicerSpecial(\t)",
                                                    "C_name": "AA_example_nested_ExClass1_SplicerSpecial",
                                                    "C_prototype": "AA_example_nested_ExClass1 * self",
                                                    "C_return_type": "void",
                                                    "F_C_name": "c_ex_class1_splicer_special",
                                                    "stmt_name": "c_subroutine"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->SplicerSpecial(\t)",
                                                    "C_name": "AA_example_nested_ExClass1_SplicerSpecial",
                                                    "C_prototype": "AA_example_nested_ExClass1 * self",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self",
                                                    "F_C_call": "c_ex_class1_splicer_special",
                                                    "F_C_name": "c_ex_class1_splicer_special",
                                                    "F_C_subprogram": "subroutine",
                                                    "F_arg_c_call": "obj%cxxmem",
                                                    "F_arguments": "obj",
                                                    "F_subprogram": "subroutine",
                                                    "stmt_name": "f_subroutine"
                                                },
                                                "fmtl": {
                                                    "stmt": "lua_subroutine"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "SplicerSpecial",
                                            "F_name_api": "splicer_special",
                                            "F_name_function": "splicer_special",
                                            "F_name_generic": "splicer_special",
                                            "F_name_impl": "ex_class1_splicer_special",
                                            "LUA_name": "SplicerSpecial",
                                            "LUA_name_api": "SplicerSpecial",
                                            "LUA_name_impl": "l_example_nested_ExClass1_SplicerSpecial",
                                            "PY_name_impl": "PP_SplicerSpecial",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "SplicerSpecial"
                                        }
                                    }
                                ],
                                "name": "ExClass1",
                                "options": {},
                                "parse_keyword": "class",
                                "python": {
                                    "type": [
                                        "init",
                                        "repr",
                                        "richcompare"
                                    ]
                                },
                                "scope": "example::nested::ExClass1::",
                                "typemap_name": "example::nested::ExClass1",
                                "user_fields": {
                                    "export": "True"
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtdict": {
                                    "CXX_this_call": "SH_this->",
                                    "C_header_filename": "wrapexample_nested_ExClass1.h",
                                    "C_impl_filename": "wrapexample_nested_ExClass1.cpp",
                                    "C_name_api": "ExClass1",
                                    "C_name_scope": "example_nested_ExClass1_",
                                    "C_type_name": "AA_example_nested_ExClass1",
                                    "F_derived_name": "ex_class1",
                                    "F_name_api": "ex_class1",
                                    "F_name_scope": "ex_class1_",
                                    "LUA_class_reg": "l_ExClass1_Reg",
                                    "LUA_ctor_name": "ExClass1",
                                    "LUA_metadata": "ExClass1.metatable",
                                    "LUA_name_api": "ExClass1",
                                    "LUA_this_call": "SH_this->self->",
                                    "LUA_userdata_member": "self",
                                    "LUA_userdata_type": "l_ExClass1_Type",
                                    "LUA_userdata_var": "SH_this",
                                    "PY_PyObject": "PP_ExClass1",
                                    "PY_PyTypeObject": "PP_ExClass1_Type",
                                    "PY_capsule_name": "PY_ExClass1_capsule_name",
                                    "PY_from_object_func": "PP_ExClass1_from_Object",
                                    "PY_this_call": "self->obj->",
                                    "PY_to_object_func": "PP_ExClass1_to_Object",
                                    "PY_to_object_idtor_func": "PP_ExClass1_to_Object_idtor",
                                    "PY_type_filename": "pyexample_nested_ExClass1type.cpp",
                                    "class_scope": "ExClass1::",
                                    "cxx_class": "ExClass1",
                                    "cxx_type": "ExClass1",
                                    "f_capsule_data_type": "AA_SHROUD_capsule_data",
                                    "f_helper_capsule_data_helper": "AA_SHROUD_capsule_data",
                                    "file_scope": "example_nested_ExClass1"
                                }
                            },
                            {
                                "<CLASS>": "ExClass2 ****************************************",
                                "classes": [
                                    {
                                        "<CLASS>": "ExClass2Nested ****************************************",
                                        "cxx_header": [],
                                        "name": "ExClass2Nested",
                                        "options": {},
                                        "parse_keyword": "class",
                                        "scope": "example::nested::ExClass2::ExClass2Nested::",
                                        "typemap_name": "example::nested::ExClass2::ExClass2Nested",
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "C_header_filename": "wrapexample_nested_ExClass2_ExClass2Nested.h",
                                            "C_impl_filename": "wrapexample_nested_ExClass2_ExClass2Nested.cpp",
                                            "C_name_api": "ExClass2Nested",
                                            "C_name_scope": "example_nested_ExClass2_ExClass2Nested_",
                                            "C_type_name": "AA_example_nested_ExClass2_ExClass2Nested",
                                            "F_derived_name": "ex_class2_nested",
                                            "F_name_api": "ex_class2_nested",
                                            "F_name_scope": "ex_class2_ex_class2_nested_",
                                            "class_scope": "ExClass2Nested::",
                                            "cxx_class": "ExClass2Nested",
                                            "cxx_type": "ExClass2Nested",
                                            "file_scope": "example_nested_ExClass2_ExClass2Nested"
                                        }
                                    }
                                ],
                                "cxx_header": [
                                    "ExClass2.hpp"
                                ],
                                "functions": [
                                    {
                                        "<FUNCTION>": "ctor  10 ****************************************",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "default_name": "ctor",
                                                "is_ctor": true,
                                                "params": [
                                                    {
                                                        "const": true,
                                                        "declarator": {
                                                            "attrs": {
                                                                "len_trim": "trim_name"
                                                            },
                                                            "name": "name",
                                                            "pointer": [
                                                                {
                                                                    "ptr": "*"
                                                                }
                                                            ],
                                                            "typemap_name": "std::string"
                                                        },
                                                        "specifier": [
                                                            "string"
                                                        ],
                                                        "typemap_name": "std::string"
                                                    }
                                                ],
                                                "typemap_name": "example::nested::ExClass2"
                                            },
                                            "is_ctor": true,
                                            "specifier": [
                                                "ExClass2"
                                            ],
                                            "typemap_name": "example::nested::ExClass2"
                                        },
                                        "decl": "ExClass2(const string *name)",
                                        "declgen": "ExClass2(const string * name +len_trim(trim_name))",
                                        "doxygen": {
                                            "brief": "constructor"
                                        },
                                        "helpers": {
                                            "c": [
                                                "char_len_trim"
                                            ]
                                        },
                                        "name": "ctor",
                                        "options": {
                                            "F_create_generic": true
                                        },
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "capptr",
                                                        "intent": "ctor"
                                                    },
                                                    "stmt": "c_ctor_shadow_scalar_capptr"
                                                },
                                                "name": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "c_in_string_*"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "capptr",
                                                        "intent": "ctor"
                                                    },
                                                    "stmt": "f_ctor_shadow_scalar_capptr"
                                                },
                                                "name": {
                                                    "meta": {
                                                        "api": "buf",
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_string_*_buf"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "ctor"
                                                    }
                                                },
                                                "name": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "ctor"
                                                    }
                                                },
                                                "name": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "ctor"
                                                    }
                                                },
                                                "name": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->ctor(\t&SHCXX_name)",
                                                    "C_call_list": "&SHCXX_name",
                                                    "C_name": "AA_example_nested_ExClass2_ctor",
                                                    "C_prototype": "const char * name,\t AA_example_nested_ExClass2 * SHC_rv",
                                                    "C_return_type": "AA_example_nested_ExClass2 *",
                                                    "F_C_arguments": "name,\t SHT_rv",
                                                    "F_C_name": "c_ex_class2_ctor",
                                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                                    "F_C_subprogram": "function",
                                                    "F_result": "SHT_prv",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "AA_example_nested_ExClass2",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_rv_decl": "example::nested::ExClass2 SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass2",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_capsule_data_type": "AA_SHROUD_capsule_data",
                                                    "f_derived_type": "ex_class2",
                                                    "f_intent": "OUT",
                                                    "f_local_ptr": "SHT_prv",
                                                    "f_type": "type(ex_class2)",
                                                    "f_type_module": "userlibrary_example_nested_mod",
                                                    "f_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "2",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "c_ctor_shadow_scalar_capptr"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->ctor(\t&SHCXX_name)",
                                                    "C_call_list": "&SHCXX_name",
                                                    "C_name": "AA_example_nested_ExClass2_ctor_bufferify",
                                                    "C_prototype": "char *name,\t int SHT_name_len,\t AA_example_nested_ExClass2 * SHC_rv",
                                                    "C_return_type": "AA_example_nested_ExClass2 *",
                                                    "F_C_arguments": "name,\t SHT_name_len,\t SHT_rv",
                                                    "F_C_call": "c_ex_class2_ctor_bufferify",
                                                    "F_C_name": "c_ex_class2_ctor_bufferify",
                                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                                    "F_C_subprogram": "function",
                                                    "F_arg_c_call": "name,\t SHT_name_len,\t SHT_rv%cxxmem",
                                                    "F_arguments": "name",
                                                    "F_result": "SHT_prv",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "AA_example_nested_ExClass2",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_rv_decl": "example::nested::ExClass2 SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass2",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_c_suffix": "_bufferify",
                                                    "f_capsule_data_type": "AA_SHROUD_capsule_data",
                                                    "f_derived_type": "ex_class2",
                                                    "f_intent": "OUT",
                                                    "f_local_ptr": "SHT_prv",
                                                    "f_type": "type(ex_class2)",
                                                    "f_type_module": "userlibrary_example_nested_mod",
                                                    "f_var": "SHT_rv",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "2",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_ctor_shadow_scalar_capptr"
                                                },
                                                "fmtl": {
                                                    "c_var": "static_cast<LUAc_constvoid *>(\tSHCXX_rv)",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_var": "SHCXX_rv",
                                                    "stmt": "lua_ctor_scalar"
                                                },
                                                "fmtpy": {
                                                    "PY_build_format": "O",
                                                    "PY_to_object_idtor_func": "PP_ExClass2_to_Object_idtor",
                                                    "PyObject": "PP_ExClass2",
                                                    "PyTypeObject": "PP_ExClass2_Type",
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass2",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": null,
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_default",
                                                    "value_var": "SHValue_rv",
                                                    "vargs": "SHCXX_rv"
                                                }
                                            },
                                            "name": {
                                                "fmtc": {
                                                    "c_addr": "",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_member": "->",
                                                    "c_type": "char",
                                                    "c_var": "name",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_name",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "name",
                                                    "i_var": "name",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "c_in_string_*"
                                                },
                                                "fmtf": {
                                                    "c_addr": "",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_helper_char_len_trim": "ShroudCharLenTrim",
                                                    "c_member": "->",
                                                    "c_type": "char",
                                                    "c_var": "name",
                                                    "c_var_len": "SHT_name_len",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_name",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "name",
                                                    "f_var_len": "SHT_name_len",
                                                    "fc_var": "name",
                                                    "i_var": "name",
                                                    "i_var_len": "SHT_name_len",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_in_string_*_buf"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": " *",
                                                    "c_member": "->",
                                                    "c_var": "name",
                                                    "c_var_len": "Lname",
                                                    "cxx_member": "->",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "name",
                                                    "lua_var": "SH_Lua_name",
                                                    "pop_expr": "lua_tostring(L, 1)",
                                                    "stmt": "lua_in_string_*"
                                                },
                                                "fmtpy": {
                                                    "array_size": "1",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_type": "char",
                                                    "c_var": "name",
                                                    "ctor_expr": "SH_name.data(),\t SH_name.size()",
                                                    "cxx_addr": "",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(name)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SH_name",
                                                    "data_var": "SHData_name",
                                                    "numpy_type": null,
                                                    "py_var": "SHPy_name",
                                                    "size_var": "SHSize_name",
                                                    "stmt": "py_in_string_*",
                                                    "value_var": "SHValue_name"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "ctor",
                                            "F_name_api": "ctor",
                                            "F_name_function": "ctor",
                                            "F_name_generic": "ex_class2",
                                            "F_name_impl": "ex_class2_ctor",
                                            "LUA_name": "ctor",
                                            "LUA_name_api": "ctor",
                                            "LUA_name_impl": "l_example_nested_ExClass2_ctor",
                                            "PY_name_impl": "PP_ExClass2_tp_init",
                                            "PY_type_impl": "PP_ExClass2_tp_init",
                                            "PY_type_method": "tp_init",
                                            "function_name": "ctor"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "dtor  11 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "default_name": "dtor",
                                                "is_dtor": true,
                                                "params": [],
                                                "typemap_name": "void"
                                            },
                                            "is_dtor": "ExClass2",
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "~ExClass2()",
                                        "declgen": "~ExClass2(void)",
                                        "doxygen": {
                                            "brief": "destructor"
                                        },
                                        "name": "dtor",
                                        "options": {},
                                        "user_fmt": {
                                            "F_name_function": "delete"
                                        },
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "dtor"
                                                    },
                                                    "stmt": "c_dtor"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "dtor"
                                                    },
                                                    "stmt": "f_dtor"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "dtor"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "dtor"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "dtor"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->dtor(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_dtor",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "void",
                                                    "F_C_name": "c_ex_class2_dtor",
                                                    "stmt_name": "c_dtor"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->dtor(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_dtor",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self",
                                                    "F_C_call": "c_ex_class2_dtor",
                                                    "F_C_name": "c_ex_class2_dtor",
                                                    "F_C_result_clause": "",
                                                    "F_C_subprogram": "subroutine",
                                                    "F_arg_c_call": "obj%cxxmem",
                                                    "F_arguments": "obj",
                                                    "F_subprogram": "subroutine",
                                                    "stmt_name": "f_dtor"
                                                },
                                                "fmtl": {
                                                    "stmt": "lua_dtor_scalar"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "dtor",
                                            "F_name_api": "dtor",
                                            "F_name_function": "delete",
                                            "F_name_generic": "dtor",
                                            "F_name_impl": "ex_class2_dtor",
                                            "LUA_name": "dtor",
                                            "LUA_name_api": "dtor",
                                            "LUA_name_impl": "l_example_nested_ExClass2_dtor",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "dtor"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "getName  12 ****************************************",
                                        "ast": {
                                            "const": true,
                                            "declarator": {
                                                "attrs": {
                                                    "len": "aa_exclass2_get_name_length({F_this}%{F_derived_member})"
                                                },
                                                "func_const": true,
                                                "name": "getName",
                                                "params": [],
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ],
                                                "typemap_name": "std::string"
                                            },
                                            "specifier": [
                                                "string"
                                            ],
                                            "typemap_name": "std::string"
                                        },
                                        "decl": "const string& getName() const",
                                        "declgen": "const string & getName(void) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))",
                                        "helpers": {
                                            "c": [
                                                "char_copy"
                                            ]
                                        },
                                        "name": "getName",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_string_&"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "buf",
                                                        "deref": "copy",
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_string_&_buf_copy"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->getName(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_getName",
                                                    "C_prototype": "const AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "const char *",
                                                    "F_C_arguments": "self",
                                                    "F_C_name": "c_ex_class2_get_name",
                                                    "F_C_pure_clause": "pure ",
                                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                                    "F_C_subprogram": "function",
                                                    "c_char_len": "aa_exclass2_get_name_length({F_this}%{F_derived_member})",
                                                    "c_const": "const ",
                                                    "c_rv_decl": "const char * SHC_rv",
                                                    "c_type": "char",
                                                    "c_val": "SHCXX_rv.c_str()",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_char_len": "len=aa_exclass2_get_name_length({F_this}%{F_derived_member})",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "c_function_string_&"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->getName(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_getName_bufferify",
                                                    "C_prototype": "const AA_example_nested_ExClass2 * self,\t char *SHC_rv,\t int SHT_rv_len",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self,\t SHT_rv,\t SHT_rv_len",
                                                    "F_C_call": "c_ex_class2_get_name_bufferify",
                                                    "F_C_name": "c_ex_class2_get_name_bufferify",
                                                    "F_C_result_clause": "",
                                                    "F_C_subprogram": "subroutine",
                                                    "F_arg_c_call": "obj%cxxmem,\t SHT_rv,\t SHT_rv_len",
                                                    "F_arguments": "obj",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_char_len": "aa_exclass2_get_name_length({F_this}%{F_derived_member})",
                                                    "c_const": "const ",
                                                    "c_helper_char_copy": "ShroudCharCopy",
                                                    "c_type": "char",
                                                    "c_var": "SHC_rv",
                                                    "c_var_len": "SHT_rv_len",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_c_suffix": "_bufferify",
                                                    "f_char_len": "len=aa_exclass2_get_name_length({F_this}%{F_derived_member})",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "f_var_len": "SHT_rv_len",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "i_var_len": "SHT_rv_len",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_function_string_&_buf_copy"
                                                },
                                                "fmtl": {
                                                    "c_var": "SHCXX_rv.c_str()",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "SHCXX_rv.c_str()",
                                                    "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                                    "stmt": "lua_function_string_&"
                                                },
                                                "fmtpy": {
                                                    "array_size": "1",
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": null,
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_string_&",
                                                    "value_var": "SHValue_rv"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "getName",
                                            "F_name_api": "get_name",
                                            "F_name_function": "get_name",
                                            "F_name_generic": "get_name",
                                            "F_name_impl": "ex_class2_get_name",
                                            "LUA_name": "getName",
                                            "LUA_name_api": "getName",
                                            "LUA_name_impl": "l_example_nested_ExClass2_getName",
                                            "PY_name_impl": "PP_getName",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "getName"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "getName2  13 ****************************************",
                                        "ast": {
                                            "const": true,
                                            "declarator": {
                                                "name": "getName2",
                                                "params": [],
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ],
                                                "typemap_name": "std::string"
                                            },
                                            "specifier": [
                                                "string"
                                            ],
                                            "typemap_name": "std::string"
                                        },
                                        "decl": "const string& getName2()",
                                        "declgen": "const string & getName2(void)",
                                        "helpers": {
                                            "c": [
                                                "array_context",
                                                "string_to_cdesc",
                                                "copy_string"
                                            ],
                                            "f": [
                                                "array_context",
                                                "copy_string",
                                                "capsule_dtor"
                                            ]
                                        },
                                        "name": "getName2",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_string_&"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "cdesc",
                                                        "deref": "allocatable",
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_string_&_cdesc_allocatable"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->getName2(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_getName2",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "const char *",
                                                    "F_C_arguments": "self",
                                                    "F_C_name": "c_ex_class2_get_name2",
                                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                                    "F_C_subprogram": "function",
                                                    "c_const": "const ",
                                                    "c_rv_decl": "const char * SHC_rv",
                                                    "c_type": "char",
                                                    "c_val": "SHCXX_rv.c_str()",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "c_function_string_&"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->getName2(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_getName2_bufferify",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t AA_SHROUD_array *SHT_rv_cdesc,\t AA_SHROUD_capsule_data *SHT_rv_capsule",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self,\t SHT_rv_cdesc,\t SHT_rv_capsule",
                                                    "F_C_call": "c_ex_class2_get_name2_bufferify",
                                                    "F_C_name": "c_ex_class2_get_name2_bufferify",
                                                    "F_C_result_clause": "",
                                                    "F_C_subprogram": "subroutine",
                                                    "F_arg_c_call": "obj%cxxmem,\t SHT_rv_cdesc,\t SHT_rv_capsule",
                                                    "F_arguments": "obj",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "const ",
                                                    "c_helper_array_context": "AA_SHROUD_array",
                                                    "c_helper_copy_string": "AA_ShroudCopyString",
                                                    "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                                                    "c_type": "char",
                                                    "c_var": "SHC_rv",
                                                    "c_var_capsule": "SHT_rv_capsule",
                                                    "c_var_cdesc": "SHT_rv_cdesc",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_c_suffix": "_bufferify",
                                                    "f_helper_array_context": "AA_SHROUD_array",
                                                    "f_helper_capsule_dtor": "AA_SHROUD_capsule_dtor",
                                                    "f_helper_copy_string": "AA_SHROUD_copy_string",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "f_var_capsule": "SHT_rv_capsule",
                                                    "f_var_cdesc": "SHT_rv_cdesc",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "i_var_capsule": "SHT_rv_capsule",
                                                    "i_var_cdesc": "SHT_rv_cdesc",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_function_string_&_cdesc_allocatable"
                                                },
                                                "fmtl": {
                                                    "c_var": "SHCXX_rv.c_str()",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "SHCXX_rv.c_str()",
                                                    "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                                    "stmt": "lua_function_string_&"
                                                },
                                                "fmtpy": {
                                                    "array_size": "1",
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": null,
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_string_&",
                                                    "value_var": "SHValue_rv"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "getName2",
                                            "F_name_api": "get_name2",
                                            "F_name_function": "get_name2",
                                            "F_name_generic": "get_name2",
                                            "F_name_impl": "ex_class2_get_name2",
                                            "LUA_name": "getName2",
                                            "LUA_name_api": "getName2",
                                            "LUA_name_impl": "l_example_nested_ExClass2_getName2",
                                            "PY_name_impl": "PP_getName2",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "getName2"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "getName3  14 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "func_const": true,
                                                "name": "getName3",
                                                "params": [],
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ],
                                                "typemap_name": "std::string"
                                            },
                                            "specifier": [
                                                "string"
                                            ],
                                            "typemap_name": "std::string"
                                        },
                                        "decl": "string& getName3() const",
                                        "declgen": "string & getName3(void) const",
                                        "helpers": {
                                            "c": [
                                                "array_context",
                                                "string_to_cdesc",
                                                "copy_string"
                                            ],
                                            "f": [
                                                "array_context",
                                                "copy_string",
                                                "capsule_dtor"
                                            ]
                                        },
                                        "name": "getName3",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_string_&"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "cdesc",
                                                        "deref": "allocatable",
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_string_&_cdesc_allocatable"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->getName3(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_getName3",
                                                    "C_prototype": "const AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "char *",
                                                    "F_C_arguments": "self",
                                                    "F_C_name": "c_ex_class2_get_name3",
                                                    "F_C_pure_clause": "pure ",
                                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                                    "F_C_subprogram": "function",
                                                    "c_const": "",
                                                    "c_rv_decl": "char * SHC_rv",
                                                    "c_type": "char",
                                                    "c_val": "SHCXX_rv.c_str()",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_rv_decl": "std::string & SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "c_function_string_&"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->getName3(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_getName3_bufferify",
                                                    "C_prototype": "const AA_example_nested_ExClass2 * self,\t AA_SHROUD_array *SHT_rv_cdesc,\t AA_SHROUD_capsule_data *SHT_rv_capsule",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self,\t SHT_rv_cdesc,\t SHT_rv_capsule",
                                                    "F_C_call": "c_ex_class2_get_name3_bufferify",
                                                    "F_C_name": "c_ex_class2_get_name3_bufferify",
                                                    "F_C_result_clause": "",
                                                    "F_C_subprogram": "subroutine",
                                                    "F_arg_c_call": "obj%cxxmem,\t SHT_rv_cdesc,\t SHT_rv_capsule",
                                                    "F_arguments": "obj",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "",
                                                    "c_helper_array_context": "AA_SHROUD_array",
                                                    "c_helper_copy_string": "AA_ShroudCopyString",
                                                    "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                                                    "c_type": "char",
                                                    "c_var": "SHC_rv",
                                                    "c_var_capsule": "SHT_rv_capsule",
                                                    "c_var_cdesc": "SHT_rv_cdesc",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_rv_decl": "std::string & SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_c_suffix": "_bufferify",
                                                    "f_helper_array_context": "AA_SHROUD_array",
                                                    "f_helper_capsule_dtor": "AA_SHROUD_capsule_dtor",
                                                    "f_helper_copy_string": "AA_SHROUD_copy_string",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "f_var_capsule": "SHT_rv_capsule",
                                                    "f_var_cdesc": "SHT_rv_cdesc",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "i_var_capsule": "SHT_rv_capsule",
                                                    "i_var_cdesc": "SHT_rv_cdesc",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_function_string_&_cdesc_allocatable"
                                                },
                                                "fmtl": {
                                                    "c_var": "SHCXX_rv.c_str()",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "SHCXX_rv.c_str()",
                                                    "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                                    "stmt": "lua_function_string_&"
                                                },
                                                "fmtpy": {
                                                    "array_size": "1",
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": null,
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_string_&",
                                                    "value_var": "SHValue_rv"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "getName3",
                                            "F_name_api": "get_name3",
                                            "F_name_function": "get_name3",
                                            "F_name_generic": "get_name3",
                                            "F_name_impl": "ex_class2_get_name3",
                                            "LUA_name": "getName3",
                                            "LUA_name_api": "getName3",
                                            "LUA_name_impl": "l_example_nested_ExClass2_getName3",
                                            "PY_name_impl": "PP_getName3",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "getName3"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "getName4  15 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "name": "getName4",
                                                "params": [],
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ],
                                                "typemap_name": "std::string"
                                            },
                                            "specifier": [
                                                "string"
                                            ],
                                            "typemap_name": "std::string"
                                        },
                                        "decl": "string& getName4()",
                                        "declgen": "string & getName4(void)",
                                        "helpers": {
                                            "c": [
                                                "array_context",
                                                "string_to_cdesc",
                                                "copy_string"
                                            ],
                                            "f": [
                                                "array_context",
                                                "copy_string",
                                                "capsule_dtor"
                                            ]
                                        },
                                        "name": "getName4",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_string_&"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "cdesc",
                                                        "deref": "allocatable",
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_string_&_cdesc_allocatable"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->getName4(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_getName4",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "char *",
                                                    "F_C_arguments": "self",
                                                    "F_C_name": "c_ex_class2_get_name4",
                                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                                    "F_C_subprogram": "function",
                                                    "c_const": "",
                                                    "c_rv_decl": "char * SHC_rv",
                                                    "c_type": "char",
                                                    "c_val": "SHCXX_rv.c_str()",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_rv_decl": "std::string & SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "c_function_string_&"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->getName4(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_getName4_bufferify",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t AA_SHROUD_array *SHT_rv_cdesc,\t AA_SHROUD_capsule_data *SHT_rv_capsule",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self,\t SHT_rv_cdesc,\t SHT_rv_capsule",
                                                    "F_C_call": "c_ex_class2_get_name4_bufferify",
                                                    "F_C_name": "c_ex_class2_get_name4_bufferify",
                                                    "F_C_result_clause": "",
                                                    "F_C_subprogram": "subroutine",
                                                    "F_arg_c_call": "obj%cxxmem,\t SHT_rv_cdesc,\t SHT_rv_capsule",
                                                    "F_arguments": "obj",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "",
                                                    "c_helper_array_context": "AA_SHROUD_array",
                                                    "c_helper_copy_string": "AA_ShroudCopyString",
                                                    "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                                                    "c_type": "char",
                                                    "c_var": "SHC_rv",
                                                    "c_var_capsule": "SHT_rv_capsule",
                                                    "c_var_cdesc": "SHT_rv_cdesc",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_rv_decl": "std::string & SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_c_suffix": "_bufferify",
                                                    "f_helper_array_context": "AA_SHROUD_array",
                                                    "f_helper_capsule_dtor": "AA_SHROUD_capsule_dtor",
                                                    "f_helper_copy_string": "AA_SHROUD_copy_string",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "f_var_capsule": "SHT_rv_capsule",
                                                    "f_var_cdesc": "SHT_rv_cdesc",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "i_var_capsule": "SHT_rv_capsule",
                                                    "i_var_cdesc": "SHT_rv_cdesc",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_function_string_&_cdesc_allocatable"
                                                },
                                                "fmtl": {
                                                    "c_var": "SHCXX_rv.c_str()",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "SHCXX_rv.c_str()",
                                                    "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                                    "stmt": "lua_function_string_&"
                                                },
                                                "fmtpy": {
                                                    "array_size": "1",
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": null,
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_string_&",
                                                    "value_var": "SHValue_rv"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "getName4",
                                            "F_name_api": "get_name4",
                                            "F_name_function": "get_name4",
                                            "F_name_generic": "get_name4",
                                            "F_name_impl": "ex_class2_get_name4",
                                            "LUA_name": "getName4",
                                            "LUA_name_api": "getName4",
                                            "LUA_name_impl": "l_example_nested_ExClass2_getName4",
                                            "PY_name_impl": "PP_getName4",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "getName4"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "GetNameLength  16 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "func_const": true,
                                                "name": "GetNameLength",
                                                "params": [],
                                                "typemap_name": "int"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "decl": "int GetNameLength() const",
                                        "declgen": "int GetNameLength(void) const",
                                        "doxygen": {
                                            "brief": "helper function for Fortran"
                                        },
                                        "name": "GetNameLength",
                                        "options": {},
                                        "splicer": {
                                            "c": [
                                                "return SH_this->getName().length();"
                                            ]
                                        },
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_native_scalar"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_native_scalar"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->GetNameLength(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_GetNameLength",
                                                    "C_prototype": "const AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "int",
                                                    "F_C_name": "c_ex_class2_get_name_length",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "int",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHC_rv",
                                                    "cxx_rv_decl": "int SHC_rv",
                                                    "cxx_type": "int",
                                                    "cxx_var": "SHC_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "c_function_native_scalar"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->GetNameLength(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_GetNameLength",
                                                    "C_prototype": "const AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "int",
                                                    "F_C_arguments": "self",
                                                    "F_C_call": "c_ex_class2_get_name_length",
                                                    "F_C_name": "c_ex_class2_get_name_length",
                                                    "F_C_pure_clause": "pure ",
                                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                                    "F_C_subprogram": "function",
                                                    "F_arg_c_call": "obj%cxxmem",
                                                    "F_arguments": "obj",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "int",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHC_rv",
                                                    "cxx_rv_decl": "int SHC_rv",
                                                    "cxx_type": "int",
                                                    "cxx_var": "SHC_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_INT",
                                                    "f_type": "integer(C_INT)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "f_function_native_scalar"
                                                },
                                                "fmtl": {
                                                    "c_var": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "SHCXX_rv",
                                                    "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                                    "stmt": "lua_function_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "int",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": "NPY_INT",
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_native_scalar",
                                                    "value_var": "SHValue_rv"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "GetNameLength",
                                            "F_name_api": "get_name_length",
                                            "F_name_function": "get_name_length",
                                            "F_name_generic": "get_name_length",
                                            "F_name_impl": "ex_class2_get_name_length",
                                            "LUA_name": "GetNameLength",
                                            "LUA_name_api": "GetNameLength",
                                            "LUA_name_impl": "l_example_nested_ExClass2_GetNameLength",
                                            "PY_name_impl": "PP_GetNameLength",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "GetNameLength"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "get_class1  17 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "name": "get_class1",
                                                "params": [
                                                    {
                                                        "const": true,
                                                        "declarator": {
                                                            "name": "in",
                                                            "pointer": [
                                                                {
                                                                    "ptr": "*"
                                                                }
                                                            ],
                                                            "typemap_name": "example::nested::ExClass1"
                                                        },
                                                        "specifier": [
                                                            "ExClass1"
                                                        ],
                                                        "typemap_name": "example::nested::ExClass1"
                                                    }
                                                ],
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ],
                                                "typemap_name": "example::nested::ExClass1"
                                            },
                                            "specifier": [
                                                "ExClass1"
                                            ],
                                            "typemap_name": "example::nested::ExClass1"
                                        },
                                        "decl": "ExClass1 *get_class1(const ExClass1 *in)",
                                        "declgen": "ExClass1 * get_class1(const ExClass1 * in)",
                                        "name": "get_class1",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "capptr",
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_shadow_*_capptr"
                                                },
                                                "in": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "c_in_shadow_*"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "capptr",
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_shadow_*_capptr"
                                                },
                                                "in": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_shadow_*"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "in": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "in": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "in": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->get_class1(\tSHCXX_in)",
                                                    "C_call_list": "SHCXX_in",
                                                    "C_name": "AA_example_nested_ExClass2_get_class1",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t AA_example_nested_ExClass1 * in,\t AA_example_nested_ExClass1 * SHC_rv",
                                                    "C_return_type": "AA_example_nested_ExClass1 *",
                                                    "F_C_name": "c_ex_class2_get_class1",
                                                    "c_const": "",
                                                    "c_type": "AA_example_nested_ExClass1",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_nonconst_ptr": "SHCXX_rv",
                                                    "cxx_rv_decl": "example::nested::ExClass1 * SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_local_ptr": "SHT_prv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "c_function_shadow_*_capptr"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->get_class1(\tSHCXX_in)",
                                                    "C_call_list": "SHCXX_in",
                                                    "C_name": "AA_example_nested_ExClass2_get_class1",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t AA_example_nested_ExClass1 * in,\t AA_example_nested_ExClass1 * SHC_rv",
                                                    "C_return_type": "AA_example_nested_ExClass1 *",
                                                    "F_C_arguments": "self,\t in,\t SHT_rv",
                                                    "F_C_call": "c_ex_class2_get_class1",
                                                    "F_C_name": "c_ex_class2_get_class1",
                                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                                    "F_C_subprogram": "function",
                                                    "F_arg_c_call": "obj%cxxmem,\t in%cxxmem,\t SHT_rv%cxxmem",
                                                    "F_arguments": "obj,\t in",
                                                    "F_result": "SHT_prv",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "",
                                                    "c_type": "AA_example_nested_ExClass1",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_nonconst_ptr": "SHCXX_rv",
                                                    "cxx_rv_decl": "example::nested::ExClass1 * SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_capsule_data_type": "AA_SHROUD_capsule_data",
                                                    "f_derived_type": "ex_class1",
                                                    "f_intent": "OUT",
                                                    "f_local_ptr": "SHT_prv",
                                                    "f_type": "type(ex_class1)",
                                                    "f_type_module": "userlibrary_example_nested_mod",
                                                    "f_var": "SHT_rv",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_function_shadow_*_capptr"
                                                },
                                                "fmtl": {
                                                    "c_var": "static_cast<void *>(\tSHCXX_rv)",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "static_cast<void *>(\tSHCXX_rv)",
                                                    "push_expr": "PUSH",
                                                    "stmt": "lua_function_shadow_*"
                                                },
                                                "fmtpy": {
                                                    "PY_to_object_idtor_func": "PP_ExClass1_to_Object_idtor",
                                                    "PyObject": "PP_ExClass1",
                                                    "PyTypeObject": "PP_ExClass1_Type",
                                                    "array_size": "1",
                                                    "c_deref": "*",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "*SHCXX_rv",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_nonconst_ptr": "SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": null,
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_shadow_*",
                                                    "value_var": "SHValue_rv"
                                                }
                                            },
                                            "in": {
                                                "fmtc": {
                                                    "c_addr": "",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_member": "->",
                                                    "c_type": "AA_example_nested_ExClass1",
                                                    "c_var": "in",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_nonconst_ptr": "const_cast<example::nested::ExClass1 *>\t(SHCXX_in)",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "SHCXX_in",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "c_in_shadow_*"
                                                },
                                                "fmtf": {
                                                    "c_addr": "",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_member": "->",
                                                    "c_type": "AA_example_nested_ExClass1",
                                                    "c_var": "in",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_nonconst_ptr": "const_cast<example::nested::ExClass1 *>\t(SHCXX_in)",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "SHCXX_in",
                                                    "f_capsule_data_type": "AA_SHROUD_capsule_data",
                                                    "f_derived_type": "ex_class1",
                                                    "f_intent": "IN",
                                                    "f_type": "type(ex_class1)",
                                                    "f_type_module": "userlibrary_example_nested_mod",
                                                    "f_var": "in",
                                                    "fc_var": "in",
                                                    "i_var": "in",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_in_shadow_*"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": " *",
                                                    "c_member": "->",
                                                    "c_var": "\t(l_ExClass2_Type *)\t luaL_checkudata(\tL, 1, \"ExClass2.metatable\")",
                                                    "c_var_len": "Lin",
                                                    "cxx_member": "->",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "in",
                                                    "lua_var": "SH_Lua_in",
                                                    "pop_expr": "static_cast<example::nested::ExClass1 *>\t(\t(l_ExClass2_Type *)\t luaL_checkudata(\tL, 1, \"ExClass2.metatable\")->addr)",
                                                    "stmt": "lua_in_shadow_*"
                                                },
                                                "fmtpy": {
                                                    "PY_to_object_idtor_func": "PP_ExClass1_to_Object_idtor",
                                                    "PyObject": "PP_ExClass1",
                                                    "PyTypeObject": "PP_ExClass1_Type",
                                                    "array_size": "1",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_type": "AA_example_nested_ExClass1",
                                                    "c_var": "in",
                                                    "ctor_expr": "*in",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_nonconst_ptr": "const_cast<example::nested::ExClass1 *>\t(in)",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "in",
                                                    "data_var": "SHData_in",
                                                    "numpy_type": null,
                                                    "py_object": "PP_ExClass1",
                                                    "py_var": "SHPy_in",
                                                    "size_var": "SHSize_in",
                                                    "stmt": "py_in_shadow_*",
                                                    "value_var": "SHValue_in"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "get_class1",
                                            "F_name_api": "get_class1",
                                            "F_name_function": "get_class1",
                                            "F_name_generic": "get_class1",
                                            "F_name_impl": "ex_class2_get_class1",
                                            "LUA_name": "get_class1",
                                            "LUA_name_api": "get_class1",
                                            "LUA_name_impl": "l_example_nested_ExClass2_get_class1",
                                            "PY_name_impl": "PP_get_class1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "get_class1"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "declare  23 ****************************************",
                                        "_generated": "has_default_arg",
                                        "_generated_path": [
                                            "has_default_arg"
                                        ],
                                        "_orig_node_index": 18,
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "declare",
                                                "params": [
                                                    {
                                                        "declarator": {
                                                            "name": "type",
                                                            "typemap_name": "TypeID"
                                                        },
                                                        "specifier": [
                                                            "TypeID"
                                                        ],
                                                        "typemap_name": "TypeID"
                                                    }
                                                ],
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ],
                                                "typemap_name": "example::nested::ExClass2"
                                            },
                                            "specifier": [
                                                "ExClass2"
                                            ],
                                            "typemap_name": "example::nested::ExClass2"
                                        },
                                        "decl": "ExClass2 * declare(TypeID type, SidreLength len = 1)",
                                        "declgen": "ExClass2 * declare(TypeID type)",
                                        "name": "declare",
                                        "options": {},
                                        "return_this": true,
                                        "wrap": {
                                            "c": true,
                                            "fortran": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "this",
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_shadow_*_this"
                                                },
                                                "type": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "c_in_native_scalar"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "this",
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_shadow_*_this"
                                                },
                                                "type": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_native_scalar"
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "type": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->declare(\tSHCXX_type)",
                                                    "C_call_list": "SHCXX_type",
                                                    "C_name": "AA_example_nested_ExClass2_declare_0",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t AA_TypeID type",
                                                    "C_return_type": "void",
                                                    "F_C_name": "c_ex_class2_declare_0",
                                                    "c_const": "",
                                                    "c_type": "AA_example_nested_ExClass2",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_rv_decl": "example::nested::ExClass2 * SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass2",
                                                    "cxx_var": "SHCXX_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "c_function_shadow_*_this"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->declare(\tSHCXX_type)",
                                                    "C_call_list": "SHCXX_type",
                                                    "C_name": "AA_example_nested_ExClass2_declare_0",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t AA_TypeID type",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self,\t type",
                                                    "F_C_call": "c_ex_class2_declare_0",
                                                    "F_C_name": "c_ex_class2_declare_0",
                                                    "F_C_result_clause": "",
                                                    "F_C_subprogram": "subroutine",
                                                    "F_arg_c_call": "obj%cxxmem,\t type",
                                                    "F_arguments": "obj,\t type",
                                                    "F_subprogram": "subroutine",
                                                    "c_const": "",
                                                    "c_type": "AA_example_nested_ExClass2",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_rv_decl": "example::nested::ExClass2 * SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass2",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_capsule_data_type": "AA_SHROUD_capsule_data",
                                                    "f_derived_type": "ex_class2",
                                                    "f_intent": "OUT",
                                                    "f_type": "type(ex_class2)",
                                                    "f_type_module": "userlibrary_example_nested_mod",
                                                    "f_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_function_shadow_*_this"
                                                }
                                            },
                                            "type": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "AA_TypeID",
                                                    "c_var": "type",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_decl": "TypeID SHCXX_type",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_type",
                                                    "cxx_type": "TypeID",
                                                    "cxx_val": "getTypeID(type)",
                                                    "cxx_var": "SHCXX_type",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "c_in_native_scalar"
                                                },
                                                "fmtf": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "AA_TypeID",
                                                    "c_var": "type",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_decl": "TypeID SHCXX_type",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_type",
                                                    "cxx_type": "TypeID",
                                                    "cxx_val": "getTypeID(type)",
                                                    "cxx_var": "SHCXX_type",
                                                    "f_intent": "IN",
                                                    "f_kind": "type_id",
                                                    "f_type": "integer(type_id)",
                                                    "f_type_module": "userlibrary_mod",
                                                    "f_var": "type",
                                                    "fc_var": "type",
                                                    "i_var": "type",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "f_in_native_scalar"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "declare",
                                            "F_name_api": "declare",
                                            "F_name_function": "declare_0",
                                            "F_name_generic": "declare",
                                            "F_name_impl": "ex_class2_declare_0",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "declare",
                                            "function_suffix": "_0"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "declare  18 ****************************************",
                                        "_default_funcs": [
                                            23
                                        ],
                                        "_has_default_arg": true,
                                        "_nargs": [
                                            1,
                                            2
                                        ],
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "declare",
                                                "params": [
                                                    {
                                                        "declarator": {
                                                            "name": "type",
                                                            "typemap_name": "TypeID"
                                                        },
                                                        "specifier": [
                                                            "TypeID"
                                                        ],
                                                        "typemap_name": "TypeID"
                                                    },
                                                    {
                                                        "declarator": {
                                                            "init": 1,
                                                            "name": "len",
                                                            "typemap_name": "SidreLength"
                                                        },
                                                        "specifier": [
                                                            "SidreLength"
                                                        ],
                                                        "typemap_name": "SidreLength"
                                                    }
                                                ],
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ],
                                                "typemap_name": "example::nested::ExClass2"
                                            },
                                            "specifier": [
                                                "ExClass2"
                                            ],
                                            "typemap_name": "example::nested::ExClass2"
                                        },
                                        "decl": "ExClass2 * declare(TypeID type, SidreLength len = 1)",
                                        "declgen": "ExClass2 * declare(TypeID type, SidreLength len=1)",
                                        "fortran_generic": [
                                            {
                                                "decls": [
                                                    {
                                                        "declarator": {
                                                            "name": "type",
                                                            "typemap_name": "TypeID"
                                                        },
                                                        "specifier": [
                                                            "TypeID"
                                                        ],
                                                        "typemap_name": "TypeID"
                                                    },
                                                    {
                                                        "declarator": {
                                                            "init": 1,
                                                            "name": "len",
                                                            "typemap_name": "int"
                                                        },
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "function_suffix": "_int",
                                                "generic": "(int len=1)"
                                            },
                                            {
                                                "decls": [
                                                    {
                                                        "declarator": {
                                                            "name": "type",
                                                            "typemap_name": "TypeID"
                                                        },
                                                        "specifier": [
                                                            "TypeID"
                                                        ],
                                                        "typemap_name": "TypeID"
                                                    },
                                                    {
                                                        "declarator": {
                                                            "init": 1,
                                                            "name": "len",
                                                            "typemap_name": "long"
                                                        },
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "function_suffix": "_long",
                                                "generic": "(long len=1)"
                                            }
                                        ],
                                        "name": "declare",
                                        "options": {},
                                        "return_this": true,
                                        "wrap": {
                                            "c": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "this",
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_shadow_*_this"
                                                },
                                                "len": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "c_in_native_scalar"
                                                },
                                                "type": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "c_in_native_scalar"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "len": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                },
                                                "type": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "len": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                },
                                                "type": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "len": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                },
                                                "type": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->declare(\tSHCXX_type,\t len)",
                                                    "C_call_list": "SHCXX_type,\t len",
                                                    "C_name": "AA_example_nested_ExClass2_declare_1",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t AA_TypeID type,\t SIDRE_SidreLength len",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self,\t type,\t len",
                                                    "F_C_name": "c_ex_class2_declare_1",
                                                    "F_C_result_clause": "",
                                                    "F_C_subprogram": "subroutine",
                                                    "c_const": "",
                                                    "c_type": "AA_example_nested_ExClass2",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_rv_decl": "example::nested::ExClass2 * SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass2",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_capsule_data_type": "AA_SHROUD_capsule_data",
                                                    "f_derived_type": "ex_class2",
                                                    "f_intent": "OUT",
                                                    "f_type": "type(ex_class2)",
                                                    "f_type_module": "userlibrary_example_nested_mod",
                                                    "f_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "c_function_shadow_*_this"
                                                },
                                                "fmtl": {
                                                    "c_var": "static_cast<void *>(\tSHCXX_rv)",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "static_cast<void *>(\tSHCXX_rv)",
                                                    "push_expr": "PUSH",
                                                    "stmt": "lua_function_shadow_*"
                                                },
                                                "fmtpy": {
                                                    "PY_to_object_idtor_func": "PP_ExClass2_to_Object_idtor",
                                                    "PyObject": "PP_ExClass2",
                                                    "PyTypeObject": "PP_ExClass2_Type",
                                                    "array_size": "1",
                                                    "c_deref": "*",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "*SHCXX_rv",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_nonconst_ptr": "SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass2",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": null,
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_shadow_*",
                                                    "value_var": "SHValue_rv"
                                                }
                                            },
                                            "len": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "SIDRE_SidreLength",
                                                    "c_var": "len",
                                                    "cfi_type": "CFI_type_long",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&len",
                                                    "cxx_type": "SidreLength",
                                                    "cxx_var": "len",
                                                    "f_intent": "IN",
                                                    "f_kind": "sidre_length",
                                                    "f_type": "integer(sidre_length)",
                                                    "f_type_module": "userlibrary_mod",
                                                    "f_var": "len",
                                                    "i_var": "len",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_LONG",
                                                    "stmt_name": "c_in_native_scalar"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 2,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "len",
                                                    "c_var_len": "Llen",
                                                    "cxx_member": ".",
                                                    "cxx_type": "SidreLength",
                                                    "cxx_var": "len",
                                                    "lua_var": "SH_Lua_len",
                                                    "pop_expr": "lua_tointeger(L, 2)",
                                                    "stmt": "lua_in_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "SIDRE_SidreLength",
                                                    "c_var": "len",
                                                    "ctor_expr": "len",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&len",
                                                    "cxx_type": "SidreLength",
                                                    "cxx_var": "len",
                                                    "data_var": "SHData_len",
                                                    "numpy_type": "NPY_LONG",
                                                    "py_var": "SHPy_len",
                                                    "size_var": "SHSize_len",
                                                    "stmt": "py_in_native_scalar",
                                                    "value_var": "SHValue_len"
                                                }
                                            },
                                            "type": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "AA_TypeID",
                                                    "c_var": "type",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_decl": "TypeID SHCXX_type",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_type",
                                                    "cxx_type": "TypeID",
                                                    "cxx_val": "getTypeID(type)",
                                                    "cxx_var": "SHCXX_type",
                                                    "f_intent": "IN",
                                                    "f_kind": "type_id",
                                                    "f_type": "integer(type_id)",
                                                    "f_type_module": "userlibrary_mod",
                                                    "f_var": "type",
                                                    "i_var": "type",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "c_in_native_scalar"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "lua_tointeger(L, 1)",
                                                    "c_var_len": "Ltype",
                                                    "cxx_member": ".",
                                                    "cxx_type": "TypeID",
                                                    "cxx_var": "type",
                                                    "lua_var": "SH_Lua_type",
                                                    "pop_expr": "getTypeID(lua_tointeger(L, 1))",
                                                    "stmt": "lua_in_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "AA_TypeID",
                                                    "c_var": "type",
                                                    "ctor_expr": "type",
                                                    "cxx_addr": "&",
                                                    "cxx_decl": "TypeID SH_type",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&type",
                                                    "cxx_type": "TypeID",
                                                    "cxx_val": "getTypeID(type)",
                                                    "cxx_var": "SH_type",
                                                    "data_var": "SHData_type",
                                                    "numpy_type": "NPY_INT",
                                                    "py_var": "SHPy_type",
                                                    "size_var": "SHSize_type",
                                                    "stmt": "py_in_native_scalar",
                                                    "value_var": "SHValue_type"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "declare",
                                            "F_name_api": "declare",
                                            "LUA_name": "declare",
                                            "LUA_name_api": "declare",
                                            "LUA_name_impl": "l_example_nested_ExClass2_declare",
                                            "PY_cleanup_decref": "Py_XDECREF",
                                            "PY_name_impl": "PP_declare_1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "declare",
                                            "function_suffix": "_1"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "declare  30 ****************************************",
                                        "_PTR_F_C_index": "18",
                                        "_default_funcs": [
                                            23
                                        ],
                                        "_generated": "fortran_generic",
                                        "_generated_path": [
                                            "fortran_generic"
                                        ],
                                        "_has_default_arg": true,
                                        "_nargs": [
                                            1,
                                            2
                                        ],
                                        "_orig_node_index": 18,
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "declare",
                                                "params": [
                                                    {
                                                        "declarator": {
                                                            "name": "type",
                                                            "typemap_name": "TypeID"
                                                        },
                                                        "specifier": [
                                                            "TypeID"
                                                        ],
                                                        "typemap_name": "TypeID"
                                                    },
                                                    {
                                                        "declarator": {
                                                            "init": 1,
                                                            "name": "len",
                                                            "typemap_name": "int"
                                                        },
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ],
                                                "typemap_name": "example::nested::ExClass2"
                                            },
                                            "specifier": [
                                                "ExClass2"
                                            ],
                                            "typemap_name": "example::nested::ExClass2"
                                        },
                                        "decl": "ExClass2 * declare(TypeID type, SidreLength len = 1)",
                                        "declgen": "ExClass2 * declare(TypeID type, int len=1)",
                                        "name": "declare",
                                        "options": {},
                                        "return_this": true,
                                        "wrap": {
                                            "fortran": true
                                        },
                                        "zz_bind": {
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "this",
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_shadow_*_this"
                                                },
                                                "len": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_native_scalar"
                                                },
                                                "type": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_native_scalar"
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "len": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                },
                                                "type": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtf": {
                                                    "C_call_function": "SH_this->declare(\tSHCXX_type,\t len)",
                                                    "C_call_list": "SHCXX_type,\t len",
                                                    "C_name": "declare",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t AA_TypeID type,\t int len",
                                                    "C_return_type": "void",
                                                    "F_C_call": "c_ex_class2_declare_1",
                                                    "F_C_name": "c_ex_class2_declare_1_int",
                                                    "F_arg_c_call": "obj%cxxmem,\t type,\t int(len, C_LONG)",
                                                    "F_arguments": "obj,\t type,\t len",
                                                    "F_subprogram": "subroutine",
                                                    "c_const": "",
                                                    "c_type": "AA_example_nested_ExClass2",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_rv_decl": "example::nested::ExClass2 * SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass2",
                                                    "cxx_var": "SHCXX_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_function_shadow_*_this"
                                                }
                                            },
                                            "len": {
                                                "fmtf": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "int",
                                                    "c_var": "len",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&len",
                                                    "cxx_type": "int",
                                                    "cxx_var": "len",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_INT",
                                                    "f_type": "integer(C_INT)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "len",
                                                    "fc_var": "len",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "f_in_native_scalar"
                                                }
                                            },
                                            "type": {
                                                "fmtf": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "AA_TypeID",
                                                    "c_var": "type",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_decl": "TypeID SHCXX_type",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_type",
                                                    "cxx_type": "TypeID",
                                                    "cxx_val": "getTypeID(type)",
                                                    "cxx_var": "SHCXX_type",
                                                    "f_intent": "IN",
                                                    "f_kind": "type_id",
                                                    "f_type": "integer(type_id)",
                                                    "f_type_module": "userlibrary_mod",
                                                    "f_var": "type",
                                                    "fc_var": "type",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "f_in_native_scalar"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "declare",
                                            "F_name_api": "declare",
                                            "F_name_function": "declare_1_int",
                                            "F_name_generic": "declare",
                                            "F_name_impl": "ex_class2_declare_1_int",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "declare",
                                            "function_suffix": "_1_int"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "declare  31 ****************************************",
                                        "_PTR_F_C_index": "18",
                                        "_default_funcs": [
                                            23
                                        ],
                                        "_generated": "fortran_generic",
                                        "_generated_path": [
                                            "fortran_generic"
                                        ],
                                        "_has_default_arg": true,
                                        "_nargs": [
                                            1,
                                            2
                                        ],
                                        "_orig_node_index": 18,
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "declare",
                                                "params": [
                                                    {
                                                        "declarator": {
                                                            "name": "type",
                                                            "typemap_name": "TypeID"
                                                        },
                                                        "specifier": [
                                                            "TypeID"
                                                        ],
                                                        "typemap_name": "TypeID"
                                                    },
                                                    {
                                                        "declarator": {
                                                            "init": 1,
                                                            "name": "len",
                                                            "typemap_name": "long"
                                                        },
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ],
                                                "typemap_name": "example::nested::ExClass2"
                                            },
                                            "specifier": [
                                                "ExClass2"
                                            ],
                                            "typemap_name": "example::nested::ExClass2"
                                        },
                                        "decl": "ExClass2 * declare(TypeID type, SidreLength len = 1)",
                                        "declgen": "ExClass2 * declare(TypeID type, long len=1)",
                                        "name": "declare",
                                        "options": {},
                                        "return_this": true,
                                        "wrap": {
                                            "fortran": true
                                        },
                                        "zz_bind": {
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "api": "this",
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_shadow_*_this"
                                                },
                                                "len": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_native_scalar"
                                                },
                                                "type": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_native_scalar"
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                },
                                                "len": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                },
                                                "type": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtf": {
                                                    "C_call_function": "SH_this->declare(\tSHCXX_type,\t len)",
                                                    "C_call_list": "SHCXX_type,\t len",
                                                    "C_name": "declare",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t AA_TypeID type,\t long len",
                                                    "C_return_type": "void",
                                                    "F_C_call": "c_ex_class2_declare_1",
                                                    "F_C_name": "c_ex_class2_declare_1_long",
                                                    "F_arg_c_call": "obj%cxxmem,\t type,\t int(len, C_LONG)",
                                                    "F_arguments": "obj,\t type,\t len",
                                                    "F_subprogram": "subroutine",
                                                    "c_const": "",
                                                    "c_type": "AA_example_nested_ExClass2",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_other",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_rv_decl": "example::nested::ExClass2 * SHCXX_rv",
                                                    "cxx_type": "example::nested::ExClass2",
                                                    "cxx_var": "SHCXX_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt_name": "f_function_shadow_*_this"
                                                }
                                            },
                                            "len": {
                                                "fmtf": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "long",
                                                    "c_var": "len",
                                                    "cfi_type": "CFI_type_long",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&len",
                                                    "cxx_type": "long",
                                                    "cxx_var": "len",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_LONG",
                                                    "f_type": "integer(C_LONG)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "len",
                                                    "fc_var": "len",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_LONG",
                                                    "stmt_name": "f_in_native_scalar"
                                                }
                                            },
                                            "type": {
                                                "fmtf": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "AA_TypeID",
                                                    "c_var": "type",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_decl": "TypeID SHCXX_type",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_type",
                                                    "cxx_type": "TypeID",
                                                    "cxx_val": "getTypeID(type)",
                                                    "cxx_var": "SHCXX_type",
                                                    "f_intent": "IN",
                                                    "f_kind": "type_id",
                                                    "f_type": "integer(type_id)",
                                                    "f_type_module": "userlibrary_mod",
                                                    "f_var": "type",
                                                    "fc_var": "type",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "f_in_native_scalar"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "declare",
                                            "F_name_api": "declare",
                                            "F_name_function": "declare_1_long",
                                            "F_name_generic": "declare",
                                            "F_name_impl": "ex_class2_declare_1_long",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "declare",
                                            "function_suffix": "_1_long"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "destroyall  19 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "name": "destroyall",
                                                "params": [],
                                                "typemap_name": "void"
                                            },
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "void destroyall()",
                                        "declgen": "void destroyall(void)",
                                        "name": "destroyall",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    },
                                                    "stmt": "c_subroutine"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    },
                                                    "stmt": "f_subroutine"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->destroyall(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_destroyall",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "void",
                                                    "F_C_name": "c_ex_class2_destroyall",
                                                    "stmt_name": "c_subroutine"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->destroyall(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_destroyall",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self",
                                                    "F_C_call": "c_ex_class2_destroyall",
                                                    "F_C_name": "c_ex_class2_destroyall",
                                                    "F_C_subprogram": "subroutine",
                                                    "F_arg_c_call": "obj%cxxmem",
                                                    "F_arguments": "obj",
                                                    "F_subprogram": "subroutine",
                                                    "stmt_name": "f_subroutine"
                                                },
                                                "fmtl": {
                                                    "stmt": "lua_subroutine"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "destroyall",
                                            "F_name_api": "destroyall",
                                            "F_name_function": "destroyall",
                                            "F_name_generic": "destroyall",
                                            "F_name_impl": "ex_class2_destroyall",
                                            "LUA_name": "destroyall",
                                            "LUA_name_api": "destroyall",
                                            "LUA_name_impl": "l_example_nested_ExClass2_destroyall",
                                            "PY_name_impl": "PP_destroyall",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "destroyall"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "getTypeID  20 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "func_const": true,
                                                "name": "getTypeID",
                                                "params": [],
                                                "typemap_name": "TypeID"
                                            },
                                            "specifier": [
                                                "TypeID"
                                            ],
                                            "typemap_name": "TypeID"
                                        },
                                        "decl": "TypeID getTypeID() const",
                                        "declgen": "TypeID getTypeID(void) const",
                                        "name": "getTypeID",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_native_scalar"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_native_scalar"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->getTypeID(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_getTypeID",
                                                    "C_prototype": "const AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "AA_TypeID",
                                                    "F_C_name": "c_ex_class2_get_type_id",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_rv_decl": "AA_TypeID SHC_rv",
                                                    "c_type": "AA_TypeID",
                                                    "c_val": "static_cast<int>(SHCXX_rv)",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_rv_decl": "TypeID SHCXX_rv",
                                                    "cxx_type": "TypeID",
                                                    "cxx_var": "SHCXX_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "c_function_native_scalar"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->getTypeID(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_getTypeID",
                                                    "C_prototype": "const AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "AA_TypeID",
                                                    "F_C_arguments": "self",
                                                    "F_C_call": "c_ex_class2_get_type_id",
                                                    "F_C_name": "c_ex_class2_get_type_id",
                                                    "F_C_pure_clause": "pure ",
                                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                                    "F_C_subprogram": "function",
                                                    "F_arg_c_call": "obj%cxxmem",
                                                    "F_arguments": "obj",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_rv_decl": "AA_TypeID SHC_rv",
                                                    "c_type": "AA_TypeID",
                                                    "c_val": "static_cast<int>(SHCXX_rv)",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_rv_decl": "TypeID SHCXX_rv",
                                                    "cxx_type": "TypeID",
                                                    "cxx_var": "SHCXX_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "type_id",
                                                    "f_type": "integer(type_id)",
                                                    "f_type_module": "userlibrary_mod",
                                                    "f_var": "SHT_rv",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "f_function_native_scalar"
                                                },
                                                "fmtl": {
                                                    "c_var": "static_cast<int>(SHCXX_rv)",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "static_cast<int>(SHCXX_rv)",
                                                    "push_expr": "lua_pushinteger(L, static_cast<int>(SHCXX_rv))",
                                                    "stmt": "lua_function_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "TypeID",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": "NPY_INT",
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_native_scalar",
                                                    "value_var": "SHValue_rv"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "getTypeID",
                                            "F_name_api": "get_type_id",
                                            "F_name_function": "get_type_id",
                                            "F_name_generic": "get_type_id",
                                            "F_name_impl": "ex_class2_get_type_id",
                                            "LUA_name": "getTypeID",
                                            "LUA_name_api": "getTypeID",
                                            "LUA_name_impl": "l_example_nested_ExClass2_getTypeID",
                                            "PY_name_impl": "PP_getTypeID",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "getTypeID"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "setValue  21 ****************************************",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "setValue",
                                                "params": [
                                                    {
                                                        "declarator": {
                                                            "name": "value"
                                                        },
                                                        "specifier": [
                                                            "ValueType"
                                                        ],
                                                        "template_argument": "ValueType"
                                                    }
                                                ],
                                                "typemap_name": "void"
                                            },
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "cxx_template": {
                                            "ValueType": [
                                                "int",
                                                "long",
                                                "float",
                                                "double"
                                            ]
                                        },
                                        "decl": "template<typename ValueType> void setValue(ValueType value)",
                                        "declgen": "void setValue(ValueType value)",
                                        "have_template_args": true,
                                        "name": "setValue",
                                        "options": {},
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "instantiation": "<long>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "float"
                                                        ],
                                                        "typemap_name": "float"
                                                    }
                                                ],
                                                "instantiation": "<float>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {},
                                        "zz_bind": {
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "setValue",
                                            "F_name_api": "set_value",
                                            "function_name": "setValue"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "setValue  24 ****************************************",
                                        "_generated": "cxx_template",
                                        "_generated_path": [
                                            "cxx_template"
                                        ],
                                        "_orig_node_index": 21,
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "setValue",
                                                "params": [
                                                    {
                                                        "declarator": {
                                                            "name": "value"
                                                        },
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "template_argument": "ValueType",
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "typemap_name": "void"
                                            },
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "template<typename ValueType> void setValue(ValueType value)",
                                        "declgen": "void setValue(int value)",
                                        "have_template_args": true,
                                        "name": "setValue",
                                        "options": {},
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "instantiation": "<long>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "float"
                                                        ],
                                                        "typemap_name": "float"
                                                    }
                                                ],
                                                "instantiation": "<float>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    },
                                                    "stmt": "c_subroutine"
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "c_in_native_scalar"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    },
                                                    "stmt": "f_subroutine"
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_native_scalar"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->setValue<int>(\tvalue)",
                                                    "C_call_list": "value",
                                                    "C_name": "AA_example_nested_ExClass2_setValue_int",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t int value",
                                                    "C_return_type": "void",
                                                    "F_C_name": "c_ex_class2_set_value_int",
                                                    "stmt_name": "c_subroutine"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->setValue<int>(\tvalue)",
                                                    "C_call_list": "value",
                                                    "C_name": "AA_example_nested_ExClass2_setValue_int",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t int value",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self,\t value",
                                                    "F_C_call": "c_ex_class2_set_value_int",
                                                    "F_C_name": "c_ex_class2_set_value_int",
                                                    "F_C_subprogram": "subroutine",
                                                    "F_arg_c_call": "obj%cxxmem,\t value",
                                                    "F_arguments": "obj,\t value",
                                                    "F_subprogram": "subroutine",
                                                    "stmt_name": "f_subroutine"
                                                },
                                                "fmtl": {
                                                    "stmt": "lua_subroutine"
                                                }
                                            },
                                            "value": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "int",
                                                    "c_var": "value",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "int",
                                                    "cxx_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "c_in_native_scalar"
                                                },
                                                "fmtf": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "int",
                                                    "c_var": "value",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "int",
                                                    "cxx_var": "value",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_INT",
                                                    "f_type": "integer(C_INT)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "value",
                                                    "fc_var": "value",
                                                    "i_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "f_in_native_scalar"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "c_var_len": "Lvalue",
                                                    "cxx_member": ".",
                                                    "cxx_type": "int",
                                                    "cxx_var": "value",
                                                    "lua_var": "SH_Lua_value",
                                                    "pop_expr": "lua_tointeger(L, 1)",
                                                    "stmt": "lua_in_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "int",
                                                    "c_var": "value",
                                                    "ctor_expr": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "int",
                                                    "cxx_var": "value",
                                                    "data_var": "SHData_value",
                                                    "numpy_type": "NPY_INT",
                                                    "py_var": "SHPy_value",
                                                    "size_var": "SHSize_value",
                                                    "stmt": "py_in_native_scalar",
                                                    "value_var": "SHValue_value"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "CXX_template": "<int>",
                                            "C_name_api": "setValue",
                                            "F_name_api": "set_value",
                                            "F_name_function": "set_value_int",
                                            "F_name_generic": "set_value",
                                            "F_name_impl": "ex_class2_set_value_int",
                                            "LUA_name": "setValue",
                                            "LUA_name_api": "setValue",
                                            "LUA_name_impl": "l_example_nested_ExClass2_setValue",
                                            "PY_name_impl": "PP_setValue_int",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "setValue",
                                            "template_suffix": "_int"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "setValue  25 ****************************************",
                                        "_generated": "cxx_template",
                                        "_generated_path": [
                                            "cxx_template"
                                        ],
                                        "_orig_node_index": 21,
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "setValue",
                                                "params": [
                                                    {
                                                        "declarator": {
                                                            "name": "value"
                                                        },
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "template_argument": "ValueType",
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "typemap_name": "void"
                                            },
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "template<typename ValueType> void setValue(ValueType value)",
                                        "declgen": "void setValue(long value)",
                                        "have_template_args": true,
                                        "name": "setValue",
                                        "options": {},
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "instantiation": "<long>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "float"
                                                        ],
                                                        "typemap_name": "float"
                                                    }
                                                ],
                                                "instantiation": "<float>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    },
                                                    "stmt": "c_subroutine"
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "c_in_native_scalar"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    },
                                                    "stmt": "f_subroutine"
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_native_scalar"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->setValue<long>(\tvalue)",
                                                    "C_call_list": "value",
                                                    "C_name": "AA_example_nested_ExClass2_setValue_long",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t long value",
                                                    "C_return_type": "void",
                                                    "F_C_name": "c_ex_class2_set_value_long",
                                                    "stmt_name": "c_subroutine"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->setValue<long>(\tvalue)",
                                                    "C_call_list": "value",
                                                    "C_name": "AA_example_nested_ExClass2_setValue_long",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t long value",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self,\t value",
                                                    "F_C_call": "c_ex_class2_set_value_long",
                                                    "F_C_name": "c_ex_class2_set_value_long",
                                                    "F_C_subprogram": "subroutine",
                                                    "F_arg_c_call": "obj%cxxmem,\t value",
                                                    "F_arguments": "obj,\t value",
                                                    "F_subprogram": "subroutine",
                                                    "stmt_name": "f_subroutine"
                                                },
                                                "fmtl": {
                                                    "stmt": "lua_subroutine"
                                                }
                                            },
                                            "value": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "long",
                                                    "c_var": "value",
                                                    "cfi_type": "CFI_type_long",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "long",
                                                    "cxx_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_LONG",
                                                    "stmt_name": "c_in_native_scalar"
                                                },
                                                "fmtf": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "long",
                                                    "c_var": "value",
                                                    "cfi_type": "CFI_type_long",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "long",
                                                    "cxx_var": "value",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_LONG",
                                                    "f_type": "integer(C_LONG)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "value",
                                                    "fc_var": "value",
                                                    "i_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_LONG",
                                                    "stmt_name": "f_in_native_scalar"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "c_var_len": "Lvalue",
                                                    "cxx_member": ".",
                                                    "cxx_type": "long",
                                                    "cxx_var": "value",
                                                    "lua_var": "SH_Lua_value",
                                                    "pop_expr": "lua_tointeger(L, 1)",
                                                    "stmt": "lua_in_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "long",
                                                    "c_var": "value",
                                                    "ctor_expr": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "long",
                                                    "cxx_var": "value",
                                                    "data_var": "SHData_value",
                                                    "numpy_type": "NPY_LONG",
                                                    "py_var": "SHPy_value",
                                                    "size_var": "SHSize_value",
                                                    "stmt": "py_in_native_scalar",
                                                    "value_var": "SHValue_value"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "CXX_template": "<long>",
                                            "C_name_api": "setValue",
                                            "F_name_api": "set_value",
                                            "F_name_function": "set_value_long",
                                            "F_name_generic": "set_value",
                                            "F_name_impl": "ex_class2_set_value_long",
                                            "PY_name_impl": "PP_setValue_long",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "setValue",
                                            "template_suffix": "_long"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "setValue  26 ****************************************",
                                        "_generated": "cxx_template",
                                        "_generated_path": [
                                            "cxx_template"
                                        ],
                                        "_orig_node_index": 21,
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "setValue",
                                                "params": [
                                                    {
                                                        "declarator": {
                                                            "name": "value"
                                                        },
                                                        "specifier": [
                                                            "float"
                                                        ],
                                                        "template_argument": "ValueType",
                                                        "typemap_name": "float"
                                                    }
                                                ],
                                                "typemap_name": "void"
                                            },
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "template<typename ValueType> void setValue(ValueType value)",
                                        "declgen": "void setValue(float value)",
                                        "have_template_args": true,
                                        "name": "setValue",
                                        "options": {},
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "instantiation": "<long>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "float"
                                                        ],
                                                        "typemap_name": "float"
                                                    }
                                                ],
                                                "instantiation": "<float>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    },
                                                    "stmt": "c_subroutine"
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "c_in_native_scalar"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    },
                                                    "stmt": "f_subroutine"
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_native_scalar"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->setValue<float>(\tvalue)",
                                                    "C_call_list": "value",
                                                    "C_name": "AA_example_nested_ExClass2_setValue_float",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t float value",
                                                    "C_return_type": "void",
                                                    "F_C_name": "c_ex_class2_set_value_float",
                                                    "stmt_name": "c_subroutine"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->setValue<float>(\tvalue)",
                                                    "C_call_list": "value",
                                                    "C_name": "AA_example_nested_ExClass2_setValue_float",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t float value",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self,\t value",
                                                    "F_C_call": "c_ex_class2_set_value_float",
                                                    "F_C_name": "c_ex_class2_set_value_float",
                                                    "F_C_subprogram": "subroutine",
                                                    "F_arg_c_call": "obj%cxxmem,\t value",
                                                    "F_arguments": "obj,\t value",
                                                    "F_subprogram": "subroutine",
                                                    "stmt_name": "f_subroutine"
                                                },
                                                "fmtl": {
                                                    "stmt": "lua_subroutine"
                                                }
                                            },
                                            "value": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "float",
                                                    "c_var": "value",
                                                    "cfi_type": "CFI_type_float",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "float",
                                                    "cxx_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_FLOAT",
                                                    "stmt_name": "c_in_native_scalar"
                                                },
                                                "fmtf": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "float",
                                                    "c_var": "value",
                                                    "cfi_type": "CFI_type_float",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "float",
                                                    "cxx_var": "value",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_FLOAT",
                                                    "f_type": "real(C_FLOAT)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "value",
                                                    "fc_var": "value",
                                                    "i_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_FLOAT",
                                                    "stmt_name": "f_in_native_scalar"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "c_var_len": "Lvalue",
                                                    "cxx_member": ".",
                                                    "cxx_type": "float",
                                                    "cxx_var": "value",
                                                    "lua_var": "SH_Lua_value",
                                                    "pop_expr": "lua_tonumber(L, 1)",
                                                    "stmt": "lua_in_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "float",
                                                    "c_var": "value",
                                                    "ctor_expr": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "float",
                                                    "cxx_var": "value",
                                                    "data_var": "SHData_value",
                                                    "numpy_type": "NPY_FLOAT",
                                                    "py_var": "SHPy_value",
                                                    "size_var": "SHSize_value",
                                                    "stmt": "py_in_native_scalar",
                                                    "value_var": "SHValue_value"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "CXX_template": "<float>",
                                            "C_name_api": "setValue",
                                            "F_name_api": "set_value",
                                            "F_name_function": "set_value_float",
                                            "F_name_generic": "set_value",
                                            "F_name_impl": "ex_class2_set_value_float",
                                            "PY_name_impl": "PP_setValue_float",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "setValue",
                                            "template_suffix": "_float"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "setValue  27 ****************************************",
                                        "_generated": "cxx_template",
                                        "_generated_path": [
                                            "cxx_template"
                                        ],
                                        "_orig_node_index": 21,
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "setValue",
                                                "params": [
                                                    {
                                                        "declarator": {
                                                            "name": "value"
                                                        },
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "template_argument": "ValueType",
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "typemap_name": "void"
                                            },
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "template<typename ValueType> void setValue(ValueType value)",
                                        "declgen": "void setValue(double value)",
                                        "gen_headers_typedef": [
                                            "int",
                                            "long",
                                            "float",
                                            "double"
                                        ],
                                        "have_template_args": true,
                                        "name": "setValue",
                                        "options": {},
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "instantiation": "<long>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "float"
                                                        ],
                                                        "typemap_name": "float"
                                                    }
                                                ],
                                                "instantiation": "<float>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    },
                                                    "stmt": "c_subroutine"
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "c_in_native_scalar"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    },
                                                    "stmt": "f_subroutine"
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    },
                                                    "stmt": "f_in_native_scalar"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "subroutine"
                                                    }
                                                },
                                                "value": {
                                                    "meta": {
                                                        "intent": "in"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->setValue<double>(\tvalue)",
                                                    "C_call_list": "value",
                                                    "C_name": "AA_example_nested_ExClass2_setValue_double",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t double value",
                                                    "C_return_type": "void",
                                                    "F_C_name": "c_ex_class2_set_value_double",
                                                    "stmt_name": "c_subroutine"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->setValue<double>(\tvalue)",
                                                    "C_call_list": "value",
                                                    "C_name": "AA_example_nested_ExClass2_setValue_double",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self,\t double value",
                                                    "C_return_type": "void",
                                                    "F_C_arguments": "self,\t value",
                                                    "F_C_call": "c_ex_class2_set_value_double",
                                                    "F_C_name": "c_ex_class2_set_value_double",
                                                    "F_C_subprogram": "subroutine",
                                                    "F_arg_c_call": "obj%cxxmem,\t value",
                                                    "F_arguments": "obj,\t value",
                                                    "F_subprogram": "subroutine",
                                                    "stmt_name": "f_subroutine"
                                                },
                                                "fmtl": {
                                                    "stmt": "lua_subroutine"
                                                }
                                            },
                                            "value": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "double",
                                                    "c_var": "value",
                                                    "cfi_type": "CFI_type_double",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "double",
                                                    "cxx_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_DOUBLE",
                                                    "stmt_name": "c_in_native_scalar"
                                                },
                                                "fmtf": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_type": "double",
                                                    "c_var": "value",
                                                    "cfi_type": "CFI_type_double",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "double",
                                                    "cxx_var": "value",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_DOUBLE",
                                                    "f_type": "real(C_DOUBLE)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "value",
                                                    "fc_var": "value",
                                                    "i_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_DOUBLE",
                                                    "stmt_name": "f_in_native_scalar"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "c_var_len": "Lvalue",
                                                    "cxx_member": ".",
                                                    "cxx_type": "double",
                                                    "cxx_var": "value",
                                                    "lua_var": "SH_Lua_value",
                                                    "pop_expr": "lua_tonumber(L, 1)",
                                                    "stmt": "lua_in_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "double",
                                                    "c_var": "value",
                                                    "ctor_expr": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "double",
                                                    "cxx_var": "value",
                                                    "data_var": "SHData_value",
                                                    "numpy_type": "NPY_DOUBLE",
                                                    "py_var": "SHPy_value",
                                                    "size_var": "SHSize_value",
                                                    "stmt": "py_in_native_scalar",
                                                    "value_var": "SHValue_value"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "CXX_template": "<double>",
                                            "C_name_api": "setValue",
                                            "F_name_api": "set_value",
                                            "F_name_function": "set_value_double",
                                            "F_name_generic": "set_value",
                                            "F_name_impl": "ex_class2_set_value_double",
                                            "PY_name_impl": "PP_setValue_double",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "setValue",
                                            "template_suffix": "_double"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "getValue  22 ****************************************",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "getValue",
                                                "params": []
                                            },
                                            "specifier": [
                                                "ValueType"
                                            ],
                                            "template_argument": "ValueType"
                                        },
                                        "cxx_template": {
                                            "ValueType": [
                                                "int",
                                                "double"
                                            ]
                                        },
                                        "decl": "template<typename ValueType> ValueType getValue()",
                                        "declgen": "ValueType getValue(void)",
                                        "have_template_args": true,
                                        "name": "getValue",
                                        "options": {},
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {},
                                        "zz_bind": {
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name_api": "getValue",
                                            "F_name_api": "get_value",
                                            "function_name": "getValue"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "getValue  28 ****************************************",
                                        "_generated": "cxx_template",
                                        "_generated_path": [
                                            "cxx_template"
                                        ],
                                        "_orig_node_index": 22,
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "getValue",
                                                "params": []
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "template_argument": "ValueType",
                                            "typemap_name": "int"
                                        },
                                        "decl": "template<typename ValueType> ValueType getValue()",
                                        "declgen": "int getValue(void)",
                                        "have_template_args": true,
                                        "name": "getValue",
                                        "options": {
                                            "F_create_generic": false
                                        },
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_native_scalar"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_native_scalar"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->getValue<int>(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_getValue_int",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "int",
                                                    "F_C_name": "c_ex_class2_get_value_int",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "int",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHC_rv",
                                                    "cxx_rv_decl": "int SHC_rv",
                                                    "cxx_type": "int",
                                                    "cxx_var": "SHC_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "c_function_native_scalar"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->getValue<int>(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_getValue_int",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "int",
                                                    "F_C_arguments": "self",
                                                    "F_C_call": "c_ex_class2_get_value_int",
                                                    "F_C_name": "c_ex_class2_get_value_int",
                                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                                    "F_C_subprogram": "function",
                                                    "F_arg_c_call": "obj%cxxmem",
                                                    "F_arguments": "obj",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "int",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_int",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHC_rv",
                                                    "cxx_rv_decl": "int SHC_rv",
                                                    "cxx_type": "int",
                                                    "cxx_var": "SHC_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_INT",
                                                    "f_type": "integer(C_INT)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt_name": "f_function_native_scalar"
                                                },
                                                "fmtl": {
                                                    "c_var": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "SHCXX_rv",
                                                    "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                                    "stmt": "lua_function_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "int",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": "NPY_INT",
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_native_scalar",
                                                    "value_var": "SHValue_rv"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "CXX_template": "<int>",
                                            "C_name_api": "getValue",
                                            "F_name_api": "get_value",
                                            "F_name_function": "get_value_int",
                                            "F_name_generic": "get_value",
                                            "F_name_impl": "ex_class2_get_value_int",
                                            "LUA_name": "getValue",
                                            "LUA_name_api": "getValue",
                                            "LUA_name_impl": "l_example_nested_ExClass2_getValue",
                                            "PY_name_impl": "PP_getValue_int",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "getValue",
                                            "template_suffix": "_int"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "getValue  29 ****************************************",
                                        "_generated": "cxx_template",
                                        "_generated_path": [
                                            "cxx_template"
                                        ],
                                        "_orig_node_index": 22,
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "getValue",
                                                "params": []
                                            },
                                            "specifier": [
                                                "double"
                                            ],
                                            "template_argument": "ValueType",
                                            "typemap_name": "double"
                                        },
                                        "decl": "template<typename ValueType> ValueType getValue()",
                                        "declgen": "double getValue(void)",
                                        "gen_headers_typedef": [
                                            "int",
                                            "double"
                                        ],
                                        "have_template_args": true,
                                        "name": "getValue",
                                        "options": {
                                            "F_create_generic": false
                                        },
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_bind": {
                                            "c": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "c_function_native_scalar"
                                                }
                                            },
                                            "f": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    },
                                                    "stmt": "f_function_native_scalar"
                                                }
                                            },
                                            "lua": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "py": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            },
                                            "share": {
                                                "+result": {
                                                    "meta": {
                                                        "intent": "function"
                                                    }
                                                }
                                            }
                                        },
                                        "zz_fmtargs": {
                                            "+result": {
                                                "fmtc": {
                                                    "C_call_function": "SH_this->getValue<double>(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_getValue_double",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "double",
                                                    "F_C_name": "c_ex_class2_get_value_double",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "double",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_double",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHC_rv",
                                                    "cxx_rv_decl": "double SHC_rv",
                                                    "cxx_type": "double",
                                                    "cxx_var": "SHC_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_DOUBLE",
                                                    "stmt_name": "c_function_native_scalar"
                                                },
                                                "fmtf": {
                                                    "C_call_function": "SH_this->getValue<double>(\t)",
                                                    "C_name": "AA_example_nested_ExClass2_getValue_double",
                                                    "C_prototype": "AA_example_nested_ExClass2 * self",
                                                    "C_return_type": "double",
                                                    "F_C_arguments": "self",
                                                    "F_C_call": "c_ex_class2_get_value_double",
                                                    "F_C_name": "c_ex_class2_get_value_double",
                                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                                    "F_C_subprogram": "function",
                                                    "F_arg_c_call": "obj%cxxmem",
                                                    "F_arguments": "obj",
                                                    "F_result_clause": "\fresult(SHT_rv)",
                                                    "F_subprogram": "function",
                                                    "c_const": "",
                                                    "c_get_value": "",
                                                    "c_type": "double",
                                                    "c_var": "SHC_rv",
                                                    "cfi_type": "CFI_type_double",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHC_rv",
                                                    "cxx_rv_decl": "double SHC_rv",
                                                    "cxx_type": "double",
                                                    "cxx_var": "SHC_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_DOUBLE",
                                                    "f_type": "real(C_DOUBLE)",
                                                    "f_type_module": "iso_c_binding",
                                                    "f_var": "SHT_rv",
                                                    "fc_var": "SHT_rv",
                                                    "i_var": "SHT_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_DOUBLE",
                                                    "stmt_name": "f_function_native_scalar"
                                                },
                                                "fmtl": {
                                                    "c_var": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_var": "SHCXX_rv",
                                                    "push_arg": "SHCXX_rv",
                                                    "push_expr": "lua_pushnumber(L, SHCXX_rv)",
                                                    "stmt": "lua_function_native_scalar"
                                                },
                                                "fmtpy": {
                                                    "c_deref": "",
                                                    "c_var": "SHCXX_rv",
                                                    "ctor_expr": "SHCXX_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "double",
                                                    "cxx_var": "SHCXX_rv",
                                                    "data_var": "SHData_rv",
                                                    "numpy_type": "NPY_DOUBLE",
                                                    "py_var": "SHTPy_rv",
                                                    "size_var": "SHSize_rv",
                                                    "stmt": "py_function_native_scalar",
                                                    "value_var": "SHValue_rv"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "CXX_template": "<double>",
                                            "C_name_api": "getValue",
                                            "F_name_api": "get_value",
                                            "F_name_function": "get_value_double",
                                            "F_name_generic": "get_value",
                                            "F_name_impl": "ex_class2_get_value_double",
                                            "PY_name_impl": "PP_getValue_double",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "getValue",
                                            "template_suffix": "_double"
                                        }
                                    }
                                ],
                                "name": "ExClass2",
                                "options": {},
                                "parse_keyword": "class",
                                "python": {
                                    "type": [
                                        "dealloc",
                                        "print",
                                        "compare",
                                        "getattr",
                                        "setattr",
                                        "getattro",
                                        "setattro",
                                        "repr",
                                        "hash",
                                        "call",
                                        "str",
                                        "init",
                                        "alloc",
                                        "new",
                                        "free",
                                        "del"
                                    ]
                                },
                                "scope": "example::nested::ExClass2::",
                                "typemap_name": "example::nested::ExClass2",
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtdict": {
                                    "CXX_this_call": "SH_this->",
                                    "C_header_filename": "wrapexample_nested_ExClass2.h",
                                    "C_impl_filename": "wrapexample_nested_ExClass2.cpp",
                                    "C_name_api": "ExClass2",
                                    "C_name_scope": "example_nested_ExClass2_",
                                    "C_type_name": "AA_example_nested_ExClass2",
                                    "F_derived_name": "ex_class2",
                                    "F_name_api": "ex_class2",
                                    "F_name_scope": "ex_class2_",
                                    "LUA_class_reg": "l_ExClass2_Reg",
                                    "LUA_ctor_name": "ExClass2",
                                    "LUA_metadata": "ExClass2.metatable",
                                    "LUA_name_api": "ExClass2",
                                    "LUA_this_call": "SH_this->self->",
                                    "LUA_userdata_member": "self",
                                    "LUA_userdata_type": "l_ExClass2_Type",
                                    "LUA_userdata_var": "SH_this",
                                    "PY_PyObject": "PP_ExClass2",
                                    "PY_PyTypeObject": "PP_ExClass2_Type",
                                    "PY_capsule_name": "PY_ExClass2_capsule_name",
                                    "PY_from_object_func": "PP_ExClass2_from_Object",
                                    "PY_this_call": "self->obj->",
                                    "PY_to_object_func": "PP_ExClass2_to_Object",
                                    "PY_to_object_idtor_func": "PP_ExClass2_to_Object_idtor",
                                    "PY_type_filename": "pyexample_nested_ExClass2type.cpp",
                                    "class_scope": "ExClass2::",
                                    "cxx_class": "ExClass2",
                                    "cxx_type": "ExClass2",
                                    "f_capsule_data_type": "AA_SHROUD_capsule_data",
                                    "f_helper_capsule_data_helper": "AA_SHROUD_capsule_data",
                                    "file_scope": "example_nested_ExClass2"
                                }
                            }
                        ],
                        "functions": [
                            {
                                "<FUNCTION>": "local_function1  32 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "local_function1",
                                        "params": [],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void local_function1()",
                                "declgen": "void local_function1(void)",
                                "name": "local_function1",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::local_function1(\t)",
                                            "C_name": "AA_example_nested_local_function1",
                                            "C_prototype": "void",
                                            "C_return_type": "void",
                                            "F_C_name": "c_local_function1",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::local_function1(\t)",
                                            "C_name": "AA_example_nested_local_function1",
                                            "C_prototype": "void",
                                            "C_return_type": "void",
                                            "F_C_arguments": "",
                                            "F_C_call": "c_local_function1",
                                            "F_C_name": "local_function1",
                                            "F_C_subprogram": "subroutine",
                                            "F_arguments": "",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_subroutine"
                                        },
                                        "fmtl": {
                                            "stmt": "lua_subroutine"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "local_function1",
                                    "F_name_api": "local_function1",
                                    "F_name_function": "local_function1",
                                    "F_name_generic": "local_function1",
                                    "F_name_impl": "local_function1",
                                    "LUA_name": "local_function1",
                                    "LUA_name_api": "local_function1",
                                    "LUA_name_impl": "l_example_nested_local_function1",
                                    "PY_name_impl": "PP_local_function1",
                                    "function_name": "local_function1"
                                }
                            },
                            {
                                "<FUNCTION>": "isNameValid  33 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "isNameValid",
                                        "params": [
                                            {
                                                "const": true,
                                                "declarator": {
                                                    "name": "name",
                                                    "pointer": [
                                                        {
                                                            "ptr": "&"
                                                        }
                                                    ],
                                                    "typemap_name": "std::string"
                                                },
                                                "specifier": [
                                                    "std::string"
                                                ],
                                                "typemap_name": "std::string"
                                            }
                                        ],
                                        "typemap_name": "bool"
                                    },
                                    "specifier": [
                                        "bool"
                                    ],
                                    "typemap_name": "bool"
                                },
                                "decl": "bool isNameValid(const std::string& name)",
                                "declgen": "bool isNameValid(const std::string & name)",
                                "helpers": {
                                    "c": [
                                        "char_len_trim"
                                    ]
                                },
                                "name": "isNameValid",
                                "options": {},
                                "splicer": {
                                    "c": [
                                        "return name != NULL;"
                                    ],
                                    "c_buf": [
                                        "return name != NULL;"
                                    ],
                                    "f": [
                                        "rv = name .ne. \" \""
                                    ]
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            },
                                            "stmt": "c_function_bool_scalar"
                                        },
                                        "name": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_string_&"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            },
                                            "stmt": "f_function_bool_scalar"
                                        },
                                        "name": {
                                            "meta": {
                                                "api": "buf",
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_string_&_buf"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            }
                                        },
                                        "name": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            }
                                        },
                                        "name": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            }
                                        },
                                        "name": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::isNameValid(\tSHCXX_name)",
                                            "C_call_list": "SHCXX_name",
                                            "C_name": "AA_example_nested_isNameValid",
                                            "C_prototype": "const char * name",
                                            "C_return_type": "bool",
                                            "F_C_arguments": "name",
                                            "F_C_name": "c_is_name_valid",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "c_const": "",
                                            "c_get_value": "",
                                            "c_type": "bool",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_Bool",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHC_rv",
                                            "cxx_rv_decl": "bool SHC_rv",
                                            "cxx_type": "bool",
                                            "cxx_var": "SHC_rv",
                                            "f_intent": "OUT",
                                            "f_kind": "C_BOOL",
                                            "f_type": "logical",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "SHT_rv",
                                            "i_var": "SHT_rv",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_BOOL",
                                            "stmt_name": "c_function_bool_scalar"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::isNameValid(\tSHCXX_name)",
                                            "C_call_list": "SHCXX_name",
                                            "C_name": "AA_example_nested_isNameValid_bufferify",
                                            "C_prototype": "char *name,\t int SHT_name_len",
                                            "C_return_type": "bool",
                                            "F_C_arguments": "name,\t SHT_name_len",
                                            "F_C_call": "c_is_name_valid_bufferify",
                                            "F_C_name": "c_is_name_valid_bufferify",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_arg_c_call": "name,\t SHT_name_len",
                                            "F_arguments": "name",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "c_const": "",
                                            "c_get_value": "",
                                            "c_type": "bool",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_Bool",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHC_rv",
                                            "cxx_rv_decl": "bool SHC_rv",
                                            "cxx_type": "bool",
                                            "cxx_var": "SHC_rv",
                                            "f_c_suffix": "_bufferify",
                                            "f_intent": "OUT",
                                            "f_kind": "C_BOOL",
                                            "f_type": "logical",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "SHT_rv",
                                            "fc_var": "SHT_rv",
                                            "i_var": "SHT_rv",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_BOOL",
                                            "stmt_name": "f_function_bool_scalar"
                                        },
                                        "fmtl": {
                                            "c_var": "SHCXX_rv",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_var": "SHCXX_rv",
                                            "push_arg": "SHCXX_rv",
                                            "push_expr": "lua_pushboolean(L, SHCXX_rv)",
                                            "stmt": "lua_function_bool_scalar"
                                        },
                                        "fmtpy": {
                                            "PyTypeObject": "PyBool_Type",
                                            "c_deref": "",
                                            "c_var": "SHCXX_rv",
                                            "ctor_expr": "SHCXX_rv",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHCXX_rv",
                                            "cxx_type": "bool",
                                            "cxx_var": "SHCXX_rv",
                                            "data_var": "SHData_rv",
                                            "numpy_type": "NPY_BOOL",
                                            "py_var": "SHTPy_rv",
                                            "size_var": "SHSize_rv",
                                            "stmt": "py_function_bool_scalar",
                                            "value_var": "SHValue_rv"
                                        }
                                    },
                                    "name": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "char",
                                            "c_var": "name",
                                            "cfi_type": "CFI_type_other",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SHCXX_name",
                                            "f_intent": "IN",
                                            "f_kind": "C_CHAR",
                                            "f_type": "character(*)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "name",
                                            "i_var": "name",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt_name": "c_in_string_&"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                                            "c_member": "->",
                                            "c_type": "char",
                                            "c_var": "name",
                                            "c_var_len": "SHT_name_len",
                                            "cfi_type": "CFI_type_other",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SHCXX_name",
                                            "f_intent": "IN",
                                            "f_kind": "C_CHAR",
                                            "f_type": "character(*)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "name",
                                            "f_var_len": "SHT_name_len",
                                            "fc_var": "name",
                                            "i_var": "name",
                                            "i_var_len": "SHT_name_len",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt_name": "f_in_string_&_buf"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "name",
                                            "c_var_len": "Lname",
                                            "cxx_member": ".",
                                            "cxx_type": "std::string",
                                            "cxx_var": "name",
                                            "lua_var": "SH_Lua_name",
                                            "pop_expr": "lua_tostring(L, 1)",
                                            "stmt": "lua_in_string_&"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "const ",
                                            "c_deref": "",
                                            "c_type": "char",
                                            "c_var": "name",
                                            "ctor_expr": "SH_name.data(),\t SH_name.size()",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SH_name",
                                            "data_var": "SHData_name",
                                            "numpy_type": null,
                                            "py_var": "SHPy_name",
                                            "size_var": "SHSize_name",
                                            "stmt": "py_in_string_&",
                                            "value_var": "SHValue_name"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "isNameValid",
                                    "F_name_api": "is_name_valid",
                                    "F_name_function": "is_name_valid",
                                    "F_name_generic": "is_name_valid",
                                    "F_name_impl": "is_name_valid",
                                    "LUA_name": "isNameValid",
                                    "LUA_name_api": "isNameValid",
                                    "LUA_name_impl": "l_example_nested_isNameValid",
                                    "PY_name_impl": "PP_isNameValid",
                                    "function_name": "isNameValid"
                                }
                            },
                            {
                                "<FUNCTION>": "isInitialized  34 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "isInitialized",
                                        "params": [],
                                        "typemap_name": "bool"
                                    },
                                    "specifier": [
                                        "bool"
                                    ],
                                    "typemap_name": "bool"
                                },
                                "decl": "bool isInitialized()",
                                "declgen": "bool isInitialized(void)",
                                "name": "isInitialized",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            },
                                            "stmt": "c_function_bool_scalar"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            },
                                            "stmt": "f_function_bool_scalar"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::isInitialized(\t)",
                                            "C_name": "AA_example_nested_isInitialized",
                                            "C_prototype": "void",
                                            "C_return_type": "bool",
                                            "F_C_name": "c_is_initialized",
                                            "c_const": "",
                                            "c_get_value": "",
                                            "c_type": "bool",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_Bool",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHC_rv",
                                            "cxx_rv_decl": "bool SHC_rv",
                                            "cxx_type": "bool",
                                            "cxx_var": "SHC_rv",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_BOOL",
                                            "stmt_name": "c_function_bool_scalar"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::isInitialized(\t)",
                                            "C_name": "AA_example_nested_isInitialized",
                                            "C_prototype": "void",
                                            "C_return_type": "bool",
                                            "F_C_arguments": "",
                                            "F_C_call": "c_is_initialized",
                                            "F_C_name": "c_is_initialized",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_arguments": "",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "c_const": "",
                                            "c_get_value": "",
                                            "c_type": "bool",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_Bool",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHC_rv",
                                            "cxx_rv_decl": "bool SHC_rv",
                                            "cxx_type": "bool",
                                            "cxx_var": "SHC_rv",
                                            "f_intent": "OUT",
                                            "f_kind": "C_BOOL",
                                            "f_type": "logical",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "SHT_rv",
                                            "fc_var": "SHT_rv",
                                            "i_var": "SHT_rv",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_BOOL",
                                            "stmt_name": "f_function_bool_scalar"
                                        },
                                        "fmtl": {
                                            "c_var": "SHCXX_rv",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_var": "SHCXX_rv",
                                            "push_arg": "SHCXX_rv",
                                            "push_expr": "lua_pushboolean(L, SHCXX_rv)",
                                            "stmt": "lua_function_bool_scalar"
                                        },
                                        "fmtpy": {
                                            "PyTypeObject": "PyBool_Type",
                                            "c_deref": "",
                                            "c_var": "SHCXX_rv",
                                            "ctor_expr": "SHCXX_rv",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHCXX_rv",
                                            "cxx_type": "bool",
                                            "cxx_var": "SHCXX_rv",
                                            "data_var": "SHData_rv",
                                            "numpy_type": "NPY_BOOL",
                                            "py_var": "SHTPy_rv",
                                            "size_var": "SHSize_rv",
                                            "stmt": "py_function_bool_scalar",
                                            "value_var": "SHValue_rv"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "isInitialized",
                                    "F_name_api": "is_initialized",
                                    "F_name_function": "is_initialized",
                                    "F_name_generic": "is_initialized",
                                    "F_name_impl": "is_initialized",
                                    "LUA_name": "isInitialized",
                                    "LUA_name_api": "isInitialized",
                                    "LUA_name_impl": "l_example_nested_isInitialized",
                                    "PY_name_impl": "PP_isInitialized",
                                    "function_name": "isInitialized"
                                }
                            },
                            {
                                "<FUNCTION>": "test_names  35 ****************************************",
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "test_names",
                                        "params": [
                                            {
                                                "const": true,
                                                "declarator": {
                                                    "name": "name",
                                                    "pointer": [
                                                        {
                                                            "ptr": "&"
                                                        }
                                                    ],
                                                    "typemap_name": "std::string"
                                                },
                                                "specifier": [
                                                    "std::string"
                                                ],
                                                "typemap_name": "std::string"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void test_names(const std::string &name)",
                                "declgen": "void test_names(const std::string & name)",
                                "helpers": {
                                    "c": [
                                        "char_len_trim"
                                    ]
                                },
                                "name": "test_names",
                                "options": {},
                                "user_fmt": {
                                    "function_suffix": ""
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        },
                                        "name": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_string_&"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        },
                                        "name": {
                                            "meta": {
                                                "api": "buf",
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_string_&_buf"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "name": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "name": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "name": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::test_names(\tSHCXX_name)",
                                            "C_call_list": "SHCXX_name",
                                            "C_name": "AA_example_nested_test_names",
                                            "C_prototype": "const char * name",
                                            "C_return_type": "void",
                                            "F_C_arguments": "name",
                                            "F_C_name": "c_test_names",
                                            "F_C_subprogram": "subroutine",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::test_names(\tSHCXX_name)",
                                            "C_call_list": "SHCXX_name",
                                            "C_name": "AA_example_nested_test_names_bufferify",
                                            "C_prototype": "char *name,\t int SHT_name_len",
                                            "C_return_type": "void",
                                            "F_C_arguments": "name,\t SHT_name_len",
                                            "F_C_call": "c_test_names_bufferify",
                                            "F_C_name": "c_test_names_bufferify",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "name,\t SHT_name_len",
                                            "F_arguments": "name",
                                            "F_subprogram": "subroutine",
                                            "f_c_suffix": "_bufferify",
                                            "stmt_name": "f_subroutine"
                                        },
                                        "fmtl": {
                                            "stmt": "lua_subroutine"
                                        }
                                    },
                                    "name": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "char",
                                            "c_var": "name",
                                            "cfi_type": "CFI_type_other",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SHCXX_name",
                                            "f_intent": "IN",
                                            "f_kind": "C_CHAR",
                                            "f_type": "character(*)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "name",
                                            "i_var": "name",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt_name": "c_in_string_&"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                                            "c_member": "->",
                                            "c_type": "char",
                                            "c_var": "name",
                                            "c_var_len": "SHT_name_len",
                                            "cfi_type": "CFI_type_other",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SHCXX_name",
                                            "f_intent": "IN",
                                            "f_kind": "C_CHAR",
                                            "f_type": "character(*)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "name",
                                            "f_var_len": "SHT_name_len",
                                            "fc_var": "name",
                                            "i_var": "name",
                                            "i_var_len": "SHT_name_len",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt_name": "f_in_string_&_buf"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "name",
                                            "c_var_len": "Lname",
                                            "cxx_member": ".",
                                            "cxx_type": "std::string",
                                            "cxx_var": "name",
                                            "lua_var": "SH_Lua_name",
                                            "pop_expr": "lua_tostring(L, 1)",
                                            "stmt": "lua_in_string_&"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "const ",
                                            "c_deref": "",
                                            "c_type": "char",
                                            "c_var": "name",
                                            "ctor_expr": "SH_name.data(),\t SH_name.size()",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SH_name",
                                            "data_var": "SHData_name",
                                            "numpy_type": null,
                                            "py_var": "SHPy_name",
                                            "size_var": "SHSize_name",
                                            "stmt": "py_in_string_&",
                                            "value_var": "SHValue_name"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "test_names",
                                    "F_name_api": "test_names",
                                    "F_name_function": "test_names",
                                    "F_name_generic": "test_names",
                                    "F_name_impl": "test_names",
                                    "LUA_name": "test_names",
                                    "LUA_name_api": "test_names",
                                    "LUA_name_impl": "l_example_nested_test_names",
                                    "PY_name_impl": "PP_test_names",
                                    "function_name": "test_names",
                                    "function_suffix": ""
                                }
                            },
                            {
                                "<FUNCTION>": "test_names  36 ****************************************",
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "test_names",
                                        "params": [
                                            {
                                                "const": true,
                                                "declarator": {
                                                    "name": "name",
                                                    "pointer": [
                                                        {
                                                            "ptr": "&"
                                                        }
                                                    ],
                                                    "typemap_name": "std::string"
                                                },
                                                "specifier": [
                                                    "std::string"
                                                ],
                                                "typemap_name": "std::string"
                                            },
                                            {
                                                "declarator": {
                                                    "name": "flag",
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void test_names(const std::string &name, int flag)",
                                "declgen": "void test_names(const std::string & name, int flag)",
                                "helpers": {
                                    "c": [
                                        "char_len_trim"
                                    ]
                                },
                                "name": "test_names",
                                "options": {},
                                "user_fmt": {
                                    "function_suffix": "_flag"
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        },
                                        "flag": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        },
                                        "name": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_string_&"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        },
                                        "flag": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        },
                                        "name": {
                                            "meta": {
                                                "api": "buf",
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_string_&_buf"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "flag": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "name": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "flag": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "name": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "flag": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "name": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::test_names(\tSHCXX_name,\t flag)",
                                            "C_call_list": "SHCXX_name,\t flag",
                                            "C_name": "AA_example_nested_test_names_flag",
                                            "C_prototype": "const char * name,\t int flag",
                                            "C_return_type": "void",
                                            "F_C_arguments": "name,\t flag",
                                            "F_C_name": "c_test_names_flag",
                                            "F_C_subprogram": "subroutine",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::test_names(\tSHCXX_name,\t flag)",
                                            "C_call_list": "SHCXX_name,\t flag",
                                            "C_name": "AA_example_nested_test_names_flag_bufferify",
                                            "C_prototype": "char *name,\t int SHT_name_len,\t int flag",
                                            "C_return_type": "void",
                                            "F_C_arguments": "name,\t SHT_name_len,\t flag",
                                            "F_C_call": "c_test_names_flag_bufferify",
                                            "F_C_name": "c_test_names_flag_bufferify",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "name,\t SHT_name_len,\t flag",
                                            "F_arguments": "name,\t flag",
                                            "F_subprogram": "subroutine",
                                            "f_c_suffix": "_bufferify",
                                            "stmt_name": "f_subroutine"
                                        },
                                        "fmtl": {
                                            "stmt": "lua_subroutine"
                                        }
                                    },
                                    "flag": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "flag",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&flag",
                                            "cxx_type": "int",
                                            "cxx_var": "flag",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "flag",
                                            "i_var": "flag",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "flag",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&flag",
                                            "cxx_type": "int",
                                            "cxx_var": "flag",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "flag",
                                            "fc_var": "flag",
                                            "i_var": "flag",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 2,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "flag",
                                            "c_var_len": "Lflag",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "flag",
                                            "lua_var": "SH_Lua_flag",
                                            "pop_expr": "lua_tointeger(L, 2)",
                                            "stmt": "lua_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "flag",
                                            "ctor_expr": "flag",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&flag",
                                            "cxx_type": "int",
                                            "cxx_var": "flag",
                                            "data_var": "SHData_flag",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_flag",
                                            "size_var": "SHSize_flag",
                                            "stmt": "py_in_native_scalar",
                                            "value_var": "SHValue_flag"
                                        }
                                    },
                                    "name": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "char",
                                            "c_var": "name",
                                            "cfi_type": "CFI_type_other",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SHCXX_name",
                                            "f_intent": "IN",
                                            "f_kind": "C_CHAR",
                                            "f_type": "character(*)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "name",
                                            "i_var": "name",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt_name": "c_in_string_&"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                                            "c_member": "->",
                                            "c_type": "char",
                                            "c_var": "name",
                                            "c_var_len": "SHT_name_len",
                                            "cfi_type": "CFI_type_other",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SHCXX_name",
                                            "f_intent": "IN",
                                            "f_kind": "C_CHAR",
                                            "f_type": "character(*)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "name",
                                            "f_var_len": "SHT_name_len",
                                            "fc_var": "name",
                                            "i_var": "name",
                                            "i_var_len": "SHT_name_len",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt_name": "f_in_string_&_buf"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "name",
                                            "c_var_len": "Lname",
                                            "cxx_member": ".",
                                            "cxx_type": "std::string",
                                            "cxx_var": "name",
                                            "lua_var": "SH_Lua_name",
                                            "pop_expr": "lua_tostring(L, 1)",
                                            "stmt": "lua_in_string_&"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "const ",
                                            "c_deref": "",
                                            "c_type": "char",
                                            "c_var": "name",
                                            "ctor_expr": "SH_name.data(),\t SH_name.size()",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SH_name",
                                            "data_var": "SHData_name",
                                            "numpy_type": null,
                                            "py_var": "SHPy_name",
                                            "size_var": "SHSize_name",
                                            "stmt": "py_in_string_&",
                                            "value_var": "SHValue_name"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "test_names",
                                    "F_name_api": "test_names",
                                    "F_name_function": "test_names_flag",
                                    "F_name_generic": "test_names",
                                    "F_name_impl": "test_names_flag",
                                    "PY_name_impl": "PP_test_names_flag",
                                    "function_name": "test_names",
                                    "function_suffix": "_flag"
                                }
                            },
                            {
                                "<FUNCTION>": "testoptional  49 ****************************************",
                                "_generated": "has_default_arg",
                                "_generated_path": [
                                    "has_default_arg"
                                ],
                                "_orig_node_index": 37,
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "testoptional",
                                        "params": [],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void testoptional(int i = 1, long j=2)",
                                "declgen": "void testoptional(void)",
                                "name": "testoptional",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::testoptional(\t)",
                                            "C_name": "AA_example_nested_testoptional_0",
                                            "C_prototype": "void",
                                            "C_return_type": "void",
                                            "F_C_name": "c_testoptional_0",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::testoptional(\t)",
                                            "C_name": "AA_example_nested_testoptional_0",
                                            "C_prototype": "void",
                                            "C_return_type": "void",
                                            "F_C_arguments": "",
                                            "F_C_call": "c_testoptional_0",
                                            "F_C_name": "c_testoptional_0",
                                            "F_C_subprogram": "subroutine",
                                            "F_arguments": "",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_subroutine"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "testoptional",
                                    "F_name_api": "testoptional",
                                    "F_name_function": "testoptional_0",
                                    "F_name_generic": "testoptional",
                                    "F_name_impl": "testoptional_0",
                                    "function_name": "testoptional",
                                    "function_suffix": "_0"
                                }
                            },
                            {
                                "<FUNCTION>": "testoptional  50 ****************************************",
                                "_generated": "has_default_arg",
                                "_generated_path": [
                                    "has_default_arg"
                                ],
                                "_orig_node_index": 37,
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "testoptional",
                                        "params": [
                                            {
                                                "declarator": {
                                                    "init": 1,
                                                    "name": "i",
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void testoptional(int i = 1, long j=2)",
                                "declgen": "void testoptional(int i=1)",
                                "name": "testoptional",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        },
                                        "i": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        },
                                        "i": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "i": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::testoptional(\ti)",
                                            "C_call_list": "i",
                                            "C_name": "AA_example_nested_testoptional_1",
                                            "C_prototype": "int i",
                                            "C_return_type": "void",
                                            "F_C_name": "c_testoptional_1",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::testoptional(\ti)",
                                            "C_call_list": "i",
                                            "C_name": "AA_example_nested_testoptional_1",
                                            "C_prototype": "int i",
                                            "C_return_type": "void",
                                            "F_C_arguments": "i",
                                            "F_C_call": "c_testoptional_1",
                                            "F_C_name": "c_testoptional_1",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "i",
                                            "F_arguments": "i",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_subroutine"
                                        }
                                    },
                                    "i": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "i",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&i",
                                            "cxx_type": "int",
                                            "cxx_var": "i",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "i",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&i",
                                            "cxx_type": "int",
                                            "cxx_var": "i",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "i",
                                            "fc_var": "i",
                                            "i_var": "i",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_in_native_scalar"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "testoptional",
                                    "F_name_api": "testoptional",
                                    "F_name_function": "testoptional_1",
                                    "F_name_generic": "testoptional",
                                    "F_name_impl": "testoptional_1",
                                    "function_name": "testoptional",
                                    "function_suffix": "_1"
                                }
                            },
                            {
                                "<FUNCTION>": "testoptional  37 ****************************************",
                                "_default_funcs": [
                                    49,
                                    50
                                ],
                                "_has_default_arg": true,
                                "_nargs": [
                                    0,
                                    2
                                ],
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "testoptional",
                                        "params": [
                                            {
                                                "declarator": {
                                                    "init": 1,
                                                    "name": "i",
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "init": 2,
                                                    "name": "j",
                                                    "typemap_name": "long"
                                                },
                                                "specifier": [
                                                    "long"
                                                ],
                                                "typemap_name": "long"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void testoptional(int i = 1, long j=2)",
                                "declgen": "void testoptional(int i=1, long j=2)",
                                "name": "testoptional",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        },
                                        "i": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        },
                                        "j": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        },
                                        "i": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        },
                                        "j": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "i": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "j": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "i": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "j": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "i": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "j": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::testoptional(\ti,\t j)",
                                            "C_call_list": "i,\t j",
                                            "C_name": "AA_example_nested_testoptional_2",
                                            "C_prototype": "int i,\t long j",
                                            "C_return_type": "void",
                                            "F_C_name": "c_testoptional_2",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::testoptional(\ti,\t j)",
                                            "C_call_list": "i,\t j",
                                            "C_name": "AA_example_nested_testoptional_2",
                                            "C_prototype": "int i,\t long j",
                                            "C_return_type": "void",
                                            "F_C_arguments": "i,\t j",
                                            "F_C_call": "c_testoptional_2",
                                            "F_C_name": "c_testoptional_2",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "i,\t j",
                                            "F_arguments": "i,\t j",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_subroutine"
                                        },
                                        "fmtl": {
                                            "stmt": "lua_subroutine"
                                        }
                                    },
                                    "i": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "i",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&i",
                                            "cxx_type": "int",
                                            "cxx_var": "i",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "i",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&i",
                                            "cxx_type": "int",
                                            "cxx_var": "i",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "i",
                                            "fc_var": "i",
                                            "i_var": "i",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "i",
                                            "c_var_len": "Li",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "i",
                                            "lua_var": "SH_Lua_i",
                                            "pop_expr": "lua_tointeger(L, 1)",
                                            "stmt": "lua_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "i",
                                            "ctor_expr": "i",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&i",
                                            "cxx_type": "int",
                                            "cxx_var": "i",
                                            "data_var": "SHData_i",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_i",
                                            "size_var": "SHSize_i",
                                            "stmt": "py_in_native_scalar",
                                            "value_var": "SHValue_i"
                                        }
                                    },
                                    "j": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "long",
                                            "c_var": "j",
                                            "cfi_type": "CFI_type_long",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&j",
                                            "cxx_type": "long",
                                            "cxx_var": "j",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_LONG",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "long",
                                            "c_var": "j",
                                            "cfi_type": "CFI_type_long",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&j",
                                            "cxx_type": "long",
                                            "cxx_var": "j",
                                            "f_intent": "IN",
                                            "f_kind": "C_LONG",
                                            "f_type": "integer(C_LONG)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "j",
                                            "fc_var": "j",
                                            "i_var": "j",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_LONG",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 2,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "j",
                                            "c_var_len": "Lj",
                                            "cxx_member": ".",
                                            "cxx_type": "long",
                                            "cxx_var": "j",
                                            "lua_var": "SH_Lua_j",
                                            "pop_expr": "lua_tointeger(L, 2)",
                                            "stmt": "lua_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "long",
                                            "c_var": "j",
                                            "ctor_expr": "j",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&j",
                                            "cxx_type": "long",
                                            "cxx_var": "j",
                                            "data_var": "SHData_j",
                                            "numpy_type": "NPY_LONG",
                                            "py_var": "SHPy_j",
                                            "size_var": "SHSize_j",
                                            "stmt": "py_in_native_scalar",
                                            "value_var": "SHValue_j"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "testoptional",
                                    "F_name_api": "testoptional",
                                    "F_name_function": "testoptional_2",
                                    "F_name_generic": "testoptional",
                                    "F_name_impl": "testoptional_2",
                                    "LUA_name": "testoptional",
                                    "LUA_name_api": "testoptional",
                                    "LUA_name_impl": "l_example_nested_testoptional",
                                    "PY_cleanup_decref": "Py_XDECREF",
                                    "PY_name_impl": "PP_testoptional_2",
                                    "function_name": "testoptional",
                                    "function_suffix": "_2"
                                }
                            },
                            {
                                "<FUNCTION>": "test_size_t  38 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "test_size_t",
                                        "params": [],
                                        "typemap_name": "size_t"
                                    },
                                    "specifier": [
                                        "size_t"
                                    ],
                                    "typemap_name": "size_t"
                                },
                                "decl": "size_t test_size_t()",
                                "declgen": "size_t test_size_t(void)",
                                "name": "test_size_t",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            },
                                            "stmt": "c_function_native_scalar"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            },
                                            "stmt": "f_function_native_scalar"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::test_size_t(\t)",
                                            "C_name": "AA_example_nested_test_size_t",
                                            "C_prototype": "void",
                                            "C_return_type": "size_t",
                                            "F_C_name": "c_test_size_t",
                                            "c_const": "",
                                            "c_get_value": "",
                                            "c_type": "size_t",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_size_t",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHC_rv",
                                            "cxx_rv_decl": "size_t SHC_rv",
                                            "cxx_type": "size_t",
                                            "cxx_var": "SHC_rv",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_SIZE_T",
                                            "stmt_name": "c_function_native_scalar"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::test_size_t(\t)",
                                            "C_name": "AA_example_nested_test_size_t",
                                            "C_prototype": "void",
                                            "C_return_type": "size_t",
                                            "F_C_arguments": "",
                                            "F_C_call": "c_test_size_t",
                                            "F_C_name": "test_size_t",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_arguments": "",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "c_const": "",
                                            "c_get_value": "",
                                            "c_type": "size_t",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_size_t",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHC_rv",
                                            "cxx_rv_decl": "size_t SHC_rv",
                                            "cxx_type": "size_t",
                                            "cxx_var": "SHC_rv",
                                            "f_intent": "OUT",
                                            "f_kind": "C_SIZE_T",
                                            "f_type": "integer(C_SIZE_T)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "SHT_rv",
                                            "fc_var": "SHT_rv",
                                            "i_var": "SHT_rv",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_SIZE_T",
                                            "stmt_name": "f_function_native_scalar"
                                        },
                                        "fmtl": {
                                            "c_var": "SHCXX_rv",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_var": "SHCXX_rv",
                                            "push_arg": "SHCXX_rv",
                                            "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                            "stmt": "lua_function_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_deref": "",
                                            "c_var": "SHCXX_rv",
                                            "ctor_expr": "SHCXX_rv",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHCXX_rv",
                                            "cxx_type": "size_t",
                                            "cxx_var": "SHCXX_rv",
                                            "data_var": "SHData_rv",
                                            "numpy_type": null,
                                            "py_var": "SHTPy_rv",
                                            "size_var": "SHSize_rv",
                                            "stmt": "py_function_native_scalar",
                                            "value_var": "SHValue_rv"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "test_size_t",
                                    "F_name_api": "test_size_t",
                                    "F_name_function": "test_size_t",
                                    "F_name_generic": "test_size_t",
                                    "F_name_impl": "test_size_t",
                                    "LUA_name": "test_size_t",
                                    "LUA_name_api": "test_size_t",
                                    "LUA_name_impl": "l_example_nested_test_size_t",
                                    "PY_name_impl": "PP_test_size_t",
                                    "function_name": "test_size_t"
                                }
                            },
                            {
                                "<FUNCTION>": "testmpi  39 ****************************************",
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "testmpi",
                                        "params": [
                                            {
                                                "declarator": {
                                                    "name": "comm",
                                                    "typemap_name": "MPI_Comm"
                                                },
                                                "specifier": [
                                                    "MPI_Comm"
                                                ],
                                                "typemap_name": "MPI_Comm"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void testmpi(MPI_Comm comm)",
                                "declgen": "void testmpi(MPI_Comm comm)",
                                "name": "testmpi",
                                "options": {},
                                "user_fmt": {
                                    "function_suffix": "_mpi"
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        },
                                        "comm": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_unknown_scalar"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        },
                                        "comm": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_unknown_scalar"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "comm": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "comm": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "comm": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::testmpi(\tSHCXX_comm)",
                                            "C_call_list": "SHCXX_comm",
                                            "C_name": "AA_example_nested_testmpi_mpi",
                                            "C_prototype": "MPI_Fint comm",
                                            "C_return_type": "void",
                                            "F_C_name": "c_testmpi_mpi",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::testmpi(\tSHCXX_comm)",
                                            "C_call_list": "SHCXX_comm",
                                            "C_name": "AA_example_nested_testmpi_mpi",
                                            "C_prototype": "MPI_Fint comm",
                                            "C_return_type": "void",
                                            "F_C_arguments": "comm",
                                            "F_C_call": "c_testmpi_mpi",
                                            "F_C_name": "c_testmpi_mpi",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "comm",
                                            "F_arguments": "comm",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_subroutine"
                                        },
                                        "fmtl": {
                                            "stmt": "lua_subroutine"
                                        }
                                    },
                                    "comm": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "MPI_Fint",
                                            "c_var": "comm",
                                            "cfi_type": "CFI_type_other",
                                            "cxx_addr": "&",
                                            "cxx_decl": "MPI_Comm SHCXX_comm",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHCXX_comm",
                                            "cxx_type": "MPI_Comm",
                                            "cxx_val": "MPI_Comm_f2c(comm)",
                                            "cxx_var": "SHCXX_comm",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt_name": "c_in_unknown_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "MPI_Fint",
                                            "c_var": "comm",
                                            "cfi_type": "CFI_type_other",
                                            "cxx_addr": "&",
                                            "cxx_decl": "MPI_Comm SHCXX_comm",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHCXX_comm",
                                            "cxx_type": "MPI_Comm",
                                            "cxx_val": "MPI_Comm_f2c(comm)",
                                            "cxx_var": "SHCXX_comm",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "comm",
                                            "fc_var": "comm",
                                            "i_var": "comm",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt_name": "f_in_unknown_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "POP",
                                            "c_var_len": "Lcomm",
                                            "cxx_member": ".",
                                            "cxx_type": "MPI_Comm",
                                            "cxx_var": "comm",
                                            "lua_var": "SH_Lua_comm",
                                            "pop_expr": "MPI_Comm_f2c(POP)",
                                            "stmt": "lua_in_unknown_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "MPI_Fint",
                                            "c_var": "comm",
                                            "ctor_expr": "comm",
                                            "cxx_addr": "&",
                                            "cxx_decl": "MPI_Comm SH_comm",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&comm",
                                            "cxx_type": "MPI_Comm",
                                            "cxx_val": "MPI_Comm_f2c(comm)",
                                            "cxx_var": "SH_comm",
                                            "data_var": "SHData_comm",
                                            "numpy_type": null,
                                            "py_var": "SHPy_comm",
                                            "size_var": "SHSize_comm",
                                            "stmt": "py_in_unknown_scalar",
                                            "value_var": "SHValue_comm"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "testmpi",
                                    "F_name_api": "testmpi",
                                    "F_name_function": "testmpi_mpi",
                                    "F_name_generic": "testmpi",
                                    "F_name_impl": "testmpi_mpi",
                                    "LUA_name": "testmpi",
                                    "LUA_name_api": "testmpi",
                                    "LUA_name_impl": "l_example_nested_testmpi",
                                    "PY_name_impl": "PP_testmpi_mpi",
                                    "function_name": "testmpi",
                                    "function_suffix": "_mpi"
                                }
                            },
                            {
                                "<FUNCTION>": "testmpi  40 ****************************************",
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "testmpi",
                                        "params": [],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void testmpi()",
                                "declgen": "void testmpi(void)",
                                "name": "testmpi",
                                "options": {},
                                "user_fmt": {
                                    "function_suffix": "_serial"
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::testmpi(\t)",
                                            "C_name": "AA_example_nested_testmpi_serial",
                                            "C_prototype": "void",
                                            "C_return_type": "void",
                                            "F_C_name": "c_testmpi_serial",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::testmpi(\t)",
                                            "C_name": "AA_example_nested_testmpi_serial",
                                            "C_prototype": "void",
                                            "C_return_type": "void",
                                            "F_C_arguments": "",
                                            "F_C_call": "c_testmpi_serial",
                                            "F_C_name": "c_testmpi_serial",
                                            "F_C_subprogram": "subroutine",
                                            "F_arguments": "",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_subroutine"
                                        },
                                        "fmtl": {
                                            "stmt": "lua_subroutine"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "testmpi",
                                    "F_name_api": "testmpi",
                                    "F_name_function": "testmpi_serial",
                                    "F_name_generic": "testmpi",
                                    "F_name_impl": "testmpi_serial",
                                    "PY_name_impl": "PP_testmpi_serial",
                                    "function_name": "testmpi",
                                    "function_suffix": "_serial"
                                }
                            },
                            {
                                "<FUNCTION>": "FuncPtr1  41 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "FuncPtr1",
                                        "params": [
                                            {
                                                "declarator": {
                                                    "func": {
                                                        "name": "get",
                                                        "pointer": [
                                                            {
                                                                "ptr": "*"
                                                            }
                                                        ],
                                                        "typemap_name": "void"
                                                    },
                                                    "name": "get",
                                                    "params": [],
                                                    "typemap_name": "void"
                                                },
                                                "specifier": [
                                                    "void"
                                                ],
                                                "typemap_name": "void"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void FuncPtr1(void (*get)());",
                                "declgen": "void FuncPtr1(void ( * get)(void))",
                                "doxygen": {
                                    "brief": "subroutine"
                                },
                                "name": "FuncPtr1",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_void_scalar"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_void_scalar"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::FuncPtr1(\tget)",
                                            "C_call_list": "get",
                                            "C_name": "AA_example_nested_FuncPtr1",
                                            "C_prototype": "void ( * get)(\tvoid)",
                                            "C_return_type": "void",
                                            "F_C_name": "c_func_ptr1",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::FuncPtr1(\tget)",
                                            "C_call_list": "get",
                                            "C_name": "AA_example_nested_FuncPtr1",
                                            "C_prototype": "void ( * get)(\tvoid)",
                                            "C_return_type": "void",
                                            "F_C_arguments": "get",
                                            "F_C_call": "c_func_ptr1",
                                            "F_C_name": "func_ptr1",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "get",
                                            "F_arguments": "get",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_subroutine"
                                        },
                                        "fmtl": {
                                            "stmt": "lua_subroutine"
                                        }
                                    },
                                    "get": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "void",
                                            "c_var": "get",
                                            "cfi_type": "CFI_type_intptr_t",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "void",
                                            "cxx_var": "get",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_CPTR",
                                            "stmt_name": "c_in_void_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "void",
                                            "c_var": "get",
                                            "cfi_type": "CFI_type_intptr_t",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "void",
                                            "cxx_var": "get",
                                            "f_intent": "IN",
                                            "f_type": "type(C_PTR)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "get",
                                            "fc_var": "get",
                                            "i_var": "get",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_CPTR",
                                            "stmt_name": "f_in_void_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "get",
                                            "c_var_len": "Lget",
                                            "cxx_member": ".",
                                            "cxx_type": "void",
                                            "cxx_var": "get",
                                            "lua_var": "SH_Lua_get",
                                            "pop_expr": "POP",
                                            "stmt": "lua_in_void_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "void",
                                            "c_var": "get",
                                            "ctor_expr": "get",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "void",
                                            "cxx_var": "get",
                                            "data_var": "SHData_get",
                                            "numpy_type": null,
                                            "py_var": "SHPy_get",
                                            "size_var": "SHSize_get",
                                            "value_var": "SHValue_get"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "FuncPtr1",
                                    "F_name_api": "func_ptr1",
                                    "F_name_function": "func_ptr1",
                                    "F_name_generic": "func_ptr1",
                                    "F_name_impl": "func_ptr1",
                                    "LUA_name": "FuncPtr1",
                                    "LUA_name_api": "FuncPtr1",
                                    "LUA_name_impl": "l_example_nested_FuncPtr1",
                                    "PY_name_impl": "PP_FuncPtr1",
                                    "function_name": "FuncPtr1"
                                }
                            },
                            {
                                "<FUNCTION>": "FuncPtr2  42 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "FuncPtr2",
                                        "params": [
                                            {
                                                "declarator": {
                                                    "func": {
                                                        "name": "get",
                                                        "pointer": [
                                                            {
                                                                "ptr": "*"
                                                            }
                                                        ],
                                                        "typemap_name": "double"
                                                    },
                                                    "name": "get",
                                                    "params": [],
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ],
                                                    "typemap_name": "double"
                                                },
                                                "specifier": [
                                                    "double"
                                                ],
                                                "typemap_name": "double"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void FuncPtr2(double * (*get)());",
                                "declgen": "void FuncPtr2(double * ( * get)(void))",
                                "doxygen": {
                                    "brief": "return a pointer"
                                },
                                "name": "FuncPtr2",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_*"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_*"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::FuncPtr2(\tget)",
                                            "C_call_list": "get",
                                            "C_name": "AA_example_nested_FuncPtr2",
                                            "C_prototype": "double * ( * get)(\tvoid)",
                                            "C_return_type": "void",
                                            "F_C_name": "c_func_ptr2",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::FuncPtr2(\tget)",
                                            "C_call_list": "get",
                                            "C_name": "AA_example_nested_FuncPtr2",
                                            "C_prototype": "double * ( * get)(\tvoid)",
                                            "C_return_type": "void",
                                            "F_C_arguments": "get",
                                            "F_C_call": "c_func_ptr2",
                                            "F_C_name": "func_ptr2",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "get",
                                            "F_arguments": "get",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_subroutine"
                                        },
                                        "fmtl": {
                                            "stmt": "lua_subroutine"
                                        }
                                    },
                                    "get": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "double",
                                            "c_var": "get",
                                            "cfi_type": "CFI_type_double",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "get",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt_name": "c_in_native_*"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "double",
                                            "c_var": "get",
                                            "cfi_type": "CFI_type_double",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "get",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "f_intent": "IN",
                                            "f_kind": "C_DOUBLE",
                                            "f_type": "real(C_DOUBLE)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "get",
                                            "fc_var": "get",
                                            "i_var": "get",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt_name": "f_in_native_*"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "get",
                                            "c_var_len": "Lget",
                                            "cxx_member": "->",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "lua_var": "SH_Lua_get",
                                            "pop_expr": "lua_tonumber(L, 1)",
                                            "stmt": "lua_in_native_*"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "double",
                                            "c_var": "get",
                                            "ctor_expr": "*get",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "get",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "data_var": "SHData_get",
                                            "numpy_type": "NPY_DOUBLE",
                                            "py_var": "SHPy_get",
                                            "size_var": "SHSize_get",
                                            "value_var": "SHValue_get"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "FuncPtr2",
                                    "F_name_api": "func_ptr2",
                                    "F_name_function": "func_ptr2",
                                    "F_name_generic": "func_ptr2",
                                    "F_name_impl": "func_ptr2",
                                    "LUA_name": "FuncPtr2",
                                    "LUA_name_api": "FuncPtr2",
                                    "LUA_name_impl": "l_example_nested_FuncPtr2",
                                    "PY_name_impl": "PP_FuncPtr2",
                                    "function_name": "FuncPtr2"
                                }
                            },
                            {
                                "<FUNCTION>": "FuncPtr3  43 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "FuncPtr3",
                                        "params": [
                                            {
                                                "declarator": {
                                                    "func": {
                                                        "name": "get",
                                                        "pointer": [
                                                            {
                                                                "ptr": "*"
                                                            }
                                                        ],
                                                        "typemap_name": "double"
                                                    },
                                                    "name": "get",
                                                    "params": [
                                                        {
                                                            "declarator": {
                                                                "attrs": {
                                                                    "value": true
                                                                },
                                                                "name": "i",
                                                                "typemap_name": "int"
                                                            },
                                                            "specifier": [
                                                                "int"
                                                            ],
                                                            "typemap_name": "int"
                                                        },
                                                        {
                                                            "declarator": {
                                                                "attrs": {
                                                                    "value": true
                                                                },
                                                                "typemap_name": "int"
                                                            },
                                                            "specifier": [
                                                                "int"
                                                            ],
                                                            "typemap_name": "int"
                                                        }
                                                    ],
                                                    "typemap_name": "double"
                                                },
                                                "specifier": [
                                                    "double"
                                                ],
                                                "typemap_name": "double"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void FuncPtr3(double (*get)(int i, int));",
                                "declgen": "void FuncPtr3(double ( * get)(int i, int))",
                                "doxygen": {
                                    "brief": "abstract argument"
                                },
                                "name": "FuncPtr3",
                                "options": {
                                    "F_force_wrapper": true
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::FuncPtr3(\tget)",
                                            "C_call_list": "get",
                                            "C_name": "AA_example_nested_FuncPtr3",
                                            "C_prototype": "double ( * get)(\tint i,\t int)",
                                            "C_return_type": "void",
                                            "F_C_name": "c_func_ptr3",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::FuncPtr3(\tget)",
                                            "C_call_list": "get",
                                            "C_name": "AA_example_nested_FuncPtr3",
                                            "C_prototype": "double ( * get)(\tint i,\t int)",
                                            "C_return_type": "void",
                                            "F_C_arguments": "get",
                                            "F_C_call": "c_func_ptr3",
                                            "F_C_name": "c_func_ptr3",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "get",
                                            "F_arguments": "get",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_subroutine"
                                        },
                                        "fmtl": {
                                            "stmt": "lua_subroutine"
                                        }
                                    },
                                    "get": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "double",
                                            "c_var": "get",
                                            "cfi_type": "CFI_type_double",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "double",
                                            "c_var": "get",
                                            "cfi_type": "CFI_type_double",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "f_intent": "IN",
                                            "f_kind": "C_DOUBLE",
                                            "f_type": "real(C_DOUBLE)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "get",
                                            "fc_var": "get",
                                            "i_var": "get",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "get",
                                            "c_var_len": "Lget",
                                            "cxx_member": ".",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "lua_var": "SH_Lua_get",
                                            "pop_expr": "lua_tonumber(L, 1)",
                                            "stmt": "lua_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "double",
                                            "c_var": "get",
                                            "ctor_expr": "get",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "data_var": "SHData_get",
                                            "numpy_type": "NPY_DOUBLE",
                                            "py_var": "SHPy_get",
                                            "size_var": "SHSize_get",
                                            "value_var": "SHValue_get"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "FuncPtr3",
                                    "F_name_api": "func_ptr3",
                                    "F_name_function": "func_ptr3",
                                    "F_name_generic": "func_ptr3",
                                    "F_name_impl": "func_ptr3",
                                    "LUA_name": "FuncPtr3",
                                    "LUA_name_api": "FuncPtr3",
                                    "LUA_name_impl": "l_example_nested_FuncPtr3",
                                    "PY_name_impl": "PP_FuncPtr3",
                                    "function_name": "FuncPtr3"
                                }
                            },
                            {
                                "<FUNCTION>": "FuncPtr4  44 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "FuncPtr4",
                                        "params": [
                                            {
                                                "declarator": {
                                                    "func": {
                                                        "name": "get",
                                                        "pointer": [
                                                            {
                                                                "ptr": "*"
                                                            }
                                                        ],
                                                        "typemap_name": "double"
                                                    },
                                                    "name": "get",
                                                    "params": [
                                                        {
                                                            "declarator": {
                                                                "attrs": {
                                                                    "value": true
                                                                },
                                                                "typemap_name": "double"
                                                            },
                                                            "specifier": [
                                                                "double"
                                                            ],
                                                            "typemap_name": "double"
                                                        },
                                                        {
                                                            "declarator": {
                                                                "attrs": {
                                                                    "value": true
                                                                },
                                                                "typemap_name": "int"
                                                            },
                                                            "specifier": [
                                                                "int"
                                                            ],
                                                            "typemap_name": "int"
                                                        }
                                                    ],
                                                    "typemap_name": "double"
                                                },
                                                "specifier": [
                                                    "double"
                                                ],
                                                "typemap_name": "double"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void FuncPtr4(double (*get)(double, int));",
                                "declgen": "void FuncPtr4(double ( * get)(double, int))",
                                "doxygen": {
                                    "brief": "abstract argument"
                                },
                                "name": "FuncPtr4",
                                "options": {
                                    "F_abstract_interface_argument_template": "XX{index}arg",
                                    "F_abstract_interface_subprogram_template": "custom_funptr",
                                    "F_force_wrapper": true,
                                    "wrap_lua": false,
                                    "wrap_python": false
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::FuncPtr4(\tget)",
                                            "C_call_list": "get",
                                            "C_name": "AA_example_nested_FuncPtr4",
                                            "C_prototype": "double ( * get)(\tdouble,\t int)",
                                            "C_return_type": "void",
                                            "F_C_name": "c_func_ptr4",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::FuncPtr4(\tget)",
                                            "C_call_list": "get",
                                            "C_name": "AA_example_nested_FuncPtr4",
                                            "C_prototype": "double ( * get)(\tdouble,\t int)",
                                            "C_return_type": "void",
                                            "F_C_arguments": "get",
                                            "F_C_call": "c_func_ptr4",
                                            "F_C_name": "c_func_ptr4",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "get",
                                            "F_arguments": "get",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_subroutine"
                                        }
                                    },
                                    "get": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "double",
                                            "c_var": "get",
                                            "cfi_type": "CFI_type_double",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "double",
                                            "c_var": "get",
                                            "cfi_type": "CFI_type_double",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "f_intent": "IN",
                                            "f_kind": "C_DOUBLE",
                                            "f_type": "real(C_DOUBLE)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "get",
                                            "fc_var": "get",
                                            "i_var": "get",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt_name": "f_in_native_scalar"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "FuncPtr4",
                                    "F_name_api": "func_ptr4",
                                    "F_name_function": "func_ptr4",
                                    "F_name_generic": "func_ptr4",
                                    "F_name_impl": "func_ptr4",
                                    "function_name": "FuncPtr4"
                                }
                            },
                            {
                                "<FUNCTION>": "FuncPtr5  45 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "FuncPtr5",
                                        "params": [
                                            {
                                                "declarator": {
                                                    "func": {
                                                        "name": "get",
                                                        "pointer": [
                                                            {
                                                                "ptr": "*"
                                                            }
                                                        ],
                                                        "typemap_name": "void"
                                                    },
                                                    "name": "get",
                                                    "params": [
                                                        {
                                                            "declarator": {
                                                                "attrs": {
                                                                    "value": true
                                                                },
                                                                "name": "verylongname1",
                                                                "typemap_name": "int"
                                                            },
                                                            "specifier": [
                                                                "int"
                                                            ],
                                                            "typemap_name": "int"
                                                        },
                                                        {
                                                            "declarator": {
                                                                "attrs": {
                                                                    "value": true
                                                                },
                                                                "name": "verylongname2",
                                                                "typemap_name": "int"
                                                            },
                                                            "specifier": [
                                                                "int"
                                                            ],
                                                            "typemap_name": "int"
                                                        },
                                                        {
                                                            "declarator": {
                                                                "attrs": {
                                                                    "value": true
                                                                },
                                                                "name": "verylongname3",
                                                                "typemap_name": "int"
                                                            },
                                                            "specifier": [
                                                                "int"
                                                            ],
                                                            "typemap_name": "int"
                                                        },
                                                        {
                                                            "declarator": {
                                                                "attrs": {
                                                                    "value": true
                                                                },
                                                                "name": "verylongname4",
                                                                "typemap_name": "int"
                                                            },
                                                            "specifier": [
                                                                "int"
                                                            ],
                                                            "typemap_name": "int"
                                                        },
                                                        {
                                                            "declarator": {
                                                                "attrs": {
                                                                    "value": true
                                                                },
                                                                "name": "verylongname5",
                                                                "typemap_name": "int"
                                                            },
                                                            "specifier": [
                                                                "int"
                                                            ],
                                                            "typemap_name": "int"
                                                        },
                                                        {
                                                            "declarator": {
                                                                "attrs": {
                                                                    "value": true
                                                                },
                                                                "name": "verylongname6",
                                                                "typemap_name": "int"
                                                            },
                                                            "specifier": [
                                                                "int"
                                                            ],
                                                            "typemap_name": "int"
                                                        },
                                                        {
                                                            "declarator": {
                                                                "attrs": {
                                                                    "value": true
                                                                },
                                                                "name": "verylongname7",
                                                                "typemap_name": "int"
                                                            },
                                                            "specifier": [
                                                                "int"
                                                            ],
                                                            "typemap_name": "int"
                                                        },
                                                        {
                                                            "declarator": {
                                                                "attrs": {
                                                                    "value": true
                                                                },
                                                                "name": "verylongname8",
                                                                "typemap_name": "int"
                                                            },
                                                            "specifier": [
                                                                "int"
                                                            ],
                                                            "typemap_name": "int"
                                                        },
                                                        {
                                                            "declarator": {
                                                                "attrs": {
                                                                    "value": true
                                                                },
                                                                "name": "verylongname9",
                                                                "typemap_name": "int"
                                                            },
                                                            "specifier": [
                                                                "int"
                                                            ],
                                                            "typemap_name": "int"
                                                        },
                                                        {
                                                            "declarator": {
                                                                "attrs": {
                                                                    "value": true
                                                                },
                                                                "name": "verylongname10",
                                                                "typemap_name": "int"
                                                            },
                                                            "specifier": [
                                                                "int"
                                                            ],
                                                            "typemap_name": "int"
                                                        }
                                                    ],
                                                    "typemap_name": "void"
                                                },
                                                "specifier": [
                                                    "void"
                                                ],
                                                "typemap_name": "void"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void FuncPtr5(void (*get)(int verylongname1, int verylongname2, int verylongname3, int verylongname4, int verylongname5, int verylongname6, int verylongname7, int verylongname8, int verylongname9, int verylongname10))",
                                "declgen": "void FuncPtr5(void ( * get)(int verylongname1, int verylongname2, int verylongname3, int verylongname4, int verylongname5, int verylongname6, int verylongname7, int verylongname8, int verylongname9, int verylongname10))",
                                "name": "FuncPtr5",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_void_scalar"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_void_scalar"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "get": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::FuncPtr5(\tget)",
                                            "C_call_list": "get",
                                            "C_name": "AA_example_nested_FuncPtr5",
                                            "C_prototype": "void ( * get)(\tint verylongname1,\t int verylongname2,\t int verylongname3,\t int verylongname4,\t int verylongname5,\t int verylongname6,\t int verylongname7,\t int verylongname8,\t int verylongname9,\t int verylongname10)",
                                            "C_return_type": "void",
                                            "F_C_name": "c_func_ptr5",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::FuncPtr5(\tget)",
                                            "C_call_list": "get",
                                            "C_name": "AA_example_nested_FuncPtr5",
                                            "C_prototype": "void ( * get)(\tint verylongname1,\t int verylongname2,\t int verylongname3,\t int verylongname4,\t int verylongname5,\t int verylongname6,\t int verylongname7,\t int verylongname8,\t int verylongname9,\t int verylongname10)",
                                            "C_return_type": "void",
                                            "F_C_arguments": "get",
                                            "F_C_call": "c_func_ptr5",
                                            "F_C_name": "func_ptr5",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "get",
                                            "F_arguments": "get",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_subroutine"
                                        },
                                        "fmtl": {
                                            "stmt": "lua_subroutine"
                                        }
                                    },
                                    "get": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "void",
                                            "c_var": "get",
                                            "cfi_type": "CFI_type_intptr_t",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "void",
                                            "cxx_var": "get",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_CPTR",
                                            "stmt_name": "c_in_void_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "void",
                                            "c_var": "get",
                                            "cfi_type": "CFI_type_intptr_t",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "void",
                                            "cxx_var": "get",
                                            "f_intent": "IN",
                                            "f_type": "type(C_PTR)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "get",
                                            "fc_var": "get",
                                            "i_var": "get",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_CPTR",
                                            "stmt_name": "f_in_void_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "get",
                                            "c_var_len": "Lget",
                                            "cxx_member": ".",
                                            "cxx_type": "void",
                                            "cxx_var": "get",
                                            "lua_var": "SH_Lua_get",
                                            "pop_expr": "POP",
                                            "stmt": "lua_in_void_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "void",
                                            "c_var": "get",
                                            "ctor_expr": "get",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "void",
                                            "cxx_var": "get",
                                            "data_var": "SHData_get",
                                            "numpy_type": null,
                                            "py_var": "SHPy_get",
                                            "size_var": "SHSize_get",
                                            "value_var": "SHValue_get"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "FuncPtr5",
                                    "F_name_api": "func_ptr5",
                                    "F_name_function": "func_ptr5",
                                    "F_name_generic": "func_ptr5",
                                    "F_name_impl": "func_ptr5",
                                    "LUA_name": "FuncPtr5",
                                    "LUA_name_api": "FuncPtr5",
                                    "LUA_name_impl": "l_example_nested_FuncPtr5",
                                    "PY_name_impl": "PP_FuncPtr5",
                                    "function_name": "FuncPtr5"
                                }
                            },
                            {
                                "<FUNCTION>": "verylongfunctionname1  46 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "verylongfunctionname1",
                                        "params": [
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "intent": "inout"
                                                    },
                                                    "name": "verylongname1",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "intent": "inout"
                                                    },
                                                    "name": "verylongname2",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "intent": "inout"
                                                    },
                                                    "name": "verylongname3",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "intent": "inout"
                                                    },
                                                    "name": "verylongname4",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "intent": "inout"
                                                    },
                                                    "name": "verylongname5",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "intent": "inout"
                                                    },
                                                    "name": "verylongname6",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "intent": "inout"
                                                    },
                                                    "name": "verylongname7",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "intent": "inout"
                                                    },
                                                    "name": "verylongname8",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "intent": "inout"
                                                    },
                                                    "name": "verylongname9",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "intent": "inout"
                                                    },
                                                    "name": "verylongname10",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void verylongfunctionname1(int *verylongname1 +intent(inout), int *verylongname2 +intent(inout), int *verylongname3 +intent(inout), int *verylongname4 +intent(inout), int *verylongname5 +intent(inout), int *verylongname6 +intent(inout), int *verylongname7 +intent(inout), int *verylongname8 +intent(inout), int *verylongname9 +intent(inout), int *verylongname10 +intent(inout))",
                                "declgen": "void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))",
                                "name": "verylongfunctionname1",
                                "options": {
                                    "F_force_wrapper": true
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        },
                                        "verylongname1": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "c_inout_native_*"
                                        },
                                        "verylongname10": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "c_inout_native_*"
                                        },
                                        "verylongname2": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "c_inout_native_*"
                                        },
                                        "verylongname3": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "c_inout_native_*"
                                        },
                                        "verylongname4": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "c_inout_native_*"
                                        },
                                        "verylongname5": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "c_inout_native_*"
                                        },
                                        "verylongname6": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "c_inout_native_*"
                                        },
                                        "verylongname7": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "c_inout_native_*"
                                        },
                                        "verylongname8": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "c_inout_native_*"
                                        },
                                        "verylongname9": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "c_inout_native_*"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        },
                                        "verylongname1": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "f_inout_native_*"
                                        },
                                        "verylongname10": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "f_inout_native_*"
                                        },
                                        "verylongname2": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "f_inout_native_*"
                                        },
                                        "verylongname3": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "f_inout_native_*"
                                        },
                                        "verylongname4": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "f_inout_native_*"
                                        },
                                        "verylongname5": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "f_inout_native_*"
                                        },
                                        "verylongname6": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "f_inout_native_*"
                                        },
                                        "verylongname7": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "f_inout_native_*"
                                        },
                                        "verylongname8": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "f_inout_native_*"
                                        },
                                        "verylongname9": {
                                            "meta": {
                                                "intent": "inout"
                                            },
                                            "stmt": "f_inout_native_*"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "verylongname1": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname10": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname2": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname3": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname4": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname5": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname6": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname7": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname8": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname9": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "verylongname1": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname10": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname2": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname3": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname4": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname5": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname6": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname7": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname8": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname9": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "verylongname1": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname10": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname2": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname3": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname4": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname5": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname6": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname7": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname8": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        },
                                        "verylongname9": {
                                            "meta": {
                                                "intent": "inout"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::verylongfunctionname1(\tverylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10)",
                                            "C_call_list": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                            "C_name": "AA_example_nested_verylongfunctionname1",
                                            "C_prototype": "int * verylongname1,\t int * verylongname2,\t int * verylongname3,\t int * verylongname4,\t int * verylongname5,\t int * verylongname6,\t int * verylongname7,\t int * verylongname8,\t int * verylongname9,\t int * verylongname10",
                                            "C_return_type": "void",
                                            "F_C_name": "c_verylongfunctionname1",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::verylongfunctionname1(\tverylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10)",
                                            "C_call_list": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                            "C_name": "AA_example_nested_verylongfunctionname1",
                                            "C_prototype": "int * verylongname1,\t int * verylongname2,\t int * verylongname3,\t int * verylongname4,\t int * verylongname5,\t int * verylongname6,\t int * verylongname7,\t int * verylongname8,\t int * verylongname9,\t int * verylongname10",
                                            "C_return_type": "void",
                                            "F_C_arguments": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                            "F_C_call": "c_verylongfunctionname1",
                                            "F_C_name": "c_verylongfunctionname1",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                            "F_arguments": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_subroutine"
                                        },
                                        "fmtl": {
                                            "stmt": "lua_subroutine"
                                        }
                                    },
                                    "verylongname1": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname1",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname1",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname1",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_inout_native_*"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname1",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname1",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname1",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname1",
                                            "fc_var": "verylongname1",
                                            "i_var": "verylongname1",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_inout_native_*"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname1",
                                            "c_var_len": "Lverylongname1",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname1",
                                            "lua_var": "SH_Lua_verylongname1",
                                            "pop_expr": "lua_tointeger(L, 1)",
                                            "stmt": "lua_inout_native_*"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname1",
                                            "ctor_expr": "verylongname1",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname1",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname1",
                                            "data_var": "SHData_verylongname1",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname1",
                                            "size_var": "SHSize_verylongname1",
                                            "stmt": "py_inout_native_*",
                                            "value_var": "SHValue_verylongname1"
                                        }
                                    },
                                    "verylongname10": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname10",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname10",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname10",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_inout_native_*"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname10",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname10",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname10",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname10",
                                            "fc_var": "verylongname10",
                                            "i_var": "verylongname10",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_inout_native_*"
                                        },
                                        "fmtl": {
                                            "LUA_index": 10,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname10",
                                            "c_var_len": "Lverylongname10",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname10",
                                            "lua_var": "SH_Lua_verylongname10",
                                            "pop_expr": "lua_tointeger(L, 10)",
                                            "stmt": "lua_inout_native_*"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname10",
                                            "ctor_expr": "verylongname10",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname10",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname10",
                                            "data_var": "SHData_verylongname10",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname10",
                                            "size_var": "SHSize_verylongname10",
                                            "stmt": "py_inout_native_*",
                                            "value_var": "SHValue_verylongname10"
                                        }
                                    },
                                    "verylongname2": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname2",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname2",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname2",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_inout_native_*"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname2",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname2",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname2",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname2",
                                            "fc_var": "verylongname2",
                                            "i_var": "verylongname2",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_inout_native_*"
                                        },
                                        "fmtl": {
                                            "LUA_index": 2,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname2",
                                            "c_var_len": "Lverylongname2",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname2",
                                            "lua_var": "SH_Lua_verylongname2",
                                            "pop_expr": "lua_tointeger(L, 2)",
                                            "stmt": "lua_inout_native_*"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname2",
                                            "ctor_expr": "verylongname2",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname2",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname2",
                                            "data_var": "SHData_verylongname2",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname2",
                                            "size_var": "SHSize_verylongname2",
                                            "stmt": "py_inout_native_*",
                                            "value_var": "SHValue_verylongname2"
                                        }
                                    },
                                    "verylongname3": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname3",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname3",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname3",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_inout_native_*"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname3",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname3",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname3",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname3",
                                            "fc_var": "verylongname3",
                                            "i_var": "verylongname3",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_inout_native_*"
                                        },
                                        "fmtl": {
                                            "LUA_index": 3,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname3",
                                            "c_var_len": "Lverylongname3",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname3",
                                            "lua_var": "SH_Lua_verylongname3",
                                            "pop_expr": "lua_tointeger(L, 3)",
                                            "stmt": "lua_inout_native_*"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname3",
                                            "ctor_expr": "verylongname3",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname3",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname3",
                                            "data_var": "SHData_verylongname3",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname3",
                                            "size_var": "SHSize_verylongname3",
                                            "stmt": "py_inout_native_*",
                                            "value_var": "SHValue_verylongname3"
                                        }
                                    },
                                    "verylongname4": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname4",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname4",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname4",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_inout_native_*"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname4",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname4",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname4",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname4",
                                            "fc_var": "verylongname4",
                                            "i_var": "verylongname4",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_inout_native_*"
                                        },
                                        "fmtl": {
                                            "LUA_index": 4,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname4",
                                            "c_var_len": "Lverylongname4",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname4",
                                            "lua_var": "SH_Lua_verylongname4",
                                            "pop_expr": "lua_tointeger(L, 4)",
                                            "stmt": "lua_inout_native_*"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname4",
                                            "ctor_expr": "verylongname4",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname4",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname4",
                                            "data_var": "SHData_verylongname4",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname4",
                                            "size_var": "SHSize_verylongname4",
                                            "stmt": "py_inout_native_*",
                                            "value_var": "SHValue_verylongname4"
                                        }
                                    },
                                    "verylongname5": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname5",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname5",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname5",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_inout_native_*"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname5",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname5",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname5",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname5",
                                            "fc_var": "verylongname5",
                                            "i_var": "verylongname5",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_inout_native_*"
                                        },
                                        "fmtl": {
                                            "LUA_index": 5,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname5",
                                            "c_var_len": "Lverylongname5",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname5",
                                            "lua_var": "SH_Lua_verylongname5",
                                            "pop_expr": "lua_tointeger(L, 5)",
                                            "stmt": "lua_inout_native_*"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname5",
                                            "ctor_expr": "verylongname5",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname5",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname5",
                                            "data_var": "SHData_verylongname5",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname5",
                                            "size_var": "SHSize_verylongname5",
                                            "stmt": "py_inout_native_*",
                                            "value_var": "SHValue_verylongname5"
                                        }
                                    },
                                    "verylongname6": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname6",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname6",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname6",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_inout_native_*"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname6",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname6",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname6",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname6",
                                            "fc_var": "verylongname6",
                                            "i_var": "verylongname6",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_inout_native_*"
                                        },
                                        "fmtl": {
                                            "LUA_index": 6,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname6",
                                            "c_var_len": "Lverylongname6",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname6",
                                            "lua_var": "SH_Lua_verylongname6",
                                            "pop_expr": "lua_tointeger(L, 6)",
                                            "stmt": "lua_inout_native_*"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname6",
                                            "ctor_expr": "verylongname6",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname6",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname6",
                                            "data_var": "SHData_verylongname6",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname6",
                                            "size_var": "SHSize_verylongname6",
                                            "stmt": "py_inout_native_*",
                                            "value_var": "SHValue_verylongname6"
                                        }
                                    },
                                    "verylongname7": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname7",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname7",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname7",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_inout_native_*"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname7",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname7",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname7",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname7",
                                            "fc_var": "verylongname7",
                                            "i_var": "verylongname7",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_inout_native_*"
                                        },
                                        "fmtl": {
                                            "LUA_index": 7,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname7",
                                            "c_var_len": "Lverylongname7",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname7",
                                            "lua_var": "SH_Lua_verylongname7",
                                            "pop_expr": "lua_tointeger(L, 7)",
                                            "stmt": "lua_inout_native_*"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname7",
                                            "ctor_expr": "verylongname7",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname7",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname7",
                                            "data_var": "SHData_verylongname7",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname7",
                                            "size_var": "SHSize_verylongname7",
                                            "stmt": "py_inout_native_*",
                                            "value_var": "SHValue_verylongname7"
                                        }
                                    },
                                    "verylongname8": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname8",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname8",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname8",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_inout_native_*"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname8",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname8",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname8",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname8",
                                            "fc_var": "verylongname8",
                                            "i_var": "verylongname8",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_inout_native_*"
                                        },
                                        "fmtl": {
                                            "LUA_index": 8,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname8",
                                            "c_var_len": "Lverylongname8",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname8",
                                            "lua_var": "SH_Lua_verylongname8",
                                            "pop_expr": "lua_tointeger(L, 8)",
                                            "stmt": "lua_inout_native_*"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname8",
                                            "ctor_expr": "verylongname8",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname8",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname8",
                                            "data_var": "SHData_verylongname8",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname8",
                                            "size_var": "SHSize_verylongname8",
                                            "stmt": "py_inout_native_*",
                                            "value_var": "SHValue_verylongname8"
                                        }
                                    },
                                    "verylongname9": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname9",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname9",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname9",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_inout_native_*"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "verylongname9",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname9",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname9",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname9",
                                            "fc_var": "verylongname9",
                                            "i_var": "verylongname9",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_inout_native_*"
                                        },
                                        "fmtl": {
                                            "LUA_index": 9,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname9",
                                            "c_var_len": "Lverylongname9",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname9",
                                            "lua_var": "SH_Lua_verylongname9",
                                            "pop_expr": "lua_tointeger(L, 9)",
                                            "stmt": "lua_inout_native_*"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname9",
                                            "ctor_expr": "verylongname9",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname9",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname9",
                                            "data_var": "SHData_verylongname9",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname9",
                                            "size_var": "SHSize_verylongname9",
                                            "stmt": "py_inout_native_*",
                                            "value_var": "SHValue_verylongname9"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "verylongfunctionname1",
                                    "F_name_api": "verylongfunctionname1",
                                    "F_name_function": "verylongfunctionname1",
                                    "F_name_generic": "verylongfunctionname1",
                                    "F_name_impl": "verylongfunctionname1",
                                    "LUA_name": "verylongfunctionname1",
                                    "LUA_name_api": "verylongfunctionname1",
                                    "LUA_name_impl": "l_example_nested_verylongfunctionname1",
                                    "PY_name_impl": "PP_verylongfunctionname1",
                                    "function_name": "verylongfunctionname1"
                                }
                            },
                            {
                                "<FUNCTION>": "verylongfunctionname2  47 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "verylongfunctionname2",
                                        "params": [
                                            {
                                                "declarator": {
                                                    "name": "verylongname1",
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "name": "verylongname2",
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "name": "verylongname3",
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "name": "verylongname4",
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "name": "verylongname5",
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "name": "verylongname6",
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "name": "verylongname7",
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "name": "verylongname8",
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "name": "verylongname9",
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            },
                                            {
                                                "declarator": {
                                                    "name": "verylongname10",
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            }
                                        ],
                                        "typemap_name": "int"
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                },
                                "decl": "int verylongfunctionname2(int verylongname1, int verylongname2, int verylongname3, int verylongname4, int verylongname5, int verylongname6, int verylongname7, int verylongname8, int verylongname9, int verylongname10)",
                                "declgen": "int verylongfunctionname2(int verylongname1, int verylongname2, int verylongname3, int verylongname4, int verylongname5, int verylongname6, int verylongname7, int verylongname8, int verylongname9, int verylongname10)",
                                "name": "verylongfunctionname2",
                                "options": {
                                    "C_line_length": 0,
                                    "F_force_wrapper": true,
                                    "F_line_length": 0
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            },
                                            "stmt": "c_function_native_scalar"
                                        },
                                        "verylongname1": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        },
                                        "verylongname10": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        },
                                        "verylongname2": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        },
                                        "verylongname3": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        },
                                        "verylongname4": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        },
                                        "verylongname5": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        },
                                        "verylongname6": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        },
                                        "verylongname7": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        },
                                        "verylongname8": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        },
                                        "verylongname9": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            },
                                            "stmt": "f_function_native_scalar"
                                        },
                                        "verylongname1": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        },
                                        "verylongname10": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        },
                                        "verylongname2": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        },
                                        "verylongname3": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        },
                                        "verylongname4": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        },
                                        "verylongname5": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        },
                                        "verylongname6": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        },
                                        "verylongname7": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        },
                                        "verylongname8": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        },
                                        "verylongname9": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            }
                                        },
                                        "verylongname1": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname10": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname2": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname3": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname4": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname5": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname6": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname7": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname8": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname9": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            }
                                        },
                                        "verylongname1": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname10": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname2": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname3": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname4": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname5": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname6": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname7": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname8": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname9": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            }
                                        },
                                        "verylongname1": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname10": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname2": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname3": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname4": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname5": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname6": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname7": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname8": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "verylongname9": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::verylongfunctionname2(\tverylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10)",
                                            "C_call_list": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                            "C_name": "AA_example_nested_verylongfunctionname2",
                                            "C_prototype": "int verylongname1,\t int verylongname2,\t int verylongname3,\t int verylongname4,\t int verylongname5,\t int verylongname6,\t int verylongname7,\t int verylongname8,\t int verylongname9,\t int verylongname10",
                                            "C_return_type": "int",
                                            "F_C_name": "c_verylongfunctionname2",
                                            "c_const": "",
                                            "c_get_value": "",
                                            "c_type": "int",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHC_rv",
                                            "cxx_rv_decl": "int SHC_rv",
                                            "cxx_type": "int",
                                            "cxx_var": "SHC_rv",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_function_native_scalar"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::verylongfunctionname2(\tverylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10)",
                                            "C_call_list": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                            "C_name": "AA_example_nested_verylongfunctionname2",
                                            "C_prototype": "int verylongname1,\t int verylongname2,\t int verylongname3,\t int verylongname4,\t int verylongname5,\t int verylongname6,\t int verylongname7,\t int verylongname8,\t int verylongname9,\t int verylongname10",
                                            "C_return_type": "int",
                                            "F_C_arguments": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                            "F_C_call": "c_verylongfunctionname2",
                                            "F_C_name": "c_verylongfunctionname2",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_arg_c_call": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                            "F_arguments": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "c_const": "",
                                            "c_get_value": "",
                                            "c_type": "int",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHC_rv",
                                            "cxx_rv_decl": "int SHC_rv",
                                            "cxx_type": "int",
                                            "cxx_var": "SHC_rv",
                                            "f_intent": "OUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "SHT_rv",
                                            "fc_var": "SHT_rv",
                                            "i_var": "SHT_rv",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_function_native_scalar"
                                        },
                                        "fmtl": {
                                            "c_var": "SHCXX_rv",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_var": "SHCXX_rv",
                                            "push_arg": "SHCXX_rv",
                                            "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                            "stmt": "lua_function_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_deref": "",
                                            "c_var": "SHCXX_rv",
                                            "ctor_expr": "SHCXX_rv",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHCXX_rv",
                                            "cxx_type": "int",
                                            "cxx_var": "SHCXX_rv",
                                            "data_var": "SHData_rv",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHTPy_rv",
                                            "size_var": "SHSize_rv",
                                            "stmt": "py_function_native_scalar",
                                            "value_var": "SHValue_rv"
                                        }
                                    },
                                    "verylongname1": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname1",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname1",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname1",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname1",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname1",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname1",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname1",
                                            "fc_var": "verylongname1",
                                            "i_var": "verylongname1",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname1",
                                            "c_var_len": "Lverylongname1",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname1",
                                            "lua_var": "SH_Lua_verylongname1",
                                            "pop_expr": "lua_tointeger(L, 1)",
                                            "stmt": "lua_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname1",
                                            "ctor_expr": "verylongname1",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname1",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname1",
                                            "data_var": "SHData_verylongname1",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname1",
                                            "size_var": "SHSize_verylongname1",
                                            "stmt": "py_in_native_scalar",
                                            "value_var": "SHValue_verylongname1"
                                        }
                                    },
                                    "verylongname10": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname10",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname10",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname10",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname10",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname10",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname10",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname10",
                                            "fc_var": "verylongname10",
                                            "i_var": "verylongname10",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 10,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname10",
                                            "c_var_len": "Lverylongname10",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname10",
                                            "lua_var": "SH_Lua_verylongname10",
                                            "pop_expr": "lua_tointeger(L, 10)",
                                            "stmt": "lua_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname10",
                                            "ctor_expr": "verylongname10",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname10",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname10",
                                            "data_var": "SHData_verylongname10",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname10",
                                            "size_var": "SHSize_verylongname10",
                                            "stmt": "py_in_native_scalar",
                                            "value_var": "SHValue_verylongname10"
                                        }
                                    },
                                    "verylongname2": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname2",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname2",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname2",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname2",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname2",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname2",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname2",
                                            "fc_var": "verylongname2",
                                            "i_var": "verylongname2",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 2,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname2",
                                            "c_var_len": "Lverylongname2",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname2",
                                            "lua_var": "SH_Lua_verylongname2",
                                            "pop_expr": "lua_tointeger(L, 2)",
                                            "stmt": "lua_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname2",
                                            "ctor_expr": "verylongname2",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname2",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname2",
                                            "data_var": "SHData_verylongname2",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname2",
                                            "size_var": "SHSize_verylongname2",
                                            "stmt": "py_in_native_scalar",
                                            "value_var": "SHValue_verylongname2"
                                        }
                                    },
                                    "verylongname3": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname3",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname3",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname3",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname3",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname3",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname3",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname3",
                                            "fc_var": "verylongname3",
                                            "i_var": "verylongname3",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 3,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname3",
                                            "c_var_len": "Lverylongname3",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname3",
                                            "lua_var": "SH_Lua_verylongname3",
                                            "pop_expr": "lua_tointeger(L, 3)",
                                            "stmt": "lua_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname3",
                                            "ctor_expr": "verylongname3",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname3",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname3",
                                            "data_var": "SHData_verylongname3",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname3",
                                            "size_var": "SHSize_verylongname3",
                                            "stmt": "py_in_native_scalar",
                                            "value_var": "SHValue_verylongname3"
                                        }
                                    },
                                    "verylongname4": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname4",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname4",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname4",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname4",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname4",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname4",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname4",
                                            "fc_var": "verylongname4",
                                            "i_var": "verylongname4",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 4,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname4",
                                            "c_var_len": "Lverylongname4",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname4",
                                            "lua_var": "SH_Lua_verylongname4",
                                            "pop_expr": "lua_tointeger(L, 4)",
                                            "stmt": "lua_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname4",
                                            "ctor_expr": "verylongname4",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname4",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname4",
                                            "data_var": "SHData_verylongname4",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname4",
                                            "size_var": "SHSize_verylongname4",
                                            "stmt": "py_in_native_scalar",
                                            "value_var": "SHValue_verylongname4"
                                        }
                                    },
                                    "verylongname5": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname5",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname5",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname5",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname5",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname5",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname5",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname5",
                                            "fc_var": "verylongname5",
                                            "i_var": "verylongname5",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 5,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname5",
                                            "c_var_len": "Lverylongname5",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname5",
                                            "lua_var": "SH_Lua_verylongname5",
                                            "pop_expr": "lua_tointeger(L, 5)",
                                            "stmt": "lua_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname5",
                                            "ctor_expr": "verylongname5",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname5",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname5",
                                            "data_var": "SHData_verylongname5",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname5",
                                            "size_var": "SHSize_verylongname5",
                                            "stmt": "py_in_native_scalar",
                                            "value_var": "SHValue_verylongname5"
                                        }
                                    },
                                    "verylongname6": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname6",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname6",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname6",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname6",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname6",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname6",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname6",
                                            "fc_var": "verylongname6",
                                            "i_var": "verylongname6",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 6,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname6",
                                            "c_var_len": "Lverylongname6",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname6",
                                            "lua_var": "SH_Lua_verylongname6",
                                            "pop_expr": "lua_tointeger(L, 6)",
                                            "stmt": "lua_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname6",
                                            "ctor_expr": "verylongname6",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname6",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname6",
                                            "data_var": "SHData_verylongname6",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname6",
                                            "size_var": "SHSize_verylongname6",
                                            "stmt": "py_in_native_scalar",
                                            "value_var": "SHValue_verylongname6"
                                        }
                                    },
                                    "verylongname7": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname7",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname7",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname7",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname7",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname7",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname7",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname7",
                                            "fc_var": "verylongname7",
                                            "i_var": "verylongname7",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 7,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname7",
                                            "c_var_len": "Lverylongname7",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname7",
                                            "lua_var": "SH_Lua_verylongname7",
                                            "pop_expr": "lua_tointeger(L, 7)",
                                            "stmt": "lua_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname7",
                                            "ctor_expr": "verylongname7",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname7",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname7",
                                            "data_var": "SHData_verylongname7",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname7",
                                            "size_var": "SHSize_verylongname7",
                                            "stmt": "py_in_native_scalar",
                                            "value_var": "SHValue_verylongname7"
                                        }
                                    },
                                    "verylongname8": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname8",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname8",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname8",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname8",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname8",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname8",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname8",
                                            "fc_var": "verylongname8",
                                            "i_var": "verylongname8",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 8,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname8",
                                            "c_var_len": "Lverylongname8",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname8",
                                            "lua_var": "SH_Lua_verylongname8",
                                            "pop_expr": "lua_tointeger(L, 8)",
                                            "stmt": "lua_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname8",
                                            "ctor_expr": "verylongname8",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname8",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname8",
                                            "data_var": "SHData_verylongname8",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname8",
                                            "size_var": "SHSize_verylongname8",
                                            "stmt": "py_in_native_scalar",
                                            "value_var": "SHValue_verylongname8"
                                        }
                                    },
                                    "verylongname9": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname9",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname9",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname9",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "verylongname9",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname9",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname9",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "verylongname9",
                                            "fc_var": "verylongname9",
                                            "i_var": "verylongname9",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 9,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname9",
                                            "c_var_len": "Lverylongname9",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname9",
                                            "lua_var": "SH_Lua_verylongname9",
                                            "pop_expr": "lua_tointeger(L, 9)",
                                            "stmt": "lua_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname9",
                                            "ctor_expr": "verylongname9",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname9",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname9",
                                            "data_var": "SHData_verylongname9",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname9",
                                            "size_var": "SHSize_verylongname9",
                                            "stmt": "py_in_native_scalar",
                                            "value_var": "SHValue_verylongname9"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "verylongfunctionname2",
                                    "F_name_api": "verylongfunctionname2",
                                    "F_name_function": "verylongfunctionname2",
                                    "F_name_generic": "verylongfunctionname2",
                                    "F_name_impl": "verylongfunctionname2",
                                    "LUA_name": "verylongfunctionname2",
                                    "LUA_name_api": "verylongfunctionname2",
                                    "LUA_name_impl": "l_example_nested_verylongfunctionname2",
                                    "PY_name_impl": "PP_verylongfunctionname2",
                                    "function_name": "verylongfunctionname2"
                                }
                            },
                            {
                                "<FUNCTION>": "cos_doubles  48 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "cos_doubles",
                                        "params": [
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "intent": "in",
                                                        "rank": 2
                                                    },
                                                    "name": "in",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ],
                                                    "typemap_name": "double"
                                                },
                                                "specifier": [
                                                    "double"
                                                ],
                                                "typemap_name": "double"
                                            },
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "dimension": "shape(in)",
                                                        "intent": "out"
                                                    },
                                                    "name": "out",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ],
                                                    "typemap_name": "double"
                                                },
                                                "specifier": [
                                                    "double"
                                                ],
                                                "typemap_name": "double"
                                            },
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "implied": "size(in)"
                                                    },
                                                    "name": "sizein",
                                                    "typemap_name": "int"
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "typemap_name": "int"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void cos_doubles( double * in   +intent(in)  +rank(2), double * out  +intent(out) +dimension(shape(in)), int      sizein +implied(size(in)))",
                                "declgen": "void cos_doubles(double * in +intent(in)+rank(2), double * out +dimension(shape(in))+intent(out), int sizein +implied(size(in)))",
                                "doxygen": {
                                    "brief": "Test multidimensional arrays with allocatable"
                                },
                                "name": "cos_doubles",
                                "options": {
                                    "F_standard": 2008
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        },
                                        "in": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_*"
                                        },
                                        "out": {
                                            "meta": {
                                                "dim_ast": [
                                                    {
                                                        "args": [
                                                            {
                                                                "name": "in"
                                                            }
                                                        ],
                                                        "name": "shape"
                                                    }
                                                ],
                                                "intent": "out"
                                            },
                                            "stmt": "c_out_native_*"
                                        },
                                        "sizein": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        },
                                        "in": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_*"
                                        },
                                        "out": {
                                            "meta": {
                                                "dim_ast": [
                                                    {
                                                        "args": [
                                                            {
                                                                "name": "in"
                                                            }
                                                        ],
                                                        "name": "shape"
                                                    }
                                                ],
                                                "intent": "out"
                                            },
                                            "stmt": "f_out_native_*"
                                        },
                                        "sizein": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        }
                                    },
                                    "lua": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "in": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "out": {
                                            "meta": {
                                                "dim_ast": [
                                                    {
                                                        "args": [
                                                            {
                                                                "name": "in"
                                                            }
                                                        ],
                                                        "name": "shape"
                                                    }
                                                ],
                                                "intent": "out"
                                            }
                                        },
                                        "sizein": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "py": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "in": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "out": {
                                            "meta": {
                                                "dim_ast": [
                                                    {
                                                        "args": [
                                                            {
                                                                "name": "in"
                                                            }
                                                        ],
                                                        "name": "shape"
                                                    }
                                                ],
                                                "intent": "out"
                                            }
                                        },
                                        "sizein": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    },
                                    "share": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            }
                                        },
                                        "in": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        },
                                        "out": {
                                            "meta": {
                                                "dim_ast": [
                                                    {
                                                        "args": [
                                                            {
                                                                "name": "in"
                                                            }
                                                        ],
                                                        "name": "shape"
                                                    }
                                                ],
                                                "intent": "out"
                                            }
                                        },
                                        "sizein": {
                                            "meta": {
                                                "intent": "in"
                                            }
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "example::nested::cos_doubles(\tin,\t out,\t sizein)",
                                            "C_call_list": "in,\t out,\t sizein",
                                            "C_name": "AA_example_nested_cos_doubles",
                                            "C_prototype": "double * in,\t double * out,\t int sizein",
                                            "C_return_type": "void",
                                            "F_C_name": "c_cos_doubles",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "example::nested::cos_doubles(\tin,\t out,\t sizein)",
                                            "C_call_list": "in,\t out,\t sizein",
                                            "C_name": "AA_example_nested_cos_doubles",
                                            "C_prototype": "double * in,\t double * out,\t int sizein",
                                            "C_return_type": "void",
                                            "F_C_arguments": "in,\t out,\t sizein",
                                            "F_C_call": "c_cos_doubles",
                                            "F_C_name": "c_cos_doubles",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "in,\t out,\t SH_sizein",
                                            "F_arguments": "in,\t out",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_subroutine"
                                        },
                                        "fmtl": {
                                            "stmt": "lua_subroutine"
                                        }
                                    },
                                    "in": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "double",
                                            "c_var": "in",
                                            "cfi_type": "CFI_type_double",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "in",
                                            "cxx_type": "double",
                                            "cxx_var": "in",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt_name": "c_in_native_*"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "double",
                                            "c_var": "in",
                                            "cfi_type": "CFI_type_double",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "in",
                                            "cxx_type": "double",
                                            "cxx_var": "in",
                                            "f_assumed_shape": "(:,:)",
                                            "f_intent": "IN",
                                            "f_kind": "C_DOUBLE",
                                            "f_type": "real(C_DOUBLE)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "in",
                                            "fc_var": "in",
                                            "i_dimension": "(*)",
                                            "i_var": "in",
                                            "idtor": "0",
                                            "rank": "2",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "size": "size(in)",
                                            "stmt_name": "f_in_native_*"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "in",
                                            "c_var_len": "Lin",
                                            "cxx_member": "->",
                                            "cxx_type": "double",
                                            "cxx_var": "in",
                                            "lua_var": "SH_Lua_in",
                                            "pop_expr": "lua_tonumber(L, 1)",
                                            "stmt": "lua_in_native_*"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "double",
                                            "c_var": "in",
                                            "ctor_expr": "*in",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "in",
                                            "cxx_type": "double",
                                            "cxx_var": "in",
                                            "data_var": "SHData_in",
                                            "numpy_type": "NPY_DOUBLE",
                                            "py_var": "SHPy_in",
                                            "pytmp_var": "SHTPy_in",
                                            "rank": "2",
                                            "size_var": "SHSize_in",
                                            "stmt": "py_in_native_*_numpy",
                                            "value_var": "SHValue_in"
                                        }
                                    },
                                    "out": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_array_size2": "shape(*in)",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "double",
                                            "c_var": "out",
                                            "cfi_type": "CFI_type_double",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "out",
                                            "cxx_type": "double",
                                            "cxx_var": "out",
                                            "idtor": "0",
                                            "rank": "1",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt_name": "c_out_native_*"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_array_size2": "shape(*in)",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "double",
                                            "c_var": "out",
                                            "cfi_type": "CFI_type_double",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "out",
                                            "cxx_type": "double",
                                            "cxx_var": "out",
                                            "f_array_allocate": "(shape(in))",
                                            "f_assumed_shape": "(:)",
                                            "f_intent": "OUT",
                                            "f_kind": "C_DOUBLE",
                                            "f_type": "real(C_DOUBLE)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "out",
                                            "fc_var": "out",
                                            "i_var": "out",
                                            "idtor": "0",
                                            "rank": "1",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt_name": "f_out_native_*"
                                        },
                                        "fmtl": {
                                            "LUA_index": 2,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "out",
                                            "c_var_len": "Lout",
                                            "cxx_member": "->",
                                            "cxx_type": "double",
                                            "cxx_var": "out",
                                            "lua_var": "SH_Lua_out",
                                            "stmt": "lua_out_native_*"
                                        },
                                        "fmtpy": {
                                            "array_size": "shape(in)",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "double",
                                            "c_var": "out",
                                            "ctor_expr": "*out",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "out",
                                            "cxx_type": "double",
                                            "cxx_var": "out",
                                            "data_var": "SHData_out",
                                            "npy_dims_var": "SHD_out",
                                            "npy_intp_asgn": "SHD_out[0] = shape(in);\n",
                                            "npy_intp_decl": "npy_intp SHD_out[1];\n",
                                            "npy_rank": "1",
                                            "numpy_type": "NPY_DOUBLE",
                                            "py_var": "SHPy_out",
                                            "rank": "1",
                                            "size_var": "SHSize_out",
                                            "stmt": "py_out_native_*_numpy",
                                            "value_var": "SHValue_out"
                                        }
                                    },
                                    "sizein": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "sizein",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&sizein",
                                            "cxx_type": "int",
                                            "cxx_var": "sizein",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "int",
                                            "c_var": "sizein",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&sizein",
                                            "cxx_type": "int",
                                            "cxx_var": "sizein",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "sizein",
                                            "fc_var": "SH_sizein",
                                            "i_var": "sizein",
                                            "idtor": "0",
                                            "pre_call_intent": "size(in,kind=C_INT)",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtl": {
                                            "LUA_index": 2,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "sizein",
                                            "c_var_len": "Lsizein",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "sizein",
                                            "lua_var": "SH_Lua_sizein",
                                            "pop_expr": "lua_tointeger(L, 2)",
                                            "stmt": "lua_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "sizein",
                                            "ctor_expr": "sizein",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&sizein",
                                            "cxx_type": "int",
                                            "cxx_var": "sizein",
                                            "data_var": "SHData_sizein",
                                            "numpy_type": "NPY_INT",
                                            "pre_call_intent": "PyArray_SIZE(SHPy_in)",
                                            "py_var": "SHPy_sizein",
                                            "size_var": "SHSize_sizein",
                                            "value_var": "SHValue_sizein"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "cos_doubles",
                                    "F_name_api": "cos_doubles",
                                    "F_name_function": "cos_doubles",
                                    "F_name_generic": "cos_doubles",
                                    "F_name_impl": "cos_doubles",
                                    "LUA_name": "cos_doubles",
                                    "LUA_name_api": "cos_doubles",
                                    "LUA_name_impl": "l_example_nested_cos_doubles",
                                    "PY_name_impl": "PP_cos_doubles",
                                    "function_name": "cos_doubles"
                                }
                            }
                        ],
                        "name": "nested",
                        "options": {},
                        "scope": "example::nested::",
                        "scope_file": [
                            "UserLibrary",
                            "example",
                            "nested"
                        ],
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "example::nested::",
                            "C_header_filename": "wrapUserLibrary_example_nested.h",
                            "C_impl_filename": "wrapUserLibrary_example_nested.cpp",
                            "C_name_api": "nested",
                            "C_name_scope": "example_nested_",
                            "F_impl_filename": "wrapfUserLibrary_example_nested.f",
                            "F_module_name": "userlibrary_example_nested_mod",
                            "F_name_api": "nested",
                            "LUA_this_call": "example::nested::",
                            "PY_library_doc": "library documentation",
                            "PY_module_filename": "pyUserLibrary_example_nestedmodule.cpp",
                            "PY_module_init": "userlibrary_example_nested",
                            "PY_module_name": "nested",
                            "PY_module_scope": "userlibrary.example.nested",
                            "PY_this_call": "example::nested::",
                            "file_scope": "UserLibrary_example_nested",
                            "namespace_scope": "example::nested::"
                        }
                    }
                ],
                "options": {},
                "scope": "example::",
                "scope_file": [
                    "UserLibrary",
                    "example"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "example::",
                    "C_header_filename": "wrapUserLibrary_example.h",
                    "C_impl_filename": "wrapUserLibrary_example.cpp",
                    "C_name_api": "example",
                    "C_name_scope": "example_",
                    "F_impl_filename": "wrapfUserLibrary_example.f",
                    "F_module_name": "userlibrary_example_mod",
                    "F_name_api": "example",
                    "LUA_this_call": "example::",
                    "PY_library_doc": "library documentation",
                    "PY_module_filename": "pyUserLibrary_examplemodule.cpp",
                    "PY_module_init": "userlibrary_example",
                    "PY_module_name": "example",
                    "PY_module_scope": "userlibrary.example",
                    "PY_this_call": "example::",
                    "file_scope": "UserLibrary_example",
                    "namespace_scope": "example::"
                }
            }
        ],
        "scope_file": [
            "UserLibrary"
        ],
        "typedefs": [
            {
                "<TYPEDEF>": "SidreLength ****************************************",
                "ast": {
                    "declarator": {
                        "name": "SidreLength",
                        "typemap_name": "long"
                    },
                    "specifier": [
                        "long"
                    ],
                    "storage": [
                        "typedef"
                    ],
                    "typemap_name": "SidreLength"
                },
                "f_kind": "C_LONG",
                "f_module": {
                    "iso_c_binding": [
                        "C_LONG"
                    ]
                },
                "name": "SidreLength",
                "options": {},
                "user_fields": {
                    "c_header": "sidre/SidreTypes.h",
                    "c_type": "SIDRE_SidreLength"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name_api": "SidreLength",
                    "C_name_typedef": "AA_SidreLength",
                    "F_name_api": "sidre_length",
                    "F_name_typedef": "sidre_length",
                    "cxx_type": "SidreLength",
                    "typedef_name": "SidreLength"
                }
            },
            {
                "<TYPEDEF>": "TypeID ****************************************",
                "ast": {
                    "declarator": {
                        "name": "TypeID",
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "typedef"
                    ],
                    "typemap_name": "TypeID"
                },
                "f_kind": "C_INT",
                "f_module": {
                    "iso_c_binding": [
                        "C_INT"
                    ]
                },
                "name": "TypeID",
                "options": {},
                "user_fields": {
                    "c_header": "sidre/SidreTypes.h",
                    "c_to_cxx": "getTypeID({c_var})",
                    "cxx_header": "sidre/SidreWrapperHelpers.hpp",
                    "cxx_to_c": "static_cast<int>({cxx_var})"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name_api": "TypeID",
                    "C_name_typedef": "AA_TypeID",
                    "F_name_api": "type_id",
                    "F_name_typedef": "type_id",
                    "cxx_type": "TypeID",
                    "typedef_name": "TypeID"
                }
            }
        ],
        "user_fmt": {
            "C_prefix": "AA_",
            "F_name_instance_get": "yadda",
            "F_name_instance_set": "",
            "PY_prefix": "PP_"
        },
        "wrap": {
            "c": true,
            "fortran": true,
            "lua": true,
            "python": true
        }
    },
    "symtab": {
        "example": {
            "nested": {
                "ExClass1": "example::nested::ExClass1",
                "ExClass2": "example::nested::ExClass2"
            }
        }
    },
    "types": {
        "SidreLength": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONG",
            "PY_ctor": "PyInt_FromLong({ctor_expr})",
            "PY_format": "l",
            "PY_get": "PyInt_AsLong({py_var})",
            "base": "integer",
            "c_header": [
                "sidre/SidreTypes.h"
            ],
            "c_type": "SIDRE_SidreLength",
            "cfi_type": "CFI_type_long",
            "cxx_type": "SidreLength",
            "f_cast": "int({f_var}, C_LONG)",
            "f_kind": "sidre_length",
            "f_module": {
                "userlibrary_mod": [
                    "sidre_length"
                ]
            },
            "f_module_name": "userlibrary_mod",
            "f_type": "integer(sidre_length)",
            "flat_name": "long",
            "i_module": {
                "userlibrary_mod": [
                    "sidre_length"
                ]
            },
            "sgroup": "native",
            "sh_type": "SH_TYPE_LONG",
            "typedef": "long",
            "wrap_header": [
                "wrapUserLibrary.h"
            ]
        },
        "TypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({ctor_expr})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "base": "integer",
            "c_header": [
                "sidre/SidreTypes.h"
            ],
            "c_to_cxx": "getTypeID({c_var})",
            "c_type": "AA_TypeID",
            "cfi_type": "CFI_type_int",
            "cxx_header": [
                "sidre/SidreWrapperHelpers.hpp"
            ],
            "cxx_to_c": "static_cast<int>({cxx_var})",
            "cxx_type": "TypeID",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "type_id",
            "f_module": {
                "userlibrary_mod": [
                    "type_id"
                ]
            },
            "f_module_name": "userlibrary_mod",
            "f_type": "integer(type_id)",
            "flat_name": "int",
            "i_module": {
                "userlibrary_mod": [
                    "type_id"
                ]
            },
            "sgroup": "native",
            "sh_type": "SH_TYPE_INT",
            "typedef": "int",
            "wrap_header": [
                "wrapUserLibrary.h"
            ]
        },
        "example::nested::ExClass1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PP_ExClass1",
            "PY_PyTypeObject": "PP_ExClass1_Type",
            "PY_from_object": "PP_ExClass1_from_Object",
            "PY_to_object": "PP_ExClass1_to_Object",
            "PY_to_object_idtor": "PP_ExClass1_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}example::nested::ExClass1 *>\t({c_var}->addr)",
            "c_type": "AA_example_nested_ExClass1",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "example::nested::ExClass1",
            "export": true,
            "f_capsule_data_type": "AA_SHROUD_capsule_data",
            "f_class": "class(ex_class1)",
            "f_derived_type": "ex_class1",
            "f_module": {
                "userlibrary_example_nested_mod": [
                    "ex_class1"
                ]
            },
            "f_module_name": "userlibrary_example_nested_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(ex_class1)",
            "flat_name": "example_nested_ExClass1",
            "i_module": {
                "userlibrary_example_nested_mod": [
                    "AA_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(AA_SHROUD_capsule_data)",
            "idtor": "1",
            "impl_header": [
                "ExClass1.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesUserLibrary.h"
            ]
        },
        "example::nested::ExClass2": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PP_ExClass2",
            "PY_PyTypeObject": "PP_ExClass2_Type",
            "PY_from_object": "PP_ExClass2_from_Object",
            "PY_to_object": "PP_ExClass2_to_Object",
            "PY_to_object_idtor": "PP_ExClass2_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}example::nested::ExClass2 *>\t({c_var}->addr)",
            "c_type": "AA_example_nested_ExClass2",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "example::nested::ExClass2",
            "f_capsule_data_type": "AA_SHROUD_capsule_data",
            "f_class": "class(ex_class2)",
            "f_derived_type": "ex_class2",
            "f_module": {
                "userlibrary_example_nested_mod": [
                    "ex_class2"
                ]
            },
            "f_module_name": "userlibrary_example_nested_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(ex_class2)",
            "flat_name": "example_nested_ExClass2",
            "i_module": {
                "userlibrary_example_nested_mod": [
                    "AA_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(AA_SHROUD_capsule_data)",
            "idtor": "2",
            "impl_header": [
                "ExClass2.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesUserLibrary.h"
            ]
        },
        "example::nested::ExClass2::ExClass2Nested": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}example::nested::ExClass2Nested *>\t({c_var}->addr)",
            "c_type": "AA_example_nested_ExClass2_ExClass2Nested",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "example::nested::ExClass2Nested",
            "f_capsule_data_type": "AA_SHROUD_capsule_data",
            "f_class": "class(ex_class2_nested)",
            "f_derived_type": "ex_class2_nested",
            "f_module": {
                "userlibrary_example_nested_mod": [
                    "ex_class2_nested"
                ]
            },
            "f_module_name": "userlibrary_example_nested_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(ex_class2_nested)",
            "flat_name": "example_nested_ExClass2Nested",
            "i_module": {
                "userlibrary_example_nested_mod": [
                    "AA_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(AA_SHROUD_capsule_data)",
            "impl_header": [
                "ExClass2.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesUserLibrary.h"
            ]
        }
    }
}