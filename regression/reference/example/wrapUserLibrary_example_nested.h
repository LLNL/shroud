// wrapUserLibrary_example_nested.h
// This file is generated by Shroud nowrite-version. Do not edit.
// Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
// other Shroud Project Developers.
// See the top-level COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//
/**
 * \file wrapUserLibrary_example_nested.h
 * \brief Shroud generated wrapper for nested namespace
 */
// For C users and C++ implementation

#ifndef WRAPUSERLIBRARY_EXAMPLE_NESTED_H
#define WRAPUSERLIBRARY_EXAMPLE_NESTED_H

// typemap
#ifdef USE_MPI
#include "mpi.h"
#endif
#ifdef __cplusplus
#include <cstddef>
#else
#include <stdbool.h>
#include <stddef.h>
#endif
// shroud
#include "typesUserLibrary.h"

// splicer begin namespace.example::nested.CXX_declarations
// splicer end namespace.example::nested.CXX_declarations

#ifdef __cplusplus
extern "C" {
#endif

// splicer begin namespace.example::nested.C_declarations
// splicer end namespace.example::nested.C_declarations

void AA_example_nested_local_function1(void);

bool AA_example_nested_isNameValid(const char * name);

bool AA_example_nested_isNameValid_bufferify(char *name,
    int SHT_name_len);

bool AA_example_nested_isInitialized(void);

void AA_example_nested_test_names(const char * name);

void AA_example_nested_test_names_bufferify(char *name,
    int SHT_name_len);

void AA_example_nested_test_names_flag(const char * name, int flag);

void AA_example_nested_test_names_flag_bufferify(char *name,
    int SHT_name_len, int flag);

void AA_example_nested_testoptional_0(void);

void AA_example_nested_testoptional_1(int i);

void AA_example_nested_testoptional_2(int i, long j);

size_t AA_example_nested_test_size_t(void);

#ifdef HAVE_MPI
void AA_example_nested_testmpi_mpi(MPI_Fint comm);
#endif

#ifndef HAVE_MPI
void AA_example_nested_testmpi_serial(void);
#endif

void AA_example_nested_FuncPtr1(void ( * get)(void));

void AA_example_nested_FuncPtr2(double * ( * get)(void));

void AA_example_nested_FuncPtr3(double ( * get)(int i, int));

void AA_example_nested_FuncPtr4(double ( * get)(double, int));

void AA_example_nested_FuncPtr5(void ( * get)(int verylongname1,
    int verylongname2, int verylongname3, int verylongname4,
    int verylongname5, int verylongname6, int verylongname7,
    int verylongname8, int verylongname9, int verylongname10));

void AA_example_nested_verylongfunctionname1(int * verylongname1,
    int * verylongname2, int * verylongname3, int * verylongname4,
    int * verylongname5, int * verylongname6, int * verylongname7,
    int * verylongname8, int * verylongname9, int * verylongname10);

int AA_example_nested_verylongfunctionname2(int verylongname1,
    int verylongname2, int verylongname3, int verylongname4,
    int verylongname5, int verylongname6, int verylongname7,
    int verylongname8, int verylongname9, int verylongname10);

void AA_example_nested_cos_doubles(double * in, double * out,
    int sizein);

#ifdef __cplusplus
}
#endif

#endif  // WRAPUSERLIBRARY_EXAMPLE_NESTED_H
