{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "ccomplex.h"
        ],
        "functions": [
            {
                "<FUNCTION>": "0 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "acceptFloatComplexInoutPtr",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "float_complex"
                                },
                                "specifier": [
                                    "float",
                                    "complex"
                                ],
                                "typemap_name": "float_complex"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptFloatComplexInoutPtr(float complex *arg1)",
                "declgen": "void acceptFloatComplexInoutPtr(float complex * arg1)",
                "name": "acceptFloatComplexInoutPtr",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "float complex",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_float_Complex",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::complex<float>",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_FLOAT_COMPLEX",
                            "stmt0": "c_inout_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "c_var": "arg1",
                            "f_intent": "INOUT",
                            "f_kind": "C_FLOAT_COMPLEX",
                            "f_type": "complex(C_FLOAT_COMPLEX)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_FLOAT_COMPLEX",
                            "stmt0": "f_inout_native_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_inout_native_*",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg1",
                    "C_name": "acceptFloatComplexInoutPtr",
                    "C_name_api": "acceptFloatComplexInoutPtr",
                    "C_prototype": "float complex * arg1",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1",
                    "F_C_call": "c_accept_float_complex_inout_ptr",
                    "F_C_name": "accept_float_complex_inout_ptr",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1",
                    "F_arguments": "arg1",
                    "F_name_api": "accept_float_complex_inout_ptr",
                    "F_name_function": "accept_float_complex_inout_ptr",
                    "F_name_generic": "accept_float_complex_inout_ptr",
                    "F_name_impl": "accept_float_complex_inout_ptr",
                    "F_subprogram": "subroutine",
                    "function_name": "acceptFloatComplexInoutPtr",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "1 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "acceptDoubleComplexInoutPtr",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double_complex"
                                },
                                "specifier": [
                                    "double",
                                    "complex"
                                ],
                                "typemap_name": "double_complex"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptDoubleComplexInoutPtr(double complex *arg1)",
                "declgen": "void acceptDoubleComplexInoutPtr(double complex * arg1)",
                "name": "acceptDoubleComplexInoutPtr",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double complex",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_double_Complex",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::complex<double>",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE_COMPLEX",
                            "stmt0": "c_inout_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "c_var": "arg1",
                            "f_intent": "INOUT",
                            "f_kind": "C_DOUBLE_COMPLEX",
                            "f_type": "complex(C_DOUBLE_COMPLEX)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_DOUBLE_COMPLEX",
                            "stmt0": "f_inout_native_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_inout_native_*",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double complex",
                            "c_var": "arg1",
                            "ctor_expr": "creal(arg1), cimag(arg1)",
                            "ctype_expr": "SHCPY_arg1.real + SHCPY_arg1.imag * I",
                            "ctype_var": "SHCPY_arg1",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::complex<double>",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_ctype": "Py_complex",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_inout_native_*",
                            "stmt1": "py_inout_native_*",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg1",
                    "C_name": "acceptDoubleComplexInoutPtr",
                    "C_name_api": "acceptDoubleComplexInoutPtr",
                    "C_prototype": "double complex * arg1",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1",
                    "F_C_call": "c_accept_double_complex_inout_ptr",
                    "F_C_name": "accept_double_complex_inout_ptr",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1",
                    "F_arguments": "arg1",
                    "F_name_api": "accept_double_complex_inout_ptr",
                    "F_name_function": "accept_double_complex_inout_ptr",
                    "F_name_generic": "accept_double_complex_inout_ptr",
                    "F_name_impl": "accept_double_complex_inout_ptr",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptDoubleComplexInoutPtr",
                    "function_name": "acceptDoubleComplexInoutPtr",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "2 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "acceptDoubleComplexOutPtr",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double_complex"
                                },
                                "specifier": [
                                    "double",
                                    "complex"
                                ],
                                "typemap_name": "double_complex"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptDoubleComplexOutPtr(double complex *arg1 +intent(out))",
                "declgen": "void acceptDoubleComplexOutPtr(double complex * arg1 +intent(out))",
                "name": "acceptDoubleComplexOutPtr",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double complex",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_double_Complex",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::complex<double>",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE_COMPLEX",
                            "stmt0": "c_out_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "c_var": "arg1",
                            "f_intent": "OUT",
                            "f_kind": "C_DOUBLE_COMPLEX",
                            "f_type": "complex(C_DOUBLE_COMPLEX)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_DOUBLE_COMPLEX",
                            "stmt0": "f_out_native_*",
                            "stmt1": "f_out_native_*",
                            "stmtc0": "c_out_native_*",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double complex",
                            "c_var": "arg1",
                            "ctor_expr": "creal(arg1), cimag(arg1)",
                            "ctype_var": "SHCPY_arg1",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::complex<double>",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_ctype": "Py_complex",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_out_native_*",
                            "stmt1": "py_out_native_*",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg1",
                    "C_name": "acceptDoubleComplexOutPtr",
                    "C_name_api": "acceptDoubleComplexOutPtr",
                    "C_prototype": "double complex * arg1",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1",
                    "F_C_call": "c_accept_double_complex_out_ptr",
                    "F_C_name": "accept_double_complex_out_ptr",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1",
                    "F_arguments": "arg1",
                    "F_name_api": "accept_double_complex_out_ptr",
                    "F_name_function": "accept_double_complex_out_ptr",
                    "F_name_generic": "accept_double_complex_out_ptr",
                    "F_name_impl": "accept_double_complex_out_ptr",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptDoubleComplexOutPtr",
                    "function_name": "acceptDoubleComplexOutPtr",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            },
            {
                "<FUNCTION>": "3 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "acceptDoubleComplexInoutPtrFlag",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double_complex"
                                },
                                "specifier": [
                                    "double",
                                    "complex"
                                ],
                                "typemap_name": "double_complex"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "flag",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptDoubleComplexInoutPtrFlag(double complex *arg1, int *flag +intent(out))",
                "declgen": "void acceptDoubleComplexInoutPtrFlag(double complex * arg1, int * flag +intent(out))",
                "doxygen": {
                    "description": "Return two values so Py_BuildValue is used.\n"
                },
                "name": "acceptDoubleComplexInoutPtrFlag",
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false
                },
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double complex",
                            "c_var": "arg1",
                            "ctor_expr": "creal(arg1), cimag(arg1)",
                            "ctype_expr": "SHCPY_arg1.real + SHCPY_arg1.imag * I",
                            "ctype_var": "SHCPY_arg1",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::complex<double>",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_ctype": "Py_complex",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_inout_native_*",
                            "stmt1": "py_inout_native_*",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "flag": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "flag",
                            "ctor_expr": "flag",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "flag",
                            "cxx_type": "int",
                            "cxx_var": "flag",
                            "data_var": "SHData_flag",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag",
                            "stmt0": "py_out_native_*",
                            "stmt1": "py_out_native_*",
                            "value_var": "SHValue_flag"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "acceptDoubleComplexInoutPtrFlag",
                    "F_name_api": "accept_double_complex_inout_ptr_flag",
                    "PY_name_impl": "PY_acceptDoubleComplexInoutPtrFlag",
                    "function_name": "acceptDoubleComplexInoutPtrFlag"
                }
            },
            {
                "<FUNCTION>": "4 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "acceptDoubleComplexOutPtrFlag",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double_complex"
                                },
                                "specifier": [
                                    "double",
                                    "complex"
                                ],
                                "typemap_name": "double_complex"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "flag",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptDoubleComplexOutPtrFlag( double complex *arg1 +intent(out), int *flag +intent(out))",
                "declgen": "void acceptDoubleComplexOutPtrFlag(double complex * arg1 +intent(out), int * flag +intent(out))",
                "doxygen": {
                    "description": "Return two values so Py_BuildValue is used.\nCreates a Py_complex for intent(out)\n"
                },
                "name": "acceptDoubleComplexOutPtrFlag",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double complex",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_double_Complex",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::complex<double>",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE_COMPLEX",
                            "stmt0": "c_out_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "c_var": "arg1",
                            "f_intent": "OUT",
                            "f_kind": "C_DOUBLE_COMPLEX",
                            "f_type": "complex(C_DOUBLE_COMPLEX)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_DOUBLE_COMPLEX",
                            "stmt0": "f_out_native_*",
                            "stmt1": "f_out_native_*",
                            "stmtc0": "c_out_native_*",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double complex",
                            "c_var": "arg1",
                            "ctor_expr": "creal(arg1), cimag(arg1)",
                            "ctype_var": "SHCPY_arg1",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::complex<double>",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_ctype": "Py_complex",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_out_native_*",
                            "stmt1": "py_out_native_*",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "flag": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "flag",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "flag",
                            "cxx_type": "int",
                            "cxx_var": "flag",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_out_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "flag",
                            "c_var": "flag",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "flag",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_out_native_*",
                            "stmt1": "f_out_native_*",
                            "stmtc0": "c_out_native_*",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "flag",
                            "ctor_expr": "flag",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "flag",
                            "cxx_type": "int",
                            "cxx_var": "flag",
                            "data_var": "SHData_flag",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag",
                            "stmt0": "py_out_native_*",
                            "stmt1": "py_out_native_*",
                            "value_var": "SHValue_flag"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg1,\t flag",
                    "C_name": "acceptDoubleComplexOutPtrFlag",
                    "C_name_api": "acceptDoubleComplexOutPtrFlag",
                    "C_prototype": "double complex * arg1,\t int * flag",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1,\t flag",
                    "F_C_call": "c_accept_double_complex_out_ptr_flag",
                    "F_C_name": "accept_double_complex_out_ptr_flag",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1,\t flag",
                    "F_arguments": "arg1,\t flag",
                    "F_name_api": "accept_double_complex_out_ptr_flag",
                    "F_name_function": "accept_double_complex_out_ptr_flag",
                    "F_name_generic": "accept_double_complex_out_ptr_flag",
                    "F_name_impl": "accept_double_complex_out_ptr_flag",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptDoubleComplexOutPtrFlag",
                    "function_name": "acceptDoubleComplexOutPtrFlag",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine"
                }
            }
        ],
        "language": "c",
        "scope_file": [
            "ccomplex"
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "python": true
        }
    }
}