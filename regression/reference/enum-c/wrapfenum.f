! wrapfenum.f
! This file is generated by Shroud nowrite-version. Do not edit.
! Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
! other Shroud Project Developers.
! See the top-level COPYRIGHT file for details.
!
! SPDX-License-Identifier: (BSD-3-Clause)
!
!>
!! \file wrapfenum.f
!! \brief Shroud generated wrapper for enum library
!<
! splicer begin file_top
! splicer end file_top
module enum_mod
    use iso_c_binding, only : C_INT
    ! splicer begin module_use
    ! splicer end module_use
    implicit none

    ! splicer begin module_top
    ! splicer end module_top

    !  enum Color
    integer(C_INT), parameter :: red = 10
    integer(C_INT), parameter :: blue = 11
    integer(C_INT), parameter :: white = 12

    !  enum val
    integer(C_INT), parameter :: a1 = 0
    integer(C_INT), parameter :: b1 = 3
    integer(C_INT), parameter :: c1 = 4
    integer(C_INT), parameter :: d1 = b1-a1
    integer(C_INT), parameter :: e1 = d1
    integer(C_INT), parameter :: f1 = d1+1
    integer(C_INT), parameter :: g1 = d1+2
    integer(C_INT), parameter :: h1 = 100

    interface

        ! ----------------------------------------
        ! Function:  int convert_to_int
        ! Attrs:     +intent(function)
        ! Requested: c_function_native_scalar
        ! Match:     c_function
        ! ----------------------------------------
        ! Argument:  enum Color in +value
        ! Attrs:     +intent(in)
        ! Requested: c_in_native_scalar
        ! Match:     c_default
        function convert_to_int(in) &
                result(SHT_rv) &
                bind(C, name="convert_to_int")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), value, intent(IN) :: in
            integer(C_INT) :: SHT_rv
        end function convert_to_int
    end interface

    ! splicer begin additional_declarations
    ! splicer end additional_declarations

contains

#if 0
    ! Only the interface is needed
    ! ----------------------------------------
    ! Function:  int convert_to_int
    ! Attrs:     +intent(function)
    ! Requested: f_function_native_scalar
    ! Match:     f_function
    ! Attrs:     +intent(function)
    ! Requested: c_function_native_scalar
    ! Match:     c_function
    ! ----------------------------------------
    ! Argument:  enum Color in +value
    ! Attrs:     +intent(in)
    ! Requested: f_in_native_scalar
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_in_native_scalar
    ! Match:     c_default
    function convert_to_int(in) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        integer(C_INT), value, intent(IN) :: in
        integer(C_INT) :: SHT_rv
        ! splicer begin function.convert_to_int
        SHT_rv = c_convert_to_int(in)
        ! splicer end function.convert_to_int
    end function convert_to_int
#endif

    ! splicer begin additional_functions
    ! splicer end additional_functions

end module enum_mod
