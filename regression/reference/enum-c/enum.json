{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "enum.h"
        ],
        "enums": [
            {
                "<ENUM>": "****************************************",
                "_fmtmembers": {
                    "BLUE": {
                        "C_enum_member": "ENU_BLUE",
                        "F_enum_member": "blue",
                        "F_value": 11,
                        "enum_member_lower": "blue",
                        "enum_member_name": "BLUE",
                        "enum_member_upper": "BLUE"
                    },
                    "RED": {
                        "C_enum_member": "ENU_RED",
                        "C_value": 10,
                        "F_enum_member": "red",
                        "F_value": 10,
                        "enum_member_lower": "red",
                        "enum_member_name": "RED",
                        "enum_member_upper": "RED"
                    },
                    "WHITE": {
                        "C_enum_member": "ENU_WHITE",
                        "F_enum_member": "white",
                        "F_value": 12,
                        "enum_member_lower": "white",
                        "enum_member_name": "WHITE",
                        "enum_member_upper": "WHITE"
                    }
                },
                "ast": {
                    "members": [
                        {
                            "name": "RED",
                            "value": {
                                "constant": "10"
                            }
                        },
                        {
                            "name": "BLUE"
                        },
                        {
                            "name": "WHITE"
                        }
                    ],
                    "name": "Color"
                },
                "decl": "enum Color {\n  RED = 10,\n  BLUE,\n  WHITE\n};\n",
                "name": "Color",
                "options": {},
                "typemap_name": "Color",
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_enum": "ENU_Color",
                    "enum_lower": "color",
                    "enum_name": "Color",
                    "enum_upper": "COLOR"
                }
            },
            {
                "<ENUM>": "****************************************",
                "_fmtmembers": {
                    "a1": {
                        "C_enum_member": "ENU_a1",
                        "F_enum_member": "a1",
                        "F_value": 0,
                        "enum_member_lower": "a1",
                        "enum_member_name": "a1",
                        "enum_member_upper": "A1"
                    },
                    "b1": {
                        "C_enum_member": "ENU_b1",
                        "C_value": 3,
                        "F_enum_member": "b1",
                        "F_value": 3,
                        "enum_member_lower": "b1",
                        "enum_member_name": "b1",
                        "enum_member_upper": "B1"
                    },
                    "c1": {
                        "C_enum_member": "ENU_c1",
                        "F_enum_member": "c1",
                        "F_value": 4,
                        "enum_member_lower": "c1",
                        "enum_member_name": "c1",
                        "enum_member_upper": "C1"
                    },
                    "d1": {
                        "C_enum_member": "ENU_d1",
                        "C_value": "ENU_b1-ENU_a1",
                        "F_enum_member": "d1",
                        "F_value": "b1-a1",
                        "enum_member_lower": "d1",
                        "enum_member_name": "d1",
                        "enum_member_upper": "D1"
                    },
                    "e1": {
                        "C_enum_member": "ENU_e1",
                        "C_value": "ENU_d1",
                        "F_enum_member": "e1",
                        "F_value": "d1",
                        "enum_member_lower": "e1",
                        "enum_member_name": "e1",
                        "enum_member_upper": "E1"
                    },
                    "f1": {
                        "C_enum_member": "ENU_f1",
                        "F_enum_member": "f1",
                        "F_value": "d1+1",
                        "enum_member_lower": "f1",
                        "enum_member_name": "f1",
                        "enum_member_upper": "F1"
                    },
                    "g1": {
                        "C_enum_member": "ENU_g1",
                        "F_enum_member": "g1",
                        "F_value": "d1+2",
                        "enum_member_lower": "g1",
                        "enum_member_name": "g1",
                        "enum_member_upper": "G1"
                    },
                    "h1": {
                        "C_enum_member": "ENU_h1",
                        "C_value": 100,
                        "F_enum_member": "h1",
                        "F_value": 100,
                        "enum_member_lower": "h1",
                        "enum_member_name": "h1",
                        "enum_member_upper": "H1"
                    }
                },
                "ast": {
                    "members": [
                        {
                            "name": "a1"
                        },
                        {
                            "name": "b1",
                            "value": {
                                "constant": "3"
                            }
                        },
                        {
                            "name": "c1"
                        },
                        {
                            "name": "d1",
                            "value": {
                                "left": {
                                    "name": "b1"
                                },
                                "op": "-",
                                "right": {
                                    "name": "a1"
                                }
                            }
                        },
                        {
                            "name": "e1",
                            "value": {
                                "name": "d1"
                            }
                        },
                        {
                            "name": "f1"
                        },
                        {
                            "name": "g1"
                        },
                        {
                            "name": "h1",
                            "value": {
                                "constant": "100"
                            }
                        }
                    ],
                    "name": "val"
                },
                "decl": "enum val {\n  a1,\n  b1 = 3,\n  c1,\n  d1 = b1 - a1,\n  e1 = d1,\n  f1,\n  g1,\n  h1 = 100,\n};\n",
                "name": "val",
                "options": {},
                "typemap_name": "val",
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_enum": "ENU_val",
                    "enum_lower": "val",
                    "enum_name": "val",
                    "enum_upper": "VAL"
                }
            }
        ],
        "functions": [
            {
                "<FUNCTION>": "0 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "convert_to_int",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "in",
                                    "typemap_name": "Color"
                                },
                                "specifier": [
                                    "enum Color"
                                ],
                                "typemap_name": "Color"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int convert_to_int(enum Color in)",
                "declgen": "int convert_to_int(enum Color in +value)",
                "name": "convert_to_int",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "in",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&in",
                            "cxx_type": "enum Color",
                            "cxx_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "in",
                            "c_var": "in",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "in",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "in",
                            "ctor_expr": "in",
                            "cxx_addr": "&",
                            "cxx_decl": "enum Color SH_in",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&in",
                            "cxx_type": "enum Color",
                            "cxx_val": "(enum Color) in",
                            "cxx_var": "SH_in",
                            "data_var": "SHData_in",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_in",
                            "size_var": "SHSize_in",
                            "stmt0": "py_in_native_scalar",
                            "stmt1": "py_default",
                            "value_var": "SHValue_in"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "in",
                    "C_name": "convert_to_int",
                    "C_name_api": "convert_to_int",
                    "C_prototype": "int in",
                    "C_return_type": "int",
                    "F_C_arguments": "in",
                    "F_C_call": "c_convert_to_int",
                    "F_C_name": "convert_to_int",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "in",
                    "F_arguments": "in",
                    "F_name_api": "convert_to_int",
                    "F_name_function": "convert_to_int",
                    "F_name_generic": "convert_to_int",
                    "F_name_impl": "convert_to_int",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_convert_to_int",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "convert_to_int"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "int",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_native_scalar",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                }
            }
        ],
        "language": "c",
        "scope_file": [
            "enum"
        ],
        "user_fmt": {
            "PY_module_name": "cenum"
        },
        "wrap": {
            "c": true,
            "fortran": true,
            "python": true
        }
    },
    "symtab": {
        "Color": "enum-Color",
        "enum-Color": "Color",
        "enum-val": "val",
        "val": "enum-val"
    },
    "types": {
        "Color": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({ctor_expr})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "base": "integer",
            "c_to_cxx": "(enum Color) {c_var}",
            "c_type": "int",
            "cfi_type": "CFI_type_int",
            "cxx_to_c": "(int) {cxx_var}",
            "cxx_type": "enum Color",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_type": "integer(C_INT)",
            "flat_name": "int",
            "sgroup": "native",
            "sh_type": "SH_TYPE_INT"
        },
        "val": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({ctor_expr})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "base": "integer",
            "c_to_cxx": "(enum val) {c_var}",
            "c_type": "int",
            "cfi_type": "CFI_type_int",
            "cxx_to_c": "(int) {cxx_var}",
            "cxx_type": "enum val",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_type": "integer(C_INT)",
            "flat_name": "int",
            "sgroup": "native",
            "sh_type": "SH_TYPE_INT"
        }
    }
}