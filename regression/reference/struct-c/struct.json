{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "class_map": [
            "Arrays1",
            "Cstruct1",
            "Cstruct_as_class",
            "Cstruct_as_subclass",
            "Cstruct_list",
            "Cstruct_numpy",
            "Cstruct_ptr",
            "s_nested"
        ],
        "classes": [
            {
                "<CLASS>": "Cstruct1 ****************************************",
                "cxx_header": [],
                "name": "Cstruct1",
                "options": {
                    "literalinclude": true
                },
                "parse_keyword": "struct",
                "scope": "Cstruct1::",
                "typemap_name": "Cstruct1",
                "variables": [
                    {
                        "<VARIABLE>": "ifield ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "ifield",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "ifield",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "ifield",
                            "variable_lower": "ifield",
                            "variable_name": "ifield",
                            "variable_upper": "IFIELD"
                        }
                    },
                    {
                        "<VARIABLE>": "dfield ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "dfield",
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "name": "dfield",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "double",
                            "cxx_type": "double",
                            "field_name": "dfield",
                            "variable_lower": "dfield",
                            "variable_name": "dfield",
                            "variable_upper": "DFIELD"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapCstruct1.h",
                    "C_impl_filename": "wrapCstruct1.c",
                    "C_name_api": "Cstruct1",
                    "C_name_scope": "Cstruct1_",
                    "C_type_name": "Cstruct1",
                    "F_derived_name": "cstruct1",
                    "F_name_api": "cstruct1",
                    "F_name_scope": "cstruct1_",
                    "PY_struct_array_descr_create": "PY_Cstruct1_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct1_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct1_array_descr",
                    "class_scope": "Cstruct1::",
                    "cxx_class": "Cstruct1",
                    "cxx_type": "Cstruct1",
                    "file_scope": "Cstruct1"
                }
            },
            {
                "<CLASS>": "Cstruct_ptr ****************************************",
                "cxx_header": [],
                "name": "Cstruct_ptr",
                "options": {},
                "parse_keyword": "struct",
                "scope": "Cstruct_ptr::",
                "typemap_name": "Cstruct_ptr",
                "variables": [
                    {
                        "<VARIABLE>": "cfield ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "cfield",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "char"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        "name": "cfield",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "char",
                            "cxx_type": "char",
                            "field_name": "cfield",
                            "variable_lower": "cfield",
                            "variable_name": "cfield",
                            "variable_upper": "CFIELD"
                        }
                    },
                    {
                        "<VARIABLE>": "const_dvalue ****************************************",
                        "ast": {
                            "const": true,
                            "declarator": {
                                "name": "const_dvalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "name": "const_dvalue",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "double",
                            "cxx_type": "double",
                            "field_name": "const_dvalue",
                            "variable_lower": "const_dvalue",
                            "variable_name": "const_dvalue",
                            "variable_upper": "CONST_DVALUE"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapCstruct_ptr.h",
                    "C_impl_filename": "wrapCstruct_ptr.c",
                    "C_name_api": "Cstruct_ptr",
                    "C_name_scope": "Cstruct_ptr_",
                    "C_type_name": "Cstruct_ptr",
                    "F_derived_name": "cstruct_ptr",
                    "F_name_api": "cstruct_ptr",
                    "F_name_scope": "cstruct_ptr_",
                    "PY_struct_array_descr_create": "PY_Cstruct_ptr_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_ptr_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_ptr_array_descr",
                    "class_scope": "Cstruct_ptr::",
                    "cxx_class": "Cstruct_ptr",
                    "cxx_type": "Cstruct_ptr",
                    "file_scope": "Cstruct_ptr"
                }
            },
            {
                "<CLASS>": "Cstruct_list ****************************************",
                "cxx_header": [],
                "name": "Cstruct_list",
                "options": {
                    "PY_array_arg": "list"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct_list::",
                "typemap_name": "Cstruct_list",
                "variables": [
                    {
                        "<VARIABLE>": "nitems ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "nitems",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "nitems",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "nitems",
                            "variable_lower": "nitems",
                            "variable_name": "nitems",
                            "variable_upper": "NITEMS"
                        }
                    },
                    {
                        "<VARIABLE>": "ivalue ****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "nitems+nitems"
                                },
                                "metaattrs": {
                                    "dimension": [
                                        {
                                            "left": {
                                                "name": "nitems"
                                            },
                                            "op": "+",
                                            "right": {
                                                "name": "nitems"
                                            }
                                        }
                                    ]
                                },
                                "name": "ivalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "ivalue",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "ivalue",
                            "variable_lower": "ivalue",
                            "variable_name": "ivalue",
                            "variable_upper": "IVALUE"
                        }
                    },
                    {
                        "<VARIABLE>": "dvalue ****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "nitems*TWO"
                                },
                                "metaattrs": {
                                    "dimension": [
                                        {
                                            "left": {
                                                "name": "nitems"
                                            },
                                            "op": "*",
                                            "right": {
                                                "name": "TWO"
                                            }
                                        }
                                    ]
                                },
                                "name": "dvalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "name": "dvalue",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "double",
                            "cxx_type": "double",
                            "field_name": "dvalue",
                            "variable_lower": "dvalue",
                            "variable_name": "dvalue",
                            "variable_upper": "DVALUE"
                        }
                    },
                    {
                        "<VARIABLE>": "svalue ****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "nitems"
                                },
                                "metaattrs": {
                                    "dimension": [
                                        {
                                            "name": "nitems"
                                        }
                                    ]
                                },
                                "name": "svalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "char"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        "name": "svalue",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "char",
                            "cxx_type": "char",
                            "field_name": "svalue",
                            "variable_lower": "svalue",
                            "variable_name": "svalue",
                            "variable_upper": "SVALUE"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapCstruct_list.h",
                    "C_impl_filename": "wrapCstruct_list.c",
                    "C_name_api": "Cstruct_list",
                    "C_name_scope": "Cstruct_list_",
                    "C_type_name": "Cstruct_list",
                    "F_derived_name": "cstruct_list",
                    "F_name_api": "cstruct_list",
                    "F_name_scope": "cstruct_list_",
                    "PY_struct_array_descr_create": "PY_Cstruct_list_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_list_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_list_array_descr",
                    "class_scope": "Cstruct_list::",
                    "cxx_class": "Cstruct_list",
                    "cxx_type": "Cstruct_list",
                    "file_scope": "Cstruct_list"
                }
            },
            {
                "<CLASS>": "Cstruct_numpy ****************************************",
                "cxx_header": [],
                "name": "Cstruct_numpy",
                "options": {
                    "F_struct_getter_setter": false,
                    "PY_array_arg": "numpy"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct_numpy::",
                "typemap_name": "Cstruct_numpy",
                "variables": [
                    {
                        "<VARIABLE>": "nitems ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "nitems",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "nitems",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "nitems",
                            "variable_lower": "nitems",
                            "variable_name": "nitems",
                            "variable_upper": "NITEMS"
                        }
                    },
                    {
                        "<VARIABLE>": "ivalue ****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "nitems"
                                },
                                "metaattrs": {
                                    "dimension": [
                                        {
                                            "name": "nitems"
                                        }
                                    ]
                                },
                                "name": "ivalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "ivalue",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "ivalue",
                            "variable_lower": "ivalue",
                            "variable_name": "ivalue",
                            "variable_upper": "IVALUE"
                        }
                    },
                    {
                        "<VARIABLE>": "dvalue ****************************************",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "nitems"
                                },
                                "metaattrs": {
                                    "dimension": [
                                        {
                                            "name": "nitems"
                                        }
                                    ]
                                },
                                "name": "dvalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "name": "dvalue",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "double",
                            "cxx_type": "double",
                            "field_name": "dvalue",
                            "variable_lower": "dvalue",
                            "variable_name": "dvalue",
                            "variable_upper": "DVALUE"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapCstruct_numpy.h",
                    "C_impl_filename": "wrapCstruct_numpy.c",
                    "C_name_api": "Cstruct_numpy",
                    "C_name_scope": "Cstruct_numpy_",
                    "C_type_name": "Cstruct_numpy",
                    "F_derived_name": "cstruct_numpy",
                    "F_name_api": "cstruct_numpy",
                    "F_name_scope": "cstruct_numpy_",
                    "PY_struct_array_descr_create": "PY_Cstruct_numpy_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_numpy_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_numpy_array_descr",
                    "class_scope": "Cstruct_numpy::",
                    "cxx_class": "Cstruct_numpy",
                    "cxx_type": "Cstruct_numpy",
                    "file_scope": "Cstruct_numpy"
                }
            },
            {
                "<CLASS>": "Arrays1 ****************************************",
                "cxx_header": [],
                "name": "Arrays1",
                "options": {
                    "PY_array_arg": "numpy"
                },
                "parse_keyword": "struct",
                "scope": "Arrays1::",
                "typemap_name": "Arrays1",
                "variables": [
                    {
                        "<VARIABLE>": "name ****************************************",
                        "ast": {
                            "declarator": {
                                "array": [
                                    {
                                        "constant": "20"
                                    }
                                ],
                                "name": "name",
                                "typemap_name": "char"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        "name": "name",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "char",
                            "cxx_type": "char",
                            "field_name": "name",
                            "variable_lower": "name",
                            "variable_name": "name",
                            "variable_upper": "NAME"
                        }
                    },
                    {
                        "<VARIABLE>": "count ****************************************",
                        "ast": {
                            "declarator": {
                                "array": [
                                    {
                                        "constant": "10"
                                    }
                                ],
                                "name": "count",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "count",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "count",
                            "variable_lower": "count",
                            "variable_name": "count",
                            "variable_upper": "COUNT"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapArrays1.h",
                    "C_impl_filename": "wrapArrays1.c",
                    "C_name_api": "Arrays1",
                    "C_name_scope": "Arrays1_",
                    "C_type_name": "Arrays1",
                    "F_derived_name": "arrays1",
                    "F_name_api": "arrays1",
                    "F_name_scope": "arrays1_",
                    "PY_struct_array_descr_create": "PY_Arrays1_create_array_descr",
                    "PY_struct_array_descr_name": "Arrays1_dtype",
                    "PY_struct_array_descr_variable": "PY_Arrays1_array_descr",
                    "class_scope": "Arrays1::",
                    "cxx_class": "Arrays1",
                    "cxx_type": "Arrays1",
                    "file_scope": "Arrays1"
                }
            },
            {
                "<CLASS>": "Cstruct_as_class ****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "get_x1  0 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "getter"
                                },
                                "name": "get_x1",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int get_x1()",
                        "declgen": "int get_x1(void)",
                        "name": "get_x1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "x1",
                            "struct_name": "Cstruct_as_class",
                            "wrapped_name": "x1"
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "C_name": "STR_Cstruct_as_class_get_x1",
                            "C_name_api": "get_x1",
                            "C_prototype": "STR_Cstruct_as_class * self",
                            "C_return_type": "int",
                            "F_C_arguments": "self",
                            "F_C_call": "c_cstruct_as_class_get_x1",
                            "F_C_name": "c_cstruct_as_class_get_x1",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_api": "get_x1",
                            "F_name_function": "get_x1",
                            "F_name_generic": "get_x1",
                            "F_name_impl": "cstruct_as_class_get_x1",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "field_name": "x1",
                            "function_name": "get_x1",
                            "struct_name": "Cstruct_as_class",
                            "wrapped_name": "x1"
                        },
                        "zz_fmtresult": {
                            "fmtf": {
                                "c_const": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_int",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_type_module": "iso_c_binding",
                                "f_var": "SHT_rv",
                                "fc_var": "SHT_rv",
                                "i_var": "SHT_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "stmtc": "f_getter_native_scalar",
                                "stmtf": "f_getter_native_scalar"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "set_x1  1 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "setter"
                                },
                                "name": "set_x1",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "in",
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "setter"
                                            },
                                            "name": "val",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_x1(int val)",
                        "declgen": "void set_x1(int val +intent(in)+value)",
                        "name": "set_x1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "x1",
                            "struct_name": "Cstruct_as_class",
                            "wrapped_name": "x1"
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtargs": {
                            "val": {
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "val",
                                    "fc_var": "val",
                                    "i_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmtc": "f_setter_native_scalar",
                                    "stmtf": "f_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "val",
                            "C_name": "STR_Cstruct_as_class_set_x1",
                            "C_name_api": "set_x1",
                            "C_prototype": "STR_Cstruct_as_class * self,\t int val",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t val",
                            "F_C_call": "c_cstruct_as_class_set_x1",
                            "F_C_name": "c_cstruct_as_class_set_x1",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t val",
                            "F_arguments": "obj,\t val",
                            "F_name_api": "set_x1",
                            "F_name_function": "set_x1",
                            "F_name_generic": "set_x1",
                            "F_name_impl": "cstruct_as_class_set_x1",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "x1",
                            "function_name": "set_x1",
                            "stmtc": "f_setter",
                            "stmtf": "f_setter",
                            "struct_name": "Cstruct_as_class",
                            "wrapped_name": "x1"
                        }
                    },
                    {
                        "<FUNCTION>": "get_y1  2 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "getter"
                                },
                                "name": "get_y1",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int get_y1()",
                        "declgen": "int get_y1(void)",
                        "name": "get_y1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "y1",
                            "struct_name": "Cstruct_as_class",
                            "wrapped_name": "y1"
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "C_name": "STR_Cstruct_as_class_get_y1",
                            "C_name_api": "get_y1",
                            "C_prototype": "STR_Cstruct_as_class * self",
                            "C_return_type": "int",
                            "F_C_arguments": "self",
                            "F_C_call": "c_cstruct_as_class_get_y1",
                            "F_C_name": "c_cstruct_as_class_get_y1",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_api": "get_y1",
                            "F_name_function": "get_y1",
                            "F_name_generic": "get_y1",
                            "F_name_impl": "cstruct_as_class_get_y1",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "field_name": "y1",
                            "function_name": "get_y1",
                            "struct_name": "Cstruct_as_class",
                            "wrapped_name": "y1"
                        },
                        "zz_fmtresult": {
                            "fmtf": {
                                "c_const": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_int",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_type_module": "iso_c_binding",
                                "f_var": "SHT_rv",
                                "fc_var": "SHT_rv",
                                "i_var": "SHT_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "stmtc": "f_getter_native_scalar",
                                "stmtf": "f_getter_native_scalar"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "set_y1  3 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "setter"
                                },
                                "name": "set_y1",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "in",
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "setter"
                                            },
                                            "name": "val",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_y1(int val)",
                        "declgen": "void set_y1(int val +intent(in)+value)",
                        "name": "set_y1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "y1",
                            "struct_name": "Cstruct_as_class",
                            "wrapped_name": "y1"
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtargs": {
                            "val": {
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "val",
                                    "fc_var": "val",
                                    "i_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmtc": "f_setter_native_scalar",
                                    "stmtf": "f_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "val",
                            "C_name": "STR_Cstruct_as_class_set_y1",
                            "C_name_api": "set_y1",
                            "C_prototype": "STR_Cstruct_as_class * self,\t int val",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t val",
                            "F_C_call": "c_cstruct_as_class_set_y1",
                            "F_C_name": "c_cstruct_as_class_set_y1",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t val",
                            "F_arguments": "obj,\t val",
                            "F_name_api": "set_y1",
                            "F_name_function": "set_y1",
                            "F_name_generic": "set_y1",
                            "F_name_impl": "cstruct_as_class_set_y1",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "y1",
                            "function_name": "set_y1",
                            "stmtc": "f_setter",
                            "stmtf": "f_setter",
                            "struct_name": "Cstruct_as_class",
                            "wrapped_name": "y1"
                        }
                    }
                ],
                "name": "Cstruct_as_class",
                "options": {
                    "literalinclude": true,
                    "wrap_python": false,
                    "wrap_struct_as": "class"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct_as_class::",
                "typemap_name": "Cstruct_as_class",
                "variables": [
                    {
                        "<VARIABLE>": "x1 ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "x1",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "x1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "x1",
                            "variable_lower": "x1",
                            "variable_name": "x1",
                            "variable_upper": "X1"
                        }
                    },
                    {
                        "<VARIABLE>": "y1 ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "y1",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "y1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "y1",
                            "variable_lower": "y1",
                            "variable_name": "y1",
                            "variable_upper": "Y1"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "wrap_as": "class",
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapCstruct_as_class.h",
                    "C_impl_filename": "wrapCstruct_as_class.c",
                    "C_name_api": "Cstruct_as_class",
                    "C_name_scope": "Cstruct_as_class_",
                    "C_type_name": "STR_Cstruct_as_class",
                    "F_derived_name": "cstruct_as_class",
                    "F_name_api": "cstruct_as_class",
                    "F_name_scope": "cstruct_as_class_",
                    "PY_struct_array_descr_create": "PY_Cstruct_as_class_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_as_class_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_as_class_array_descr",
                    "class_scope": "Cstruct_as_class::",
                    "cxx_class": "Cstruct_as_class",
                    "cxx_type": "Cstruct_as_class",
                    "f_capsule_data_type": "STR_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "STR_SHROUD_capsule_data",
                    "file_scope": "Cstruct_as_class"
                }
            },
            {
                "<CLASS>": "Cstruct_as_subclass ****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "get_x1  4 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "getter"
                                },
                                "name": "get_x1",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int get_x1()",
                        "declgen": "int get_x1(void)",
                        "name": "get_x1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "x1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "x1"
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "C_name": "STR_Cstruct_as_subclass_get_x1",
                            "C_name_api": "get_x1",
                            "C_prototype": "STR_Cstruct_as_subclass * self",
                            "C_return_type": "int",
                            "F_C_arguments": "self",
                            "F_C_call": "c_cstruct_as_subclass_get_x1",
                            "F_C_name": "c_cstruct_as_subclass_get_x1",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_api": "get_x1",
                            "F_name_function": "get_x1",
                            "F_name_generic": "get_x1",
                            "F_name_impl": "cstruct_as_subclass_get_x1",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "field_name": "x1",
                            "function_name": "get_x1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "x1"
                        },
                        "zz_fmtresult": {
                            "fmtf": {
                                "c_const": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_int",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_type_module": "iso_c_binding",
                                "f_var": "SHT_rv",
                                "fc_var": "SHT_rv",
                                "i_var": "SHT_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "stmtc": "f_getter_native_scalar",
                                "stmtf": "f_getter_native_scalar"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "set_x1  5 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "setter"
                                },
                                "name": "set_x1",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "in",
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "setter"
                                            },
                                            "name": "val",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_x1(int val)",
                        "declgen": "void set_x1(int val +intent(in)+value)",
                        "name": "set_x1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "x1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "x1"
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtargs": {
                            "val": {
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "val",
                                    "fc_var": "val",
                                    "i_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmtc": "f_setter_native_scalar",
                                    "stmtf": "f_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "val",
                            "C_name": "STR_Cstruct_as_subclass_set_x1",
                            "C_name_api": "set_x1",
                            "C_prototype": "STR_Cstruct_as_subclass * self,\t int val",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t val",
                            "F_C_call": "c_cstruct_as_subclass_set_x1",
                            "F_C_name": "c_cstruct_as_subclass_set_x1",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t val",
                            "F_arguments": "obj,\t val",
                            "F_name_api": "set_x1",
                            "F_name_function": "set_x1",
                            "F_name_generic": "set_x1",
                            "F_name_impl": "cstruct_as_subclass_set_x1",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "x1",
                            "function_name": "set_x1",
                            "stmtc": "f_setter",
                            "stmtf": "f_setter",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "x1"
                        }
                    },
                    {
                        "<FUNCTION>": "get_y1  6 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "getter"
                                },
                                "name": "get_y1",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int get_y1()",
                        "declgen": "int get_y1(void)",
                        "name": "get_y1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "y1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "y1"
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "C_name": "STR_Cstruct_as_subclass_get_y1",
                            "C_name_api": "get_y1",
                            "C_prototype": "STR_Cstruct_as_subclass * self",
                            "C_return_type": "int",
                            "F_C_arguments": "self",
                            "F_C_call": "c_cstruct_as_subclass_get_y1",
                            "F_C_name": "c_cstruct_as_subclass_get_y1",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_api": "get_y1",
                            "F_name_function": "get_y1",
                            "F_name_generic": "get_y1",
                            "F_name_impl": "cstruct_as_subclass_get_y1",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "field_name": "y1",
                            "function_name": "get_y1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "y1"
                        },
                        "zz_fmtresult": {
                            "fmtf": {
                                "c_const": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_int",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_type_module": "iso_c_binding",
                                "f_var": "SHT_rv",
                                "fc_var": "SHT_rv",
                                "i_var": "SHT_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "stmtc": "f_getter_native_scalar",
                                "stmtf": "f_getter_native_scalar"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "set_y1  7 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "setter"
                                },
                                "name": "set_y1",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "in",
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "setter"
                                            },
                                            "name": "val",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_y1(int val)",
                        "declgen": "void set_y1(int val +intent(in)+value)",
                        "name": "set_y1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "y1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "y1"
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtargs": {
                            "val": {
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "val",
                                    "fc_var": "val",
                                    "i_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmtc": "f_setter_native_scalar",
                                    "stmtf": "f_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "val",
                            "C_name": "STR_Cstruct_as_subclass_set_y1",
                            "C_name_api": "set_y1",
                            "C_prototype": "STR_Cstruct_as_subclass * self,\t int val",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t val",
                            "F_C_call": "c_cstruct_as_subclass_set_y1",
                            "F_C_name": "c_cstruct_as_subclass_set_y1",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t val",
                            "F_arguments": "obj,\t val",
                            "F_name_api": "set_y1",
                            "F_name_function": "set_y1",
                            "F_name_generic": "set_y1",
                            "F_name_impl": "cstruct_as_subclass_set_y1",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "y1",
                            "function_name": "set_y1",
                            "stmtc": "f_setter",
                            "stmtf": "f_setter",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "y1"
                        }
                    },
                    {
                        "<FUNCTION>": "get_z1  8 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "getter"
                                },
                                "name": "get_z1",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int get_z1()",
                        "declgen": "int get_z1(void)",
                        "name": "get_z1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "z1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "z1"
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "C_name": "STR_Cstruct_as_subclass_get_z1",
                            "C_name_api": "get_z1",
                            "C_prototype": "STR_Cstruct_as_subclass * self",
                            "C_return_type": "int",
                            "F_C_arguments": "self",
                            "F_C_call": "c_cstruct_as_subclass_get_z1",
                            "F_C_name": "c_cstruct_as_subclass_get_z1",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_api": "get_z1",
                            "F_name_function": "get_z1",
                            "F_name_generic": "get_z1",
                            "F_name_impl": "cstruct_as_subclass_get_z1",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "field_name": "z1",
                            "function_name": "get_z1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "z1"
                        },
                        "zz_fmtresult": {
                            "fmtf": {
                                "c_const": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_int",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_type_module": "iso_c_binding",
                                "f_var": "SHT_rv",
                                "fc_var": "SHT_rv",
                                "i_var": "SHT_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "stmtc": "f_getter_native_scalar",
                                "stmtf": "f_getter_native_scalar"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "set_z1  9 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "setter"
                                },
                                "name": "set_z1",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "in",
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "setter"
                                            },
                                            "name": "val",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_z1(int val)",
                        "declgen": "void set_z1(int val +intent(in)+value)",
                        "name": "set_z1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "z1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "z1"
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtargs": {
                            "val": {
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "val",
                                    "fc_var": "val",
                                    "i_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmtc": "f_setter_native_scalar",
                                    "stmtf": "f_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "val",
                            "C_name": "STR_Cstruct_as_subclass_set_z1",
                            "C_name_api": "set_z1",
                            "C_prototype": "STR_Cstruct_as_subclass * self,\t int val",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t val",
                            "F_C_call": "c_cstruct_as_subclass_set_z1",
                            "F_C_name": "c_cstruct_as_subclass_set_z1",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t val",
                            "F_arguments": "obj,\t val",
                            "F_name_api": "set_z1",
                            "F_name_function": "set_z1",
                            "F_name_generic": "set_z1",
                            "F_name_impl": "cstruct_as_subclass_set_z1",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "z1",
                            "function_name": "set_z1",
                            "stmtc": "f_setter",
                            "stmtf": "f_setter",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "z1"
                        }
                    }
                ],
                "name": "Cstruct_as_subclass",
                "options": {
                    "class_baseclass": "Cstruct_as_class",
                    "literalinclude": true,
                    "wrap_python": false,
                    "wrap_struct_as": "class"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct_as_subclass::",
                "typemap_name": "Cstruct_as_subclass",
                "variables": [
                    {
                        "<VARIABLE>": "x1 ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "x1",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "x1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "x1",
                            "variable_lower": "x1",
                            "variable_name": "x1",
                            "variable_upper": "X1"
                        }
                    },
                    {
                        "<VARIABLE>": "y1 ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "y1",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "y1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "y1",
                            "variable_lower": "y1",
                            "variable_name": "y1",
                            "variable_upper": "Y1"
                        }
                    },
                    {
                        "<VARIABLE>": "z1 ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "z1",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "z1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "z1",
                            "variable_lower": "z1",
                            "variable_name": "z1",
                            "variable_upper": "Z1"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "wrap_as": "class",
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapCstruct_as_subclass.h",
                    "C_impl_filename": "wrapCstruct_as_subclass.c",
                    "C_name_api": "Cstruct_as_subclass",
                    "C_name_scope": "Cstruct_as_subclass_",
                    "C_type_name": "STR_Cstruct_as_subclass",
                    "F_derived_member_base": "cstruct_as_class",
                    "F_derived_name": "cstruct_as_subclass",
                    "F_name_api": "cstruct_as_subclass",
                    "F_name_scope": "cstruct_as_subclass_",
                    "PY_struct_array_descr_create": "PY_Cstruct_as_subclass_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_as_subclass_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_as_subclass_array_descr",
                    "class_scope": "Cstruct_as_subclass::",
                    "cxx_class": "Cstruct_as_subclass",
                    "cxx_type": "Cstruct_as_subclass",
                    "f_capsule_data_type": "STR_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "STR_SHROUD_capsule_data",
                    "file_scope": "Cstruct_as_subclass"
                }
            },
            {
                "<CLASS>": "s_nested ****************************************",
                "cxx_header": [],
                "name": "s_nested",
                "options": {
                    "wrap_python": false
                },
                "parse_keyword": "struct",
                "scope": "s_nested::",
                "typemap_name": "s_nested",
                "variables": [
                    {
                        "<VARIABLE>": "sublevels ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "sublevels",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "sublevels",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "sublevels",
                            "variable_lower": "sublevels",
                            "variable_name": "sublevels",
                            "variable_upper": "SUBLEVELS"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wraps_nested.h",
                    "C_impl_filename": "wraps_nested.c",
                    "C_name_api": "s_nested",
                    "C_name_scope": "s_nested_",
                    "C_type_name": "s_nested",
                    "F_derived_name": "s_nested",
                    "F_name_api": "s_nested",
                    "F_name_scope": "s_nested_",
                    "PY_struct_array_descr_create": "PY_s_nested_create_array_descr",
                    "PY_struct_array_descr_name": "s_nested_dtype",
                    "PY_struct_array_descr_variable": "PY_s_nested_array_descr",
                    "class_scope": "s_nested::",
                    "cxx_class": "s_nested",
                    "cxx_type": "s_nested",
                    "file_scope": "s_nested"
                }
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "struct.h"
        ],
        "functions": [
            {
                "<FUNCTION>": "passStructByValue  10 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "passStructByValue",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "Cstruct1"
                                },
                                "specifier": [
                                    "Cstruct1"
                                ],
                                "typemap_name": "Cstruct1"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStructByValue(Cstruct1 arg)",
                "declgen": "int passStructByValue(Cstruct1 arg +value)",
                "name": "passStructByValue",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "Cstruct1",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "arg",
                            "f_derived_type": "cstruct1",
                            "f_intent": "IN",
                            "f_kind": "cstruct1",
                            "f_type": "type(cstruct1)",
                            "f_type_module": "struct_mod",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_in_struct_scalar",
                            "stmtf": "f_in_struct_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "passStructByValue",
                    "C_name_api": "passStructByValue",
                    "C_prototype": "Cstruct1 arg",
                    "C_return_type": "int",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_pass_struct_by_value",
                    "F_C_name": "pass_struct_by_value",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_api": "pass_struct_by_value",
                    "F_name_function": "pass_struct_by_value",
                    "F_name_generic": "pass_struct_by_value",
                    "F_name_impl": "pass_struct_by_value",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passStructByValue"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar",
                        "stmtf": "f_function_native_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "passStruct1  11 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "passStruct1",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct1"
                                },
                                "specifier": [
                                    "Cstruct1"
                                ],
                                "typemap_name": "Cstruct1"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStruct1(const Cstruct1 *arg)",
                "declgen": "int passStruct1(const Cstruct1 * arg)",
                "name": "passStruct1",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct1",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(Cstruct1 *) arg",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "arg",
                            "f_derived_type": "cstruct1",
                            "f_intent": "IN",
                            "f_kind": "cstruct1",
                            "f_type": "type(cstruct1)",
                            "f_type_module": "struct_mod",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_in_struct_*",
                            "stmtf": "f_in_struct_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "passStruct1",
                    "C_name_api": "passStruct1",
                    "C_prototype": "const Cstruct1 * arg",
                    "C_return_type": "int",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_pass_struct1",
                    "F_C_name": "pass_struct1",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_api": "pass_struct1",
                    "F_name_function": "pass_struct1",
                    "F_name_generic": "pass_struct1",
                    "F_name_impl": "pass_struct1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passStruct1"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar",
                        "stmtf": "f_function_native_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "passStruct2  12 ****************************************",
                "_PTR_F_C_index": "30",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "passStruct2",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "s1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct1"
                                },
                                "specifier": [
                                    "Cstruct1"
                                ],
                                "typemap_name": "Cstruct1"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "charlen": "LENOUTBUF",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "outbuf",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStruct2(const Cstruct1 *s1, char *outbuf+intent(out)+charlen(LENOUTBUF))",
                "declgen": "int passStruct2(const Cstruct1 * s1, char * outbuf +charlen(LENOUTBUF)+intent(out))",
                "doxygen": {
                    "description": "Pass name argument which will build a bufferify function.\n"
                },
                "name": "passStruct2",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "outbuf": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "outbuf",
                            "i_var": "outbuf",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_out_char_*"
                        }
                    },
                    "s1": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct1",
                            "c_var": "s1",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(Cstruct1 *) s1",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "s1",
                            "f_derived_type": "cstruct1",
                            "f_intent": "IN",
                            "f_kind": "cstruct1",
                            "f_type": "type(cstruct1)",
                            "f_type_module": "struct_mod",
                            "f_var": "s1",
                            "i_var": "s1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_in_struct_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "s1,\t outbuf",
                    "C_name": "passStruct2",
                    "C_name_api": "passStruct2",
                    "C_prototype": "const Cstruct1 * s1,\t char * outbuf",
                    "C_return_type": "int",
                    "F_C_arguments": "s1,\t outbuf",
                    "F_C_name": "c_pass_struct2",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "pass_struct2",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passStruct2"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "passStruct2  30 ****************************************",
                "_PTR_C_CXX_index": "12",
                "_generated": "arg_to_buffer",
                "_generated_path": [
                    "arg_to_buffer"
                ],
                "_orig_node_index": 12,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "passStruct2",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "s1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct1"
                                },
                                "specifier": [
                                    "Cstruct1"
                                ],
                                "typemap_name": "Cstruct1"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "charlen": "LENOUTBUF",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "api": "buf",
                                        "intent": "out"
                                    },
                                    "name": "outbuf",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStruct2(const Cstruct1 *s1, char *outbuf+intent(out)+charlen(LENOUTBUF))",
                "declgen": "int passStruct2(const Cstruct1 * s1, char * outbuf +charlen(LENOUTBUF)+intent(out))",
                "doxygen": {
                    "description": "Pass name argument which will build a bufferify function.\n"
                },
                "name": "passStruct2",
                "options": {},
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "outbuf": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_blank_fill": "ShroudCharBlankFill",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "c_var_len": "SHT_outbuf_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "outbuf",
                            "f_var_len": "SHT_outbuf_len",
                            "fc_var": "outbuf",
                            "i_var": "outbuf",
                            "i_var_len": "SHT_outbuf_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_out_char_*_buf",
                            "stmtf": "f_out_char_*_buf"
                        }
                    },
                    "s1": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct1",
                            "c_var": "s1",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(Cstruct1 *) s1",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "s1",
                            "f_derived_type": "cstruct1",
                            "f_intent": "IN",
                            "f_kind": "cstruct1",
                            "f_type": "type(cstruct1)",
                            "f_type_module": "struct_mod",
                            "f_var": "s1",
                            "fc_var": "s1",
                            "i_var": "s1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_in_struct_*",
                            "stmtf": "f_in_struct_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "s1,\t outbuf",
                    "C_name": "STR_passStruct2_bufferify",
                    "C_name_api": "passStruct2",
                    "C_prototype": "const Cstruct1 * s1,\t char *outbuf,\t int SHT_outbuf_len",
                    "C_return_type": "int",
                    "F_C_arguments": "s1,\t outbuf,\t SHT_outbuf_len",
                    "F_C_call": "c_pass_struct2_bufferify",
                    "F_C_name": "c_pass_struct2_bufferify",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "s1,\t outbuf,\t SHT_outbuf_len",
                    "F_arguments": "s1,\t outbuf",
                    "F_name_api": "pass_struct2",
                    "F_name_function": "pass_struct2",
                    "F_name_generic": "pass_struct2",
                    "F_name_impl": "pass_struct2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "f_c_suffix": "_bufferify",
                    "function_name": "passStruct2"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar",
                        "stmtf": "f_function_native_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "acceptStructInPtr  13 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "acceptStructInPtr",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in"
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct1"
                                },
                                "specifier": [
                                    "Cstruct1"
                                ],
                                "typemap_name": "Cstruct1"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int acceptStructInPtr(Cstruct1 *arg +intent(in))",
                "declgen": "int acceptStructInPtr(Cstruct1 * arg +intent(in))",
                "name": "acceptStructInPtr",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct1",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "arg",
                            "f_derived_type": "cstruct1",
                            "f_intent": "IN",
                            "f_kind": "cstruct1",
                            "f_type": "type(cstruct1)",
                            "f_type_module": "struct_mod",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_in_struct_*",
                            "stmtf": "f_in_struct_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "acceptStructInPtr",
                    "C_name_api": "acceptStructInPtr",
                    "C_prototype": "Cstruct1 * arg",
                    "C_return_type": "int",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_accept_struct_in_ptr",
                    "F_C_name": "accept_struct_in_ptr",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_api": "accept_struct_in_ptr",
                    "F_name_function": "accept_struct_in_ptr",
                    "F_name_generic": "accept_struct_in_ptr",
                    "F_name_impl": "accept_struct_in_ptr",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "acceptStructInPtr"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar",
                        "stmtf": "f_function_native_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "acceptStructOutPtr  14 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "acceptStructOutPtr",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct1"
                                },
                                "specifier": [
                                    "Cstruct1"
                                ],
                                "typemap_name": "Cstruct1"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "i",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "d",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStructOutPtr(Cstruct1 *arg +intent(out), int i, double d)",
                "declgen": "void acceptStructOutPtr(Cstruct1 * arg +intent(out), int i +value, double d +value)",
                "doxygen": {
                    "description": "Pass name argument which will build a bufferify function.\n"
                },
                "name": "acceptStructOutPtr",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct1",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "arg",
                            "f_derived_type": "cstruct1",
                            "f_intent": "OUT",
                            "f_kind": "cstruct1",
                            "f_type": "type(cstruct1)",
                            "f_type_module": "struct_mod",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_out_struct_*",
                            "stmtf": "f_out_struct_*"
                        }
                    },
                    "d": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "d",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&d",
                            "cxx_type": "double",
                            "cxx_var": "d",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "d",
                            "fc_var": "d",
                            "i_var": "d",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    },
                    "i": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "i",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "i",
                            "fc_var": "i",
                            "i_var": "i",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg,\t i,\t d",
                    "C_name": "acceptStructOutPtr",
                    "C_name_api": "acceptStructOutPtr",
                    "C_prototype": "Cstruct1 * arg,\t int i,\t double d",
                    "C_return_type": "void",
                    "F_C_arguments": "arg,\t i,\t d",
                    "F_C_call": "c_accept_struct_out_ptr",
                    "F_C_name": "accept_struct_out_ptr",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg,\t i,\t d",
                    "F_arguments": "arg,\t i,\t d",
                    "F_name_api": "accept_struct_out_ptr",
                    "F_name_function": "accept_struct_out_ptr",
                    "F_name_generic": "accept_struct_out_ptr",
                    "F_name_impl": "accept_struct_out_ptr",
                    "F_subprogram": "subroutine",
                    "function_name": "acceptStructOutPtr",
                    "stmtc": "f_subroutine",
                    "stmtf": "f_subroutine"
                }
            },
            {
                "<FUNCTION>": "acceptStructInOutPtr  15 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "acceptStructInOutPtr",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "inout"
                                    },
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct1"
                                },
                                "specifier": [
                                    "Cstruct1"
                                ],
                                "typemap_name": "Cstruct1"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStructInOutPtr(Cstruct1 *arg +intent(inout))",
                "declgen": "void acceptStructInOutPtr(Cstruct1 * arg +intent(inout))",
                "name": "acceptStructInOutPtr",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct1",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "arg",
                            "f_derived_type": "cstruct1",
                            "f_intent": "INOUT",
                            "f_kind": "cstruct1",
                            "f_type": "type(cstruct1)",
                            "f_type_module": "struct_mod",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_inout_struct_*",
                            "stmtf": "f_inout_struct_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "acceptStructInOutPtr",
                    "C_name_api": "acceptStructInOutPtr",
                    "C_prototype": "Cstruct1 * arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_accept_struct_in_out_ptr",
                    "F_C_name": "accept_struct_in_out_ptr",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_api": "accept_struct_in_out_ptr",
                    "F_name_function": "accept_struct_in_out_ptr",
                    "F_name_generic": "accept_struct_in_out_ptr",
                    "F_name_impl": "accept_struct_in_out_ptr",
                    "F_subprogram": "subroutine",
                    "function_name": "acceptStructInOutPtr",
                    "stmtc": "f_subroutine",
                    "stmtf": "f_subroutine"
                }
            },
            {
                "<FUNCTION>": "returnStructByValue  16 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "returnStructByValue",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "i",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "d",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "Cstruct1"
                    },
                    "specifier": [
                        "Cstruct1"
                    ],
                    "typemap_name": "Cstruct1"
                },
                "decl": "Cstruct1 returnStructByValue(int i, double d);",
                "declgen": "Cstruct1 returnStructByValue(int i +value, double d +value)",
                "name": "returnStructByValue",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "d": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "d",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&d",
                            "cxx_type": "double",
                            "cxx_var": "d",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "d",
                            "fc_var": "d",
                            "i_var": "d",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    },
                    "i": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "i",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "i",
                            "fc_var": "i",
                            "i_var": "i",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "i,\t d",
                    "C_name": "STR_returnStructByValue",
                    "C_name_api": "returnStructByValue",
                    "C_prototype": "int i,\t double d,\t Cstruct1 *SHC_rv",
                    "C_return_type": "void",
                    "F_C_arguments": "i,\t d,\t SHT_rv",
                    "F_C_call": "c_return_struct_by_value",
                    "F_C_name": "c_return_struct_by_value",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "i,\t d,\t SHT_rv",
                    "F_arguments": "i,\t d",
                    "F_name_api": "return_struct_by_value",
                    "F_name_function": "return_struct_by_value",
                    "F_name_generic": "return_struct_by_value",
                    "F_name_impl": "return_struct_by_value",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "Cstruct1 SHCXX_rv",
                    "function_name": "returnStructByValue"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_type": "Cstruct1",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_struct",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "Cstruct1",
                        "cxx_var": "SHCXX_rv",
                        "f_derived_type": "cstruct1",
                        "f_intent": "OUT",
                        "f_kind": "cstruct1",
                        "f_type": "type(cstruct1)",
                        "f_type_module": "struct_mod",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmtc": "f_function_struct_scalar",
                        "stmtf": "f_function_struct_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "returnStructPtr1  17 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "deref": "pointer",
                            "intent": "function"
                        },
                        "name": "returnStructPtr1",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "i",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "d",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "Cstruct1"
                    },
                    "specifier": [
                        "Cstruct1"
                    ],
                    "typemap_name": "Cstruct1"
                },
                "decl": "Cstruct1 *returnStructPtr1(int i, double d)",
                "declgen": "Cstruct1 * returnStructPtr1(int i +value, double d +value)",
                "doxygen": {
                    "brief": "Return a pointer to a struct",
                    "description": "Does not generate a bufferify C wrapper.\n"
                },
                "name": "returnStructPtr1",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "d": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "d",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&d",
                            "cxx_type": "double",
                            "cxx_var": "d",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "d",
                            "fc_var": "d",
                            "i_var": "d",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    },
                    "i": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "i",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "i",
                            "fc_var": "i",
                            "i_var": "i",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "i,\t d",
                    "C_name": "returnStructPtr1",
                    "C_name_api": "returnStructPtr1",
                    "C_prototype": "int i,\t double d",
                    "C_return_type": "Cstruct1 *",
                    "F_C_arguments": "i,\t d",
                    "F_C_call": "c_return_struct_ptr1",
                    "F_C_name": "c_return_struct_ptr1",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "i,\t d",
                    "F_arguments": "i,\t d",
                    "F_name_api": "return_struct_ptr1",
                    "F_name_function": "return_struct_ptr1",
                    "F_name_generic": "return_struct_ptr1",
                    "F_name_impl": "return_struct_ptr1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "Cstruct1 * SHC_rv",
                    "function_name": "returnStructPtr1"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "Cstruct1",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_struct",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "Cstruct1",
                        "cxx_var": "SHC_rv",
                        "f_derived_type": "cstruct1",
                        "f_intent": "OUT",
                        "f_kind": "cstruct1",
                        "f_local_ptr": "SHC_rv_ptr",
                        "f_type": "type(cstruct1)",
                        "f_type_module": "struct_mod",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmtc": "f_function_struct_*_pointer",
                        "stmtf": "f_function_struct_*_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "returnStructPtr2  18 ****************************************",
                "_PTR_F_C_index": "31",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "deref": "pointer",
                            "intent": "function"
                        },
                        "name": "returnStructPtr2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "i",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "d",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "charlen": "LENOUTBUF",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "outbuf",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "Cstruct1"
                    },
                    "specifier": [
                        "Cstruct1"
                    ],
                    "typemap_name": "Cstruct1"
                },
                "decl": "Cstruct1 *returnStructPtr2(int i, double d, char *outbuf+intent(out)+charlen(LENOUTBUF))",
                "declgen": "Cstruct1 * returnStructPtr2(int i +value, double d +value, char * outbuf +charlen(LENOUTBUF)+intent(out))",
                "doxygen": {
                    "brief": "Return a pointer to a struct",
                    "description": "Generates a bufferify C wrapper function.\n"
                },
                "name": "returnStructPtr2",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "d": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "d",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&d",
                            "cxx_type": "double",
                            "cxx_var": "d",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "d",
                            "i_var": "d",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmtc": "f_in_native_scalar"
                        }
                    },
                    "i": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "i",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "i",
                            "i_var": "i",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar"
                        }
                    },
                    "outbuf": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "outbuf",
                            "i_var": "outbuf",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_out_char_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "i,\t d,\t outbuf",
                    "C_name": "returnStructPtr2",
                    "C_name_api": "returnStructPtr2",
                    "C_prototype": "int i,\t double d,\t char * outbuf",
                    "C_return_type": "Cstruct1 *",
                    "F_C_arguments": "i,\t d,\t outbuf",
                    "F_C_name": "c_return_struct_ptr2",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "return_struct_ptr2",
                    "cxx_rv_decl": "Cstruct1 * SHC_rv",
                    "function_name": "returnStructPtr2"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "Cstruct1",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_struct",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "Cstruct1",
                        "cxx_var": "SHC_rv",
                        "f_derived_type": "cstruct1",
                        "f_intent": "OUT",
                        "f_kind": "cstruct1",
                        "f_type": "type(cstruct1)",
                        "f_type_module": "struct_mod",
                        "f_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmtc": "f_function_struct_*_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "returnStructPtr2  31 ****************************************",
                "_PTR_C_CXX_index": "18",
                "_generated": "arg_to_buffer",
                "_generated_path": [
                    "arg_to_buffer"
                ],
                "_orig_node_index": 18,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "deref": "pointer",
                            "intent": "function"
                        },
                        "name": "returnStructPtr2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "i",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "d",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "charlen": "LENOUTBUF",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "api": "buf",
                                        "intent": "out"
                                    },
                                    "name": "outbuf",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "Cstruct1"
                    },
                    "specifier": [
                        "Cstruct1"
                    ],
                    "typemap_name": "Cstruct1"
                },
                "decl": "Cstruct1 *returnStructPtr2(int i, double d, char *outbuf+intent(out)+charlen(LENOUTBUF))",
                "declgen": "Cstruct1 * returnStructPtr2(int i +value, double d +value, char * outbuf +charlen(LENOUTBUF)+intent(out))",
                "doxygen": {
                    "brief": "Return a pointer to a struct",
                    "description": "Generates a bufferify C wrapper function.\n"
                },
                "name": "returnStructPtr2",
                "options": {},
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "d": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "d",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&d",
                            "cxx_type": "double",
                            "cxx_var": "d",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "d",
                            "fc_var": "d",
                            "i_var": "d",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    },
                    "i": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "i",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "i",
                            "fc_var": "i",
                            "i_var": "i",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    },
                    "outbuf": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_blank_fill": "ShroudCharBlankFill",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "c_var_len": "SHT_outbuf_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "outbuf",
                            "f_var_len": "SHT_outbuf_len",
                            "fc_var": "outbuf",
                            "i_var": "outbuf",
                            "i_var_len": "SHT_outbuf_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_out_char_*_buf",
                            "stmtf": "f_out_char_*_buf"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "i,\t d,\t outbuf",
                    "C_name": "STR_returnStructPtr2_bufferify",
                    "C_name_api": "returnStructPtr2",
                    "C_prototype": "int i,\t double d,\t char *outbuf,\t int SHT_outbuf_len",
                    "C_return_type": "Cstruct1 *",
                    "F_C_arguments": "i,\t d,\t outbuf,\t SHT_outbuf_len",
                    "F_C_call": "c_return_struct_ptr2_bufferify",
                    "F_C_name": "c_return_struct_ptr2_bufferify",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "i,\t d,\t outbuf,\t SHT_outbuf_len",
                    "F_arguments": "i,\t d,\t outbuf",
                    "F_name_api": "return_struct_ptr2",
                    "F_name_function": "return_struct_ptr2",
                    "F_name_generic": "return_struct_ptr2",
                    "F_name_impl": "return_struct_ptr2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "Cstruct1 * SHC_rv",
                    "f_c_suffix": "_bufferify",
                    "function_name": "returnStructPtr2"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "Cstruct1",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_struct",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "Cstruct1",
                        "cxx_var": "SHC_rv",
                        "f_derived_type": "cstruct1",
                        "f_intent": "OUT",
                        "f_kind": "cstruct1",
                        "f_local_ptr": "SHC_rv_ptr",
                        "f_type": "type(cstruct1)",
                        "f_type_module": "struct_mod",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmtc": "f_function_struct_*_pointer",
                        "stmtf": "f_function_struct_*_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "get_global_struct_list  19 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "deref": "pointer",
                            "intent": "function"
                        },
                        "name": "get_global_struct_list",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "Cstruct_list"
                    },
                    "specifier": [
                        "Cstruct_list"
                    ],
                    "typemap_name": "Cstruct_list"
                },
                "decl": "Cstruct_list *get_global_struct_list();",
                "declgen": "Cstruct_list * get_global_struct_list(void)",
                "name": "get_global_struct_list",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "get_global_struct_list",
                    "C_name_api": "get_global_struct_list",
                    "C_prototype": "void",
                    "C_return_type": "Cstruct_list *",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_global_struct_list",
                    "F_C_name": "c_get_global_struct_list",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arguments": "",
                    "F_name_api": "get_global_struct_list",
                    "F_name_function": "get_global_struct_list",
                    "F_name_generic": "get_global_struct_list",
                    "F_name_impl": "get_global_struct_list",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "Cstruct_list * SHC_rv",
                    "function_name": "get_global_struct_list"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "Cstruct_list",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_struct",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "Cstruct_list",
                        "cxx_var": "SHC_rv",
                        "f_derived_type": "cstruct_list",
                        "f_intent": "OUT",
                        "f_kind": "cstruct_list",
                        "f_local_ptr": "SHC_rv_ptr",
                        "f_type": "type(cstruct_list)",
                        "f_type_module": "struct_mod",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmtc": "f_function_struct_*_pointer",
                        "stmtf": "f_function_struct_*_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "Create_Cstruct_as_class  20 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "api": "capptr",
                            "intent": "function"
                        },
                        "name": "Create_Cstruct_as_class",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "Cstruct_as_class"
                    },
                    "specifier": [
                        "Cstruct_as_class"
                    ],
                    "typemap_name": "Cstruct_as_class"
                },
                "decl": "Cstruct_as_class *Create_Cstruct_as_class(void)",
                "declgen": "Cstruct_as_class * Create_Cstruct_as_class(void)",
                "name": "Create_Cstruct_as_class",
                "options": {
                    "class_ctor": "Cstruct_as_class",
                    "literalinclude": true,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_Create_Cstruct_as_class",
                    "C_name_api": "Create_Cstruct_as_class",
                    "C_prototype": "STR_Cstruct_as_class * SHC_rv",
                    "C_return_type": "STR_Cstruct_as_class *",
                    "F_C_arguments": "SHT_rv",
                    "F_C_call": "c_create_cstruct_as_class",
                    "F_C_name": "c_create_cstruct_as_class",
                    "F_C_result_clause": "\fresult(SHT_prv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "SHT_rv%cxxmem",
                    "F_arguments": "",
                    "F_name_api": "create_cstruct_as_class",
                    "F_name_function": "create_cstruct_as_class",
                    "F_name_generic": "cstruct_as_class",
                    "F_name_impl": "create_cstruct_as_class",
                    "F_result": "SHT_prv",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "Cstruct_as_class * SHCXX_rv",
                    "function_name": "Create_Cstruct_as_class"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_type": "STR_Cstruct_as_class",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_other",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "Cstruct_as_class",
                        "cxx_var": "SHCXX_rv",
                        "f_capsule_data_type": "STR_SHROUD_capsule_data",
                        "f_derived_type": "cstruct_as_class",
                        "f_intent": "OUT",
                        "f_local_ptr": "SHT_prv",
                        "f_type": "type(cstruct_as_class)",
                        "f_type_module": "struct_mod",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmtc": "f_function_shadow_*_capptr",
                        "stmtf": "f_function_shadow_*_capptr"
                    }
                }
            },
            {
                "<FUNCTION>": "Create_Cstruct_as_class_args  21 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "api": "capptr",
                            "intent": "function"
                        },
                        "name": "Create_Cstruct_as_class_args",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "x",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "y",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "Cstruct_as_class"
                    },
                    "specifier": [
                        "Cstruct_as_class"
                    ],
                    "typemap_name": "Cstruct_as_class"
                },
                "decl": "Cstruct_as_class *Create_Cstruct_as_class_args(int x, int y)",
                "declgen": "Cstruct_as_class * Create_Cstruct_as_class_args(int x +value, int y +value)",
                "name": "Create_Cstruct_as_class_args",
                "options": {
                    "class_ctor": "Cstruct_as_class",
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "x": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "x",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&x",
                            "cxx_type": "int",
                            "cxx_var": "x",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "x",
                            "fc_var": "x",
                            "i_var": "x",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    },
                    "y": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "y",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&y",
                            "cxx_type": "int",
                            "cxx_var": "y",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "y",
                            "fc_var": "y",
                            "i_var": "y",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "x,\t y",
                    "C_name": "STR_Create_Cstruct_as_class_args",
                    "C_name_api": "Create_Cstruct_as_class_args",
                    "C_prototype": "int x,\t int y,\t STR_Cstruct_as_class * SHC_rv",
                    "C_return_type": "STR_Cstruct_as_class *",
                    "F_C_arguments": "x,\t y,\t SHT_rv",
                    "F_C_call": "c_create_cstruct_as_class_args",
                    "F_C_name": "c_create_cstruct_as_class_args",
                    "F_C_result_clause": "\fresult(SHT_prv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "x,\t y,\t SHT_rv%cxxmem",
                    "F_arguments": "x,\t y",
                    "F_name_api": "create_cstruct_as_class_args",
                    "F_name_function": "create_cstruct_as_class_args",
                    "F_name_generic": "cstruct_as_class",
                    "F_name_impl": "create_cstruct_as_class_args",
                    "F_result": "SHT_prv",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "Cstruct_as_class * SHCXX_rv",
                    "function_name": "Create_Cstruct_as_class_args"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_type": "STR_Cstruct_as_class",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_other",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "Cstruct_as_class",
                        "cxx_var": "SHCXX_rv",
                        "f_capsule_data_type": "STR_SHROUD_capsule_data",
                        "f_derived_type": "cstruct_as_class",
                        "f_intent": "OUT",
                        "f_local_ptr": "SHT_prv",
                        "f_type": "type(cstruct_as_class)",
                        "f_type_module": "struct_mod",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmtc": "f_function_shadow_*_capptr",
                        "stmtf": "f_function_shadow_*_capptr"
                    }
                }
            },
            {
                "<FUNCTION>": "Cstruct_as_class_sum  22 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "Cstruct_as_class_sum",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "pass": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "point",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct_as_class"
                                },
                                "specifier": [
                                    "Cstruct_as_class"
                                ],
                                "typemap_name": "Cstruct_as_class"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int Cstruct_as_class_sum(const Cstruct_as_class *point +pass)",
                "declgen": "int Cstruct_as_class_sum(const Cstruct_as_class * point +pass)",
                "name": "Cstruct_as_class_sum",
                "options": {
                    "class_method": "Cstruct_as_class",
                    "wrap_python": false
                },
                "user_fmt": {
                    "F_name_function": "sum"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "point": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "STR_Cstruct_as_class",
                            "c_var": "point",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(Cstruct_as_class *) SHCXX_point",
                            "cxx_type": "Cstruct_as_class",
                            "cxx_var": "SHCXX_point",
                            "f_capsule_data_type": "STR_SHROUD_capsule_data",
                            "f_derived_type": "cstruct_as_class",
                            "f_intent": "IN",
                            "f_type": "type(cstruct_as_class)",
                            "f_type_module": "struct_mod",
                            "f_var": "point",
                            "fc_var": "point",
                            "i_var": "point",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_in_shadow_*",
                            "stmtf": "f_in_shadow_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_point",
                    "C_name": "STR_Cstruct_as_class_sum",
                    "C_name_api": "Cstruct_as_class_sum",
                    "C_prototype": "STR_Cstruct_as_class * point",
                    "C_return_type": "int",
                    "F_C_arguments": "point",
                    "F_C_call": "c_cstruct_as_class_sum",
                    "F_C_name": "c_cstruct_as_class_sum",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "point%cxxmem",
                    "F_arguments": "point",
                    "F_name_api": "cstruct_as_class_sum",
                    "F_name_function": "sum",
                    "F_name_generic": "cstruct_as_class_sum",
                    "F_name_impl": "cstruct_as_class_sum",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "Cstruct_as_class_sum"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar",
                        "stmtf": "f_function_native_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "Create_Cstruct_as_subclass_args  23 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "api": "capptr",
                            "intent": "function"
                        },
                        "name": "Create_Cstruct_as_subclass_args",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "x",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "y",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "z",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "Cstruct_as_subclass"
                    },
                    "specifier": [
                        "Cstruct_as_subclass"
                    ],
                    "typemap_name": "Cstruct_as_subclass"
                },
                "decl": "Cstruct_as_subclass *Create_Cstruct_as_subclass_args(int x, int y, int z)",
                "declgen": "Cstruct_as_subclass * Create_Cstruct_as_subclass_args(int x +value, int y +value, int z +value)",
                "name": "Create_Cstruct_as_subclass_args",
                "options": {
                    "class_ctor": "Cstruct_as_subclass",
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "x": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "x",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&x",
                            "cxx_type": "int",
                            "cxx_var": "x",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "x",
                            "fc_var": "x",
                            "i_var": "x",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    },
                    "y": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "y",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&y",
                            "cxx_type": "int",
                            "cxx_var": "y",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "y",
                            "fc_var": "y",
                            "i_var": "y",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    },
                    "z": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "z",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&z",
                            "cxx_type": "int",
                            "cxx_var": "z",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "z",
                            "fc_var": "z",
                            "i_var": "z",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "x,\t y,\t z",
                    "C_name": "STR_Create_Cstruct_as_subclass_args",
                    "C_name_api": "Create_Cstruct_as_subclass_args",
                    "C_prototype": "int x,\t int y,\t int z,\t STR_Cstruct_as_subclass * SHC_rv",
                    "C_return_type": "STR_Cstruct_as_subclass *",
                    "F_C_arguments": "x,\t y,\t z,\t SHT_rv",
                    "F_C_call": "c_create_cstruct_as_subclass_args",
                    "F_C_name": "c_create_cstruct_as_subclass_args",
                    "F_C_result_clause": "\fresult(SHT_prv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "x,\t y,\t z,\t SHT_rv%cxxmem",
                    "F_arguments": "x,\t y,\t z",
                    "F_name_api": "create_cstruct_as_subclass_args",
                    "F_name_function": "create_cstruct_as_subclass_args",
                    "F_name_generic": "cstruct_as_subclass",
                    "F_name_impl": "create_cstruct_as_subclass_args",
                    "F_result": "SHT_prv",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "Cstruct_as_subclass * SHCXX_rv",
                    "function_name": "Create_Cstruct_as_subclass_args"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_type": "STR_Cstruct_as_subclass",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_other",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "Cstruct_as_subclass",
                        "cxx_var": "SHCXX_rv",
                        "f_capsule_data_type": "STR_SHROUD_capsule_data",
                        "f_derived_type": "cstruct_as_subclass",
                        "f_intent": "OUT",
                        "f_local_ptr": "SHT_prv",
                        "f_type": "type(cstruct_as_subclass)",
                        "f_type_module": "struct_mod",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmtc": "f_function_shadow_*_capptr",
                        "stmtf": "f_function_shadow_*_capptr"
                    }
                }
            },
            {
                "<FUNCTION>": "Cstruct_ptr_get_const_dvalue  24 ****************************************",
                "_generated": "getter/setter",
                "_generated_path": [
                    "getter/setter"
                ],
                "ast": {
                    "const": true,
                    "declarator": {
                        "metaattrs": {
                            "deref": "pointer",
                            "intent": "getter"
                        },
                        "name": "Cstruct_ptr_get_const_dvalue",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "SH_this",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct_ptr"
                                },
                                "specifier": [
                                    "Cstruct_ptr"
                                ],
                                "typemap_name": "Cstruct_ptr"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "double"
                    },
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "const double * Cstruct_ptr_get_const_dvalue(Cstruct_ptr *SH_this)",
                "declgen": "const double * Cstruct_ptr_get_const_dvalue(Cstruct_ptr * SH_this)",
                "name": "Cstruct_ptr_get_const_dvalue",
                "options": {},
                "struct_parent": "Cstruct_ptr",
                "user_fmt": {
                    "field_name": "const_dvalue",
                    "struct_name": "Cstruct_ptr",
                    "wrapped_name": "const_dvalue"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "SH_this": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct_ptr",
                            "c_var": "SH_this",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SH_this",
                            "cxx_type": "Cstruct_ptr",
                            "cxx_var": "SH_this",
                            "f_derived_type": "cstruct_ptr",
                            "f_intent": "IN",
                            "f_kind": "cstruct_ptr",
                            "f_type": "type(cstruct_ptr)",
                            "f_type_module": "struct_mod",
                            "f_var": "SH_this",
                            "fc_var": "SH_this",
                            "i_var": "SH_this",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_in_struct_*",
                            "stmtf": "f_in_struct_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SH_this",
                    "C_name": "STR_Cstruct_ptr_get_const_dvalue",
                    "C_name_api": "Cstruct_ptr_get_const_dvalue",
                    "C_prototype": "Cstruct_ptr * SH_this",
                    "C_return_type": "const double *",
                    "F_C_arguments": "SH_this",
                    "F_C_call": "c_cstruct_ptr_get_const_dvalue",
                    "F_C_name": "cstruct_ptr_get_const_dvalue",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "SH_this",
                    "F_arguments": "SH_this",
                    "F_name_api": "cstruct_ptr_get_const_dvalue",
                    "F_name_function": "cstruct_ptr_get_const_dvalue",
                    "F_name_generic": "cstruct_ptr_get_const_dvalue",
                    "F_name_impl": "cstruct_ptr_get_const_dvalue",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "const double * SHC_rv",
                    "field_name": "const_dvalue",
                    "function_name": "Cstruct_ptr_get_const_dvalue",
                    "struct_name": "Cstruct_ptr",
                    "wrapped_name": "const_dvalue"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "const ",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_double",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_DOUBLE",
                        "f_type": "real(C_DOUBLE)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmtc": "f_getter_native_*_pointer",
                        "stmtf": "f_getter_native_*_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "Cstruct_ptr_set_const_dvalue  25 ****************************************",
                "_generated": "getter/setter",
                "_generated_path": [
                    "getter/setter"
                ],
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "setter"
                        },
                        "name": "Cstruct_ptr_set_const_dvalue",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "SH_this",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct_ptr"
                                },
                                "specifier": [
                                    "Cstruct_ptr"
                                ],
                                "typemap_name": "Cstruct_ptr"
                            },
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "intent": "in"
                                    },
                                    "metaattrs": {
                                        "intent": "setter"
                                    },
                                    "name": "val",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void Cstruct_ptr_set_const_dvalue(Cstruct_ptr *SH_this,const double * val)",
                "declgen": "void Cstruct_ptr_set_const_dvalue(Cstruct_ptr * SH_this, const double * val +intent(in))",
                "name": "Cstruct_ptr_set_const_dvalue",
                "options": {},
                "user_fmt": {
                    "field_name": "const_dvalue",
                    "struct_name": "Cstruct_ptr",
                    "wrapped_name": "const_dvalue"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "SH_this": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct_ptr",
                            "c_var": "SH_this",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SH_this",
                            "cxx_type": "Cstruct_ptr",
                            "cxx_var": "SH_this",
                            "f_derived_type": "cstruct_ptr",
                            "f_intent": "INOUT",
                            "f_kind": "cstruct_ptr",
                            "f_type": "type(cstruct_ptr)",
                            "f_type_module": "struct_mod",
                            "f_var": "SH_this",
                            "fc_var": "SH_this",
                            "i_var": "SH_this",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_inout_struct_*",
                            "stmtf": "f_inout_struct_*"
                        }
                    },
                    "val": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double",
                            "c_var": "val",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(double *) val",
                            "cxx_type": "double",
                            "cxx_var": "val",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "val",
                            "fc_var": "val",
                            "i_var": "val",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmtc": "f_setter_native_*",
                            "stmtf": "f_setter_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SH_this,\t val",
                    "C_name": "STR_Cstruct_ptr_set_const_dvalue",
                    "C_name_api": "Cstruct_ptr_set_const_dvalue",
                    "C_prototype": "Cstruct_ptr * SH_this,\t const double * val",
                    "C_return_type": "void",
                    "F_C_arguments": "SH_this,\t val",
                    "F_C_call": "c_cstruct_ptr_set_const_dvalue",
                    "F_C_name": "cstruct_ptr_set_const_dvalue",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SH_this,\t val",
                    "F_arguments": "SH_this,\t val",
                    "F_name_api": "cstruct_ptr_set_const_dvalue",
                    "F_name_function": "cstruct_ptr_set_const_dvalue",
                    "F_name_generic": "cstruct_ptr_set_const_dvalue",
                    "F_name_impl": "cstruct_ptr_set_const_dvalue",
                    "F_subprogram": "subroutine",
                    "field_name": "const_dvalue",
                    "function_name": "Cstruct_ptr_set_const_dvalue",
                    "stmtc": "f_setter",
                    "stmtf": "f_setter",
                    "struct_name": "Cstruct_ptr",
                    "wrapped_name": "const_dvalue"
                }
            },
            {
                "<FUNCTION>": "Cstruct_list_get_ivalue  26 ****************************************",
                "_PTR_F_C_index": "32",
                "_generated": "getter/setter",
                "_generated_path": [
                    "getter/setter"
                ],
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "deref": "pointer",
                            "dimension": [
                                {
                                    "left": {
                                        "name": "nitems"
                                    },
                                    "op": "+",
                                    "right": {
                                        "name": "nitems"
                                    }
                                }
                            ],
                            "intent": "getter"
                        },
                        "name": "Cstruct_list_get_ivalue",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "SH_this",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct_list"
                                },
                                "specifier": [
                                    "Cstruct_list"
                                ],
                                "typemap_name": "Cstruct_list"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int * Cstruct_list_get_ivalue(Cstruct_list *SH_this)",
                "declgen": "int * Cstruct_list_get_ivalue(Cstruct_list * SH_this)",
                "name": "Cstruct_list_get_ivalue",
                "options": {},
                "struct_parent": "Cstruct_list",
                "user_fmt": {
                    "field_name": "ivalue",
                    "struct_name": "Cstruct_list",
                    "wrapped_name": "ivalue"
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "Cstruct_list_get_ivalue",
                    "F_name_api": "cstruct_list_get_ivalue",
                    "field_name": "ivalue",
                    "function_name": "Cstruct_list_get_ivalue",
                    "struct_name": "Cstruct_list",
                    "wrapped_name": "ivalue"
                }
            },
            {
                "<FUNCTION>": "Cstruct_list_get_ivalue  32 ****************************************",
                "_PTR_C_CXX_index": "26",
                "_generated": "arg_to_buffer",
                "_generated_path": [
                    "getter/setter",
                    "arg_to_buffer"
                ],
                "_orig_node_index": 26,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "api": "cdesc",
                            "deref": "pointer",
                            "dimension": [
                                {
                                    "left": {
                                        "name": "nitems"
                                    },
                                    "op": "+",
                                    "right": {
                                        "name": "nitems"
                                    }
                                }
                            ],
                            "intent": "getter"
                        },
                        "name": "Cstruct_list_get_ivalue",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "SH_this",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct_list"
                                },
                                "specifier": [
                                    "Cstruct_list"
                                ],
                                "typemap_name": "Cstruct_list"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int * Cstruct_list_get_ivalue(Cstruct_list *SH_this)",
                "declgen": "int * Cstruct_list_get_ivalue(Cstruct_list * SH_this)",
                "name": "Cstruct_list_get_ivalue",
                "options": {},
                "splicer_group": "buf",
                "struct_parent": "Cstruct_list",
                "user_fmt": {
                    "field_name": "ivalue",
                    "struct_name": "Cstruct_list",
                    "wrapped_name": "ivalue"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "SH_this": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct_list",
                            "c_var": "SH_this",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SH_this",
                            "cxx_type": "Cstruct_list",
                            "cxx_var": "SH_this",
                            "f_derived_type": "cstruct_list",
                            "f_intent": "IN",
                            "f_kind": "cstruct_list",
                            "f_type": "type(cstruct_list)",
                            "f_type_module": "struct_mod",
                            "f_var": "SH_this",
                            "fc_var": "SH_this",
                            "i_var": "SH_this",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_in_struct_*",
                            "stmtf": "f_in_struct_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SH_this",
                    "C_name": "STR_Cstruct_list_get_ivalue_bufferify",
                    "C_name_api": "Cstruct_list_get_ivalue",
                    "C_prototype": "Cstruct_list * SH_this,\t STR_SHROUD_array *SHT_rv_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SH_this,\t SHT_rv_cdesc",
                    "F_C_call": "c_cstruct_list_get_ivalue_bufferify",
                    "F_C_name": "c_cstruct_list_get_ivalue_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SH_this,\t SHT_rv_cdesc",
                    "F_arguments": "SH_this",
                    "F_name_api": "cstruct_list_get_ivalue",
                    "F_name_function": "cstruct_list_get_ivalue",
                    "F_name_generic": "cstruct_list_get_ivalue",
                    "F_name_impl": "cstruct_list_get_ivalue",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int * SHC_rv",
                    "f_c_suffix": "_bufferify",
                    "field_name": "ivalue",
                    "function_name": "Cstruct_list_get_ivalue",
                    "struct_name": "Cstruct_list",
                    "wrapped_name": "ivalue"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_array_shape": "\nSHT_rv_cdesc->shape[0] = SH_this->nitems+SH_this->nitems;",
                        "c_array_size": "SHT_rv_cdesc->shape[0]",
                        "c_array_size2": "SH_this->nitems+SH_this->nitems",
                        "c_const": "",
                        "c_helper_array_context": "STR_SHROUD_array",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_array_allocate": "(SHT_rv_cdesc%shape(1))",
                        "f_array_shape": ",\t SHT_rv_cdesc%shape(1:1)",
                        "f_assumed_shape": "(:)",
                        "f_cdesc_shape": "\nSHT_rv_cdesc%shape(1:1) = shape(SHT_rv)",
                        "f_helper_array_context": "STR_SHROUD_array",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "f_var_cdesc": "SHT_rv_cdesc",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "i_var_cdesc": "SHT_rv_cdesc",
                        "idtor": "0",
                        "rank": "1",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_getter_native_*_cdesc_pointer",
                        "stmtf": "f_getter_native_*_cdesc_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "Cstruct_list_set_ivalue  27 ****************************************",
                "_generated": "getter/setter",
                "_generated_path": [
                    "getter/setter"
                ],
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "setter"
                        },
                        "name": "Cstruct_list_set_ivalue",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "SH_this",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct_list"
                                },
                                "specifier": [
                                    "Cstruct_list"
                                ],
                                "typemap_name": "Cstruct_list"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "dimension": [
                                            {
                                                "left": {
                                                    "name": "nitems"
                                                },
                                                "op": "+",
                                                "right": {
                                                    "name": "nitems"
                                                }
                                            }
                                        ],
                                        "intent": "setter"
                                    },
                                    "name": "val",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void Cstruct_list_set_ivalue(Cstruct_list *SH_this,int * val)",
                "declgen": "void Cstruct_list_set_ivalue(Cstruct_list * SH_this, int * val +intent(in)+rank(1))",
                "name": "Cstruct_list_set_ivalue",
                "options": {},
                "user_fmt": {
                    "field_name": "ivalue",
                    "struct_name": "Cstruct_list",
                    "wrapped_name": "ivalue"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "SH_this": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct_list",
                            "c_var": "SH_this",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SH_this",
                            "cxx_type": "Cstruct_list",
                            "cxx_var": "SH_this",
                            "f_derived_type": "cstruct_list",
                            "f_intent": "INOUT",
                            "f_kind": "cstruct_list",
                            "f_type": "type(cstruct_list)",
                            "f_type_module": "struct_mod",
                            "f_var": "SH_this",
                            "fc_var": "SH_this",
                            "i_var": "SH_this",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_inout_struct_*",
                            "stmtf": "f_inout_struct_*"
                        }
                    },
                    "val": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "nitems+nitems",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "val",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "val",
                            "cxx_type": "int",
                            "cxx_var": "val",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "val",
                            "fc_var": "val",
                            "i_dimension": "(*)",
                            "i_var": "val",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(val)",
                            "stmtc": "f_setter_native_*",
                            "stmtf": "f_setter_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SH_this,\t val",
                    "C_name": "STR_Cstruct_list_set_ivalue",
                    "C_name_api": "Cstruct_list_set_ivalue",
                    "C_prototype": "Cstruct_list * SH_this,\t int * val",
                    "C_return_type": "void",
                    "F_C_arguments": "SH_this,\t val",
                    "F_C_call": "c_cstruct_list_set_ivalue",
                    "F_C_name": "cstruct_list_set_ivalue",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SH_this,\t val",
                    "F_arguments": "SH_this,\t val",
                    "F_name_api": "cstruct_list_set_ivalue",
                    "F_name_function": "cstruct_list_set_ivalue",
                    "F_name_generic": "cstruct_list_set_ivalue",
                    "F_name_impl": "cstruct_list_set_ivalue",
                    "F_subprogram": "subroutine",
                    "field_name": "ivalue",
                    "function_name": "Cstruct_list_set_ivalue",
                    "stmtc": "f_setter",
                    "stmtf": "f_setter",
                    "struct_name": "Cstruct_list",
                    "wrapped_name": "ivalue"
                }
            },
            {
                "<FUNCTION>": "Cstruct_list_get_dvalue  28 ****************************************",
                "_PTR_F_C_index": "33",
                "_generated": "getter/setter",
                "_generated_path": [
                    "getter/setter"
                ],
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "deref": "pointer",
                            "dimension": [
                                {
                                    "left": {
                                        "name": "nitems"
                                    },
                                    "op": "*",
                                    "right": {
                                        "name": "TWO"
                                    }
                                }
                            ],
                            "intent": "getter"
                        },
                        "name": "Cstruct_list_get_dvalue",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "SH_this",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct_list"
                                },
                                "specifier": [
                                    "Cstruct_list"
                                ],
                                "typemap_name": "Cstruct_list"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "double"
                    },
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double * Cstruct_list_get_dvalue(Cstruct_list *SH_this)",
                "declgen": "double * Cstruct_list_get_dvalue(Cstruct_list * SH_this)",
                "name": "Cstruct_list_get_dvalue",
                "options": {},
                "struct_parent": "Cstruct_list",
                "user_fmt": {
                    "field_name": "dvalue",
                    "struct_name": "Cstruct_list",
                    "wrapped_name": "dvalue"
                },
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "Cstruct_list_get_dvalue",
                    "F_name_api": "cstruct_list_get_dvalue",
                    "field_name": "dvalue",
                    "function_name": "Cstruct_list_get_dvalue",
                    "struct_name": "Cstruct_list",
                    "wrapped_name": "dvalue"
                }
            },
            {
                "<FUNCTION>": "Cstruct_list_get_dvalue  33 ****************************************",
                "_PTR_C_CXX_index": "28",
                "_generated": "arg_to_buffer",
                "_generated_path": [
                    "getter/setter",
                    "arg_to_buffer"
                ],
                "_orig_node_index": 28,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "api": "cdesc",
                            "deref": "pointer",
                            "dimension": [
                                {
                                    "left": {
                                        "name": "nitems"
                                    },
                                    "op": "*",
                                    "right": {
                                        "name": "TWO"
                                    }
                                }
                            ],
                            "intent": "getter"
                        },
                        "name": "Cstruct_list_get_dvalue",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "SH_this",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct_list"
                                },
                                "specifier": [
                                    "Cstruct_list"
                                ],
                                "typemap_name": "Cstruct_list"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "double"
                    },
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double * Cstruct_list_get_dvalue(Cstruct_list *SH_this)",
                "declgen": "double * Cstruct_list_get_dvalue(Cstruct_list * SH_this)",
                "name": "Cstruct_list_get_dvalue",
                "options": {},
                "splicer_group": "buf",
                "struct_parent": "Cstruct_list",
                "user_fmt": {
                    "field_name": "dvalue",
                    "struct_name": "Cstruct_list",
                    "wrapped_name": "dvalue"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "SH_this": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct_list",
                            "c_var": "SH_this",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SH_this",
                            "cxx_type": "Cstruct_list",
                            "cxx_var": "SH_this",
                            "f_derived_type": "cstruct_list",
                            "f_intent": "IN",
                            "f_kind": "cstruct_list",
                            "f_type": "type(cstruct_list)",
                            "f_type_module": "struct_mod",
                            "f_var": "SH_this",
                            "fc_var": "SH_this",
                            "i_var": "SH_this",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_in_struct_*",
                            "stmtf": "f_in_struct_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SH_this",
                    "C_name": "STR_Cstruct_list_get_dvalue_bufferify",
                    "C_name_api": "Cstruct_list_get_dvalue",
                    "C_prototype": "Cstruct_list * SH_this,\t STR_SHROUD_array *SHT_rv_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SH_this,\t SHT_rv_cdesc",
                    "F_C_call": "c_cstruct_list_get_dvalue_bufferify",
                    "F_C_name": "c_cstruct_list_get_dvalue_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SH_this,\t SHT_rv_cdesc",
                    "F_arguments": "SH_this",
                    "F_name_api": "cstruct_list_get_dvalue",
                    "F_name_function": "cstruct_list_get_dvalue",
                    "F_name_generic": "cstruct_list_get_dvalue",
                    "F_name_impl": "cstruct_list_get_dvalue",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "double * SHC_rv",
                    "f_c_suffix": "_bufferify",
                    "field_name": "dvalue",
                    "function_name": "Cstruct_list_get_dvalue",
                    "struct_name": "Cstruct_list",
                    "wrapped_name": "dvalue"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_array_shape": "\nSHT_rv_cdesc->shape[0] = SH_this->nitems*TWO;",
                        "c_array_size": "SHT_rv_cdesc->shape[0]",
                        "c_array_size2": "SH_this->nitems*TWO",
                        "c_const": "",
                        "c_helper_array_context": "STR_SHROUD_array",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cfi_type": "CFI_type_double",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "f_array_allocate": "(SHT_rv_cdesc%shape(1))",
                        "f_array_shape": ",\t SHT_rv_cdesc%shape(1:1)",
                        "f_assumed_shape": "(:)",
                        "f_cdesc_shape": "\nSHT_rv_cdesc%shape(1:1) = shape(SHT_rv)",
                        "f_helper_array_context": "STR_SHROUD_array",
                        "f_intent": "OUT",
                        "f_kind": "C_DOUBLE",
                        "f_type": "real(C_DOUBLE)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "f_var_cdesc": "SHT_rv_cdesc",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "i_var_cdesc": "SHT_rv_cdesc",
                        "idtor": "0",
                        "rank": "1",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmtc": "f_getter_native_*_cdesc_pointer",
                        "stmtf": "f_getter_native_*_cdesc_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "Cstruct_list_set_dvalue  29 ****************************************",
                "_generated": "getter/setter",
                "_generated_path": [
                    "getter/setter"
                ],
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "setter"
                        },
                        "name": "Cstruct_list_set_dvalue",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "SH_this",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct_list"
                                },
                                "specifier": [
                                    "Cstruct_list"
                                ],
                                "typemap_name": "Cstruct_list"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "dimension": [
                                            {
                                                "left": {
                                                    "name": "nitems"
                                                },
                                                "op": "*",
                                                "right": {
                                                    "name": "TWO"
                                                }
                                            }
                                        ],
                                        "intent": "setter"
                                    },
                                    "name": "val",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void Cstruct_list_set_dvalue(Cstruct_list *SH_this,double * val)",
                "declgen": "void Cstruct_list_set_dvalue(Cstruct_list * SH_this, double * val +intent(in)+rank(1))",
                "name": "Cstruct_list_set_dvalue",
                "options": {},
                "user_fmt": {
                    "field_name": "dvalue",
                    "struct_name": "Cstruct_list",
                    "wrapped_name": "dvalue"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "SH_this": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct_list",
                            "c_var": "SH_this",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SH_this",
                            "cxx_type": "Cstruct_list",
                            "cxx_var": "SH_this",
                            "f_derived_type": "cstruct_list",
                            "f_intent": "INOUT",
                            "f_kind": "cstruct_list",
                            "f_type": "type(cstruct_list)",
                            "f_type_module": "struct_mod",
                            "f_var": "SH_this",
                            "fc_var": "SH_this",
                            "i_var": "SH_this",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmtc": "f_inout_struct_*",
                            "stmtf": "f_inout_struct_*"
                        }
                    },
                    "val": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "nitems*TWO",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double",
                            "c_var": "val",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "val",
                            "cxx_type": "double",
                            "cxx_var": "val",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "val",
                            "fc_var": "val",
                            "i_dimension": "(*)",
                            "i_var": "val",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "size": "size(val)",
                            "stmtc": "f_setter_native_*",
                            "stmtf": "f_setter_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SH_this,\t val",
                    "C_name": "STR_Cstruct_list_set_dvalue",
                    "C_name_api": "Cstruct_list_set_dvalue",
                    "C_prototype": "Cstruct_list * SH_this,\t double * val",
                    "C_return_type": "void",
                    "F_C_arguments": "SH_this,\t val",
                    "F_C_call": "c_cstruct_list_set_dvalue",
                    "F_C_name": "cstruct_list_set_dvalue",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SH_this,\t val",
                    "F_arguments": "SH_this,\t val",
                    "F_name_api": "cstruct_list_set_dvalue",
                    "F_name_function": "cstruct_list_set_dvalue",
                    "F_name_generic": "cstruct_list_set_dvalue",
                    "F_name_impl": "cstruct_list_set_dvalue",
                    "F_subprogram": "subroutine",
                    "field_name": "dvalue",
                    "function_name": "Cstruct_list_set_dvalue",
                    "stmtc": "f_setter",
                    "stmtf": "f_setter",
                    "struct_name": "Cstruct_list",
                    "wrapped_name": "dvalue"
                }
            }
        ],
        "language": "c",
        "scope_file": [
            "struct"
        ],
        "user_fmt": {
            "F_name_associated": "",
            "F_name_instance_get": "",
            "F_name_instance_set": "",
            "PY_module_name": "cstruct"
        },
        "wrap": {
            "c": true,
            "fortran": true
        }
    },
    "symtab": {
        "Arrays1": "struct-Arrays1",
        "Cstruct1": "struct-Cstruct1",
        "Cstruct_as_class": "struct-Cstruct_as_class",
        "Cstruct_as_subclass": "struct-Cstruct_as_subclass",
        "Cstruct_list": "struct-Cstruct_list",
        "Cstruct_numpy": "struct-Cstruct_numpy",
        "Cstruct_ptr": "struct-Cstruct_ptr",
        "s_nested": "struct-s_nested",
        "struct-Arrays1": "Arrays1",
        "struct-Cstruct1": "Cstruct1",
        "struct-Cstruct_as_class": "Cstruct_as_class",
        "struct-Cstruct_as_subclass": "Cstruct_as_subclass",
        "struct-Cstruct_list": "Cstruct_list",
        "struct-Cstruct_numpy": "Cstruct_numpy",
        "struct-Cstruct_ptr": "Cstruct_ptr",
        "struct-s_nested": "s_nested"
    },
    "types": {
        "Arrays1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Arrays1_array_descr",
            "PY_struct_as": "numpy",
            "base": "struct",
            "c_header": [
                "struct.h"
            ],
            "c_type": "Arrays1",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Arrays1",
            "f_derived_type": "arrays1",
            "f_kind": "arrays1",
            "f_module": {
                "struct_mod": [
                    "arrays1"
                ]
            },
            "f_module_name": "struct_mod",
            "f_type": "type(arrays1)",
            "flat_name": "Arrays1",
            "i_module": {
                "struct_mod": [
                    "arrays1"
                ]
            },
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        },
        "Cstruct1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Cstruct1_array_descr",
            "PY_struct_as": "numpy",
            "base": "struct",
            "c_header": [
                "struct.h"
            ],
            "c_type": "Cstruct1",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Cstruct1",
            "f_derived_type": "cstruct1",
            "f_kind": "cstruct1",
            "f_module": {
                "struct_mod": [
                    "cstruct1"
                ]
            },
            "f_module_name": "struct_mod",
            "f_type": "type(cstruct1)",
            "flat_name": "Cstruct1",
            "i_module": {
                "struct_mod": [
                    "cstruct1"
                ]
            },
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        },
        "Cstruct_as_class": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}Cstruct_as_class *>\t({c_var}->addr)",
            "c_type": "STR_Cstruct_as_class",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "Cstruct_as_class",
            "f_capsule_data_type": "STR_SHROUD_capsule_data",
            "f_class": "class(cstruct_as_class)",
            "f_derived_type": "cstruct_as_class",
            "f_module": {
                "struct_mod": [
                    "cstruct_as_class"
                ]
            },
            "f_module_name": "struct_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(cstruct_as_class)",
            "flat_name": "Cstruct_as_class",
            "i_module": {
                "struct_mod": [
                    "STR_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(STR_SHROUD_capsule_data)",
            "impl_header": [
                "struct.h"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesstruct.h"
            ]
        },
        "Cstruct_as_subclass": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}Cstruct_as_subclass *>\t({c_var}->addr)",
            "c_type": "STR_Cstruct_as_subclass",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "Cstruct_as_subclass",
            "f_capsule_data_type": "STR_SHROUD_capsule_data",
            "f_class": "class(cstruct_as_subclass)",
            "f_derived_type": "cstruct_as_subclass",
            "f_module": {
                "struct_mod": [
                    "cstruct_as_subclass"
                ]
            },
            "f_module_name": "struct_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(cstruct_as_subclass)",
            "flat_name": "Cstruct_as_subclass",
            "i_module": {
                "struct_mod": [
                    "STR_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(STR_SHROUD_capsule_data)",
            "impl_header": [
                "struct.h"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesstruct.h"
            ]
        },
        "Cstruct_list": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Cstruct_list_array_descr",
            "PY_struct_as": "numpy",
            "base": "struct",
            "c_header": [
                "struct.h"
            ],
            "c_type": "Cstruct_list",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Cstruct_list",
            "f_derived_type": "cstruct_list",
            "f_kind": "cstruct_list",
            "f_module": {
                "struct_mod": [
                    "cstruct_list"
                ]
            },
            "f_module_name": "struct_mod",
            "f_type": "type(cstruct_list)",
            "flat_name": "Cstruct_list",
            "i_module": {
                "struct_mod": [
                    "cstruct_list"
                ]
            },
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        },
        "Cstruct_numpy": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Cstruct_numpy_array_descr",
            "PY_struct_as": "numpy",
            "base": "struct",
            "c_header": [
                "struct.h"
            ],
            "c_type": "Cstruct_numpy",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Cstruct_numpy",
            "f_derived_type": "cstruct_numpy",
            "f_kind": "cstruct_numpy",
            "f_module": {
                "struct_mod": [
                    "cstruct_numpy"
                ]
            },
            "f_module_name": "struct_mod",
            "f_type": "type(cstruct_numpy)",
            "flat_name": "Cstruct_numpy",
            "i_module": {
                "struct_mod": [
                    "cstruct_numpy"
                ]
            },
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        },
        "Cstruct_ptr": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Cstruct_ptr_array_descr",
            "PY_struct_as": "numpy",
            "base": "struct",
            "c_header": [
                "struct.h"
            ],
            "c_type": "Cstruct_ptr",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Cstruct_ptr",
            "f_derived_type": "cstruct_ptr",
            "f_kind": "cstruct_ptr",
            "f_module": {
                "struct_mod": [
                    "cstruct_ptr"
                ]
            },
            "f_module_name": "struct_mod",
            "f_type": "type(cstruct_ptr)",
            "flat_name": "Cstruct_ptr",
            "i_module": {
                "struct_mod": [
                    "cstruct_ptr"
                ]
            },
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        },
        "s_nested": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_s_nested_array_descr",
            "PY_struct_as": "numpy",
            "base": "struct",
            "c_header": [
                "struct.h"
            ],
            "c_type": "s_nested",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "s_nested",
            "f_derived_type": "s_nested",
            "f_kind": "s_nested",
            "f_module": {
                "struct_mod": [
                    "s_nested"
                ]
            },
            "f_module_name": "struct_mod",
            "f_type": "type(s_nested)",
            "flat_name": "s_nested",
            "i_module": {
                "struct_mod": [
                    "s_nested"
                ]
            },
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        }
    }
}