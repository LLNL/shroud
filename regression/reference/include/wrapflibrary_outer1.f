! wrapflibrary_outer1.f
! This file is generated by Shroud nowrite-version. Do not edit.
! Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
! other Shroud Project Developers.
! See the top-level COPYRIGHT file for details.
!
! SPDX-License-Identifier: (BSD-3-Clause)
!
!>
!! \file wrapflibrary_outer1.f
!! \brief Shroud generated wrapper for outer1 namespace
!<
module library_outer1_mod
    use iso_c_binding, only : C_INT, C_NULL_PTR, C_PTR
    implicit none


    ! helper capsule_data_helper
    type, bind(C) :: LIB_SHROUD_capsule_data
        type(C_PTR) :: addr = C_NULL_PTR  ! address of C++ memory
        integer(C_INT) :: idtor = 0       ! index of destructor
    end type LIB_SHROUD_capsule_data

    type class0
        type(LIB_SHROUD_capsule_data) :: cxxmem
    contains
        procedure :: method => class0_method
        procedure :: get_instance => class0_get_instance
        procedure :: set_instance => class0_set_instance
        procedure :: associated => class0_associated
    end type class0

    interface operator (.eq.)
        module procedure class0_eq
    end interface

    interface operator (.ne.)
        module procedure class0_ne
    end interface

    interface

        ! ----------------------------------------
        ! Function:  void method
        ! Attrs:     +intent(subroutine)
        ! Requested: c_subroutine_void_scalar
        ! Match:     c_subroutine
        subroutine c_class0_method(self) &
                bind(C, name="LIB_outer1_class0_method")
            import :: LIB_SHROUD_capsule_data
            implicit none
            type(LIB_SHROUD_capsule_data), intent(IN) :: self
        end subroutine c_class0_method

        ! ----------------------------------------
        ! Function:  void outer_func
        ! Attrs:     +intent(subroutine)
        ! Requested: c_subroutine_void_scalar
        ! Match:     c_subroutine
        subroutine outer_func() &
                bind(C, name="LIB_outer1_outer_func")
            implicit none
        end subroutine outer_func
    end interface


contains

    ! ----------------------------------------
    ! Function:  void method
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    subroutine class0_method(obj)
        class(class0) :: obj
        call c_class0_method(obj%cxxmem)
    end subroutine class0_method

    ! Return pointer to C++ memory.
    function class0_get_instance(obj) result (cxxptr)
        use iso_c_binding, only: C_PTR
        class(class0), intent(IN) :: obj
        type(C_PTR) :: cxxptr
        cxxptr = obj%cxxmem%addr
    end function class0_get_instance

    subroutine class0_set_instance(obj, cxxmem)
        use iso_c_binding, only: C_PTR
        class(class0), intent(INOUT) :: obj
        type(C_PTR), intent(IN) :: cxxmem
        obj%cxxmem%addr = cxxmem
        obj%cxxmem%idtor = 0
    end subroutine class0_set_instance

    function class0_associated(obj) result (rv)
        use iso_c_binding, only: c_associated
        class(class0), intent(IN) :: obj
        logical rv
        rv = c_associated(obj%cxxmem%addr)
    end function class0_associated


#if 0
    ! Only the interface is needed
    ! ----------------------------------------
    ! Function:  void outer_func
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    subroutine outer_func()
        call c_outer_func()
    end subroutine outer_func
#endif


    function class0_eq(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(class0), intent(IN) ::a,b
        logical :: rv
        if (c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function class0_eq

    function class0_ne(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(class0), intent(IN) ::a,b
        logical :: rv
        if (.not. c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function class0_ne

end module library_outer1_mod
