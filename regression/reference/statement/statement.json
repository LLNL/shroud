{
    "__NOTICE__": "This file is generated by Shroud 0.11.0 and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "statement.hpp"
        ],
        "functions": [
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "pure": true
                    },
                    "declarator": {
                        "name": "GetNameLength",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int GetNameLength() +pure",
                "declgen": "int GetNameLength() +pure",
                "doxygen": {
                    "brief": "helper function for Fortran to get length of name."
                },
                "fmtdict": {
                    "C_name": "STMT_get_name_length",
                    "C_prototype": "",
                    "C_return_type": "int",
                    "F_C_call": "c_get_name_length",
                    "F_C_name": "get_name_length",
                    "F_arguments": "",
                    "F_name_function": "get_name_length",
                    "F_name_generic": "get_name_length",
                    "F_name_impl": "get_name_length",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "GetNameLength",
                    "underscore_name": "get_name_length"
                },
                "options": {},
                "splicer": {
                    "c": [
                        "return getNameErrorPattern().length();"
                    ]
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "PY_error_pattern": "PY_invalid_name",
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "c_var_len": "get_name_length()",
                        "capsule_addr": "cbase",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_string_&_result",
                        "stmt1": "c_string_result"
                    },
                    "fmtf": {
                        "c_var_len": "get_name_length()",
                        "cxx_type": "std::string",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_string_scalar_result_result-as-arg",
                        "stmt1": "f_default",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_scalar_result_buf"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result-as-arg",
                        "len": "get_name_length()"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getNameErrorPattern",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "result-as-arg",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getNameErrorPattern()",
                "declgen": "const string & getNameErrorPattern() +deref(result-as-arg)+len(get_name_length())",
                "fmtdict": {
                    "C_name": "STMT_get_name_error_pattern",
                    "C_prototype": "",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_name_error_pattern_bufferify",
                    "F_C_name": "c_get_name_error_pattern",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "get_name_error_pattern",
                    "F_name_generic": "get_name_error_pattern",
                    "F_name_impl": "get_name_error_pattern",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getNameErrorPattern",
                    "underscore_name": "get_name_error_pattern"
                },
                "options": {}
            },
            {
                "C_error_pattern": "C_invalid_name",
                "PY_error_pattern": "PY_invalid_name",
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_result_buf",
                            "stmt1": "c_string_result_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_len": "NSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_result",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_result_buf",
                            "stmtc1": "c_string_result_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "c_var_len": "get_name_length()",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": "get_name_length()"
                    },
                    "declarator": {
                        "name": "getNameErrorPattern",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string& getNameErrorPattern()",
                "declgen": "void getNameErrorPattern(string & SHF_rv +intent(out)+len(NSHF_rv)) +len(get_name_length())",
                "fmtdict": {
                    "C_name": "STMT_get_name_error_pattern_bufferify",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_get_name_error_pattern_bufferify",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getNameErrorPattern",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_name_error_pattern"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "statement"
        ]
    }
}