{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "pointers.h"
        ],
        "functions": [
            {
                "<FUNCTION>": "intargs_in  0 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "intargs_in",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void  intargs_in(const int *arg)",
                "declgen": "void intargs_in(const int * arg)",
                "name": "intargs_in",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(arg)",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_*",
                            "stmtf": "f_in_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "POI_intargs_in",
                    "C_name_api": "intargs_in",
                    "C_prototype": "const int * arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_intargs_in",
                    "F_C_name": "intargs_in",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_api": "intargs_in",
                    "F_name_function": "intargs_in",
                    "F_name_generic": "intargs_in",
                    "F_name_impl": "intargs_in",
                    "F_subprogram": "subroutine",
                    "function_name": "intargs_in"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "intargs_inout  1 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "intargs_inout",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void  intargs_inout(int *arg)",
                "declgen": "void intargs_inout(int * arg)",
                "doxygen": {
                    "description": "Argument is modified by library, defaults to intent(inout).\n"
                },
                "name": "intargs_inout",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "f_intent": "INOUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_inout_native_*",
                            "stmtf": "f_inout_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "POI_intargs_inout",
                    "C_name_api": "intargs_inout",
                    "C_prototype": "int * arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_intargs_inout",
                    "F_C_name": "intargs_inout",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_api": "intargs_inout",
                    "F_name_function": "intargs_inout",
                    "F_name_generic": "intargs_inout",
                    "F_name_impl": "intargs_inout",
                    "F_subprogram": "subroutine",
                    "function_name": "intargs_inout"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "intargs_out  2 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "intargs_out",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void  intargs_out(int *arg +intent(out))",
                "declgen": "void intargs_out(int * arg +intent(out))",
                "name": "intargs_out",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*",
                            "stmtf": "f_out_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "POI_intargs_out",
                    "C_name_api": "intargs_out",
                    "C_prototype": "int * arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_intargs_out",
                    "F_C_name": "intargs_out",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_api": "intargs_out",
                    "F_name_function": "intargs_out",
                    "F_name_generic": "intargs_out",
                    "F_name_impl": "intargs_out",
                    "F_subprogram": "subroutine",
                    "function_name": "intargs_out"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "intargs  3 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "intargs",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "argin",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "inout"
                                    },
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arginout",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "argout",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void  intargs(const int argin      +intent(in), int * arginout +intent(inout), int * argout   +intent(out))",
                "declgen": "void intargs(const int argin +intent(in)+value, int * arginout +intent(inout), int * argout +intent(out))",
                "name": "intargs",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "argin": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "argin",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(&argin)",
                            "cxx_type": "int",
                            "cxx_var": "argin",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "argin",
                            "fc_var": "argin",
                            "i_var": "argin",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    },
                    "arginout": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arginout",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arginout",
                            "cxx_type": "int",
                            "cxx_var": "arginout",
                            "f_intent": "INOUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arginout",
                            "fc_var": "arginout",
                            "i_var": "arginout",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_inout_native_*",
                            "stmtf": "f_inout_native_*"
                        }
                    },
                    "argout": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "argout",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "argout",
                            "cxx_type": "int",
                            "cxx_var": "argout",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "argout",
                            "fc_var": "argout",
                            "i_var": "argout",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*",
                            "stmtf": "f_out_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "argin,\t arginout,\t argout",
                    "C_name": "POI_intargs",
                    "C_name_api": "intargs",
                    "C_prototype": "const int argin,\t int * arginout,\t int * argout",
                    "C_return_type": "void",
                    "F_C_arguments": "argin,\t arginout,\t argout",
                    "F_C_call": "c_intargs",
                    "F_C_name": "intargs",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "argin,\t arginout,\t argout",
                    "F_arguments": "argin,\t arginout,\t argout",
                    "F_name_api": "intargs",
                    "F_name_function": "intargs",
                    "F_name_generic": "intargs",
                    "F_name_impl": "intargs",
                    "F_subprogram": "subroutine",
                    "function_name": "intargs"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "cos_doubles  4 ****************************************",
                "_PTR_F_C_index": "46",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "cos_doubles",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "in",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "size(in)",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "dimension": [
                                            {
                                                "args": [
                                                    {
                                                        "name": "in"
                                                    }
                                                ],
                                                "name": "size"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "out",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(in)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "sizein",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void cos_doubles(double * in     +intent(in)  +rank(1), double * out    +intent(out) +dimension(size(in)), int      sizein +implied(size(in)))",
                "declgen": "void cos_doubles(double * in +intent(in)+rank(1), double * out +dimension(size(in))+intent(out), int sizein +implied(size(in))+value)",
                "doxygen": {
                    "brief": "compute cos of IN and save in OUT",
                    "description": "allocate OUT same type as IN implied size of array"
                },
                "name": "cos_doubles",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "in": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double",
                            "c_var": "in",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "in",
                            "cxx_type": "double",
                            "cxx_var": "in",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "in",
                            "i_dimension": "(*)",
                            "i_var": "in",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "size": "size(in)",
                            "stmtc": "f_in_native_*"
                        }
                    },
                    "out": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "size(*in)",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double",
                            "c_var": "out",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out",
                            "cxx_type": "double",
                            "cxx_var": "out",
                            "f_array_allocate": "(size(in))",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "out",
                            "i_var": "out",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmtc": "f_out_native_*"
                        }
                    },
                    "sizein": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "sizein",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&sizein",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "sizein",
                            "i_var": "sizein",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "in,\t out,\t sizein",
                    "C_name": "POI_cos_doubles",
                    "C_name_api": "cos_doubles",
                    "C_prototype": "double * in,\t double * out,\t int sizein",
                    "C_return_type": "void",
                    "F_C_arguments": "in,\t out,\t sizein",
                    "F_C_name": "c_cos_doubles",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "cos_doubles",
                    "function_name": "cos_doubles"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "cos_doubles  46 ****************************************",
                "_PTR_C_CXX_index": "4",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 4,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "cos_doubles",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "in"
                                    },
                                    "name": "in",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "size(in)",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "dimension": [
                                            {
                                                "args": [
                                                    {
                                                        "name": "in"
                                                    }
                                                ],
                                                "name": "size"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "out",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(in)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "sizein",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void cos_doubles(double * in     +intent(in)  +rank(1), double * out    +intent(out) +dimension(size(in)), int      sizein +implied(size(in)))",
                "declgen": "void cos_doubles(double * in +intent(in)+rank(1), double * out +dimension(size(in))+intent(out), int sizein +implied(size(in))+value)",
                "doxygen": {
                    "brief": "compute cos of IN and save in OUT",
                    "description": "allocate OUT same type as IN implied size of array"
                },
                "name": "cos_doubles",
                "options": {},
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "in": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double",
                            "c_var": "in",
                            "c_var_cfi": "SHT_in_cfi",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_in",
                            "cxx_type": "double",
                            "cxx_var": "SHCXX_in",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "in",
                            "fc_var": "in",
                            "i_dimension": "(*)",
                            "i_var": "in",
                            "i_var_cfi": "SHT_in_cfi",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "size": "size(in)",
                            "stmtc": "f_in_native_*_cfi",
                            "stmtf": "f_in_native_*_cfi"
                        }
                    },
                    "out": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "size(*in)",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double",
                            "c_var": "out",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out",
                            "cxx_type": "double",
                            "cxx_var": "out",
                            "f_array_allocate": "(size(in))",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "out",
                            "fc_var": "out",
                            "i_var": "out",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmtc": "f_out_native_*",
                            "stmtf": "f_out_native_*"
                        }
                    },
                    "sizein": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "sizein",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&sizein",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "sizein",
                            "fc_var": "SH_sizein",
                            "i_var": "sizein",
                            "idtor": "0",
                            "pre_call_intent": "size(in,kind=C_INT)",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_in,\t out,\t sizein",
                    "C_name": "POI_cos_doubles_CFI",
                    "C_name_api": "cos_doubles",
                    "C_prototype": "CFI_cdesc_t *SHT_in_cfi,\t double * out,\t int sizein",
                    "C_return_type": "void",
                    "F_C_arguments": "in,\t out,\t sizein",
                    "F_C_call": "c_cos_doubles_CFI",
                    "F_C_name": "c_cos_doubles_CFI",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "in,\t out,\t SH_sizein",
                    "F_arguments": "in,\t out",
                    "F_name_api": "cos_doubles",
                    "F_name_function": "cos_doubles",
                    "F_name_generic": "cos_doubles",
                    "F_name_impl": "cos_doubles",
                    "F_subprogram": "subroutine",
                    "f_c_suffix": "_CFI",
                    "function_name": "cos_doubles"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "truncate_to_int  5 ****************************************",
                "_PTR_F_C_index": "47",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "truncate_to_int",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "in",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "size(in)",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "dimension": [
                                            {
                                                "args": [
                                                    {
                                                        "name": "in"
                                                    }
                                                ],
                                                "name": "size"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "out",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(in)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "sizein",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void truncate_to_int(double * in     +intent(in)  +rank(1), int *    out    +intent(out) +dimension(size(in)), int      sizein +implied(size(in)))",
                "declgen": "void truncate_to_int(double * in +intent(in)+rank(1), int * out +dimension(size(in))+intent(out), int sizein +implied(size(in))+value)",
                "doxygen": {
                    "brief": "truncate IN argument and save in OUT",
                    "description": "allocate OUT different type as IN\nimplied size of array\n"
                },
                "name": "truncate_to_int",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "in": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double",
                            "c_var": "in",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "in",
                            "cxx_type": "double",
                            "cxx_var": "in",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "in",
                            "i_dimension": "(*)",
                            "i_var": "in",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "size": "size(in)",
                            "stmtc": "f_in_native_*"
                        }
                    },
                    "out": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "size(*in)",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "out",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out",
                            "cxx_type": "int",
                            "cxx_var": "out",
                            "f_array_allocate": "(size(in))",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "out",
                            "i_var": "out",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*"
                        }
                    },
                    "sizein": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "sizein",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&sizein",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "sizein",
                            "i_var": "sizein",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "in,\t out,\t sizein",
                    "C_name": "POI_truncate_to_int",
                    "C_name_api": "truncate_to_int",
                    "C_prototype": "double * in,\t int * out,\t int sizein",
                    "C_return_type": "void",
                    "F_C_arguments": "in,\t out,\t sizein",
                    "F_C_name": "c_truncate_to_int",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "truncate_to_int",
                    "function_name": "truncate_to_int"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "truncate_to_int  47 ****************************************",
                "_PTR_C_CXX_index": "5",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 5,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "truncate_to_int",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "in"
                                    },
                                    "name": "in",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "size(in)",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "dimension": [
                                            {
                                                "args": [
                                                    {
                                                        "name": "in"
                                                    }
                                                ],
                                                "name": "size"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "out",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(in)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "sizein",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void truncate_to_int(double * in     +intent(in)  +rank(1), int *    out    +intent(out) +dimension(size(in)), int      sizein +implied(size(in)))",
                "declgen": "void truncate_to_int(double * in +intent(in)+rank(1), int * out +dimension(size(in))+intent(out), int sizein +implied(size(in))+value)",
                "doxygen": {
                    "brief": "truncate IN argument and save in OUT",
                    "description": "allocate OUT different type as IN\nimplied size of array\n"
                },
                "name": "truncate_to_int",
                "options": {},
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "in": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double",
                            "c_var": "in",
                            "c_var_cfi": "SHT_in_cfi",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_in",
                            "cxx_type": "double",
                            "cxx_var": "SHCXX_in",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "in",
                            "fc_var": "in",
                            "i_dimension": "(*)",
                            "i_var": "in",
                            "i_var_cfi": "SHT_in_cfi",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "size": "size(in)",
                            "stmtc": "f_in_native_*_cfi",
                            "stmtf": "f_in_native_*_cfi"
                        }
                    },
                    "out": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "size(*in)",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "out",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out",
                            "cxx_type": "int",
                            "cxx_var": "out",
                            "f_array_allocate": "(size(in))",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "out",
                            "fc_var": "out",
                            "i_var": "out",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*",
                            "stmtf": "f_out_native_*"
                        }
                    },
                    "sizein": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "sizein",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&sizein",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "sizein",
                            "fc_var": "SH_sizein",
                            "i_var": "sizein",
                            "idtor": "0",
                            "pre_call_intent": "size(in,kind=C_INT)",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_in,\t out,\t sizein",
                    "C_name": "POI_truncate_to_int_CFI",
                    "C_name_api": "truncate_to_int",
                    "C_prototype": "CFI_cdesc_t *SHT_in_cfi,\t int * out,\t int sizein",
                    "C_return_type": "void",
                    "F_C_arguments": "in,\t out,\t sizein",
                    "F_C_call": "c_truncate_to_int_CFI",
                    "F_C_name": "c_truncate_to_int_CFI",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "in,\t out,\t SH_sizein",
                    "F_arguments": "in,\t out",
                    "F_name_api": "truncate_to_int",
                    "F_name_function": "truncate_to_int",
                    "F_name_generic": "truncate_to_int",
                    "F_name_impl": "truncate_to_int",
                    "F_subprogram": "subroutine",
                    "f_c_suffix": "_CFI",
                    "function_name": "truncate_to_int"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "get_values  6 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "get_values",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "OUT"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "nvalues",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "3",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "dimension": [
                                            {
                                                "constant": "3"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "values",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void get_values(int *nvalues+intent(OUT), int *values +intent(out)+dimension(3))",
                "declgen": "void get_values(int * nvalues +intent(OUT), int * values +dimension(3)+intent(out))",
                "doxygen": {
                    "brief": "fill values into array",
                    "description": "The function knows how long the array must be.\nFortran will treat the dimension as assumed-length.\nThe Python wrapper will create a NumPy array or list so it must\nhave an explicit dimension (not assumed-length).\n"
                },
                "name": "get_values",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "nvalues": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nvalues",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nvalues",
                            "cxx_type": "int",
                            "cxx_var": "nvalues",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nvalues",
                            "fc_var": "nvalues",
                            "i_var": "nvalues",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*",
                            "stmtf": "f_out_native_*"
                        }
                    },
                    "values": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "3",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "values",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "values",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "f_array_allocate": "(3)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "values",
                            "fc_var": "values",
                            "i_var": "values",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*",
                            "stmtf": "f_out_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "nvalues,\t values",
                    "C_name": "POI_get_values",
                    "C_name_api": "get_values",
                    "C_prototype": "int * nvalues,\t int * values",
                    "C_return_type": "void",
                    "F_C_arguments": "nvalues,\t values",
                    "F_C_call": "c_get_values",
                    "F_C_name": "get_values",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "nvalues,\t values",
                    "F_arguments": "nvalues,\t values",
                    "F_name_api": "get_values",
                    "F_name_function": "get_values",
                    "F_name_generic": "get_values",
                    "F_name_impl": "get_values",
                    "F_subprogram": "subroutine",
                    "function_name": "get_values"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "get_values2  7 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "get_values2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "3",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "dimension": [
                                            {
                                                "constant": "3"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "3",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "dimension": [
                                            {
                                                "constant": "3"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "arg2",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void get_values2(int *arg1 +intent(out)+dimension(3), int *arg2 +intent(out)+dimension(3))",
                "declgen": "void get_values2(int * arg1 +dimension(3)+intent(out), int * arg2 +dimension(3)+intent(out))",
                "doxygen": {
                    "brief": "fill values into two arrays",
                    "description": "Test two intent(out) arguments.\nMake sure error handling works with C++.\n"
                },
                "name": "get_values2",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "3",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "f_array_allocate": "(3)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*",
                            "stmtf": "f_out_native_*"
                        }
                    },
                    "arg2": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "3",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "f_array_allocate": "(3)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "fc_var": "arg2",
                            "i_var": "arg2",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*",
                            "stmtf": "f_out_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "POI_get_values2",
                    "C_name_api": "get_values2",
                    "C_prototype": "int * arg1,\t int * arg2",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1,\t arg2",
                    "F_C_call": "c_get_values2",
                    "F_C_name": "get_values2",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_api": "get_values2",
                    "F_name_function": "get_values2",
                    "F_name_generic": "get_values2",
                    "F_name_impl": "get_values2",
                    "F_subprogram": "subroutine",
                    "function_name": "get_values2"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "iota_dimension  8 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "iota_dimension",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "nvar",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "nvar",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "dimension": [
                                            {
                                                "name": "nvar"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "values",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void iota_dimension (int nvar, int *values+intent(out)+dimension(nvar))",
                "declgen": "void iota_dimension(int nvar +value, int * values +dimension(nvar)+intent(out))",
                "name": "iota_dimension",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "nvar": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "nvar",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nvar",
                            "cxx_type": "int",
                            "cxx_var": "nvar",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nvar",
                            "fc_var": "nvar",
                            "i_var": "nvar",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    },
                    "values": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "nvar",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "values",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "values",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "f_array_allocate": "(nvar)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "values",
                            "fc_var": "values",
                            "i_var": "values",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*",
                            "stmtf": "f_out_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "nvar,\t values",
                    "C_name": "POI_iota_dimension",
                    "C_name_api": "iota_dimension",
                    "C_prototype": "int nvar,\t int * values",
                    "C_return_type": "void",
                    "F_C_arguments": "nvar,\t values",
                    "F_C_call": "c_iota_dimension",
                    "F_C_name": "iota_dimension",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "nvar,\t values",
                    "F_arguments": "nvar,\t values",
                    "F_name_api": "iota_dimension",
                    "F_name_function": "iota_dimension",
                    "F_name_generic": "iota_dimension",
                    "F_name_impl": "iota_dimension",
                    "F_subprogram": "subroutine",
                    "function_name": "iota_dimension"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "Sum  9 ****************************************",
                "_PTR_F_C_index": "48",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "Sum",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(values)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "len",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "values",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "result",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void Sum(int len +implied(size(values)), const int *values +rank(1), int *result +intent(out))",
                "declgen": "void Sum(int len +implied(size(values))+value, const int * values +rank(1), int * result +intent(out))",
                "name": "Sum",
                "options": {
                    "wrap_lua": false
                },
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "len": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "len",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&len",
                            "cxx_type": "int",
                            "cxx_var": "len",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "len",
                            "i_var": "len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar"
                        }
                    },
                    "result": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "result",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "result",
                            "cxx_type": "int",
                            "cxx_var": "result",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "result",
                            "i_var": "result",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*"
                        }
                    },
                    "values": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "values",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(values)",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "values",
                            "i_dimension": "(*)",
                            "i_var": "values",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(values)",
                            "stmtc": "f_in_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "len,\t values,\t result",
                    "C_name": "POI_Sum",
                    "C_name_api": "Sum",
                    "C_prototype": "int len,\t const int * values,\t int * result",
                    "C_return_type": "void",
                    "F_C_arguments": "len,\t values,\t result",
                    "F_C_name": "c_sum",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "sum",
                    "function_name": "Sum"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "Sum  48 ****************************************",
                "_PTR_C_CXX_index": "9",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 9,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "Sum",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(values)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "len",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "in"
                                    },
                                    "name": "values",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "result",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void Sum(int len +implied(size(values)), const int *values +rank(1), int *result +intent(out))",
                "declgen": "void Sum(int len +implied(size(values))+value, const int * values +rank(1), int * result +intent(out))",
                "name": "Sum",
                "options": {
                    "wrap_lua": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "len": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "len",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&len",
                            "cxx_type": "int",
                            "cxx_var": "len",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "len",
                            "fc_var": "SH_len",
                            "i_var": "len",
                            "idtor": "0",
                            "pre_call_intent": "size(values,kind=C_INT)",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar"
                        }
                    },
                    "result": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "result",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "result",
                            "cxx_type": "int",
                            "cxx_var": "result",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "result",
                            "fc_var": "result",
                            "i_var": "result",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*",
                            "stmtf": "f_out_native_*"
                        }
                    },
                    "values": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "values",
                            "c_var_cfi": "SHT_values_cfi",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(SHCXX_values)",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_values",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "values",
                            "fc_var": "values",
                            "i_dimension": "(*)",
                            "i_var": "values",
                            "i_var_cfi": "SHT_values_cfi",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(values)",
                            "stmtc": "f_in_native_*_cfi",
                            "stmtf": "f_in_native_*_cfi"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "len,\t SHCXX_values,\t result",
                    "C_name": "POI_Sum_CFI",
                    "C_name_api": "Sum",
                    "C_prototype": "int len,\t CFI_cdesc_t *SHT_values_cfi,\t int * result",
                    "C_return_type": "void",
                    "F_C_arguments": "len,\t values,\t result",
                    "F_C_call": "c_sum_CFI",
                    "F_C_name": "c_sum_CFI",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SH_len,\t values,\t result",
                    "F_arguments": "values,\t result",
                    "F_name_api": "sum",
                    "F_name_function": "sum",
                    "F_name_generic": "sum",
                    "F_name_impl": "sum",
                    "F_subprogram": "subroutine",
                    "f_c_suffix": "_CFI",
                    "function_name": "Sum"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "fillIntArray  10 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "fillIntArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "3",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "dimension": [
                                            {
                                                "constant": "3"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "out",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fillIntArray(int *out +intent(out)+dimension(3))",
                "declgen": "void fillIntArray(int * out +dimension(3)+intent(out))",
                "doxygen": {
                    "description": "Return three values into memory the user provides.\n"
                },
                "name": "fillIntArray",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "out": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "3",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "out",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out",
                            "cxx_type": "int",
                            "cxx_var": "out",
                            "f_array_allocate": "(3)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "out",
                            "fc_var": "out",
                            "i_var": "out",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*",
                            "stmtf": "f_out_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "out",
                    "C_name": "POI_fillIntArray",
                    "C_name_api": "fillIntArray",
                    "C_prototype": "int * out",
                    "C_return_type": "void",
                    "F_C_arguments": "out",
                    "F_C_call": "c_fill_int_array",
                    "F_C_name": "fill_int_array",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "out",
                    "F_arguments": "out",
                    "F_name_api": "fill_int_array",
                    "F_name_function": "fill_int_array",
                    "F_name_generic": "fill_int_array",
                    "F_name_impl": "fill_int_array",
                    "F_subprogram": "subroutine",
                    "function_name": "fillIntArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "incrementIntArray  11 ****************************************",
                "_PTR_F_C_index": "49",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "incrementIntArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "inout",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "array",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(array)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "sizein",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void incrementIntArray(int * array  +rank(1)+intent(inout), int   sizein +implied(size(array)))",
                "declgen": "void incrementIntArray(int * array +intent(inout)+rank(1), int sizein +implied(size(array))+value)",
                "doxygen": {
                    "description": "Increment array in place using intent(INOUT).\n"
                },
                "name": "incrementIntArray",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "array": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "array",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "array",
                            "cxx_type": "int",
                            "cxx_var": "array",
                            "f_assumed_shape": "(:)",
                            "f_intent": "INOUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "array",
                            "i_dimension": "(*)",
                            "i_var": "array",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(array)",
                            "stmtc": "f_inout_native_*"
                        }
                    },
                    "sizein": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "sizein",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&sizein",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "sizein",
                            "i_var": "sizein",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "array,\t sizein",
                    "C_name": "POI_incrementIntArray",
                    "C_name_api": "incrementIntArray",
                    "C_prototype": "int * array,\t int sizein",
                    "C_return_type": "void",
                    "F_C_arguments": "array,\t sizein",
                    "F_C_name": "c_increment_int_array",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "increment_int_array",
                    "function_name": "incrementIntArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "incrementIntArray  49 ****************************************",
                "_PTR_C_CXX_index": "11",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 11,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "incrementIntArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "inout",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "inout"
                                    },
                                    "name": "array",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(array)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "sizein",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void incrementIntArray(int * array  +rank(1)+intent(inout), int   sizein +implied(size(array)))",
                "declgen": "void incrementIntArray(int * array +intent(inout)+rank(1), int sizein +implied(size(array))+value)",
                "doxygen": {
                    "description": "Increment array in place using intent(INOUT).\n"
                },
                "name": "incrementIntArray",
                "options": {},
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "array": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "array",
                            "c_var_cfi": "SHT_array_cfi",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_array",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_array",
                            "f_assumed_shape": "(:)",
                            "f_intent": "INOUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "array",
                            "fc_var": "array",
                            "i_dimension": "(*)",
                            "i_var": "array",
                            "i_var_cfi": "SHT_array_cfi",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(array)",
                            "stmtc": "f_inout_native_*_cfi",
                            "stmtf": "f_inout_native_*_cfi"
                        }
                    },
                    "sizein": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "sizein",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&sizein",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "sizein",
                            "fc_var": "SH_sizein",
                            "i_var": "sizein",
                            "idtor": "0",
                            "pre_call_intent": "size(array,kind=C_INT)",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_array,\t sizein",
                    "C_name": "POI_incrementIntArray_CFI",
                    "C_name_api": "incrementIntArray",
                    "C_prototype": "CFI_cdesc_t *SHT_array_cfi,\t int sizein",
                    "C_return_type": "void",
                    "F_C_arguments": "array,\t sizein",
                    "F_C_call": "c_increment_int_array_CFI",
                    "F_C_name": "c_increment_int_array_CFI",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "array,\t SH_sizein",
                    "F_arguments": "array",
                    "F_name_api": "increment_int_array",
                    "F_name_function": "increment_int_array",
                    "F_name_generic": "increment_int_array",
                    "F_name_impl": "increment_int_array",
                    "F_subprogram": "subroutine",
                    "f_c_suffix": "_CFI",
                    "function_name": "incrementIntArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "fill_with_zeros  12 ****************************************",
                "_PTR_F_C_index": "50",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "fill_with_zeros",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "x",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(x)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "x_length",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fill_with_zeros(double* x+rank(1), int x_length+implied(size(x)));",
                "declgen": "void fill_with_zeros(double * x +rank(1), int x_length +implied(size(x))+value)",
                "name": "fill_with_zeros",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "x": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double",
                            "c_var": "x",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "x",
                            "cxx_type": "double",
                            "cxx_var": "x",
                            "f_assumed_shape": "(:)",
                            "f_intent": "INOUT",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "x",
                            "i_dimension": "(*)",
                            "i_var": "x",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "size": "size(x)",
                            "stmtc": "f_inout_native_*"
                        }
                    },
                    "x_length": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "x_length",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&x_length",
                            "cxx_type": "int",
                            "cxx_var": "x_length",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "x_length",
                            "i_var": "x_length",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "x,\t x_length",
                    "C_name": "POI_fill_with_zeros",
                    "C_name_api": "fill_with_zeros",
                    "C_prototype": "double * x,\t int x_length",
                    "C_return_type": "void",
                    "F_C_arguments": "x,\t x_length",
                    "F_C_name": "c_fill_with_zeros",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "fill_with_zeros",
                    "function_name": "fill_with_zeros"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "fill_with_zeros  50 ****************************************",
                "_PTR_C_CXX_index": "12",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 12,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "fill_with_zeros",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "inout"
                                    },
                                    "name": "x",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(x)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "x_length",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fill_with_zeros(double* x+rank(1), int x_length+implied(size(x)));",
                "declgen": "void fill_with_zeros(double * x +rank(1), int x_length +implied(size(x))+value)",
                "name": "fill_with_zeros",
                "options": {},
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "x": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double",
                            "c_var": "x",
                            "c_var_cfi": "SHT_x_cfi",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_x",
                            "cxx_type": "double",
                            "cxx_var": "SHCXX_x",
                            "f_assumed_shape": "(:)",
                            "f_intent": "INOUT",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "x",
                            "fc_var": "x",
                            "i_dimension": "(*)",
                            "i_var": "x",
                            "i_var_cfi": "SHT_x_cfi",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "size": "size(x)",
                            "stmtc": "f_inout_native_*_cfi",
                            "stmtf": "f_inout_native_*_cfi"
                        }
                    },
                    "x_length": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "x_length",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&x_length",
                            "cxx_type": "int",
                            "cxx_var": "x_length",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "x_length",
                            "fc_var": "SH_x_length",
                            "i_var": "x_length",
                            "idtor": "0",
                            "pre_call_intent": "size(x,kind=C_INT)",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_x,\t x_length",
                    "C_name": "POI_fill_with_zeros_CFI",
                    "C_name_api": "fill_with_zeros",
                    "C_prototype": "CFI_cdesc_t *SHT_x_cfi,\t int x_length",
                    "C_return_type": "void",
                    "F_C_arguments": "x,\t x_length",
                    "F_C_call": "c_fill_with_zeros_CFI",
                    "F_C_name": "c_fill_with_zeros_CFI",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "x,\t SH_x_length",
                    "F_arguments": "x",
                    "F_name_api": "fill_with_zeros",
                    "F_name_function": "fill_with_zeros",
                    "F_name_generic": "fill_with_zeros",
                    "F_name_impl": "fill_with_zeros",
                    "F_subprogram": "subroutine",
                    "f_c_suffix": "_CFI",
                    "function_name": "fill_with_zeros"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "accumulate  13 ****************************************",
                "_PTR_F_C_index": "51",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "accumulate",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(arr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "len",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int accumulate(const int *arr+rank(1), size_t len+implied(size(arr)));",
                "declgen": "int accumulate(const int * arr +rank(1), size_t len +implied(size(arr))+value)",
                "name": "accumulate",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "arr": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arr",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(arr)",
                            "cxx_type": "int",
                            "cxx_var": "arr",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arr",
                            "i_dimension": "(*)",
                            "i_var": "arr",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(arr)",
                            "stmtc": "f_in_native_*"
                        }
                    },
                    "len": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "size_t",
                            "c_var": "len",
                            "cfi_type": "CFI_type_size_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&len",
                            "cxx_type": "size_t",
                            "cxx_var": "len",
                            "f_intent": "IN",
                            "f_kind": "C_SIZE_T",
                            "f_type": "integer(C_SIZE_T)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "len",
                            "i_var": "len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmtc": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arr,\t len",
                    "C_name": "POI_accumulate",
                    "C_name_api": "accumulate",
                    "C_prototype": "const int * arr,\t size_t len",
                    "C_return_type": "int",
                    "F_C_arguments": "arr,\t len",
                    "F_C_name": "c_accumulate",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "accumulate",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "accumulate"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "accumulate  51 ****************************************",
                "_PTR_C_CXX_index": "13",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 13,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "accumulate",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "in"
                                    },
                                    "name": "arr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(arr)",
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "len",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int accumulate(const int *arr+rank(1), size_t len+implied(size(arr)));",
                "declgen": "int accumulate(const int * arr +rank(1), size_t len +implied(size(arr))+value)",
                "name": "accumulate",
                "options": {},
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arr": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arr",
                            "c_var_cfi": "SHT_arr_cfi",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(SHCXX_arr)",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_arr",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arr",
                            "fc_var": "arr",
                            "i_dimension": "(*)",
                            "i_var": "arr",
                            "i_var_cfi": "SHT_arr_cfi",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(arr)",
                            "stmtc": "f_in_native_*_cfi",
                            "stmtf": "f_in_native_*_cfi"
                        }
                    },
                    "len": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "size_t",
                            "c_var": "len",
                            "cfi_type": "CFI_type_size_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&len",
                            "cxx_type": "size_t",
                            "cxx_var": "len",
                            "f_intent": "IN",
                            "f_kind": "C_SIZE_T",
                            "f_type": "integer(C_SIZE_T)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "len",
                            "fc_var": "SH_len",
                            "i_var": "len",
                            "idtor": "0",
                            "pre_call_intent": "size(arr,kind=C_SIZE_T)",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmtc": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_arr,\t len",
                    "C_name": "POI_accumulate_CFI",
                    "C_name_api": "accumulate",
                    "C_prototype": "CFI_cdesc_t *SHT_arr_cfi,\t size_t len",
                    "C_return_type": "int",
                    "F_C_arguments": "arr,\t len",
                    "F_C_call": "c_accumulate_CFI",
                    "F_C_name": "c_accumulate_CFI",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arr,\t SH_len",
                    "F_arguments": "arr",
                    "F_name_api": "accumulate",
                    "F_name_function": "accumulate",
                    "F_name_generic": "accumulate",
                    "F_name_impl": "accumulate",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "f_c_suffix": "_CFI",
                    "function_name": "accumulate"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar",
                        "stmtf": "f_function_native_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "acceptCharArrayIn  14 ****************************************",
                "_PTR_F_C_index": "52",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "acceptCharArrayIn",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "names",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int acceptCharArrayIn(char **names +intent(in))",
                "declgen": "int acceptCharArrayIn(char * * names +intent(in)+rank(1))",
                "doxygen": {
                    "description": "Return strlen of the first index as a check.\n"
                },
                "helpers": {
                    "c": [
                        "char_array_alloc",
                        "char_array_free"
                    ]
                },
                "name": "acceptCharArrayIn",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "names": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "names",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "names",
                            "cxx_type": "char",
                            "cxx_var": "names",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "names",
                            "i_dimension": "(*)",
                            "i_var": "names",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "size": "size(names)",
                            "stmtc": "f_in_char_**"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "names",
                    "C_name": "POI_acceptCharArrayIn",
                    "C_name_api": "acceptCharArrayIn",
                    "C_prototype": "char **names",
                    "C_return_type": "int",
                    "F_C_arguments": "names",
                    "F_C_name": "c_accept_char_array_in",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "accept_char_array_in",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "acceptCharArrayIn"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "acceptCharArrayIn  52 ****************************************",
                "_PTR_C_CXX_index": "14",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 14,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "acceptCharArrayIn",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "in"
                                    },
                                    "name": "names",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int acceptCharArrayIn(char **names +intent(in))",
                "declgen": "int acceptCharArrayIn(char * * names +intent(in)+rank(1))",
                "doxygen": {
                    "description": "Return strlen of the first index as a check.\n"
                },
                "helpers": {
                    "c": [
                        "char_array_alloc",
                        "char_array_free"
                    ]
                },
                "name": "acceptCharArrayIn",
                "options": {},
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "names": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_array_alloc": "ShroudStrArrayAlloc",
                            "c_helper_char_array_free": "ShroudStrArrayFree",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "names",
                            "c_var_cfi": "SHT_names_cfi",
                            "c_var_len": "SHT_names_len",
                            "c_var_size": "SHT_names_size",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_names",
                            "cxx_type": "char",
                            "cxx_var": "SHCXX_names",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "names",
                            "fc_var": "names",
                            "i_dimension": "(*)",
                            "i_var": "names",
                            "i_var_cfi": "SHT_names_cfi",
                            "i_var_len": "SHT_names_len",
                            "i_var_size": "SHT_names_size",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "size": "size(names)",
                            "stmtc": "f_in_char_**_cfi",
                            "stmtf": "f_in_char_**_cfi"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_names",
                    "C_name": "POI_acceptCharArrayIn_CFI",
                    "C_name_api": "acceptCharArrayIn",
                    "C_prototype": "CFI_cdesc_t *SHT_names_cfi",
                    "C_return_type": "int",
                    "F_C_arguments": "names",
                    "F_C_call": "c_accept_char_array_in_CFI",
                    "F_C_name": "accept_char_array_in",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "names",
                    "F_arguments": "names",
                    "F_name_api": "accept_char_array_in",
                    "F_name_function": "accept_char_array_in",
                    "F_name_generic": "accept_char_array_in",
                    "F_name_impl": "accept_char_array_in",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "f_c_suffix": "_CFI",
                    "function_name": "acceptCharArrayIn"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar",
                        "stmtf": "f_function_native_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "setGlobalInt  15 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "setGlobalInt",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "value",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void setGlobalInt(int value)",
                "declgen": "void setGlobalInt(int value +value)",
                "name": "setGlobalInt",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "value": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "value",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&value",
                            "cxx_type": "int",
                            "cxx_var": "value",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "value",
                            "fc_var": "value",
                            "i_var": "value",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "value",
                    "C_name": "POI_setGlobalInt",
                    "C_name_api": "setGlobalInt",
                    "C_prototype": "int value",
                    "C_return_type": "void",
                    "F_C_arguments": "value",
                    "F_C_call": "c_set_global_int",
                    "F_C_name": "set_global_int",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "value",
                    "F_arguments": "value",
                    "F_name_api": "set_global_int",
                    "F_name_function": "set_global_int",
                    "F_name_generic": "set_global_int",
                    "F_name_impl": "set_global_int",
                    "F_subprogram": "subroutine",
                    "function_name": "setGlobalInt"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "sumFixedArray  16 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "sumFixedArray",
                        "params": [],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int sumFixedArray(void)",
                "declgen": "int sumFixedArray(void)",
                "doxygen": {
                    "description": "Used to test values global_array.\n"
                },
                "name": "sumFixedArray",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "POI_sumFixedArray",
                    "C_name_api": "sumFixedArray",
                    "C_prototype": "void",
                    "C_return_type": "int",
                    "F_C_arguments": "",
                    "F_C_call": "c_sum_fixed_array",
                    "F_C_name": "sum_fixed_array",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arguments": "",
                    "F_name_api": "sum_fixed_array",
                    "F_name_function": "sum_fixed_array",
                    "F_name_generic": "sum_fixed_array",
                    "F_name_impl": "sum_fixed_array",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "sumFixedArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar",
                        "stmtf": "f_function_native_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "getPtrToScalar  17 ****************************************",
                "_PTR_F_C_index": "53",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getPtrToScalar",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "deref": "pointer",
                                        "intent": "out"
                                    },
                                    "name": "nitems",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToScalar(int **nitems+intent(out))",
                "declgen": "void getPtrToScalar(int * * nitems +intent(out))",
                "name": "getPtrToScalar",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "nitems": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nitems",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nitems",
                            "cxx_type": "int",
                            "cxx_var": "nitems",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nitems",
                            "i_var": "nitems",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_pointer"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "nitems",
                    "C_name": "POI_getPtrToScalar",
                    "C_name_api": "getPtrToScalar",
                    "C_prototype": "int * * nitems",
                    "C_return_type": "void",
                    "F_C_arguments": "nitems",
                    "F_C_name": "c_get_ptr_to_scalar",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "get_ptr_to_scalar",
                    "function_name": "getPtrToScalar"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getPtrToScalar  53 ****************************************",
                "_PTR_C_CXX_index": "17",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 17,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getPtrToScalar",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "deref": "pointer",
                                        "intent": "out"
                                    },
                                    "name": "nitems",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToScalar(int **nitems+intent(out))",
                "declgen": "void getPtrToScalar(int * * nitems +intent(out))",
                "name": "getPtrToScalar",
                "options": {
                    "wrap_python": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "nitems": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_local_cdesc": "SHC_nitems_cdesc",
                            "c_local_cptr": "SHC_nitems_cptr",
                            "c_local_err": "SHC_nitems_err",
                            "c_local_fptr": "SHC_nitems_fptr",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nitems",
                            "c_var_cfi": "SHT_nitems_cfi",
                            "c_var_extents": "SHT_nitems_extents",
                            "c_var_lower": "SHT_nitems_lower",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_nitems",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_nitems",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nitems",
                            "fc_var": "nitems",
                            "i_local_cdesc": "SHC_nitems_cdesc",
                            "i_local_cptr": "SHC_nitems_cptr",
                            "i_local_err": "SHC_nitems_err",
                            "i_local_fptr": "SHC_nitems_fptr",
                            "i_var": "nitems",
                            "i_var_cfi": "SHT_nitems_cfi",
                            "i_var_extents": "SHT_nitems_extents",
                            "i_var_lower": "SHT_nitems_lower",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_cfi_pointer",
                            "stmtf": "f_out_native_**_cfi_pointer"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_nitems",
                    "C_name": "POI_getPtrToScalar_CFI",
                    "C_name_api": "getPtrToScalar",
                    "C_prototype": "CFI_cdesc_t *SHT_nitems_cfi",
                    "C_return_type": "void",
                    "F_C_arguments": "nitems",
                    "F_C_call": "c_get_ptr_to_scalar_CFI",
                    "F_C_name": "get_ptr_to_scalar",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "nitems",
                    "F_arguments": "nitems",
                    "F_name_api": "get_ptr_to_scalar",
                    "F_name_function": "get_ptr_to_scalar",
                    "F_name_generic": "get_ptr_to_scalar",
                    "F_name_impl": "get_ptr_to_scalar",
                    "F_subprogram": "subroutine",
                    "f_c_suffix": "_CFI",
                    "function_name": "getPtrToScalar"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getPtrToFixedArray  18 ****************************************",
                "_PTR_F_C_index": "54",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getPtrToFixedArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "10",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "deref": "pointer",
                                        "dimension": [
                                            {
                                                "constant": "10"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToFixedArray(int **count+intent(out)+dimension(10))",
                "declgen": "void getPtrToFixedArray(int * * count +dimension(10)+intent(out))",
                "doxygen": {
                    "description": "Return a Fortran pointer to an array which is always the same length.\n"
                },
                "name": "getPtrToFixedArray",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "10",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "count",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "f_array_allocate": "(10)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "i_var": "count",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_pointer"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "count",
                    "C_name": "POI_getPtrToFixedArray",
                    "C_name_api": "getPtrToFixedArray",
                    "C_prototype": "int * * count",
                    "C_return_type": "void",
                    "F_C_arguments": "count",
                    "F_C_name": "c_get_ptr_to_fixed_array",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "get_ptr_to_fixed_array",
                    "function_name": "getPtrToFixedArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getPtrToFixedArray  54 ****************************************",
                "_PTR_C_CXX_index": "18",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 18,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getPtrToFixedArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "10",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "deref": "pointer",
                                        "dimension": [
                                            {
                                                "constant": "10"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToFixedArray(int **count+intent(out)+dimension(10))",
                "declgen": "void getPtrToFixedArray(int * * count +dimension(10)+intent(out))",
                "doxygen": {
                    "description": "Return a Fortran pointer to an array which is always the same length.\n"
                },
                "name": "getPtrToFixedArray",
                "options": {},
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "10",
                            "c_const": "",
                            "c_deref": "*",
                            "c_local_cdesc": "SHC_count_cdesc",
                            "c_local_cptr": "SHC_count_cptr",
                            "c_local_err": "SHC_count_err",
                            "c_local_fptr": "SHC_count_fptr",
                            "c_member": "->",
                            "c_temp_extents_decl": "CFI_index_t SHT_count_extents[1];\nSHT_count_extents[0] = 10;\n",
                            "c_temp_extents_use": "SHT_count_extents",
                            "c_temp_lower_decl": "CFI_index_t SHT_count_lower[1] = {1};\n",
                            "c_temp_lower_use": "SHT_count_lower",
                            "c_type": "int",
                            "c_var": "count",
                            "c_var_cfi": "SHT_count_cfi",
                            "c_var_extents": "SHT_count_extents",
                            "c_var_lower": "SHT_count_lower",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_count",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_count",
                            "f_array_allocate": "(10)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "fc_var": "count",
                            "i_local_cdesc": "SHC_count_cdesc",
                            "i_local_cptr": "SHC_count_cptr",
                            "i_local_err": "SHC_count_err",
                            "i_local_fptr": "SHC_count_fptr",
                            "i_var": "count",
                            "i_var_cfi": "SHT_count_cfi",
                            "i_var_extents": "SHT_count_extents",
                            "i_var_lower": "SHT_count_lower",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_cfi_pointer",
                            "stmtf": "f_out_native_**_cfi_pointer"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_count",
                    "C_name": "POI_getPtrToFixedArray_CFI",
                    "C_name_api": "getPtrToFixedArray",
                    "C_prototype": "CFI_cdesc_t *SHT_count_cfi",
                    "C_return_type": "void",
                    "F_C_arguments": "count",
                    "F_C_call": "c_get_ptr_to_fixed_array_CFI",
                    "F_C_name": "get_ptr_to_fixed_array",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "count",
                    "F_arguments": "count",
                    "F_name_api": "get_ptr_to_fixed_array",
                    "F_name_function": "get_ptr_to_fixed_array",
                    "F_name_generic": "get_ptr_to_fixed_array",
                    "F_name_impl": "get_ptr_to_fixed_array",
                    "F_subprogram": "subroutine",
                    "f_c_suffix": "_CFI",
                    "function_name": "getPtrToFixedArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getPtrToDynamicArray  19 ****************************************",
                "_PTR_F_C_index": "55",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getPtrToDynamicArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "ncount",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "deref": "pointer",
                                        "dimension": [
                                            {
                                                "name": "ncount"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "ncount",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToDynamicArray(int **count+intent(out)+dimension(ncount), int *ncount+intent(out)+hidden)",
                "declgen": "void getPtrToDynamicArray(int * * count +dimension(ncount)+intent(out), int * ncount +hidden+intent(out))",
                "doxygen": {
                    "description": "Return a Fortran pointer to an array which is the length of\nthe argument ncount.\n"
                },
                "name": "getPtrToDynamicArray",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "ncount",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "count",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "f_array_allocate": "(ncount)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "i_var": "count",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_pointer"
                        }
                    },
                    "ncount": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "ncount",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "ncount",
                            "cxx_type": "int",
                            "cxx_var": "ncount",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "ncount",
                            "i_var": "ncount",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "count,\t ncount",
                    "C_name": "POI_getPtrToDynamicArray",
                    "C_name_api": "getPtrToDynamicArray",
                    "C_prototype": "int * * count,\t int * ncount",
                    "C_return_type": "void",
                    "F_C_arguments": "count,\t ncount",
                    "F_C_name": "c_get_ptr_to_dynamic_array",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "get_ptr_to_dynamic_array",
                    "function_name": "getPtrToDynamicArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getPtrToDynamicArray  55 ****************************************",
                "_PTR_C_CXX_index": "19",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 19,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getPtrToDynamicArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "ncount",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "deref": "pointer",
                                        "dimension": [
                                            {
                                                "name": "ncount"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "ncount",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToDynamicArray(int **count+intent(out)+dimension(ncount), int *ncount+intent(out)+hidden)",
                "declgen": "void getPtrToDynamicArray(int * * count +dimension(ncount)+intent(out), int * ncount +hidden+intent(out))",
                "doxygen": {
                    "description": "Return a Fortran pointer to an array which is the length of\nthe argument ncount.\n"
                },
                "name": "getPtrToDynamicArray",
                "options": {},
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "ncount",
                            "c_const": "",
                            "c_deref": "*",
                            "c_local_cdesc": "SHC_count_cdesc",
                            "c_local_cptr": "SHC_count_cptr",
                            "c_local_err": "SHC_count_err",
                            "c_local_fptr": "SHC_count_fptr",
                            "c_member": "->",
                            "c_temp_extents_decl": "CFI_index_t SHT_count_extents[1];\nSHT_count_extents[0] = ncount;\n",
                            "c_temp_extents_use": "SHT_count_extents",
                            "c_temp_lower_decl": "CFI_index_t SHT_count_lower[1] = {1};\n",
                            "c_temp_lower_use": "SHT_count_lower",
                            "c_type": "int",
                            "c_var": "count",
                            "c_var_cfi": "SHT_count_cfi",
                            "c_var_extents": "SHT_count_extents",
                            "c_var_lower": "SHT_count_lower",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_count",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_count",
                            "f_array_allocate": "(ncount)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "fc_var": "count",
                            "i_local_cdesc": "SHC_count_cdesc",
                            "i_local_cptr": "SHC_count_cptr",
                            "i_local_err": "SHC_count_err",
                            "i_local_fptr": "SHC_count_fptr",
                            "i_var": "count",
                            "i_var_cfi": "SHT_count_cfi",
                            "i_var_extents": "SHT_count_extents",
                            "i_var_lower": "SHT_count_lower",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_cfi_pointer",
                            "stmtf": "f_out_native_**_cfi_pointer"
                        }
                    },
                    "ncount": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "ncount",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "ncount",
                            "cxx_type": "int",
                            "cxx_var": "ncount",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "ncount",
                            "fc_var": "ncount",
                            "i_var": "ncount",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*_hidden"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_count,\t &ncount",
                    "C_name": "POI_getPtrToDynamicArray_CFI",
                    "C_name_api": "getPtrToDynamicArray",
                    "C_prototype": "CFI_cdesc_t *SHT_count_cfi",
                    "C_return_type": "void",
                    "F_C_arguments": "count",
                    "F_C_call": "c_get_ptr_to_dynamic_array_CFI",
                    "F_C_name": "get_ptr_to_dynamic_array",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "count",
                    "F_arguments": "count",
                    "F_name_api": "get_ptr_to_dynamic_array",
                    "F_name_function": "get_ptr_to_dynamic_array",
                    "F_name_generic": "get_ptr_to_dynamic_array",
                    "F_name_impl": "get_ptr_to_dynamic_array",
                    "F_subprogram": "subroutine",
                    "f_c_suffix": "_CFI",
                    "function_name": "getPtrToDynamicArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getPtrToFuncArray  20 ****************************************",
                "_PTR_F_C_index": "56",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getPtrToFuncArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "getLen()",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "deref": "pointer",
                                        "dimension": [
                                            {
                                                "args": [],
                                                "name": "getLen"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToFuncArray(int **count+intent(out) +dimension(getLen()))",
                "declgen": "void getPtrToFuncArray(int * * count +dimension(getLen())+intent(out))",
                "doxygen": {
                    "description": "Return a Fortran pointer to an array which is the length\nis computed by C++ function getLen.\ngetLen will be called from C/C++ to compute the shape.\n"
                },
                "name": "getPtrToFuncArray",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "getLen()",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "count",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "f_array_allocate": "(getLen())",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "i_var": "count",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_pointer"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "count",
                    "C_name": "POI_getPtrToFuncArray",
                    "C_name_api": "getPtrToFuncArray",
                    "C_prototype": "int * * count",
                    "C_return_type": "void",
                    "F_C_arguments": "count",
                    "F_C_name": "c_get_ptr_to_func_array",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "get_ptr_to_func_array",
                    "function_name": "getPtrToFuncArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getPtrToFuncArray  56 ****************************************",
                "_PTR_C_CXX_index": "20",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 20,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getPtrToFuncArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "getLen()",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "deref": "pointer",
                                        "dimension": [
                                            {
                                                "args": [],
                                                "name": "getLen"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToFuncArray(int **count+intent(out) +dimension(getLen()))",
                "declgen": "void getPtrToFuncArray(int * * count +dimension(getLen())+intent(out))",
                "doxygen": {
                    "description": "Return a Fortran pointer to an array which is the length\nis computed by C++ function getLen.\ngetLen will be called from C/C++ to compute the shape.\n"
                },
                "name": "getPtrToFuncArray",
                "options": {},
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "getLen()",
                            "c_const": "",
                            "c_deref": "*",
                            "c_local_cdesc": "SHC_count_cdesc",
                            "c_local_cptr": "SHC_count_cptr",
                            "c_local_err": "SHC_count_err",
                            "c_local_fptr": "SHC_count_fptr",
                            "c_member": "->",
                            "c_temp_extents_decl": "CFI_index_t SHT_count_extents[1];\nSHT_count_extents[0] = getLen();\n",
                            "c_temp_extents_use": "SHT_count_extents",
                            "c_temp_lower_decl": "CFI_index_t SHT_count_lower[1] = {1};\n",
                            "c_temp_lower_use": "SHT_count_lower",
                            "c_type": "int",
                            "c_var": "count",
                            "c_var_cfi": "SHT_count_cfi",
                            "c_var_extents": "SHT_count_extents",
                            "c_var_lower": "SHT_count_lower",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_count",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_count",
                            "f_array_allocate": "(getLen())",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "fc_var": "count",
                            "i_local_cdesc": "SHC_count_cdesc",
                            "i_local_cptr": "SHC_count_cptr",
                            "i_local_err": "SHC_count_err",
                            "i_local_fptr": "SHC_count_fptr",
                            "i_var": "count",
                            "i_var_cfi": "SHT_count_cfi",
                            "i_var_extents": "SHT_count_extents",
                            "i_var_lower": "SHT_count_lower",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_cfi_pointer",
                            "stmtf": "f_out_native_**_cfi_pointer"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_count",
                    "C_name": "POI_getPtrToFuncArray_CFI",
                    "C_name_api": "getPtrToFuncArray",
                    "C_prototype": "CFI_cdesc_t *SHT_count_cfi",
                    "C_return_type": "void",
                    "F_C_arguments": "count",
                    "F_C_call": "c_get_ptr_to_func_array_CFI",
                    "F_C_name": "get_ptr_to_func_array",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "count",
                    "F_arguments": "count",
                    "F_name_api": "get_ptr_to_func_array",
                    "F_name_function": "get_ptr_to_func_array",
                    "F_name_generic": "get_ptr_to_func_array",
                    "F_name_impl": "get_ptr_to_func_array",
                    "F_subprogram": "subroutine",
                    "f_c_suffix": "_CFI",
                    "function_name": "getPtrToFuncArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getPtrToConstScalar  21 ****************************************",
                "_PTR_F_C_index": "57",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getPtrToConstScalar",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "deref": "pointer",
                                        "intent": "out"
                                    },
                                    "name": "nitems",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToConstScalar( const int **nitems+intent(out))",
                "declgen": "void getPtrToConstScalar(const int * * nitems +intent(out))",
                "name": "getPtrToConstScalar",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "nitems": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nitems",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(nitems)",
                            "cxx_type": "int",
                            "cxx_var": "nitems",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nitems",
                            "i_var": "nitems",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_pointer"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "nitems",
                    "C_name": "POI_getPtrToConstScalar",
                    "C_name_api": "getPtrToConstScalar",
                    "C_prototype": "const int * * nitems",
                    "C_return_type": "void",
                    "F_C_arguments": "nitems",
                    "F_C_name": "c_get_ptr_to_const_scalar",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "get_ptr_to_const_scalar",
                    "function_name": "getPtrToConstScalar"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getPtrToConstScalar  57 ****************************************",
                "_PTR_C_CXX_index": "21",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 21,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getPtrToConstScalar",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "deref": "pointer",
                                        "intent": "out"
                                    },
                                    "name": "nitems",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToConstScalar( const int **nitems+intent(out))",
                "declgen": "void getPtrToConstScalar(const int * * nitems +intent(out))",
                "name": "getPtrToConstScalar",
                "options": {
                    "wrap_python": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "nitems": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_local_cdesc": "SHC_nitems_cdesc",
                            "c_local_cptr": "SHC_nitems_cptr",
                            "c_local_err": "SHC_nitems_err",
                            "c_local_fptr": "SHC_nitems_fptr",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nitems",
                            "c_var_cfi": "SHT_nitems_cfi",
                            "c_var_extents": "SHT_nitems_extents",
                            "c_var_lower": "SHT_nitems_lower",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(SHCXX_nitems)",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_nitems",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nitems",
                            "fc_var": "nitems",
                            "i_local_cdesc": "SHC_nitems_cdesc",
                            "i_local_cptr": "SHC_nitems_cptr",
                            "i_local_err": "SHC_nitems_err",
                            "i_local_fptr": "SHC_nitems_fptr",
                            "i_var": "nitems",
                            "i_var_cfi": "SHT_nitems_cfi",
                            "i_var_extents": "SHT_nitems_extents",
                            "i_var_lower": "SHT_nitems_lower",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_cfi_pointer",
                            "stmtf": "f_out_native_**_cfi_pointer"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_nitems",
                    "C_name": "POI_getPtrToConstScalar_CFI",
                    "C_name_api": "getPtrToConstScalar",
                    "C_prototype": "CFI_cdesc_t *SHT_nitems_cfi",
                    "C_return_type": "void",
                    "F_C_arguments": "nitems",
                    "F_C_call": "c_get_ptr_to_const_scalar_CFI",
                    "F_C_name": "get_ptr_to_const_scalar",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "nitems",
                    "F_arguments": "nitems",
                    "F_name_api": "get_ptr_to_const_scalar",
                    "F_name_function": "get_ptr_to_const_scalar",
                    "F_name_generic": "get_ptr_to_const_scalar",
                    "F_name_impl": "get_ptr_to_const_scalar",
                    "F_subprogram": "subroutine",
                    "f_c_suffix": "_CFI",
                    "function_name": "getPtrToConstScalar"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getPtrToFixedConstArray  22 ****************************************",
                "_PTR_F_C_index": "58",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getPtrToFixedConstArray",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "dimension": "10",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "deref": "pointer",
                                        "dimension": [
                                            {
                                                "constant": "10"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToFixedConstArray( const int **count+intent(out)+dimension(10));",
                "declgen": "void getPtrToFixedConstArray(const int * * count +dimension(10)+intent(out))",
                "name": "getPtrToFixedConstArray",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "10",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "count",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(count)",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "f_array_allocate": "(10)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "i_var": "count",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_pointer"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "count",
                    "C_name": "POI_getPtrToFixedConstArray",
                    "C_name_api": "getPtrToFixedConstArray",
                    "C_prototype": "const int * * count",
                    "C_return_type": "void",
                    "F_C_arguments": "count",
                    "F_C_name": "c_get_ptr_to_fixed_const_array",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "get_ptr_to_fixed_const_array",
                    "function_name": "getPtrToFixedConstArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getPtrToFixedConstArray  58 ****************************************",
                "_PTR_C_CXX_index": "22",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 22,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getPtrToFixedConstArray",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "dimension": "10",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "deref": "pointer",
                                        "dimension": [
                                            {
                                                "constant": "10"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToFixedConstArray( const int **count+intent(out)+dimension(10));",
                "declgen": "void getPtrToFixedConstArray(const int * * count +dimension(10)+intent(out))",
                "name": "getPtrToFixedConstArray",
                "options": {},
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "10",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_local_cdesc": "SHC_count_cdesc",
                            "c_local_cptr": "SHC_count_cptr",
                            "c_local_err": "SHC_count_err",
                            "c_local_fptr": "SHC_count_fptr",
                            "c_member": "->",
                            "c_temp_extents_decl": "CFI_index_t SHT_count_extents[1];\nSHT_count_extents[0] = 10;\n",
                            "c_temp_extents_use": "SHT_count_extents",
                            "c_temp_lower_decl": "CFI_index_t SHT_count_lower[1] = {1};\n",
                            "c_temp_lower_use": "SHT_count_lower",
                            "c_type": "int",
                            "c_var": "count",
                            "c_var_cfi": "SHT_count_cfi",
                            "c_var_extents": "SHT_count_extents",
                            "c_var_lower": "SHT_count_lower",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(SHCXX_count)",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_count",
                            "f_array_allocate": "(10)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "fc_var": "count",
                            "i_local_cdesc": "SHC_count_cdesc",
                            "i_local_cptr": "SHC_count_cptr",
                            "i_local_err": "SHC_count_err",
                            "i_local_fptr": "SHC_count_fptr",
                            "i_var": "count",
                            "i_var_cfi": "SHT_count_cfi",
                            "i_var_extents": "SHT_count_extents",
                            "i_var_lower": "SHT_count_lower",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_cfi_pointer",
                            "stmtf": "f_out_native_**_cfi_pointer"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_count",
                    "C_name": "POI_getPtrToFixedConstArray_CFI",
                    "C_name_api": "getPtrToFixedConstArray",
                    "C_prototype": "CFI_cdesc_t *SHT_count_cfi",
                    "C_return_type": "void",
                    "F_C_arguments": "count",
                    "F_C_call": "c_get_ptr_to_fixed_const_array_CFI",
                    "F_C_name": "get_ptr_to_fixed_const_array",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "count",
                    "F_arguments": "count",
                    "F_name_api": "get_ptr_to_fixed_const_array",
                    "F_name_function": "get_ptr_to_fixed_const_array",
                    "F_name_generic": "get_ptr_to_fixed_const_array",
                    "F_name_impl": "get_ptr_to_fixed_const_array",
                    "F_subprogram": "subroutine",
                    "f_c_suffix": "_CFI",
                    "function_name": "getPtrToFixedConstArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getPtrToDynamicConstArray  23 ****************************************",
                "_PTR_F_C_index": "59",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getPtrToDynamicConstArray",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "dimension": "ncount",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "deref": "pointer",
                                        "dimension": [
                                            {
                                                "name": "ncount"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "ncount",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToDynamicConstArray( const int **count+intent(out)+dimension(ncount), int *ncount+intent(out)+hidden)",
                "declgen": "void getPtrToDynamicConstArray(const int * * count +dimension(ncount)+intent(out), int * ncount +hidden+intent(out))",
                "name": "getPtrToDynamicConstArray",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "ncount",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "count",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(count)",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "f_array_allocate": "(ncount)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "i_var": "count",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_pointer"
                        }
                    },
                    "ncount": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "ncount",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "ncount",
                            "cxx_type": "int",
                            "cxx_var": "ncount",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "ncount",
                            "i_var": "ncount",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "count,\t ncount",
                    "C_name": "POI_getPtrToDynamicConstArray",
                    "C_name_api": "getPtrToDynamicConstArray",
                    "C_prototype": "const int * * count,\t int * ncount",
                    "C_return_type": "void",
                    "F_C_arguments": "count,\t ncount",
                    "F_C_name": "c_get_ptr_to_dynamic_const_array",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "get_ptr_to_dynamic_const_array",
                    "function_name": "getPtrToDynamicConstArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getPtrToDynamicConstArray  59 ****************************************",
                "_PTR_C_CXX_index": "23",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 23,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getPtrToDynamicConstArray",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "dimension": "ncount",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "deref": "pointer",
                                        "dimension": [
                                            {
                                                "name": "ncount"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "ncount",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToDynamicConstArray( const int **count+intent(out)+dimension(ncount), int *ncount+intent(out)+hidden)",
                "declgen": "void getPtrToDynamicConstArray(const int * * count +dimension(ncount)+intent(out), int * ncount +hidden+intent(out))",
                "name": "getPtrToDynamicConstArray",
                "options": {},
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "ncount",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_local_cdesc": "SHC_count_cdesc",
                            "c_local_cptr": "SHC_count_cptr",
                            "c_local_err": "SHC_count_err",
                            "c_local_fptr": "SHC_count_fptr",
                            "c_member": "->",
                            "c_temp_extents_decl": "CFI_index_t SHT_count_extents[1];\nSHT_count_extents[0] = ncount;\n",
                            "c_temp_extents_use": "SHT_count_extents",
                            "c_temp_lower_decl": "CFI_index_t SHT_count_lower[1] = {1};\n",
                            "c_temp_lower_use": "SHT_count_lower",
                            "c_type": "int",
                            "c_var": "count",
                            "c_var_cfi": "SHT_count_cfi",
                            "c_var_extents": "SHT_count_extents",
                            "c_var_lower": "SHT_count_lower",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(SHCXX_count)",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_count",
                            "f_array_allocate": "(ncount)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "fc_var": "count",
                            "i_local_cdesc": "SHC_count_cdesc",
                            "i_local_cptr": "SHC_count_cptr",
                            "i_local_err": "SHC_count_err",
                            "i_local_fptr": "SHC_count_fptr",
                            "i_var": "count",
                            "i_var_cfi": "SHT_count_cfi",
                            "i_var_extents": "SHT_count_extents",
                            "i_var_lower": "SHT_count_lower",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_cfi_pointer",
                            "stmtf": "f_out_native_**_cfi_pointer"
                        }
                    },
                    "ncount": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "ncount",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "ncount",
                            "cxx_type": "int",
                            "cxx_var": "ncount",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "ncount",
                            "fc_var": "ncount",
                            "i_var": "ncount",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*_hidden"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_count,\t &ncount",
                    "C_name": "POI_getPtrToDynamicConstArray_CFI",
                    "C_name_api": "getPtrToDynamicConstArray",
                    "C_prototype": "CFI_cdesc_t *SHT_count_cfi",
                    "C_return_type": "void",
                    "F_C_arguments": "count",
                    "F_C_call": "c_get_ptr_to_dynamic_const_array_CFI",
                    "F_C_name": "get_ptr_to_dynamic_const_array",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "count",
                    "F_arguments": "count",
                    "F_name_api": "get_ptr_to_dynamic_const_array",
                    "F_name_function": "get_ptr_to_dynamic_const_array",
                    "F_name_generic": "get_ptr_to_dynamic_const_array",
                    "F_name_impl": "get_ptr_to_dynamic_const_array",
                    "F_subprogram": "subroutine",
                    "f_c_suffix": "_CFI",
                    "function_name": "getPtrToDynamicConstArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getRawPtrToScalar  24 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getRawPtrToScalar",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "raw",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "deref": "raw",
                                        "intent": "out"
                                    },
                                    "name": "nitems",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getRawPtrToScalar(int **nitems+intent(out)+deref(raw))",
                "declgen": "void getRawPtrToScalar(int * * nitems +deref(raw)+intent(out))",
                "doxygen": {
                    "description": "Called directly via an interface in Fortran.\n"
                },
                "name": "getRawPtrToScalar",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "nitems": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nitems",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nitems",
                            "cxx_type": "int",
                            "cxx_var": "nitems",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nitems",
                            "fc_var": "nitems",
                            "i_var": "nitems",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_raw",
                            "stmtf": "f_out_native_**_raw"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "nitems",
                    "C_name": "POI_getRawPtrToScalar",
                    "C_name_api": "getRawPtrToScalar",
                    "C_prototype": "int * * nitems",
                    "C_return_type": "void",
                    "F_C_arguments": "nitems",
                    "F_C_call": "c_get_raw_ptr_to_scalar",
                    "F_C_name": "get_raw_ptr_to_scalar",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "nitems",
                    "F_arguments": "nitems",
                    "F_name_api": "get_raw_ptr_to_scalar",
                    "F_name_function": "get_raw_ptr_to_scalar",
                    "F_name_generic": "get_raw_ptr_to_scalar",
                    "F_name_impl": "get_raw_ptr_to_scalar",
                    "F_subprogram": "subroutine",
                    "function_name": "getRawPtrToScalar"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getRawPtrToScalarForce  25 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getRawPtrToScalarForce",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "raw",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "deref": "raw",
                                        "intent": "out"
                                    },
                                    "name": "nitems",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getRawPtrToScalarForce(int **nitems+intent(out)+deref(raw))",
                "declgen": "void getRawPtrToScalarForce(int * * nitems +deref(raw)+intent(out))",
                "doxygen": {
                    "description": "Create a Fortran wrapper.\n"
                },
                "name": "getRawPtrToScalarForce",
                "options": {
                    "F_force_wrapper": true,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "nitems": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nitems",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nitems",
                            "cxx_type": "int",
                            "cxx_var": "nitems",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nitems",
                            "fc_var": "nitems",
                            "i_var": "nitems",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_raw",
                            "stmtf": "f_out_native_**_raw"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "nitems",
                    "C_name": "POI_getRawPtrToScalarForce",
                    "C_name_api": "getRawPtrToScalarForce",
                    "C_prototype": "int * * nitems",
                    "C_return_type": "void",
                    "F_C_arguments": "nitems",
                    "F_C_call": "c_get_raw_ptr_to_scalar_force",
                    "F_C_name": "c_get_raw_ptr_to_scalar_force",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "nitems",
                    "F_arguments": "nitems",
                    "F_name_api": "get_raw_ptr_to_scalar_force",
                    "F_name_function": "get_raw_ptr_to_scalar_force",
                    "F_name_generic": "get_raw_ptr_to_scalar_force",
                    "F_name_impl": "get_raw_ptr_to_scalar_force",
                    "F_subprogram": "subroutine",
                    "function_name": "getRawPtrToScalarForce"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getRawPtrToFixedArray  26 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getRawPtrToFixedArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "raw",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "deref": "raw",
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getRawPtrToFixedArray(int **count+intent(out)+deref(raw))",
                "declgen": "void getRawPtrToFixedArray(int * * count +deref(raw)+intent(out))",
                "doxygen": {
                    "description": "Return a type(C_PTR) to an array which is always the same length.\nCalled directly via an interface in Fortran.\n# Uses +deref(raw) instead of +dimension(10) like getPtrToFixedArray.\n"
                },
                "name": "getRawPtrToFixedArray",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "count",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "fc_var": "count",
                            "i_var": "count",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_raw",
                            "stmtf": "f_out_native_**_raw"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "count",
                    "C_name": "POI_getRawPtrToFixedArray",
                    "C_name_api": "getRawPtrToFixedArray",
                    "C_prototype": "int * * count",
                    "C_return_type": "void",
                    "F_C_arguments": "count",
                    "F_C_call": "c_get_raw_ptr_to_fixed_array",
                    "F_C_name": "get_raw_ptr_to_fixed_array",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "count",
                    "F_arguments": "count",
                    "F_name_api": "get_raw_ptr_to_fixed_array",
                    "F_name_function": "get_raw_ptr_to_fixed_array",
                    "F_name_generic": "get_raw_ptr_to_fixed_array",
                    "F_name_impl": "get_raw_ptr_to_fixed_array",
                    "F_subprogram": "subroutine",
                    "function_name": "getRawPtrToFixedArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getRawPtrToFixedArrayForce  27 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getRawPtrToFixedArrayForce",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "raw",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "deref": "raw",
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getRawPtrToFixedArrayForce(int **count+intent(out)+deref(raw))",
                "declgen": "void getRawPtrToFixedArrayForce(int * * count +deref(raw)+intent(out))",
                "doxygen": {
                    "description": "Return a type(C_PTR) to an array which is always the same length.\nCreate a Fortran wrapper.\n"
                },
                "name": "getRawPtrToFixedArrayForce",
                "options": {
                    "F_force_wrapper": true,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "count",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "fc_var": "count",
                            "i_var": "count",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_raw",
                            "stmtf": "f_out_native_**_raw"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "count",
                    "C_name": "POI_getRawPtrToFixedArrayForce",
                    "C_name_api": "getRawPtrToFixedArrayForce",
                    "C_prototype": "int * * count",
                    "C_return_type": "void",
                    "F_C_arguments": "count",
                    "F_C_call": "c_get_raw_ptr_to_fixed_array_force",
                    "F_C_name": "c_get_raw_ptr_to_fixed_array_force",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "count",
                    "F_arguments": "count",
                    "F_name_api": "get_raw_ptr_to_fixed_array_force",
                    "F_name_function": "get_raw_ptr_to_fixed_array_force",
                    "F_name_generic": "get_raw_ptr_to_fixed_array_force",
                    "F_name_impl": "get_raw_ptr_to_fixed_array_force",
                    "F_subprogram": "subroutine",
                    "function_name": "getRawPtrToFixedArrayForce"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getRawPtrToInt2d  28 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getRawPtrToInt2d",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getRawPtrToInt2d(int ***arg +intent(out))",
                "declgen": "void getRawPtrToInt2d(int * * * arg +intent(out))",
                "doxygen": {
                    "description": "Test multiple layers of indirection.\n"
                },
                "name": "getRawPtrToInt2d",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_***",
                            "stmtf": "f_out_native_***"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "POI_getRawPtrToInt2d",
                    "C_name_api": "getRawPtrToInt2d",
                    "C_prototype": "int * * * arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_get_raw_ptr_to_int2d",
                    "F_C_name": "get_raw_ptr_to_int2d",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_api": "get_raw_ptr_to_int2d",
                    "F_name_function": "get_raw_ptr_to_int2d",
                    "F_name_generic": "get_raw_ptr_to_int2d",
                    "F_name_impl": "get_raw_ptr_to_int2d",
                    "F_subprogram": "subroutine",
                    "function_name": "getRawPtrToInt2d"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "checkInt2d  29 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "checkInt2d",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in"
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int checkInt2d(int **arg +intent(in))",
                "declgen": "int checkInt2d(int * * arg +intent(in))",
                "doxygen": {
                    "description": "Check results of getRawPtrToInt2d.\n"
                },
                "name": "checkInt2d",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_**",
                            "stmtf": "f_in_native_**"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "POI_checkInt2d",
                    "C_name_api": "checkInt2d",
                    "C_prototype": "int **arg",
                    "C_return_type": "int",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_check_int2d",
                    "F_C_name": "check_int2d",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_api": "check_int2d",
                    "F_name_function": "check_int2d",
                    "F_name_generic": "check_int2d",
                    "F_name_impl": "check_int2d",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "checkInt2d"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar",
                        "stmtf": "f_function_native_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "DimensionIn  30 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "DimensionIn",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "dimension": "10,20"
                                    },
                                    "metaattrs": {
                                        "dimension": [
                                            {
                                                "constant": "10"
                                            },
                                            {
                                                "constant": "20"
                                            }
                                        ],
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void DimensionIn(const int *arg +dimension(10,20))",
                "declgen": "void DimensionIn(const int * arg +dimension(10,20))",
                "doxygen": {
                    "description": "Test +dimension(10,20) +intent(in) together.\nThis will not use assumed-shape in the Fortran wrapper.\n"
                },
                "name": "DimensionIn",
                "options": {
                    "F_force_wrapper": true,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "10*\t20",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(arg)",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "f_array_allocate": "(10,20)",
                            "f_assumed_shape": "(:,:)",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "rank": "2",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_*",
                            "stmtf": "f_in_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "POI_DimensionIn",
                    "C_name_api": "DimensionIn",
                    "C_prototype": "const int * arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_dimension_in",
                    "F_C_name": "c_dimension_in",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_api": "dimension_in",
                    "F_name_function": "dimension_in",
                    "F_name_generic": "dimension_in",
                    "F_name_impl": "dimension_in",
                    "F_subprogram": "subroutine",
                    "function_name": "DimensionIn"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getAllocToFixedArray  31 ****************************************",
                "_PTR_F_C_index": "60",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getAllocToFixedArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "allocatable",
                                        "dimension": "10",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "deref": "allocatable",
                                        "dimension": [
                                            {
                                                "constant": "10"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getAllocToFixedArray(int **count+intent(out)+dimension(10)+deref(allocatable))",
                "declgen": "void getAllocToFixedArray(int * * count +deref(allocatable)+dimension(10)+intent(out))",
                "doxygen": {
                    "description": "Return a Fortran pointer to an array which is always the same length.\n"
                },
                "name": "getAllocToFixedArray",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "10",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "count",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "f_array_allocate": "(10)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "i_var": "count",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_allocatable"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "count",
                    "C_name": "POI_getAllocToFixedArray",
                    "C_name_api": "getAllocToFixedArray",
                    "C_prototype": "int * * count",
                    "C_return_type": "void",
                    "F_C_arguments": "count",
                    "F_C_name": "c_get_alloc_to_fixed_array",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "get_alloc_to_fixed_array",
                    "function_name": "getAllocToFixedArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "getAllocToFixedArray  60 ****************************************",
                "_PTR_C_CXX_index": "31",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 31,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getAllocToFixedArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "allocatable",
                                        "dimension": "10",
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "deref": "allocatable",
                                        "dimension": [
                                            {
                                                "constant": "10"
                                            }
                                        ],
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getAllocToFixedArray(int **count+intent(out)+dimension(10)+deref(allocatable))",
                "declgen": "void getAllocToFixedArray(int * * count +deref(allocatable)+dimension(10)+intent(out))",
                "doxygen": {
                    "description": "Return a Fortran pointer to an array which is always the same length.\n"
                },
                "name": "getAllocToFixedArray",
                "options": {
                    "wrap_python": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtf": {
                            "c_addr": "",
                            "c_array_size2": "10",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_temp_extents_decl": "CFI_index_t SHT_count_extents[1];\nSHT_count_extents[0] = 10;\n",
                            "c_temp_extents_use": "SHT_count_extents",
                            "c_temp_lower_decl": "CFI_index_t SHT_count_lower[1] = {1};\n",
                            "c_temp_lower_use": "SHT_count_lower",
                            "c_type": "int",
                            "c_var": "count",
                            "c_var_cfi": "SHT_count_cfi",
                            "c_var_extents": "SHT_count_extents",
                            "c_var_lower": "SHT_count_lower",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_count",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_count",
                            "f_array_allocate": "(10)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "fc_var": "count",
                            "i_var": "count",
                            "i_var_cfi": "SHT_count_cfi",
                            "i_var_extents": "SHT_count_extents",
                            "i_var_lower": "SHT_count_lower",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_**_cfi_allocatable",
                            "stmtf": "f_out_native_**_cfi_allocatable"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_count",
                    "C_name": "POI_getAllocToFixedArray_CFI",
                    "C_name_api": "getAllocToFixedArray",
                    "C_prototype": "CFI_cdesc_t *SHT_count_cfi",
                    "C_return_type": "void",
                    "F_C_arguments": "count",
                    "F_C_call": "c_get_alloc_to_fixed_array_CFI",
                    "F_C_name": "get_alloc_to_fixed_array",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "count",
                    "F_arguments": "count",
                    "F_name_api": "get_alloc_to_fixed_array",
                    "F_name_function": "get_alloc_to_fixed_array",
                    "F_name_generic": "get_alloc_to_fixed_array",
                    "F_name_impl": "get_alloc_to_fixed_array",
                    "F_subprogram": "subroutine",
                    "f_c_suffix": "_CFI",
                    "function_name": "getAllocToFixedArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "returnAddress1  32 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "returnAddress1",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "flag",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void *returnAddress1(int flag)",
                "declgen": "void * returnAddress1(int flag +value)",
                "name": "returnAddress1",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "flag": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "flag",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "int",
                            "cxx_var": "flag",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "flag",
                            "fc_var": "flag",
                            "i_var": "flag",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "flag",
                    "C_name": "POI_returnAddress1",
                    "C_name_api": "returnAddress1",
                    "C_prototype": "int flag",
                    "C_return_type": "void *",
                    "F_C_arguments": "flag",
                    "F_C_call": "c_return_address1",
                    "F_C_name": "return_address1",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "flag",
                    "F_arguments": "flag",
                    "F_name_api": "return_address1",
                    "F_name_function": "return_address1",
                    "F_name_generic": "return_address1",
                    "F_name_impl": "return_address1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "void * SHC_rv",
                    "function_name": "returnAddress1"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_intptr_t",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "void",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_type": "type(C_PTR)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmtc": "f_function_void_*",
                        "stmtf": "f_function_void_*"
                    }
                }
            },
            {
                "<FUNCTION>": "returnAddress2  33 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "returnAddress2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "flag",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void *returnAddress2(int flag)",
                "declgen": "void * returnAddress2(int flag +value)",
                "name": "returnAddress2",
                "options": {
                    "F_force_wrapper": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "flag": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "flag",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "int",
                            "cxx_var": "flag",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "flag",
                            "fc_var": "flag",
                            "i_var": "flag",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar",
                            "stmtf": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "flag",
                    "C_name": "POI_returnAddress2",
                    "C_name_api": "returnAddress2",
                    "C_prototype": "int flag",
                    "C_return_type": "void *",
                    "F_C_arguments": "flag",
                    "F_C_call": "c_return_address2",
                    "F_C_name": "c_return_address2",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "flag",
                    "F_arguments": "flag",
                    "F_name_api": "return_address2",
                    "F_name_function": "return_address2",
                    "F_name_generic": "return_address2",
                    "F_name_impl": "return_address2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "void * SHC_rv",
                    "function_name": "returnAddress2"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_intptr_t",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "void",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_type": "type(C_PTR)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmtc": "f_function_void_*",
                        "stmtf": "f_function_void_*"
                    }
                }
            },
            {
                "<FUNCTION>": "fetchVoidPtr  34 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "fetchVoidPtr",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fetchVoidPtr(void **addr+intent(out))",
                "declgen": "void fetchVoidPtr(void * * addr +intent(out))",
                "name": "fetchVoidPtr",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "addr": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "addr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "addr",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "f_intent": "OUT",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "addr",
                            "fc_var": "addr",
                            "i_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmtc": "f_out_void_**",
                            "stmtf": "f_out_void_**"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "addr",
                    "C_name": "POI_fetchVoidPtr",
                    "C_name_api": "fetchVoidPtr",
                    "C_prototype": "void **addr",
                    "C_return_type": "void",
                    "F_C_arguments": "addr",
                    "F_C_call": "c_fetch_void_ptr",
                    "F_C_name": "fetch_void_ptr",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "addr",
                    "F_arguments": "addr",
                    "F_name_api": "fetch_void_ptr",
                    "F_name_function": "fetch_void_ptr",
                    "F_name_generic": "fetch_void_ptr",
                    "F_name_impl": "fetch_void_ptr",
                    "F_subprogram": "subroutine",
                    "function_name": "fetchVoidPtr"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "updateVoidPtr  35 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "updateVoidPtr",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "inout"
                                    },
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void updateVoidPtr(void **addr+intent(inout))",
                "declgen": "void updateVoidPtr(void * * addr +intent(inout))",
                "name": "updateVoidPtr",
                "options": {
                    "F_force_wrapper": true,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "addr": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "addr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "addr",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "f_intent": "INOUT",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "addr",
                            "fc_var": "addr",
                            "i_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmtc": "f_inout_void_**",
                            "stmtf": "f_inout_void_**"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "addr",
                    "C_name": "POI_updateVoidPtr",
                    "C_name_api": "updateVoidPtr",
                    "C_prototype": "void **addr",
                    "C_return_type": "void",
                    "F_C_arguments": "addr",
                    "F_C_call": "c_update_void_ptr",
                    "F_C_name": "c_update_void_ptr",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "addr",
                    "F_arguments": "addr",
                    "F_name_api": "update_void_ptr",
                    "F_name_function": "update_void_ptr",
                    "F_name_generic": "update_void_ptr",
                    "F_name_impl": "update_void_ptr",
                    "F_subprogram": "subroutine",
                    "function_name": "updateVoidPtr"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "stmtc": "f_subroutine",
                        "stmtf": "f_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "VoidPtrArray  36 ****************************************",
                "_PTR_F_C_index": "61",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "VoidPtrArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int VoidPtrArray(void **addr+rank(1))",
                "declgen": "int VoidPtrArray(void * * addr +rank(1))",
                "name": "VoidPtrArray",
                "options": {
                    "F_force_wrapper": true,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "addr": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "addr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "addr",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "addr",
                            "i_dimension": "(*)",
                            "i_var": "addr",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_CPTR",
                            "size": "size(addr)",
                            "stmtc": "f_in_void_**"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "addr",
                    "C_name": "POI_VoidPtrArray",
                    "C_name_api": "VoidPtrArray",
                    "C_prototype": "void **addr",
                    "C_return_type": "int",
                    "F_C_arguments": "addr",
                    "F_C_name": "c_void_ptr_array",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "void_ptr_array",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "VoidPtrArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "VoidPtrArray  61 ****************************************",
                "_PTR_C_CXX_index": "36",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 36,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "VoidPtrArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "in"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int VoidPtrArray(void **addr+rank(1))",
                "declgen": "int VoidPtrArray(void * * addr +rank(1))",
                "name": "VoidPtrArray",
                "options": {
                    "F_force_wrapper": true,
                    "wrap_python": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "addr": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "addr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "addr",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "addr",
                            "fc_var": "addr",
                            "i_dimension": "(*)",
                            "i_var": "addr",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_CPTR",
                            "size": "size(addr)",
                            "stmtc": "f_in_void_**_cfi",
                            "stmtf": "f_in_void_**_cfi"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "addr",
                    "C_name": "POI_VoidPtrArray_CFI",
                    "C_name_api": "VoidPtrArray",
                    "C_prototype": "void **addr",
                    "C_return_type": "int",
                    "F_C_arguments": "addr",
                    "F_C_call": "c_void_ptr_array_CFI",
                    "F_C_name": "c_void_ptr_array_CFI",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "addr",
                    "F_arguments": "addr",
                    "F_name_api": "void_ptr_array",
                    "F_name_function": "void_ptr_array",
                    "F_name_generic": "void_ptr_array",
                    "F_name_impl": "void_ptr_array",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "f_c_suffix": "_CFI",
                    "function_name": "VoidPtrArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar",
                        "stmtf": "f_function_native_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "returnIntPtrToScalar  37 ****************************************",
                "_PTR_F_C_index": "62",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "deref": "pointer",
                            "intent": "function"
                        },
                        "name": "returnIntPtrToScalar",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntPtrToScalar(void)",
                "declgen": "int * returnIntPtrToScalar(void)",
                "name": "returnIntPtrToScalar",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtdict": {
                    "C_name": "POI_returnIntPtrToScalar",
                    "C_name_api": "returnIntPtrToScalar",
                    "C_prototype": "void",
                    "C_return_type": "int *",
                    "F_C_arguments": "",
                    "F_C_name": "c_return_int_ptr_to_scalar",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "return_int_ptr_to_scalar",
                    "cxx_rv_decl": "int * SHC_rv",
                    "function_name": "returnIntPtrToScalar"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_*_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "returnIntPtrToScalar  62 ****************************************",
                "_PTR_C_CXX_index": "37",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 37,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "api": "cfi",
                            "deref": "pointer",
                            "intent": "function"
                        },
                        "name": "returnIntPtrToScalar",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntPtrToScalar(void)",
                "declgen": "int * returnIntPtrToScalar(void)",
                "name": "returnIntPtrToScalar",
                "options": {},
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "POI_returnIntPtrToScalar_CFI",
                    "C_name_api": "returnIntPtrToScalar",
                    "C_prototype": "CFI_cdesc_t *SHT_rv_cfi",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv",
                    "F_C_call": "c_return_int_ptr_to_scalar_CFI",
                    "F_C_name": "c_return_int_ptr_to_scalar_CFI",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SHT_rv",
                    "F_arguments": "",
                    "F_name_api": "return_int_ptr_to_scalar",
                    "F_name_function": "return_int_ptr_to_scalar",
                    "F_name_generic": "return_int_ptr_to_scalar",
                    "F_name_impl": "return_int_ptr_to_scalar",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int * SHCXX_rv",
                    "f_c_suffix": "_CFI",
                    "function_name": "returnIntPtrToScalar"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_local_cdesc": "SHC_rv_cdesc",
                        "c_local_cptr": "SHC_rv_cptr",
                        "c_local_err": "SHC_rv_err",
                        "c_local_fptr": "SHC_rv_fptr",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "c_var_cfi": "SHT_rv_cfi",
                        "c_var_extents": "SHT_rv_extents",
                        "c_var_lower": "SHT_rv_lower",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_local_cdesc": "SHC_rv_cdesc",
                        "i_local_cptr": "SHC_rv_cptr",
                        "i_local_err": "SHC_rv_err",
                        "i_local_fptr": "SHC_rv_fptr",
                        "i_var": "SHT_rv",
                        "i_var_cfi": "SHT_rv_cfi",
                        "i_var_extents": "SHT_rv_extents",
                        "i_var_lower": "SHT_rv_lower",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_*_cfi_pointer",
                        "stmtf": "f_function_native_*_cfi_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "returnIntPtrToFixedArray  38 ****************************************",
                "_PTR_F_C_index": "63",
                "ast": {
                    "declarator": {
                        "attrs": {
                            "dimension": "10"
                        },
                        "metaattrs": {
                            "deref": "pointer",
                            "dimension": [
                                {
                                    "constant": "10"
                                }
                            ],
                            "intent": "function"
                        },
                        "name": "returnIntPtrToFixedArray",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntPtrToFixedArray(void) +dimension(10)",
                "declgen": "int * returnIntPtrToFixedArray(void) +dimension(10)",
                "name": "returnIntPtrToFixedArray",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtdict": {
                    "C_name": "POI_returnIntPtrToFixedArray",
                    "C_name_api": "returnIntPtrToFixedArray",
                    "C_prototype": "void",
                    "C_return_type": "int *",
                    "F_C_arguments": "",
                    "F_C_name": "c_return_int_ptr_to_fixed_array",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "return_int_ptr_to_fixed_array",
                    "cxx_rv_decl": "int * SHC_rv",
                    "function_name": "returnIntPtrToFixedArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_array_size2": "10",
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_array_allocate": "(10)",
                        "f_assumed_shape": "(:)",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "rank": "1",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_*_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "returnIntPtrToFixedArray  63 ****************************************",
                "_PTR_C_CXX_index": "38",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 38,
                "ast": {
                    "declarator": {
                        "attrs": {
                            "dimension": "10"
                        },
                        "metaattrs": {
                            "api": "cfi",
                            "deref": "pointer",
                            "dimension": [
                                {
                                    "constant": "10"
                                }
                            ],
                            "intent": "function"
                        },
                        "name": "returnIntPtrToFixedArray",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntPtrToFixedArray(void) +dimension(10)",
                "declgen": "int * returnIntPtrToFixedArray(void) +dimension(10)",
                "name": "returnIntPtrToFixedArray",
                "options": {},
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "POI_returnIntPtrToFixedArray_CFI",
                    "C_name_api": "returnIntPtrToFixedArray",
                    "C_prototype": "CFI_cdesc_t *SHT_rv_cfi",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv",
                    "F_C_call": "c_return_int_ptr_to_fixed_array_CFI",
                    "F_C_name": "c_return_int_ptr_to_fixed_array_CFI",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SHT_rv",
                    "F_arguments": "",
                    "F_name_api": "return_int_ptr_to_fixed_array",
                    "F_name_function": "return_int_ptr_to_fixed_array",
                    "F_name_generic": "return_int_ptr_to_fixed_array",
                    "F_name_impl": "return_int_ptr_to_fixed_array",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int * SHCXX_rv",
                    "f_c_suffix": "_CFI",
                    "function_name": "returnIntPtrToFixedArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_array_size2": "10",
                        "c_const": "",
                        "c_local_cdesc": "SHC_rv_cdesc",
                        "c_local_cptr": "SHC_rv_cptr",
                        "c_local_err": "SHC_rv_err",
                        "c_local_fptr": "SHC_rv_fptr",
                        "c_temp_extents_decl": "CFI_index_t SHT_rv_extents[1];\nSHT_rv_extents[0] = 10;\n",
                        "c_temp_extents_use": "SHT_rv_extents",
                        "c_temp_lower_decl": "CFI_index_t SHT_rv_lower[1] = {1};\n",
                        "c_temp_lower_use": "SHT_rv_lower",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "c_var_cfi": "SHT_rv_cfi",
                        "c_var_extents": "SHT_rv_extents",
                        "c_var_lower": "SHT_rv_lower",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "f_array_allocate": "(10)",
                        "f_assumed_shape": "(:)",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_local_cdesc": "SHC_rv_cdesc",
                        "i_local_cptr": "SHC_rv_cptr",
                        "i_local_err": "SHC_rv_err",
                        "i_local_fptr": "SHC_rv_fptr",
                        "i_var": "SHT_rv",
                        "i_var_cfi": "SHT_rv_cfi",
                        "i_var_extents": "SHT_rv_extents",
                        "i_var_lower": "SHT_rv_lower",
                        "idtor": "0",
                        "rank": "1",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_*_cfi_pointer",
                        "stmtf": "f_function_native_*_cfi_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "returnIntPtrToConstScalar  39 ****************************************",
                "_PTR_F_C_index": "64",
                "ast": {
                    "const": true,
                    "declarator": {
                        "metaattrs": {
                            "deref": "pointer",
                            "intent": "function"
                        },
                        "name": "returnIntPtrToConstScalar",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "const int *returnIntPtrToConstScalar(void)",
                "declgen": "const int * returnIntPtrToConstScalar(void)",
                "name": "returnIntPtrToConstScalar",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtdict": {
                    "C_name": "POI_returnIntPtrToConstScalar",
                    "C_name_api": "returnIntPtrToConstScalar",
                    "C_prototype": "void",
                    "C_return_type": "const int *",
                    "F_C_arguments": "",
                    "F_C_name": "c_return_int_ptr_to_const_scalar",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "return_int_ptr_to_const_scalar",
                    "cxx_rv_decl": "const int * SHC_rv",
                    "function_name": "returnIntPtrToConstScalar"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "const ",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<int *>\t(SHC_rv)",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_*_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "returnIntPtrToConstScalar  64 ****************************************",
                "_PTR_C_CXX_index": "39",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 39,
                "ast": {
                    "const": true,
                    "declarator": {
                        "metaattrs": {
                            "api": "cfi",
                            "deref": "pointer",
                            "intent": "function"
                        },
                        "name": "returnIntPtrToConstScalar",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "const int *returnIntPtrToConstScalar(void)",
                "declgen": "const int * returnIntPtrToConstScalar(void)",
                "name": "returnIntPtrToConstScalar",
                "options": {},
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "POI_returnIntPtrToConstScalar_CFI",
                    "C_name_api": "returnIntPtrToConstScalar",
                    "C_prototype": "CFI_cdesc_t *SHT_rv_cfi",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv",
                    "F_C_call": "c_return_int_ptr_to_const_scalar_CFI",
                    "F_C_name": "c_return_int_ptr_to_const_scalar_CFI",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SHT_rv",
                    "F_arguments": "",
                    "F_name_api": "return_int_ptr_to_const_scalar",
                    "F_name_function": "return_int_ptr_to_const_scalar",
                    "F_name_generic": "return_int_ptr_to_const_scalar",
                    "F_name_impl": "return_int_ptr_to_const_scalar",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "const int * SHCXX_rv",
                    "f_c_suffix": "_CFI",
                    "function_name": "returnIntPtrToConstScalar"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "const ",
                        "c_local_cdesc": "SHC_rv_cdesc",
                        "c_local_cptr": "SHC_rv_cptr",
                        "c_local_err": "SHC_rv_err",
                        "c_local_fptr": "SHC_rv_fptr",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "c_var_cfi": "SHT_rv_cfi",
                        "c_var_extents": "SHT_rv_extents",
                        "c_var_lower": "SHT_rv_lower",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<int *>\t(SHCXX_rv)",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_local_cdesc": "SHC_rv_cdesc",
                        "i_local_cptr": "SHC_rv_cptr",
                        "i_local_err": "SHC_rv_err",
                        "i_local_fptr": "SHC_rv_fptr",
                        "i_var": "SHT_rv",
                        "i_var_cfi": "SHT_rv_cfi",
                        "i_var_extents": "SHT_rv_extents",
                        "i_var_lower": "SHT_rv_lower",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_*_cfi_pointer",
                        "stmtf": "f_function_native_*_cfi_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "returnIntPtrToFixedConstArray  40 ****************************************",
                "_PTR_F_C_index": "65",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "dimension": "10"
                        },
                        "metaattrs": {
                            "deref": "pointer",
                            "dimension": [
                                {
                                    "constant": "10"
                                }
                            ],
                            "intent": "function"
                        },
                        "name": "returnIntPtrToFixedConstArray",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "const int *returnIntPtrToFixedConstArray(void) +dimension(10)",
                "declgen": "const int * returnIntPtrToFixedConstArray(void) +dimension(10)",
                "name": "returnIntPtrToFixedConstArray",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_fmtdict": {
                    "C_name": "POI_returnIntPtrToFixedConstArray",
                    "C_name_api": "returnIntPtrToFixedConstArray",
                    "C_prototype": "void",
                    "C_return_type": "const int *",
                    "F_C_arguments": "",
                    "F_C_name": "c_return_int_ptr_to_fixed_const_array",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "return_int_ptr_to_fixed_const_array",
                    "cxx_rv_decl": "const int * SHC_rv",
                    "function_name": "returnIntPtrToFixedConstArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_array_size2": "10",
                        "c_const": "const ",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<int *>\t(SHC_rv)",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_array_allocate": "(10)",
                        "f_assumed_shape": "(:)",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "rank": "1",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_*_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "returnIntPtrToFixedConstArray  65 ****************************************",
                "_PTR_C_CXX_index": "40",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 40,
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "dimension": "10"
                        },
                        "metaattrs": {
                            "api": "cfi",
                            "deref": "pointer",
                            "dimension": [
                                {
                                    "constant": "10"
                                }
                            ],
                            "intent": "function"
                        },
                        "name": "returnIntPtrToFixedConstArray",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "const int *returnIntPtrToFixedConstArray(void) +dimension(10)",
                "declgen": "const int * returnIntPtrToFixedConstArray(void) +dimension(10)",
                "name": "returnIntPtrToFixedConstArray",
                "options": {},
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "POI_returnIntPtrToFixedConstArray_CFI",
                    "C_name_api": "returnIntPtrToFixedConstArray",
                    "C_prototype": "CFI_cdesc_t *SHT_rv_cfi",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv",
                    "F_C_call": "c_return_int_ptr_to_fixed_const_array_CFI",
                    "F_C_name": "c_return_int_ptr_to_fixed_const_array_CFI",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SHT_rv",
                    "F_arguments": "",
                    "F_name_api": "return_int_ptr_to_fixed_const_array",
                    "F_name_function": "return_int_ptr_to_fixed_const_array",
                    "F_name_generic": "return_int_ptr_to_fixed_const_array",
                    "F_name_impl": "return_int_ptr_to_fixed_const_array",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "const int * SHCXX_rv",
                    "f_c_suffix": "_CFI",
                    "function_name": "returnIntPtrToFixedConstArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_array_size2": "10",
                        "c_const": "const ",
                        "c_local_cdesc": "SHC_rv_cdesc",
                        "c_local_cptr": "SHC_rv_cptr",
                        "c_local_err": "SHC_rv_err",
                        "c_local_fptr": "SHC_rv_fptr",
                        "c_temp_extents_decl": "CFI_index_t SHT_rv_extents[1];\nSHT_rv_extents[0] = 10;\n",
                        "c_temp_extents_use": "SHT_rv_extents",
                        "c_temp_lower_decl": "CFI_index_t SHT_rv_lower[1] = {1};\n",
                        "c_temp_lower_use": "SHT_rv_lower",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "c_var_cfi": "SHT_rv_cfi",
                        "c_var_extents": "SHT_rv_extents",
                        "c_var_lower": "SHT_rv_lower",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<int *>\t(SHCXX_rv)",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "f_array_allocate": "(10)",
                        "f_assumed_shape": "(:)",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_local_cdesc": "SHC_rv_cdesc",
                        "i_local_cptr": "SHC_rv_cptr",
                        "i_local_err": "SHC_rv_err",
                        "i_local_fptr": "SHC_rv_fptr",
                        "i_var": "SHT_rv",
                        "i_var_cfi": "SHT_rv_cfi",
                        "i_var_extents": "SHT_rv_extents",
                        "i_var_lower": "SHT_rv_lower",
                        "idtor": "0",
                        "rank": "1",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_*_cfi_pointer",
                        "stmtf": "f_function_native_*_cfi_pointer"
                    }
                }
            },
            {
                "<FUNCTION>": "returnIntScalar  41 ****************************************",
                "ast": {
                    "declarator": {
                        "attrs": {
                            "deref": "scalar"
                        },
                        "metaattrs": {
                            "deref": "scalar",
                            "intent": "function"
                        },
                        "name": "returnIntScalar",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntScalar(void) +deref(scalar)",
                "declgen": "int * returnIntScalar(void) +deref(scalar)",
                "name": "returnIntScalar",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "POI_returnIntScalar",
                    "C_name_api": "returnIntScalar",
                    "C_prototype": "void",
                    "C_return_type": "int",
                    "F_C_arguments": "",
                    "F_C_call": "c_return_int_scalar",
                    "F_C_name": "return_int_scalar",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arguments": "",
                    "F_name_api": "return_int_scalar",
                    "F_name_function": "return_int_scalar",
                    "F_name_generic": "return_int_scalar",
                    "F_name_impl": "return_int_scalar",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int * SHC_rv",
                    "function_name": "returnIntScalar"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_*_scalar",
                        "stmtf": "f_function_native_*_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "returnIntRaw  42 ****************************************",
                "ast": {
                    "declarator": {
                        "attrs": {
                            "deref": "raw"
                        },
                        "metaattrs": {
                            "deref": "raw",
                            "intent": "function"
                        },
                        "name": "returnIntRaw",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntRaw(void) +deref(raw)",
                "declgen": "int * returnIntRaw(void) +deref(raw)",
                "doxygen": {
                    "description": "Call directly via interface.\n"
                },
                "name": "returnIntRaw",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "POI_returnIntRaw",
                    "C_name_api": "returnIntRaw",
                    "C_prototype": "void",
                    "C_return_type": "int *",
                    "F_C_arguments": "",
                    "F_C_call": "c_return_int_raw",
                    "F_C_name": "return_int_raw",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arguments": "",
                    "F_name_api": "return_int_raw",
                    "F_name_function": "return_int_raw",
                    "F_name_generic": "return_int_raw",
                    "F_name_impl": "return_int_raw",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int * SHC_rv",
                    "function_name": "returnIntRaw"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_*_raw",
                        "stmtf": "f_function_native_*_raw"
                    }
                }
            },
            {
                "<FUNCTION>": "returnIntRawWithArgs  43 ****************************************",
                "_PTR_F_C_index": "66",
                "ast": {
                    "declarator": {
                        "attrs": {
                            "deref": "raw"
                        },
                        "metaattrs": {
                            "deref": "raw",
                            "intent": "function"
                        },
                        "name": "returnIntRawWithArgs",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntRawWithArgs(const char *name) +deref(raw)",
                "declgen": "int * returnIntRawWithArgs(const char * name) +deref(raw)",
                "doxygen": {
                    "description": "Like returnIntRaw but with another argument to force a wrapper.\nUses fc_statements f_function_native_*_raw.\n"
                },
                "helpers": {
                    "c": [
                        "char_alloc",
                        "char_free"
                    ]
                },
                "name": "returnIntRawWithArgs",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true
                },
                "zz_fmtargs": {
                    "name": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(name)",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "i_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_in_char_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "name",
                    "C_name": "POI_returnIntRawWithArgs",
                    "C_name_api": "returnIntRawWithArgs",
                    "C_prototype": "const char * name",
                    "C_return_type": "int *",
                    "F_C_arguments": "name",
                    "F_C_name": "c_return_int_raw_with_args",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "return_int_raw_with_args",
                    "cxx_rv_decl": "int * SHC_rv",
                    "function_name": "returnIntRawWithArgs"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_*_raw"
                    }
                }
            },
            {
                "<FUNCTION>": "returnIntRawWithArgs  66 ****************************************",
                "_PTR_C_CXX_index": "43",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 43,
                "ast": {
                    "declarator": {
                        "attrs": {
                            "deref": "raw"
                        },
                        "metaattrs": {
                            "deref": "raw",
                            "intent": "function"
                        },
                        "name": "returnIntRawWithArgs",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "api": "cfi",
                                        "intent": "in"
                                    },
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntRawWithArgs(const char *name) +deref(raw)",
                "declgen": "int * returnIntRawWithArgs(const char * name) +deref(raw)",
                "doxygen": {
                    "description": "Like returnIntRaw but with another argument to force a wrapper.\nUses fc_statements f_function_native_*_raw.\n"
                },
                "helpers": {
                    "c": [
                        "char_alloc",
                        "char_free"
                    ]
                },
                "name": "returnIntRawWithArgs",
                "options": {
                    "wrap_python": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "name": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_helper_char_alloc": "ShroudCharAlloc",
                            "c_helper_char_free": "ShroudCharFree",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "c_var_cfi": "SHT_name_cfi",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(SHCXX_name)",
                            "cxx_type": "char",
                            "cxx_var": "SHCXX_name",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "fc_var": "name",
                            "i_var": "name",
                            "i_var_cfi": "SHT_name_cfi",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_in_char_*_cfi",
                            "stmtf": "f_in_char_*_cfi"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_name",
                    "C_name": "POI_returnIntRawWithArgs_CFI",
                    "C_name_api": "returnIntRawWithArgs",
                    "C_prototype": "CFI_cdesc_t *SHT_name_cfi",
                    "C_return_type": "int *",
                    "F_C_arguments": "name",
                    "F_C_call": "c_return_int_raw_with_args_CFI",
                    "F_C_name": "return_int_raw_with_args",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "name",
                    "F_arguments": "name",
                    "F_name_api": "return_int_raw_with_args",
                    "F_name_function": "return_int_raw_with_args",
                    "F_name_generic": "return_int_raw_with_args",
                    "F_name_impl": "return_int_raw_with_args",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int * SHC_rv",
                    "f_c_suffix": "_CFI",
                    "function_name": "returnIntRawWithArgs"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_*_raw",
                        "stmtf": "f_function_native_*_raw"
                    }
                }
            },
            {
                "<FUNCTION>": "returnRawPtrToInt2d  44 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "returnRawPtrToInt2d",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            },
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int **returnRawPtrToInt2d(void)",
                "declgen": "int * * returnRawPtrToInt2d(void)",
                "doxygen": {
                    "description": "Test multiple layers of indirection.\n# getRawPtrToInt2d\n"
                },
                "name": "returnRawPtrToInt2d",
                "options": {
                    "F_force_wrapper": true,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "POI_returnRawPtrToInt2d",
                    "C_name_api": "returnRawPtrToInt2d",
                    "C_prototype": "void",
                    "C_return_type": "int * *",
                    "F_C_arguments": "",
                    "F_C_call": "c_return_raw_ptr_to_int2d",
                    "F_C_name": "c_return_raw_ptr_to_int2d",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arguments": "",
                    "F_name_api": "return_raw_ptr_to_int2d",
                    "F_name_function": "return_raw_ptr_to_int2d",
                    "F_name_generic": "return_raw_ptr_to_int2d",
                    "F_name_impl": "return_raw_ptr_to_int2d",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int * * SHC_rv",
                    "function_name": "returnRawPtrToInt2d"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_**",
                        "stmtf": "f_function_native_**"
                    }
                }
            },
            {
                "<FUNCTION>": "returnIntAllocToFixedArray  45 ****************************************",
                "_PTR_F_C_index": "67",
                "ast": {
                    "declarator": {
                        "attrs": {
                            "deref": "allocatable",
                            "dimension": "10"
                        },
                        "metaattrs": {
                            "deref": "allocatable",
                            "dimension": [
                                {
                                    "constant": "10"
                                }
                            ],
                            "intent": "function"
                        },
                        "name": "returnIntAllocToFixedArray",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntAllocToFixedArray(void) +dimension(10)+deref(allocatable)",
                "declgen": "int * returnIntAllocToFixedArray(void) +deref(allocatable)+dimension(10)",
                "name": "returnIntAllocToFixedArray",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true
                },
                "zz_fmtdict": {
                    "C_name": "POI_returnIntAllocToFixedArray",
                    "C_name_api": "returnIntAllocToFixedArray",
                    "C_prototype": "void",
                    "C_return_type": "int *",
                    "F_C_arguments": "",
                    "F_C_name": "c_return_int_alloc_to_fixed_array",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "return_int_alloc_to_fixed_array",
                    "cxx_rv_decl": "int * SHC_rv",
                    "function_name": "returnIntAllocToFixedArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_array_size2": "10",
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "f_array_allocate": "(10)",
                        "f_assumed_shape": "(:)",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "idtor": "0",
                        "rank": "1",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_*_allocatable"
                    }
                }
            },
            {
                "<FUNCTION>": "returnIntAllocToFixedArray  67 ****************************************",
                "_PTR_C_CXX_index": "45",
                "_generated": "arg_to_cfi",
                "_generated_path": [
                    "arg_to_cfi"
                ],
                "_orig_node_index": 45,
                "ast": {
                    "declarator": {
                        "attrs": {
                            "deref": "allocatable",
                            "dimension": "10"
                        },
                        "metaattrs": {
                            "api": "cfi",
                            "deref": "allocatable",
                            "dimension": [
                                {
                                    "constant": "10"
                                }
                            ],
                            "intent": "function"
                        },
                        "name": "returnIntAllocToFixedArray",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntAllocToFixedArray(void) +dimension(10)+deref(allocatable)",
                "declgen": "int * returnIntAllocToFixedArray(void) +deref(allocatable)+dimension(10)",
                "name": "returnIntAllocToFixedArray",
                "options": {
                    "wrap_python": false
                },
                "splicer_group": "cfi",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "POI_returnIntAllocToFixedArray_CFI",
                    "C_name_api": "returnIntAllocToFixedArray",
                    "C_prototype": "CFI_cdesc_t *SHT_rv_cfi",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv",
                    "F_C_call": "c_return_int_alloc_to_fixed_array_CFI",
                    "F_C_name": "c_return_int_alloc_to_fixed_array_CFI",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SHT_rv",
                    "F_arguments": "",
                    "F_name_api": "return_int_alloc_to_fixed_array",
                    "F_name_function": "return_int_alloc_to_fixed_array",
                    "F_name_generic": "return_int_alloc_to_fixed_array",
                    "F_name_impl": "return_int_alloc_to_fixed_array",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int * SHCXX_rv",
                    "f_c_suffix": "_CFI",
                    "function_name": "returnIntAllocToFixedArray"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_array_size2": "10",
                        "c_const": "",
                        "c_temp_extents_decl": "CFI_index_t SHT_rv_extents[1];\nSHT_rv_extents[0] = 10;\n",
                        "c_temp_extents_use": "SHT_rv_extents",
                        "c_temp_lower_decl": "CFI_index_t SHT_rv_lower[1] = {1};\n",
                        "c_temp_lower_use": "SHT_rv_lower",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "c_var_cfi": "SHT_rv_cfi",
                        "c_var_extents": "SHT_rv_extents",
                        "c_var_lower": "SHT_rv_lower",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "f_array_allocate": "(10)",
                        "f_assumed_shape": "(:)",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "i_var_cfi": "SHT_rv_cfi",
                        "i_var_extents": "SHT_rv_extents",
                        "i_var_lower": "SHT_rv_lower",
                        "idtor": "0",
                        "rank": "1",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_*_cfi_allocatable",
                        "stmtf": "f_function_native_*_cfi_allocatable"
                    }
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "pointers"
        ],
        "wrap": {
            "c": true,
            "fortran": true
        }
    }
}