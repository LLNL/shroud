{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "class_map": [
            "Worker",
            "internal_ImplWorker1",
            "internal_ImplWorker2",
            "std_vector_double",
            "std_vector_int",
            "structAsClass_double",
            "structAsClass_int",
            "user_int"
        ],
        "classes": [
            {
                "<CLASS>": "Worker ****************************************",
                "cxx_header": [],
                "name": "Worker",
                "options": {},
                "parse_keyword": "class",
                "scope": "Worker::",
                "typemap_name": "Worker",
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapWorker.h",
                    "C_impl_filename": "wrapWorker.cpp",
                    "C_name_api": "Worker",
                    "C_name_scope": "Worker_",
                    "C_type_name": "TEM_Worker",
                    "F_derived_name": "worker",
                    "F_name_api": "worker",
                    "F_name_scope": "worker_",
                    "PY_PyObject": "PY_Worker",
                    "PY_PyTypeObject": "PY_Worker_Type",
                    "PY_capsule_name": "PY_Worker_capsule_name",
                    "PY_from_object_func": "PP_Worker_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Worker_to_Object",
                    "PY_to_object_idtor_func": "PP_Worker_to_Object_idtor",
                    "PY_type_filename": "pyWorkertype.cpp",
                    "class_scope": "Worker::",
                    "cxx_class": "Worker",
                    "cxx_type": "Worker",
                    "f_capsule_data_type": "TEM_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "TEM_SHROUD_capsule_data",
                    "file_scope": "Worker"
                }
            },
            {
                "<CLASS>": "user ****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "nested  1 ****************************************",
                        "_orig_node_index": 0,
                        "_overloaded": true,
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "nested",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "arg1"
                                        },
                                        "specifier": [
                                            "T"
                                        ],
                                        "template_argument": "T"
                                    },
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "arg2"
                                        },
                                        "specifier": [
                                            "U"
                                        ],
                                        "template_argument": "U"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "cxx_template": {
                            "U": [
                                "double"
                            ]
                        },
                        "decl": "template<U> void nested( T arg1, U arg2 );",
                        "declgen": "void nested(T arg1 +value, U arg2 +value)",
                        "have_template_args": true,
                        "name": "nested",
                        "options": {},
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            }
                        ],
                        "template_parameters": [
                            "U"
                        ],
                        "wrap": {},
                        "zz_fmtdict": {
                            "C_name_api": "nested",
                            "F_name_api": "nested",
                            "function_name": "nested"
                        }
                    },
                    {
                        "<FUNCTION>": "nested  2 ****************************************",
                        "_generated": "cxx_template",
                        "_generated_path": [
                            "cxx_template"
                        ],
                        "_orig_node_index": 0,
                        "_overloaded": true,
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "nested",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "arg1"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "template_argument": "T",
                                        "typemap_name": "int"
                                    },
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "arg2"
                                        },
                                        "specifier": [
                                            "double"
                                        ],
                                        "template_argument": "U",
                                        "typemap_name": "double"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "template<U> void nested( T arg1, U arg2 );",
                        "declgen": "void nested(int arg1 +value, double arg2 +value)",
                        "gen_headers_typedef": [
                            "double"
                        ],
                        "have_template_args": true,
                        "name": "nested",
                        "options": {},
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            }
                        ],
                        "template_parameters": [
                            "U"
                        ],
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    },
                                    "stmt": "c_subroutine"
                                },
                                "arg1": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "c_in_native_scalar"
                                },
                                "arg2": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "c_in_native_scalar"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    },
                                    "stmt": "f_subroutine"
                                },
                                "arg1": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "f_in_native_scalar"
                                },
                                "arg2": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "f_in_native_scalar"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->nested<double>(\targ1,\t arg2)",
                                    "C_call_list": "arg1,\t arg2",
                                    "C_name": "TEM_user_int_nested_double",
                                    "C_prototype": "TEM_user_int * self,\t int arg1,\t double arg2",
                                    "C_return_type": "void",
                                    "F_C_name": "c_user_int_nested_double",
                                    "stmt_name": "c_subroutine"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->nested<double>(\targ1,\t arg2)",
                                    "C_call_list": "arg1,\t arg2",
                                    "C_name": "TEM_user_int_nested_double",
                                    "C_prototype": "TEM_user_int * self,\t int arg1,\t double arg2",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t arg1,\t arg2",
                                    "F_C_call": "c_user_int_nested_double",
                                    "F_C_name": "c_user_int_nested_double",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t arg1,\t arg2",
                                    "F_arguments": "obj,\t arg1,\t arg2",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_subroutine"
                                }
                            },
                            "arg1": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "arg1",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&arg1",
                                    "cxx_type": "int",
                                    "cxx_var": "arg1",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "c_in_native_scalar"
                                },
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "arg1",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&arg1",
                                    "cxx_type": "int",
                                    "cxx_var": "arg1",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "arg1",
                                    "fc_var": "arg1",
                                    "i_var": "arg1",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_in_native_scalar"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "arg1",
                                    "ctor_expr": "arg1",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&arg1",
                                    "cxx_type": "int",
                                    "cxx_var": "arg1",
                                    "data_var": "SHData_arg1",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_arg1",
                                    "size_var": "SHSize_arg1",
                                    "stmt": "py_in_native_scalar",
                                    "value_var": "SHValue_arg1"
                                }
                            },
                            "arg2": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "double",
                                    "c_var": "arg2",
                                    "cfi_type": "CFI_type_double",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&arg2",
                                    "cxx_type": "double",
                                    "cxx_var": "arg2",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt_name": "c_in_native_scalar"
                                },
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "double",
                                    "c_var": "arg2",
                                    "cfi_type": "CFI_type_double",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&arg2",
                                    "cxx_type": "double",
                                    "cxx_var": "arg2",
                                    "f_intent": "IN",
                                    "f_kind": "C_DOUBLE",
                                    "f_type": "real(C_DOUBLE)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "arg2",
                                    "fc_var": "arg2",
                                    "i_var": "arg2",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt_name": "f_in_native_scalar"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_type": "double",
                                    "c_var": "arg2",
                                    "ctor_expr": "arg2",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&arg2",
                                    "cxx_type": "double",
                                    "cxx_var": "arg2",
                                    "data_var": "SHData_arg2",
                                    "numpy_type": "NPY_DOUBLE",
                                    "py_var": "SHPy_arg2",
                                    "size_var": "SHSize_arg2",
                                    "stmt": "py_in_native_scalar",
                                    "value_var": "SHValue_arg2"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "CXX_template": "<double>",
                            "C_name_api": "nested",
                            "F_name_api": "nested",
                            "F_name_function": "nested_double",
                            "F_name_generic": "nested",
                            "F_name_impl": "user_int_nested_double",
                            "PY_name_impl": "PY_nested_double",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "nested",
                            "template_suffix": "_double"
                        }
                    }
                ],
                "name": "user",
                "name_api": "user_int",
                "name_instantiation": "user<int>",
                "options": {},
                "parse_keyword": "class",
                "scope": "user::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "typemap_name": "user_int",
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapuser_int.h",
                    "C_impl_filename": "wrapuser_int.cpp",
                    "C_name_api": "user_int",
                    "C_name_scope": "user_int_",
                    "C_type_name": "TEM_user_int",
                    "F_derived_name": "user_int",
                    "F_name_api": "user_int",
                    "F_name_scope": "user_int_",
                    "PY_PyObject": "PY_user_int",
                    "PY_PyTypeObject": "PY_user_int_Type",
                    "PY_capsule_name": "PY_user_int_capsule_name",
                    "PY_from_object_func": "PP_user_int_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_user_int_to_Object",
                    "PY_to_object_idtor_func": "PP_user_int_to_Object_idtor",
                    "PY_type_filename": "pyuser_inttype.cpp",
                    "class_scope": "user<int>::",
                    "cxx_class": "user_int",
                    "cxx_type": "user<int>",
                    "f_capsule_data_type": "TEM_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "TEM_SHROUD_capsule_data",
                    "file_scope": "user_int"
                }
            },
            {
                "<CLASS>": "structAsClass ****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "ctor  8 ****************************************",
                        "_orig_node_index": 3,
                        "_overloaded": true,
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "_constructor": true,
                                    "_name": "ctor"
                                },
                                "metaattrs": {
                                    "api": "capptr",
                                    "intent": "ctor"
                                },
                                "params": [],
                                "typemap_name": "structAsClass"
                            },
                            "is_ctor": true,
                            "specifier": [
                                "structAsClass"
                            ],
                            "typemap_name": "structAsClass_int"
                        },
                        "decl": "structAsClass()",
                        "declgen": "structAsClass(void)",
                        "name": "ctor",
                        "options": {
                            "F_create_generic": true
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "ctor"
                                    },
                                    "stmt": "c_ctor_shadow_scalar_capptr"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "ctor"
                                    },
                                    "stmt": "f_ctor_shadow_scalar_capptr"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->ctor(\t)",
                                    "C_name": "TEM_structAsClass_int_ctor",
                                    "C_prototype": "TEM_structAsClass_int * SHC_rv",
                                    "C_return_type": "TEM_structAsClass_int *",
                                    "F_C_name": "c_struct_as_class_int_ctor",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "TEM_structAsClass_int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "structAsClass<int> SHCXX_rv",
                                    "cxx_type": "structAsClass<int>",
                                    "cxx_var": "SHCXX_rv",
                                    "f_local_ptr": "SHT_prv",
                                    "idtor": "3",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "c_ctor_shadow_scalar_capptr"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->ctor(\t)",
                                    "C_name": "TEM_structAsClass_int_ctor",
                                    "C_prototype": "TEM_structAsClass_int * SHC_rv",
                                    "C_return_type": "TEM_structAsClass_int *",
                                    "F_C_arguments": "SHT_rv",
                                    "F_C_call": "c_struct_as_class_int_ctor",
                                    "F_C_name": "c_struct_as_class_int_ctor",
                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "SHT_rv%cxxmem",
                                    "F_arguments": "",
                                    "F_result": "SHT_prv",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "TEM_structAsClass_int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "structAsClass<int> SHCXX_rv",
                                    "cxx_type": "structAsClass<int>",
                                    "cxx_var": "SHCXX_rv",
                                    "f_capsule_data_type": "TEM_SHROUD_capsule_data",
                                    "f_derived_type": "struct_as_class_int",
                                    "f_intent": "OUT",
                                    "f_local_ptr": "SHT_prv",
                                    "f_type": "type(struct_as_class_int)",
                                    "f_type_module": "templates_mod",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "3",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_ctor_shadow_scalar_capptr"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "ctor",
                            "F_name_api": "ctor",
                            "F_name_function": "ctor",
                            "F_name_generic": "struct_as_class_int",
                            "F_name_impl": "struct_as_class_int_ctor",
                            "function_name": "ctor"
                        }
                    },
                    {
                        "<FUNCTION>": "set_npts  9 ****************************************",
                        "_orig_node_index": 4,
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "set_npts",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "n",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_npts(int n)",
                        "declgen": "void set_npts(int n +value)",
                        "name": "set_npts",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    },
                                    "stmt": "c_subroutine"
                                },
                                "n": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "c_in_native_scalar"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    },
                                    "stmt": "f_subroutine"
                                },
                                "n": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "f_in_native_scalar"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->set_npts(\tn)",
                                    "C_call_list": "n",
                                    "C_name": "TEM_structAsClass_int_set_npts",
                                    "C_prototype": "TEM_structAsClass_int * self,\t int n",
                                    "C_return_type": "void",
                                    "F_C_name": "c_struct_as_class_int_set_npts",
                                    "stmt_name": "c_subroutine"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->set_npts(\tn)",
                                    "C_call_list": "n",
                                    "C_name": "TEM_structAsClass_int_set_npts",
                                    "C_prototype": "TEM_structAsClass_int * self,\t int n",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t n",
                                    "F_C_call": "c_struct_as_class_int_set_npts",
                                    "F_C_name": "c_struct_as_class_int_set_npts",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t n",
                                    "F_arguments": "obj,\t n",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_subroutine"
                                }
                            },
                            "n": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "n",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&n",
                                    "cxx_type": "int",
                                    "cxx_var": "n",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "c_in_native_scalar"
                                },
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "n",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&n",
                                    "cxx_type": "int",
                                    "cxx_var": "n",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "n",
                                    "fc_var": "n",
                                    "i_var": "n",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_in_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "set_npts",
                            "F_name_api": "set_npts",
                            "F_name_function": "set_npts",
                            "F_name_generic": "set_npts",
                            "F_name_impl": "struct_as_class_int_set_npts",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "set_npts"
                        }
                    },
                    {
                        "<FUNCTION>": "get_npts  10 ****************************************",
                        "_orig_node_index": 5,
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "get_npts",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int get_npts()",
                        "declgen": "int get_npts(void)",
                        "name": "get_npts",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "c_function_native_scalar"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "f_function_native_scalar"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->get_npts(\t)",
                                    "C_name": "TEM_structAsClass_int_get_npts",
                                    "C_prototype": "TEM_structAsClass_int * self",
                                    "C_return_type": "int",
                                    "F_C_name": "c_struct_as_class_int_get_npts",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHC_rv",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "c_function_native_scalar"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->get_npts(\t)",
                                    "C_name": "TEM_structAsClass_int_get_npts",
                                    "C_prototype": "TEM_structAsClass_int * self",
                                    "C_return_type": "int",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_struct_as_class_int_get_npts",
                                    "F_C_name": "c_struct_as_class_int_get_npts",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHC_rv",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_function_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "get_npts",
                            "F_name_api": "get_npts",
                            "F_name_function": "get_npts",
                            "F_name_generic": "get_npts",
                            "F_name_impl": "struct_as_class_int_get_npts",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "get_npts"
                        }
                    },
                    {
                        "<FUNCTION>": "set_value  11 ****************************************",
                        "_orig_node_index": 6,
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "set_value",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "v"
                                        },
                                        "specifier": [
                                            "T"
                                        ],
                                        "template_argument": "T"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_value(T v)",
                        "declgen": "void set_value(T v +value)",
                        "have_template_args": true,
                        "name": "set_value",
                        "options": {},
                        "wrap": {},
                        "zz_fmtdict": {
                            "C_name_api": "set_value",
                            "F_name_api": "set_value",
                            "function_name": "set_value"
                        }
                    },
                    {
                        "<FUNCTION>": "set_value  13 ****************************************",
                        "_generated": "cxx_template",
                        "_generated_path": [
                            "cxx_template"
                        ],
                        "_orig_node_index": 6,
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "set_value",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "v"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "template_argument": "T",
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_value(T v)",
                        "declgen": "void set_value(int v +value)",
                        "have_template_args": true,
                        "name": "set_value",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    },
                                    "stmt": "c_subroutine"
                                },
                                "v": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "c_in_native_scalar"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    },
                                    "stmt": "f_subroutine"
                                },
                                "v": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "f_in_native_scalar"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->set_value(\tv)",
                                    "C_call_list": "v",
                                    "C_name": "TEM_structAsClass_int_set_value",
                                    "C_prototype": "TEM_structAsClass_int * self,\t int v",
                                    "C_return_type": "void",
                                    "F_C_name": "c_struct_as_class_int_set_value",
                                    "stmt_name": "c_subroutine"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->set_value(\tv)",
                                    "C_call_list": "v",
                                    "C_name": "TEM_structAsClass_int_set_value",
                                    "C_prototype": "TEM_structAsClass_int * self,\t int v",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t v",
                                    "F_C_call": "c_struct_as_class_int_set_value",
                                    "F_C_name": "c_struct_as_class_int_set_value",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t v",
                                    "F_arguments": "obj,\t v",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_subroutine"
                                }
                            },
                            "v": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "v",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&v",
                                    "cxx_type": "int",
                                    "cxx_var": "v",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "c_in_native_scalar"
                                },
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "v",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&v",
                                    "cxx_type": "int",
                                    "cxx_var": "v",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "v",
                                    "fc_var": "v",
                                    "i_var": "v",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_in_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "set_value",
                            "F_name_api": "set_value",
                            "F_name_function": "set_value",
                            "F_name_generic": "set_value",
                            "F_name_impl": "struct_as_class_int_set_value",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "set_value"
                        }
                    },
                    {
                        "<FUNCTION>": "get_value  12 ****************************************",
                        "_orig_node_index": 7,
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "get_value",
                                "params": []
                            },
                            "specifier": [
                                "T"
                            ],
                            "template_argument": "T"
                        },
                        "decl": "T get_value()",
                        "declgen": "T get_value(void)",
                        "have_template_args": true,
                        "name": "get_value",
                        "options": {},
                        "wrap": {},
                        "zz_fmtdict": {
                            "C_name_api": "get_value",
                            "F_name_api": "get_value",
                            "function_name": "get_value"
                        }
                    },
                    {
                        "<FUNCTION>": "get_value  14 ****************************************",
                        "_generated": "cxx_template",
                        "_generated_path": [
                            "cxx_template"
                        ],
                        "_orig_node_index": 7,
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "get_value",
                                "params": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "template_argument": "T",
                            "typemap_name": "int"
                        },
                        "decl": "T get_value()",
                        "declgen": "int get_value(void)",
                        "have_template_args": true,
                        "name": "get_value",
                        "options": {
                            "F_create_generic": false
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "c_function_native_scalar"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "f_function_native_scalar"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->get_value(\t)",
                                    "C_name": "TEM_structAsClass_int_get_value",
                                    "C_prototype": "TEM_structAsClass_int * self",
                                    "C_return_type": "int",
                                    "F_C_name": "c_struct_as_class_int_get_value",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHC_rv",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "c_function_native_scalar"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->get_value(\t)",
                                    "C_name": "TEM_structAsClass_int_get_value",
                                    "C_prototype": "TEM_structAsClass_int * self",
                                    "C_return_type": "int",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_struct_as_class_int_get_value",
                                    "F_C_name": "c_struct_as_class_int_get_value",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHC_rv",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_function_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "get_value",
                            "F_name_api": "get_value",
                            "F_name_function": "get_value",
                            "F_name_generic": "get_value",
                            "F_name_impl": "struct_as_class_int_get_value",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "get_value"
                        }
                    }
                ],
                "name": "structAsClass",
                "name_api": "structAsClass_int",
                "name_instantiation": "structAsClass<int>",
                "options": {
                    "wrap_python": false,
                    "wrap_struct_as": "class"
                },
                "parse_keyword": "struct",
                "scope": "structAsClass::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "typemap_name": "structAsClass_int",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "wrap_as": "class",
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapstructAsClass_int.h",
                    "C_impl_filename": "wrapstructAsClass_int.cpp",
                    "C_name_api": "structAsClass_int",
                    "C_name_scope": "structAsClass_int_",
                    "C_type_name": "TEM_structAsClass_int",
                    "F_derived_name": "struct_as_class_int",
                    "F_name_api": "struct_as_class_int",
                    "F_name_scope": "struct_as_class_int_",
                    "PY_struct_array_descr_create": "PY_structAsClass_int_create_array_descr",
                    "PY_struct_array_descr_name": "structAsClass_int_dtype",
                    "PY_struct_array_descr_variable": "PY_structAsClass_int_array_descr",
                    "class_scope": "structAsClass<int>::",
                    "cxx_class": "structAsClass_int",
                    "cxx_type": "structAsClass<int>",
                    "f_capsule_data_type": "TEM_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "TEM_SHROUD_capsule_data",
                    "file_scope": "structAsClass_int"
                }
            },
            {
                "<CLASS>": "structAsClass ****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "ctor  15 ****************************************",
                        "_orig_node_index": 3,
                        "_overloaded": true,
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "_constructor": true,
                                    "_name": "ctor"
                                },
                                "metaattrs": {
                                    "api": "capptr",
                                    "intent": "ctor"
                                },
                                "params": [],
                                "typemap_name": "structAsClass"
                            },
                            "is_ctor": true,
                            "specifier": [
                                "structAsClass"
                            ],
                            "typemap_name": "structAsClass_double"
                        },
                        "decl": "structAsClass()",
                        "declgen": "structAsClass(void)",
                        "name": "ctor",
                        "options": {
                            "F_create_generic": true
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "ctor"
                                    },
                                    "stmt": "c_ctor_shadow_scalar_capptr"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "api": "capptr",
                                        "intent": "ctor"
                                    },
                                    "stmt": "f_ctor_shadow_scalar_capptr"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->ctor(\t)",
                                    "C_name": "TEM_structAsClass_double_ctor",
                                    "C_prototype": "TEM_structAsClass_double * SHC_rv",
                                    "C_return_type": "TEM_structAsClass_double *",
                                    "F_C_name": "c_struct_as_class_double_ctor",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "TEM_structAsClass_double",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "structAsClass<double> SHCXX_rv",
                                    "cxx_type": "structAsClass<double>",
                                    "cxx_var": "SHCXX_rv",
                                    "f_local_ptr": "SHT_prv",
                                    "idtor": "4",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "c_ctor_shadow_scalar_capptr"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->ctor(\t)",
                                    "C_name": "TEM_structAsClass_double_ctor",
                                    "C_prototype": "TEM_structAsClass_double * SHC_rv",
                                    "C_return_type": "TEM_structAsClass_double *",
                                    "F_C_arguments": "SHT_rv",
                                    "F_C_call": "c_struct_as_class_double_ctor",
                                    "F_C_name": "c_struct_as_class_double_ctor",
                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "SHT_rv%cxxmem",
                                    "F_arguments": "",
                                    "F_result": "SHT_prv",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "TEM_structAsClass_double",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_other",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "structAsClass<double> SHCXX_rv",
                                    "cxx_type": "structAsClass<double>",
                                    "cxx_var": "SHCXX_rv",
                                    "f_capsule_data_type": "TEM_SHROUD_capsule_data",
                                    "f_derived_type": "struct_as_class_double",
                                    "f_intent": "OUT",
                                    "f_local_ptr": "SHT_prv",
                                    "f_type": "type(struct_as_class_double)",
                                    "f_type_module": "templates_mod",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "4",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt_name": "f_ctor_shadow_scalar_capptr"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "ctor",
                            "F_name_api": "ctor",
                            "F_name_function": "ctor",
                            "F_name_generic": "struct_as_class_double",
                            "F_name_impl": "struct_as_class_double_ctor",
                            "function_name": "ctor"
                        }
                    },
                    {
                        "<FUNCTION>": "set_npts  16 ****************************************",
                        "_orig_node_index": 4,
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "set_npts",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "n",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_npts(int n)",
                        "declgen": "void set_npts(int n +value)",
                        "name": "set_npts",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    },
                                    "stmt": "c_subroutine"
                                },
                                "n": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "c_in_native_scalar"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    },
                                    "stmt": "f_subroutine"
                                },
                                "n": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "f_in_native_scalar"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->set_npts(\tn)",
                                    "C_call_list": "n",
                                    "C_name": "TEM_structAsClass_double_set_npts",
                                    "C_prototype": "TEM_structAsClass_double * self,\t int n",
                                    "C_return_type": "void",
                                    "F_C_name": "c_struct_as_class_double_set_npts",
                                    "stmt_name": "c_subroutine"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->set_npts(\tn)",
                                    "C_call_list": "n",
                                    "C_name": "TEM_structAsClass_double_set_npts",
                                    "C_prototype": "TEM_structAsClass_double * self,\t int n",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t n",
                                    "F_C_call": "c_struct_as_class_double_set_npts",
                                    "F_C_name": "c_struct_as_class_double_set_npts",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t n",
                                    "F_arguments": "obj,\t n",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_subroutine"
                                }
                            },
                            "n": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "n",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&n",
                                    "cxx_type": "int",
                                    "cxx_var": "n",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "c_in_native_scalar"
                                },
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "n",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&n",
                                    "cxx_type": "int",
                                    "cxx_var": "n",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "n",
                                    "fc_var": "n",
                                    "i_var": "n",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_in_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "set_npts",
                            "F_name_api": "set_npts",
                            "F_name_function": "set_npts",
                            "F_name_generic": "set_npts",
                            "F_name_impl": "struct_as_class_double_set_npts",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "set_npts"
                        }
                    },
                    {
                        "<FUNCTION>": "get_npts  17 ****************************************",
                        "_orig_node_index": 5,
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "get_npts",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int get_npts()",
                        "declgen": "int get_npts(void)",
                        "name": "get_npts",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "c_function_native_scalar"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "f_function_native_scalar"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->get_npts(\t)",
                                    "C_name": "TEM_structAsClass_double_get_npts",
                                    "C_prototype": "TEM_structAsClass_double * self",
                                    "C_return_type": "int",
                                    "F_C_name": "c_struct_as_class_double_get_npts",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHC_rv",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "c_function_native_scalar"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->get_npts(\t)",
                                    "C_name": "TEM_structAsClass_double_get_npts",
                                    "C_prototype": "TEM_structAsClass_double * self",
                                    "C_return_type": "int",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_struct_as_class_double_get_npts",
                                    "F_C_name": "c_struct_as_class_double_get_npts",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHC_rv",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_function_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "get_npts",
                            "F_name_api": "get_npts",
                            "F_name_function": "get_npts",
                            "F_name_generic": "get_npts",
                            "F_name_impl": "struct_as_class_double_get_npts",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "get_npts"
                        }
                    },
                    {
                        "<FUNCTION>": "set_value  18 ****************************************",
                        "_orig_node_index": 6,
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "set_value",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "v"
                                        },
                                        "specifier": [
                                            "T"
                                        ],
                                        "template_argument": "T"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_value(T v)",
                        "declgen": "void set_value(T v +value)",
                        "have_template_args": true,
                        "name": "set_value",
                        "options": {},
                        "wrap": {},
                        "zz_fmtdict": {
                            "C_name_api": "set_value",
                            "F_name_api": "set_value",
                            "function_name": "set_value"
                        }
                    },
                    {
                        "<FUNCTION>": "set_value  20 ****************************************",
                        "_generated": "cxx_template",
                        "_generated_path": [
                            "cxx_template"
                        ],
                        "_orig_node_index": 6,
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "set_value",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "v"
                                        },
                                        "specifier": [
                                            "double"
                                        ],
                                        "template_argument": "T",
                                        "typemap_name": "double"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_value(T v)",
                        "declgen": "void set_value(double v +value)",
                        "have_template_args": true,
                        "name": "set_value",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    },
                                    "stmt": "c_subroutine"
                                },
                                "v": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "c_in_native_scalar"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "subroutine"
                                    },
                                    "stmt": "f_subroutine"
                                },
                                "v": {
                                    "meta": {
                                        "intent": "in"
                                    },
                                    "stmt": "f_in_native_scalar"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->set_value(\tv)",
                                    "C_call_list": "v",
                                    "C_name": "TEM_structAsClass_double_set_value",
                                    "C_prototype": "TEM_structAsClass_double * self,\t double v",
                                    "C_return_type": "void",
                                    "F_C_name": "c_struct_as_class_double_set_value",
                                    "stmt_name": "c_subroutine"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->set_value(\tv)",
                                    "C_call_list": "v",
                                    "C_name": "TEM_structAsClass_double_set_value",
                                    "C_prototype": "TEM_structAsClass_double * self,\t double v",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t v",
                                    "F_C_call": "c_struct_as_class_double_set_value",
                                    "F_C_name": "c_struct_as_class_double_set_value",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t v",
                                    "F_arguments": "obj,\t v",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_subroutine"
                                }
                            },
                            "v": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "double",
                                    "c_var": "v",
                                    "cfi_type": "CFI_type_double",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&v",
                                    "cxx_type": "double",
                                    "cxx_var": "v",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt_name": "c_in_native_scalar"
                                },
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "double",
                                    "c_var": "v",
                                    "cfi_type": "CFI_type_double",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&v",
                                    "cxx_type": "double",
                                    "cxx_var": "v",
                                    "f_intent": "IN",
                                    "f_kind": "C_DOUBLE",
                                    "f_type": "real(C_DOUBLE)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "v",
                                    "fc_var": "v",
                                    "i_var": "v",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt_name": "f_in_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "set_value",
                            "F_name_api": "set_value",
                            "F_name_function": "set_value",
                            "F_name_generic": "set_value",
                            "F_name_impl": "struct_as_class_double_set_value",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "set_value"
                        }
                    },
                    {
                        "<FUNCTION>": "get_value  19 ****************************************",
                        "_orig_node_index": 7,
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "get_value",
                                "params": []
                            },
                            "specifier": [
                                "T"
                            ],
                            "template_argument": "T"
                        },
                        "decl": "T get_value()",
                        "declgen": "T get_value(void)",
                        "have_template_args": true,
                        "name": "get_value",
                        "options": {},
                        "wrap": {},
                        "zz_fmtdict": {
                            "C_name_api": "get_value",
                            "F_name_api": "get_value",
                            "function_name": "get_value"
                        }
                    },
                    {
                        "<FUNCTION>": "get_value  21 ****************************************",
                        "_generated": "cxx_template",
                        "_generated_path": [
                            "cxx_template"
                        ],
                        "_orig_node_index": 7,
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "get_value",
                                "params": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "template_argument": "T",
                            "typemap_name": "double"
                        },
                        "decl": "T get_value()",
                        "declgen": "double get_value(void)",
                        "have_template_args": true,
                        "name": "get_value",
                        "options": {
                            "F_create_generic": false
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_bind": {
                            "c": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "c_function_native_scalar"
                                }
                            },
                            "f": {
                                "+result": {
                                    "meta": {
                                        "intent": "function"
                                    },
                                    "stmt": "f_function_native_scalar"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtc": {
                                    "C_call_function": "SH_this->get_value(\t)",
                                    "C_name": "TEM_structAsClass_double_get_value",
                                    "C_prototype": "TEM_structAsClass_double * self",
                                    "C_return_type": "double",
                                    "F_C_name": "c_struct_as_class_double_get_value",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "double",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_double",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHC_rv",
                                    "cxx_rv_decl": "double SHC_rv",
                                    "cxx_type": "double",
                                    "cxx_var": "SHC_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt_name": "c_function_native_scalar"
                                },
                                "fmtf": {
                                    "C_call_function": "SH_this->get_value(\t)",
                                    "C_name": "TEM_structAsClass_double_get_value",
                                    "C_prototype": "TEM_structAsClass_double * self",
                                    "C_return_type": "double",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_struct_as_class_double_get_value",
                                    "F_C_name": "c_struct_as_class_double_get_value",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_get_value": "",
                                    "c_type": "double",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_double",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHC_rv",
                                    "cxx_rv_decl": "double SHC_rv",
                                    "cxx_type": "double",
                                    "cxx_var": "SHC_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_DOUBLE",
                                    "f_type": "real(C_DOUBLE)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt_name": "f_function_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name_api": "get_value",
                            "F_name_api": "get_value",
                            "F_name_function": "get_value",
                            "F_name_generic": "get_value",
                            "F_name_impl": "struct_as_class_double_get_value",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "get_value"
                        }
                    }
                ],
                "name": "structAsClass",
                "name_api": "structAsClass_double",
                "name_instantiation": "structAsClass<double>",
                "options": {
                    "wrap_python": false,
                    "wrap_struct_as": "class"
                },
                "parse_keyword": "struct",
                "scope": "structAsClass::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "typemap_name": "structAsClass_double",
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "wrap_as": "class",
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapstructAsClass_double.h",
                    "C_impl_filename": "wrapstructAsClass_double.cpp",
                    "C_name_api": "structAsClass_double",
                    "C_name_scope": "structAsClass_double_",
                    "C_type_name": "TEM_structAsClass_double",
                    "F_derived_name": "struct_as_class_double",
                    "F_name_api": "struct_as_class_double",
                    "F_name_scope": "struct_as_class_double_",
                    "PY_struct_array_descr_create": "PY_structAsClass_double_create_array_descr",
                    "PY_struct_array_descr_name": "structAsClass_double_dtype",
                    "PY_struct_array_descr_variable": "PY_structAsClass_double_array_descr",
                    "class_scope": "structAsClass<double>::",
                    "cxx_class": "structAsClass_double",
                    "cxx_type": "structAsClass<double>",
                    "f_capsule_data_type": "TEM_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "TEM_SHROUD_capsule_data",
                    "file_scope": "structAsClass_double"
                }
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "templates.hpp"
        ],
        "functions": [
            {
                "<FUNCTION>": "returnUserType  38 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "api": "capptr",
                            "intent": "function"
                        },
                        "name": "returnUserType",
                        "params": [],
                        "typemap_name": "user"
                    },
                    "specifier": [
                        "user"
                    ],
                    "template_arguments": [
                        {
                            "declarator": {
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "typemap_name": "user_int"
                },
                "decl": "user<int> returnUserType(void);",
                "declgen": "user<int> returnUserType(void)",
                "name": "returnUserType",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "api": "capptr",
                                "intent": "function"
                            },
                            "stmt": "c_function_shadow_scalar_capptr_targ_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "capptr",
                                "intent": "function"
                            },
                            "stmt": "f_function_shadow_scalar_capptr_targ_native_scalar"
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "returnUserType(\t)",
                            "C_name": "TEM_returnUserType",
                            "C_prototype": "TEM_user_int * SHC_rv",
                            "C_return_type": "TEM_user_int *",
                            "F_C_name": "c_return_user_type",
                            "c_const": "",
                            "c_type": "TEM_user_int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_T": "int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_rv_decl": "*SHCXX_rv",
                            "cxx_type": "user<int>",
                            "cxx_var": "SHCXX_rv",
                            "f_local_ptr": "SHT_prv",
                            "idtor": "5",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_shadow_scalar_capptr_targ_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "returnUserType(\t)",
                            "C_name": "TEM_returnUserType",
                            "C_prototype": "TEM_user_int * SHC_rv",
                            "C_return_type": "TEM_user_int *",
                            "F_C_arguments": "SHT_rv",
                            "F_C_call": "c_return_user_type",
                            "F_C_name": "c_return_user_type",
                            "F_C_result_clause": "\fresult(SHT_prv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_result": "SHT_prv",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_type": "TEM_user_int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_T": "int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_rv_decl": "*SHCXX_rv",
                            "cxx_type": "user<int>",
                            "cxx_var": "SHCXX_rv",
                            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
                            "f_derived_type": "user_int",
                            "f_intent": "OUT",
                            "f_local_ptr": "SHT_prv",
                            "f_type": "type(user_int)",
                            "f_type_module": "templates_mod",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "5",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_shadow_scalar_capptr_targ_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnUserType",
                    "F_name_api": "return_user_type",
                    "F_name_function": "return_user_type",
                    "F_name_generic": "return_user_type",
                    "F_name_impl": "return_user_type",
                    "function_name": "returnUserType"
                }
            },
            {
                "<FUNCTION>": "FunctionTU  39 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "FunctionTU",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1"
                                },
                                "specifier": [
                                    "T"
                                ],
                                "template_argument": "T"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2"
                                },
                                "specifier": [
                                    "U"
                                ],
                                "template_argument": "U"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "cxx_template": {
                    "T": [
                        "int",
                        "float"
                    ]
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(T arg1 +value, U arg2 +value)",
                "doxygen": {
                    "brief": "Function template with two template parameters."
                },
                "have_template_args": true,
                "name": "FunctionTU",
                "options": {},
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ],
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "FunctionTU",
                    "F_name_api": "function_tu",
                    "function_name": "FunctionTU"
                }
            },
            {
                "<FUNCTION>": "FunctionTU  41 ****************************************",
                "_generated": "cxx_template",
                "_generated_path": [
                    "cxx_template"
                ],
                "_orig_node_index": 39,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "FunctionTU",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "template_argument": "T",
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2"
                                },
                                "specifier": [
                                    "long"
                                ],
                                "template_argument": "U",
                                "typemap_name": "long"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(int arg1 +value, long arg2 +value)",
                "doxygen": {
                    "brief": "Function template with two template parameters."
                },
                "have_template_args": true,
                "name": "FunctionTU",
                "options": {},
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "FunctionTU<int, long>(\targ1,\t arg2)",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "TEM_FunctionTU_0",
                            "C_prototype": "int arg1,\t long arg2",
                            "C_return_type": "void",
                            "F_C_name": "c_function_tu_0",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "FunctionTU<int, long>(\targ1,\t arg2)",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "TEM_FunctionTU_0",
                            "C_prototype": "int arg1,\t long arg2",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t arg2",
                            "F_C_call": "c_function_tu_0",
                            "F_C_name": "c_function_tu_0",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg1,\t arg2",
                            "F_arguments": "arg1,\t arg2",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg1",
                            "ctor_expr": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "long",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_long",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "long",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_long",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_LONG",
                            "f_type": "integer(C_LONG)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "fc_var": "arg2",
                            "i_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "long",
                            "c_var": "arg2",
                            "ctor_expr": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_LONG",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "CXX_template": "<int, long>",
                    "C_name_api": "FunctionTU",
                    "F_name_api": "function_tu",
                    "F_name_function": "function_tu_0",
                    "F_name_generic": "function_tu",
                    "F_name_impl": "function_tu_0",
                    "PY_name_impl": "PY_FunctionTU_0",
                    "function_name": "FunctionTU",
                    "template_suffix": "_0"
                }
            },
            {
                "<FUNCTION>": "FunctionTU  42 ****************************************",
                "_generated": "cxx_template",
                "_generated_path": [
                    "cxx_template"
                ],
                "_orig_node_index": 39,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "FunctionTU",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "template_argument": "T",
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "template_argument": "U",
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(float arg1 +value, double arg2 +value)",
                "doxygen": {
                    "brief": "Function template with two template parameters."
                },
                "gen_headers_typedef": [
                    "int",
                    "long",
                    "float",
                    "double"
                ],
                "have_template_args": true,
                "name": "FunctionTU",
                "options": {},
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "FunctionTU<float, double>(\targ1,\t arg2)",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "TEM_FunctionTU_1",
                            "C_prototype": "float arg1,\t double arg2",
                            "C_return_type": "void",
                            "F_C_name": "c_function_tu_1",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "FunctionTU<float, double>(\targ1,\t arg2)",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "TEM_FunctionTU_1",
                            "C_prototype": "float arg1,\t double arg2",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t arg2",
                            "F_C_call": "c_function_tu_1",
                            "F_C_name": "c_function_tu_1",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg1,\t arg2",
                            "F_arguments": "arg1,\t arg2",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "float",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_float",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "float",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "float",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_float",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "float",
                            "cxx_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_FLOAT",
                            "f_type": "real(C_FLOAT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "float",
                            "c_var": "arg1",
                            "ctor_expr": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "float",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_FLOAT",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "fc_var": "arg2",
                            "i_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg2",
                            "ctor_expr": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "CXX_template": "<float, double>",
                    "C_name_api": "FunctionTU",
                    "F_name_api": "function_tu",
                    "F_name_function": "function_tu_1",
                    "F_name_generic": "function_tu",
                    "F_name_impl": "function_tu_1",
                    "PY_name_impl": "PY_FunctionTU_1",
                    "function_name": "FunctionTU",
                    "template_suffix": "_1"
                }
            },
            {
                "<FUNCTION>": "UseImplWorker  40 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "UseImplWorker",
                        "params": [],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "cxx_template": {
                    "T": [
                        "internal::ImplWorker1",
                        "internal::ImplWorker2"
                    ]
                },
                "decl": "template<typename T> int UseImplWorker()",
                "declgen": "int UseImplWorker(void)",
                "doxygen": {
                    "brief": "Function which uses a templated T in the implemetation."
                },
                "name": "UseImplWorker",
                "options": {
                    "F_create_generic": false,
                    "PY_create_generic": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker2"
                                ],
                                "typemap_name": "internal::ImplWorker2"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker2>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "UseImplWorker",
                    "F_name_api": "use_impl_worker",
                    "function_name": "UseImplWorker"
                }
            },
            {
                "<FUNCTION>": "UseImplWorker  43 ****************************************",
                "_generated": "cxx_template",
                "_generated_path": [
                    "cxx_template"
                ],
                "_orig_node_index": 40,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "UseImplWorker",
                        "params": [],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "template<typename T> int UseImplWorker()",
                "declgen": "int UseImplWorker(void)",
                "doxygen": {
                    "brief": "Function which uses a templated T in the implemetation."
                },
                "name": "UseImplWorker",
                "options": {
                    "F_create_generic": false,
                    "PY_create_generic": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker2"
                                ],
                                "typemap_name": "internal::ImplWorker2"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker2>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "UseImplWorker<internal::ImplWorker1>(\t)",
                            "C_name": "TEM_UseImplWorker_internal_ImplWorker1",
                            "C_prototype": "void",
                            "C_return_type": "int",
                            "F_C_name": "c_use_impl_worker_internal_ImplWorker1",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "UseImplWorker<internal::ImplWorker1>(\t)",
                            "C_name": "TEM_UseImplWorker_internal_ImplWorker1",
                            "C_prototype": "void",
                            "C_return_type": "int",
                            "F_C_arguments": "",
                            "F_C_call": "c_use_impl_worker_internal_ImplWorker1",
                            "F_C_name": "c_use_impl_worker_internal_ImplWorker1",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "CXX_template": "<internal::ImplWorker1>",
                    "C_name_api": "UseImplWorker",
                    "F_name_api": "use_impl_worker",
                    "F_name_function": "use_impl_worker_internal_ImplWorker1",
                    "F_name_generic": "use_impl_worker",
                    "F_name_impl": "use_impl_worker_internal_ImplWorker1",
                    "PY_name_impl": "PY_UseImplWorker_internal_ImplWorker1",
                    "function_name": "UseImplWorker",
                    "template_suffix": "_internal_ImplWorker1"
                }
            },
            {
                "<FUNCTION>": "UseImplWorker  44 ****************************************",
                "_generated": "cxx_template",
                "_generated_path": [
                    "cxx_template"
                ],
                "_orig_node_index": 40,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "UseImplWorker",
                        "params": [],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "template<typename T> int UseImplWorker()",
                "declgen": "int UseImplWorker(void)",
                "doxygen": {
                    "brief": "Function which uses a templated T in the implemetation."
                },
                "gen_headers_typedef": [
                    "internal::ImplWorker1",
                    "internal::ImplWorker2"
                ],
                "name": "UseImplWorker",
                "options": {
                    "F_create_generic": false,
                    "PY_create_generic": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker2"
                                ],
                                "typemap_name": "internal::ImplWorker2"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker2>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "UseImplWorker<internal::ImplWorker2>(\t)",
                            "C_name": "TEM_UseImplWorker_internal_ImplWorker2",
                            "C_prototype": "void",
                            "C_return_type": "int",
                            "F_C_name": "c_use_impl_worker_internal_ImplWorker2",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "UseImplWorker<internal::ImplWorker2>(\t)",
                            "C_name": "TEM_UseImplWorker_internal_ImplWorker2",
                            "C_prototype": "void",
                            "C_return_type": "int",
                            "F_C_arguments": "",
                            "F_C_call": "c_use_impl_worker_internal_ImplWorker2",
                            "F_C_name": "c_use_impl_worker_internal_ImplWorker2",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "CXX_template": "<internal::ImplWorker2>",
                    "C_name_api": "UseImplWorker",
                    "F_name_api": "use_impl_worker",
                    "F_name_function": "use_impl_worker_internal_ImplWorker2",
                    "F_name_generic": "use_impl_worker",
                    "F_name_impl": "use_impl_worker_internal_ImplWorker2",
                    "PY_name_impl": "PY_UseImplWorker_internal_ImplWorker2",
                    "function_name": "UseImplWorker",
                    "template_suffix": "_internal_ImplWorker2"
                }
            }
        ],
        "language": "cxx",
        "namespaces": [
            {
                "<NAMESPACE>": "std ****************************************",
                "classes": [
                    {
                        "<CLASS>": "vector ****************************************",
                        "cxx_header": [
                            "<vector>"
                        ],
                        "functions": [
                            {
                                "<FUNCTION>": "ctor  26 ****************************************",
                                "_orig_node_index": 22,
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "attrs": {
                                            "_constructor": true,
                                            "_name": "ctor"
                                        },
                                        "metaattrs": {
                                            "api": "capptr",
                                            "intent": "ctor"
                                        },
                                        "params": [],
                                        "typemap_name": "std::vector"
                                    },
                                    "is_ctor": true,
                                    "specifier": [
                                        "vector"
                                    ],
                                    "typemap_name": "std::vector_int"
                                },
                                "decl": "vector()",
                                "declgen": "vector(void)",
                                "name": "ctor",
                                "options": {
                                    "F_create_generic": true
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "api": "capptr",
                                                "intent": "ctor"
                                            },
                                            "stmt": "c_ctor_shadow_scalar_capptr"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "api": "capptr",
                                                "intent": "ctor"
                                            },
                                            "stmt": "f_ctor_shadow_scalar_capptr"
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "SH_this->ctor(\t)",
                                            "C_name": "TEM_vector_int_ctor",
                                            "C_prototype": "TEM_vector_int * SHC_rv",
                                            "C_return_type": "TEM_vector_int *",
                                            "F_C_name": "c_vector_int_ctor",
                                            "c_const": "",
                                            "c_get_value": "",
                                            "c_type": "TEM_vector_int",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_other",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_rv_decl": "std::vector<int> SHCXX_rv",
                                            "cxx_type": "std::vector<int>",
                                            "cxx_var": "SHCXX_rv",
                                            "f_local_ptr": "SHT_prv",
                                            "idtor": "1",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt_name": "c_ctor_shadow_scalar_capptr"
                                        },
                                        "fmtf": {
                                            "C_call_function": "SH_this->ctor(\t)",
                                            "C_name": "TEM_vector_int_ctor",
                                            "C_prototype": "TEM_vector_int * SHC_rv",
                                            "C_return_type": "TEM_vector_int *",
                                            "F_C_arguments": "SHT_rv",
                                            "F_C_call": "c_vector_int_ctor",
                                            "F_C_name": "c_vector_int_ctor",
                                            "F_C_result_clause": "\fresult(SHT_prv)",
                                            "F_C_subprogram": "function",
                                            "F_arg_c_call": "SHT_rv%cxxmem",
                                            "F_arguments": "",
                                            "F_result": "SHT_prv",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "c_const": "",
                                            "c_get_value": "",
                                            "c_type": "TEM_vector_int",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_other",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_rv_decl": "std::vector<int> SHCXX_rv",
                                            "cxx_type": "std::vector<int>",
                                            "cxx_var": "SHCXX_rv",
                                            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
                                            "f_derived_type": "vector_int",
                                            "f_intent": "OUT",
                                            "f_local_ptr": "SHT_prv",
                                            "f_type": "type(vector_int)",
                                            "f_type_module": "templates_std_mod",
                                            "f_var": "SHT_rv",
                                            "fc_var": "SHT_rv",
                                            "i_var": "SHT_rv",
                                            "idtor": "1",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt_name": "f_ctor_shadow_scalar_capptr"
                                        },
                                        "fmtpy": {
                                            "PY_build_format": "O",
                                            "PY_to_object_idtor_func": "PP_vector_int_to_Object_idtor",
                                            "PyObject": "PY_vector_int",
                                            "PyTypeObject": "PY_vector_int_Type",
                                            "c_deref": "",
                                            "c_var": "SHCXX_rv",
                                            "ctor_expr": "SHCXX_rv",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHCXX_rv",
                                            "cxx_type": "std::vector<int>",
                                            "cxx_var": "SHCXX_rv",
                                            "data_var": "SHData_rv",
                                            "numpy_type": null,
                                            "py_var": "SHTPy_rv",
                                            "size_var": "SHSize_rv",
                                            "stmt": "py_default",
                                            "value_var": "SHValue_rv",
                                            "vargs": "SHCXX_rv"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "ctor",
                                    "F_name_api": "ctor",
                                    "F_name_function": "ctor",
                                    "F_name_generic": "vector_int",
                                    "F_name_impl": "vector_int_ctor",
                                    "PY_name_impl": "PY_vector_int_tp_init",
                                    "PY_type_impl": "PY_vector_int_tp_init",
                                    "PY_type_method": "tp_init",
                                    "function_name": "ctor"
                                }
                            },
                            {
                                "<FUNCTION>": "dtor  27 ****************************************",
                                "_orig_node_index": 23,
                                "ast": {
                                    "declarator": {
                                        "attrs": {
                                            "_destructor": "vector",
                                            "_name": "dtor"
                                        },
                                        "metaattrs": {
                                            "intent": "dtor"
                                        },
                                        "params": [],
                                        "typemap_name": "void"
                                    },
                                    "is_dtor": "vector",
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "~vector()",
                                "declgen": "~vector(void)",
                                "name": "dtor",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "dtor"
                                            },
                                            "stmt": "c_dtor"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "dtor"
                                            },
                                            "stmt": "f_dtor"
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "SH_this->dtor(\t)",
                                            "C_name": "TEM_vector_int_dtor",
                                            "C_prototype": "TEM_vector_int * self",
                                            "C_return_type": "void",
                                            "F_C_name": "c_vector_int_dtor",
                                            "stmt_name": "c_dtor"
                                        },
                                        "fmtf": {
                                            "C_call_function": "SH_this->dtor(\t)",
                                            "C_name": "TEM_vector_int_dtor",
                                            "C_prototype": "TEM_vector_int * self",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self",
                                            "F_C_call": "c_vector_int_dtor",
                                            "F_C_name": "c_vector_int_dtor",
                                            "F_C_result_clause": "",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "obj%cxxmem",
                                            "F_arguments": "obj",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_dtor"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "dtor",
                                    "F_name_api": "dtor",
                                    "F_name_function": "dtor",
                                    "F_name_generic": "dtor",
                                    "F_name_impl": "vector_int_dtor",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "function_name": "dtor"
                                }
                            },
                            {
                                "<FUNCTION>": "push_back  28 ****************************************",
                                "_orig_node_index": 24,
                                "ast": {
                                    "declarator": {
                                        "metaattrs": {
                                            "intent": "subroutine"
                                        },
                                        "name": "push_back",
                                        "params": [
                                            {
                                                "const": true,
                                                "declarator": {
                                                    "attrs": {
                                                        "intent": "in"
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "name": "value",
                                                    "pointer": [
                                                        {
                                                            "ptr": "&"
                                                        }
                                                    ]
                                                },
                                                "specifier": [
                                                    "T"
                                                ],
                                                "template_argument": "T"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void push_back( const T& value+intent(in) )",
                                "declgen": "void push_back(const T & value +intent(in))",
                                "have_template_args": true,
                                "name": "push_back",
                                "options": {},
                                "wrap": {},
                                "zz_fmtdict": {
                                    "C_name_api": "push_back",
                                    "F_name_api": "push_back",
                                    "function_name": "push_back"
                                }
                            },
                            {
                                "<FUNCTION>": "push_back  30 ****************************************",
                                "_generated": "cxx_template",
                                "_generated_path": [
                                    "cxx_template"
                                ],
                                "_orig_node_index": 24,
                                "ast": {
                                    "declarator": {
                                        "metaattrs": {
                                            "intent": "subroutine"
                                        },
                                        "name": "push_back",
                                        "params": [
                                            {
                                                "const": true,
                                                "declarator": {
                                                    "attrs": {
                                                        "intent": "in"
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "name": "value",
                                                    "pointer": [
                                                        {
                                                            "ptr": "&"
                                                        }
                                                    ]
                                                },
                                                "specifier": [
                                                    "int"
                                                ],
                                                "template_argument": "T",
                                                "typemap_name": "int"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void push_back( const T& value+intent(in) )",
                                "declgen": "void push_back(const int & value +intent(in))",
                                "have_template_args": true,
                                "name": "push_back",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        },
                                        "value": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_&"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        },
                                        "value": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_&"
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "SH_this->push_back(\t*value)",
                                            "C_call_list": "*value",
                                            "C_name": "TEM_vector_int_push_back",
                                            "C_prototype": "TEM_vector_int * self,\t const int * value",
                                            "C_return_type": "void",
                                            "F_C_name": "c_vector_int_push_back",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "SH_this->push_back(\t*value)",
                                            "C_call_list": "*value",
                                            "C_name": "TEM_vector_int_push_back",
                                            "C_prototype": "TEM_vector_int * self,\t const int * value",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self,\t value",
                                            "F_C_call": "c_vector_int_push_back",
                                            "F_C_name": "c_vector_int_push_back",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "obj%cxxmem,\t value",
                                            "F_arguments": "obj,\t value",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_subroutine"
                                        }
                                    },
                                    "value": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "value",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<int *>\t(&value)",
                                            "cxx_type": "int",
                                            "cxx_var": "value",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_in_native_&"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "int",
                                            "c_var": "value",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<int *>\t(&value)",
                                            "cxx_type": "int",
                                            "cxx_var": "value",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "value",
                                            "fc_var": "value",
                                            "i_var": "value",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_in_native_&"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "const ",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "value",
                                            "ctor_expr": "value",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<int *>\t(&value)",
                                            "cxx_type": "int",
                                            "cxx_var": "value",
                                            "data_var": "SHData_value",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_value",
                                            "size_var": "SHSize_value",
                                            "stmt": "py_in_native_&",
                                            "value_var": "SHValue_value"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "push_back",
                                    "F_name_api": "push_back",
                                    "F_name_function": "push_back",
                                    "F_name_generic": "push_back",
                                    "F_name_impl": "vector_int_push_back",
                                    "PY_name_impl": "PY_push_back",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "function_name": "push_back"
                                }
                            },
                            {
                                "<FUNCTION>": "at  29 ****************************************",
                                "_orig_node_index": 25,
                                "ast": {
                                    "declarator": {
                                        "metaattrs": {
                                            "deref": "pointer",
                                            "intent": "function"
                                        },
                                        "name": "at",
                                        "params": [
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "name": "n",
                                                    "typemap_name": "std::vector::size_type"
                                                },
                                                "specifier": [
                                                    "size_type"
                                                ],
                                                "typemap_name": "std::vector<int>::size_type"
                                            }
                                        ],
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "T"
                                    ],
                                    "template_argument": "T"
                                },
                                "decl": "T & at(size_type n)",
                                "declgen": "T & at(size_type n +value)",
                                "have_template_args": true,
                                "name": "at",
                                "options": {},
                                "wrap": {},
                                "zz_fmtdict": {
                                    "C_name_api": "at",
                                    "F_name_api": "at",
                                    "function_name": "at"
                                }
                            },
                            {
                                "<FUNCTION>": "at  31 ****************************************",
                                "_generated": "cxx_template",
                                "_generated_path": [
                                    "cxx_template"
                                ],
                                "_orig_node_index": 25,
                                "ast": {
                                    "declarator": {
                                        "metaattrs": {
                                            "deref": "pointer",
                                            "intent": "function"
                                        },
                                        "name": "at",
                                        "params": [
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "name": "n",
                                                    "typemap_name": "std::vector::size_type"
                                                },
                                                "specifier": [
                                                    "size_type"
                                                ],
                                                "typemap_name": "std::vector<int>::size_type"
                                            }
                                        ],
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "template_argument": "T",
                                    "typemap_name": "int"
                                },
                                "decl": "T & at(size_type n)",
                                "declgen": "int & at(size_type n +value)",
                                "have_template_args": true,
                                "name": "at",
                                "options": {
                                    "F_create_generic": false
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            },
                                            "stmt": "c_function_native_&"
                                        },
                                        "n": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "deref": "pointer",
                                                "intent": "function"
                                            },
                                            "stmt": "f_function_native_&_pointer"
                                        },
                                        "n": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "SH_this->at(\tn)",
                                            "C_call_list": "n",
                                            "C_name": "TEM_vector_int_at",
                                            "C_prototype": "TEM_vector_int * self,\t TEM_vector_int_size_type n",
                                            "C_return_type": "int *",
                                            "F_C_arguments": "self,\t n",
                                            "F_C_name": "c_vector_int_at",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "c_const": "",
                                            "c_get_value": "&",
                                            "c_type": "int",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHC_rv",
                                            "cxx_rv_decl": "int & SHC_rv",
                                            "cxx_type": "int",
                                            "cxx_var": "SHC_rv",
                                            "f_intent": "OUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "SHT_rv",
                                            "i_var": "SHT_rv",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "c_function_native_&"
                                        },
                                        "fmtf": {
                                            "C_call_function": "SH_this->at(\tn)",
                                            "C_call_list": "n",
                                            "C_name": "TEM_vector_int_at_bufferify",
                                            "C_prototype": "TEM_vector_int * self,\t TEM_vector_int_size_type n",
                                            "C_return_type": "int *",
                                            "F_C_arguments": "self,\t n",
                                            "F_C_call": "c_vector_int_at_bufferify",
                                            "F_C_name": "c_vector_int_at_bufferify",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_arg_c_call": "obj%cxxmem,\t n",
                                            "F_arguments": "obj,\t n",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "c_const": "",
                                            "c_get_value": "&",
                                            "c_type": "int",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_int",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHC_rv",
                                            "cxx_rv_decl": "int & SHC_rv",
                                            "cxx_type": "int",
                                            "cxx_var": "SHC_rv",
                                            "f_c_suffix": "_bufferify",
                                            "f_intent": "OUT",
                                            "f_kind": "C_INT",
                                            "f_local_ptr": "SHC_rv_ptr",
                                            "f_type": "integer(C_INT)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "SHT_rv",
                                            "fc_var": "SHT_rv",
                                            "i_var": "SHT_rv",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt_name": "f_function_native_&_pointer"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_deref": "",
                                            "c_var": "SHCXX_rv",
                                            "ctor_expr": "SHCXX_rv",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHCXX_rv",
                                            "cxx_type": "int",
                                            "cxx_var": "SHCXX_rv",
                                            "data_var": "SHData_rv",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHTPy_rv",
                                            "size_var": "SHSize_rv",
                                            "stmt": "py_function_native_&_pointer_numpy",
                                            "value_var": "SHValue_rv"
                                        }
                                    },
                                    "n": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "TEM_vector_int_size_type",
                                            "c_var": "n",
                                            "cfi_type": "CFI_type_size_t",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&n",
                                            "cxx_type": "std::vector<int>::size_type",
                                            "cxx_var": "n",
                                            "f_intent": "IN",
                                            "f_kind": "vector_int_size_type",
                                            "f_type": "integer(vector_int_size_type)",
                                            "f_type_module": "templates_std_mod",
                                            "f_var": "n",
                                            "i_var": "n",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_SIZE_T",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "TEM_vector_int_size_type",
                                            "c_var": "n",
                                            "cfi_type": "CFI_type_size_t",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&n",
                                            "cxx_type": "std::vector<int>::size_type",
                                            "cxx_var": "n",
                                            "f_intent": "IN",
                                            "f_kind": "vector_int_size_type",
                                            "f_type": "integer(vector_int_size_type)",
                                            "f_type_module": "templates_std_mod",
                                            "f_var": "n",
                                            "fc_var": "n",
                                            "i_var": "n",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_SIZE_T",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "TEM_vector_int_size_type",
                                            "c_var": "n",
                                            "ctor_expr": "n",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&n",
                                            "cxx_type": "std::vector<int>::size_type",
                                            "cxx_var": "n",
                                            "data_var": "SHData_n",
                                            "numpy_type": null,
                                            "py_var": "SHPy_n",
                                            "size_var": "SHSize_n",
                                            "stmt": "py_in_native_scalar",
                                            "value_var": "SHValue_n"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "at",
                                    "F_name_api": "at",
                                    "F_name_function": "at",
                                    "F_name_generic": "at",
                                    "F_name_impl": "vector_int_at",
                                    "PY_name_impl": "PY_at",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "function_name": "at"
                                }
                            }
                        ],
                        "name": "vector",
                        "name_api": "vector_int",
                        "name_instantiation": "vector<int>",
                        "options": {
                            "optsample": "two"
                        },
                        "parse_keyword": "class",
                        "scope": "std::vector::",
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "fmtdict": {
                                    "C_impl_filename": "wrapvectorforint.cpp",
                                    "fmtsample": "one"
                                },
                                "instantiation": "<int>",
                                "options": {
                                    "optsample": "two"
                                }
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            }
                        ],
                        "template_parameters": [
                            "T"
                        ],
                        "typedef_map": [
                            [
                                "std::vector::size_type",
                                "std::vector<int>::size_type"
                            ]
                        ],
                        "typemap_name": "std::vector_int",
                        "user_fmt": {
                            "C_impl_filename": "wrapvectorforint.cpp",
                            "fmtsample": "one"
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapstd_vector_int.h",
                            "C_impl_filename": "wrapvectorforint.cpp",
                            "C_name_api": "vector_int",
                            "C_name_scope": "vector_int_",
                            "C_type_name": "TEM_vector_int",
                            "F_derived_name": "vector_int",
                            "F_name_api": "vector_int",
                            "F_name_scope": "vector_int_",
                            "PY_PyObject": "PY_vector_int",
                            "PY_PyTypeObject": "PY_vector_int_Type",
                            "PY_capsule_name": "PY_vector_int_capsule_name",
                            "PY_from_object_func": "PP_vector_int_from_Object",
                            "PY_this_call": "self->obj->",
                            "PY_to_object_func": "PP_vector_int_to_Object",
                            "PY_to_object_idtor_func": "PP_vector_int_to_Object_idtor",
                            "PY_type_filename": "pystd_vector_inttype.cpp",
                            "class_scope": "vector<int>::",
                            "cxx_class": "vector_int",
                            "cxx_type": "vector<int>",
                            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
                            "f_helper_capsule_data_helper": "TEM_SHROUD_capsule_data",
                            "file_scope": "std_vector_int",
                            "fmtsample": "one"
                        }
                    },
                    {
                        "<CLASS>": "vector ****************************************",
                        "cxx_header": [
                            "<vector>"
                        ],
                        "functions": [
                            {
                                "<FUNCTION>": "ctor  32 ****************************************",
                                "_orig_node_index": 22,
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "attrs": {
                                            "_constructor": true,
                                            "_name": "ctor"
                                        },
                                        "metaattrs": {
                                            "api": "capptr",
                                            "intent": "ctor"
                                        },
                                        "params": [],
                                        "typemap_name": "std::vector"
                                    },
                                    "is_ctor": true,
                                    "specifier": [
                                        "vector"
                                    ],
                                    "typemap_name": "std::vector_double"
                                },
                                "decl": "vector()",
                                "declgen": "vector(void)",
                                "name": "ctor",
                                "options": {
                                    "F_create_generic": true
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "api": "capptr",
                                                "intent": "ctor"
                                            },
                                            "stmt": "c_ctor_shadow_scalar_capptr"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "api": "capptr",
                                                "intent": "ctor"
                                            },
                                            "stmt": "f_ctor_shadow_scalar_capptr"
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "SH_this->ctor(\t)",
                                            "C_name": "TEM_vector_double_ctor",
                                            "C_prototype": "TEM_vector_double * SHC_rv",
                                            "C_return_type": "TEM_vector_double *",
                                            "F_C_name": "c_vector_double_ctor",
                                            "c_const": "",
                                            "c_get_value": "",
                                            "c_type": "TEM_vector_double",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_other",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_rv_decl": "std::vector<double> SHCXX_rv",
                                            "cxx_type": "std::vector<double>",
                                            "cxx_var": "SHCXX_rv",
                                            "f_local_ptr": "SHT_prv",
                                            "idtor": "2",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt_name": "c_ctor_shadow_scalar_capptr"
                                        },
                                        "fmtf": {
                                            "C_call_function": "SH_this->ctor(\t)",
                                            "C_name": "TEM_vector_double_ctor",
                                            "C_prototype": "TEM_vector_double * SHC_rv",
                                            "C_return_type": "TEM_vector_double *",
                                            "F_C_arguments": "SHT_rv",
                                            "F_C_call": "c_vector_double_ctor",
                                            "F_C_name": "c_vector_double_ctor",
                                            "F_C_result_clause": "\fresult(SHT_prv)",
                                            "F_C_subprogram": "function",
                                            "F_arg_c_call": "SHT_rv%cxxmem",
                                            "F_arguments": "",
                                            "F_result": "SHT_prv",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "c_const": "",
                                            "c_get_value": "",
                                            "c_type": "TEM_vector_double",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_other",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_rv_decl": "std::vector<double> SHCXX_rv",
                                            "cxx_type": "std::vector<double>",
                                            "cxx_var": "SHCXX_rv",
                                            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
                                            "f_derived_type": "vector_double",
                                            "f_intent": "OUT",
                                            "f_local_ptr": "SHT_prv",
                                            "f_type": "type(vector_double)",
                                            "f_type_module": "templates_std_mod",
                                            "f_var": "SHT_rv",
                                            "fc_var": "SHT_rv",
                                            "i_var": "SHT_rv",
                                            "idtor": "2",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt_name": "f_ctor_shadow_scalar_capptr"
                                        },
                                        "fmtpy": {
                                            "PY_build_format": "O",
                                            "PY_to_object_idtor_func": "PP_vector_double_to_Object_idtor",
                                            "PyObject": "PY_vector_double",
                                            "PyTypeObject": "PY_vector_double_Type",
                                            "c_deref": "",
                                            "c_var": "SHCXX_rv",
                                            "ctor_expr": "SHCXX_rv",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHCXX_rv",
                                            "cxx_type": "std::vector<double>",
                                            "cxx_var": "SHCXX_rv",
                                            "data_var": "SHData_rv",
                                            "numpy_type": null,
                                            "py_var": "SHTPy_rv",
                                            "size_var": "SHSize_rv",
                                            "stmt": "py_default",
                                            "value_var": "SHValue_rv",
                                            "vargs": "SHCXX_rv"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "ctor",
                                    "F_name_api": "ctor",
                                    "F_name_function": "ctor",
                                    "F_name_generic": "vector_double",
                                    "F_name_impl": "vector_double_ctor",
                                    "PY_name_impl": "PY_vector_double_tp_init",
                                    "PY_type_impl": "PY_vector_double_tp_init",
                                    "PY_type_method": "tp_init",
                                    "function_name": "ctor"
                                }
                            },
                            {
                                "<FUNCTION>": "dtor  33 ****************************************",
                                "_orig_node_index": 23,
                                "ast": {
                                    "declarator": {
                                        "attrs": {
                                            "_destructor": "vector",
                                            "_name": "dtor"
                                        },
                                        "metaattrs": {
                                            "intent": "dtor"
                                        },
                                        "params": [],
                                        "typemap_name": "void"
                                    },
                                    "is_dtor": "vector",
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "~vector()",
                                "declgen": "~vector(void)",
                                "name": "dtor",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "dtor"
                                            },
                                            "stmt": "c_dtor"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "dtor"
                                            },
                                            "stmt": "f_dtor"
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "SH_this->dtor(\t)",
                                            "C_name": "TEM_vector_double_dtor",
                                            "C_prototype": "TEM_vector_double * self",
                                            "C_return_type": "void",
                                            "F_C_name": "c_vector_double_dtor",
                                            "stmt_name": "c_dtor"
                                        },
                                        "fmtf": {
                                            "C_call_function": "SH_this->dtor(\t)",
                                            "C_name": "TEM_vector_double_dtor",
                                            "C_prototype": "TEM_vector_double * self",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self",
                                            "F_C_call": "c_vector_double_dtor",
                                            "F_C_name": "c_vector_double_dtor",
                                            "F_C_result_clause": "",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "obj%cxxmem",
                                            "F_arguments": "obj",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_dtor"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "dtor",
                                    "F_name_api": "dtor",
                                    "F_name_function": "dtor",
                                    "F_name_generic": "dtor",
                                    "F_name_impl": "vector_double_dtor",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "function_name": "dtor"
                                }
                            },
                            {
                                "<FUNCTION>": "push_back  34 ****************************************",
                                "_orig_node_index": 24,
                                "ast": {
                                    "declarator": {
                                        "metaattrs": {
                                            "intent": "subroutine"
                                        },
                                        "name": "push_back",
                                        "params": [
                                            {
                                                "const": true,
                                                "declarator": {
                                                    "attrs": {
                                                        "intent": "in"
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "name": "value",
                                                    "pointer": [
                                                        {
                                                            "ptr": "&"
                                                        }
                                                    ]
                                                },
                                                "specifier": [
                                                    "T"
                                                ],
                                                "template_argument": "T"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void push_back( const T& value+intent(in) )",
                                "declgen": "void push_back(const T & value +intent(in))",
                                "have_template_args": true,
                                "name": "push_back",
                                "options": {},
                                "wrap": {},
                                "zz_fmtdict": {
                                    "C_name_api": "push_back",
                                    "F_name_api": "push_back",
                                    "function_name": "push_back"
                                }
                            },
                            {
                                "<FUNCTION>": "push_back  36 ****************************************",
                                "_generated": "cxx_template",
                                "_generated_path": [
                                    "cxx_template"
                                ],
                                "_orig_node_index": 24,
                                "ast": {
                                    "declarator": {
                                        "metaattrs": {
                                            "intent": "subroutine"
                                        },
                                        "name": "push_back",
                                        "params": [
                                            {
                                                "const": true,
                                                "declarator": {
                                                    "attrs": {
                                                        "intent": "in"
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "name": "value",
                                                    "pointer": [
                                                        {
                                                            "ptr": "&"
                                                        }
                                                    ]
                                                },
                                                "specifier": [
                                                    "double"
                                                ],
                                                "template_argument": "T",
                                                "typemap_name": "double"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void push_back( const T& value+intent(in) )",
                                "declgen": "void push_back(const double & value +intent(in))",
                                "have_template_args": true,
                                "name": "push_back",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "c_subroutine"
                                        },
                                        "value": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_&"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "intent": "subroutine"
                                            },
                                            "stmt": "f_subroutine"
                                        },
                                        "value": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_&"
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "SH_this->push_back(\t*value)",
                                            "C_call_list": "*value",
                                            "C_name": "TEM_vector_double_push_back",
                                            "C_prototype": "TEM_vector_double * self,\t const double * value",
                                            "C_return_type": "void",
                                            "F_C_name": "c_vector_double_push_back",
                                            "stmt_name": "c_subroutine"
                                        },
                                        "fmtf": {
                                            "C_call_function": "SH_this->push_back(\t*value)",
                                            "C_call_list": "*value",
                                            "C_name": "TEM_vector_double_push_back",
                                            "C_prototype": "TEM_vector_double * self,\t const double * value",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self,\t value",
                                            "F_C_call": "c_vector_double_push_back",
                                            "F_C_name": "c_vector_double_push_back",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "obj%cxxmem,\t value",
                                            "F_arguments": "obj,\t value",
                                            "F_subprogram": "subroutine",
                                            "stmt_name": "f_subroutine"
                                        }
                                    },
                                    "value": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "double",
                                            "c_var": "value",
                                            "cfi_type": "CFI_type_double",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<double *>\t(&value)",
                                            "cxx_type": "double",
                                            "cxx_var": "value",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt_name": "c_in_native_&"
                                        },
                                        "fmtf": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_type": "double",
                                            "c_var": "value",
                                            "cfi_type": "CFI_type_double",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<double *>\t(&value)",
                                            "cxx_type": "double",
                                            "cxx_var": "value",
                                            "f_intent": "IN",
                                            "f_kind": "C_DOUBLE",
                                            "f_type": "real(C_DOUBLE)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "value",
                                            "fc_var": "value",
                                            "i_var": "value",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt_name": "f_in_native_&"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "const ",
                                            "c_deref": "",
                                            "c_type": "double",
                                            "c_var": "value",
                                            "ctor_expr": "value",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<double *>\t(&value)",
                                            "cxx_type": "double",
                                            "cxx_var": "value",
                                            "data_var": "SHData_value",
                                            "numpy_type": "NPY_DOUBLE",
                                            "py_var": "SHPy_value",
                                            "size_var": "SHSize_value",
                                            "stmt": "py_in_native_&",
                                            "value_var": "SHValue_value"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "push_back",
                                    "F_name_api": "push_back",
                                    "F_name_function": "push_back",
                                    "F_name_generic": "push_back",
                                    "F_name_impl": "vector_double_push_back",
                                    "PY_name_impl": "PY_push_back",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "function_name": "push_back"
                                }
                            },
                            {
                                "<FUNCTION>": "at  35 ****************************************",
                                "_orig_node_index": 25,
                                "ast": {
                                    "declarator": {
                                        "metaattrs": {
                                            "deref": "pointer",
                                            "intent": "function"
                                        },
                                        "name": "at",
                                        "params": [
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "name": "n",
                                                    "typemap_name": "std::vector::size_type"
                                                },
                                                "specifier": [
                                                    "size_type"
                                                ],
                                                "typemap_name": "std::vector<double>::size_type"
                                            }
                                        ],
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "T"
                                    ],
                                    "template_argument": "T"
                                },
                                "decl": "T & at(size_type n)",
                                "declgen": "T & at(size_type n +value)",
                                "have_template_args": true,
                                "name": "at",
                                "options": {},
                                "wrap": {},
                                "zz_fmtdict": {
                                    "C_name_api": "at",
                                    "F_name_api": "at",
                                    "function_name": "at"
                                }
                            },
                            {
                                "<FUNCTION>": "at  37 ****************************************",
                                "_generated": "cxx_template",
                                "_generated_path": [
                                    "cxx_template"
                                ],
                                "_orig_node_index": 25,
                                "ast": {
                                    "declarator": {
                                        "metaattrs": {
                                            "deref": "pointer",
                                            "intent": "function"
                                        },
                                        "name": "at",
                                        "params": [
                                            {
                                                "declarator": {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "name": "n",
                                                    "typemap_name": "std::vector::size_type"
                                                },
                                                "specifier": [
                                                    "size_type"
                                                ],
                                                "typemap_name": "std::vector<double>::size_type"
                                            }
                                        ],
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "double"
                                    ],
                                    "template_argument": "T",
                                    "typemap_name": "double"
                                },
                                "decl": "T & at(size_type n)",
                                "declgen": "double & at(size_type n +value)",
                                "have_template_args": true,
                                "name": "at",
                                "options": {
                                    "F_create_generic": false
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "python": true
                                },
                                "zz_bind": {
                                    "c": {
                                        "+result": {
                                            "meta": {
                                                "intent": "function"
                                            },
                                            "stmt": "c_function_native_&"
                                        },
                                        "n": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "c_in_native_scalar"
                                        }
                                    },
                                    "f": {
                                        "+result": {
                                            "meta": {
                                                "deref": "pointer",
                                                "intent": "function"
                                            },
                                            "stmt": "f_function_native_&_pointer"
                                        },
                                        "n": {
                                            "meta": {
                                                "intent": "in"
                                            },
                                            "stmt": "f_in_native_scalar"
                                        }
                                    }
                                },
                                "zz_fmtargs": {
                                    "+result": {
                                        "fmtc": {
                                            "C_call_function": "SH_this->at(\tn)",
                                            "C_call_list": "n",
                                            "C_name": "TEM_vector_double_at",
                                            "C_prototype": "TEM_vector_double * self,\t TEM_vector_double_size_type n",
                                            "C_return_type": "double *",
                                            "F_C_arguments": "self,\t n",
                                            "F_C_name": "c_vector_double_at",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "c_const": "",
                                            "c_get_value": "&",
                                            "c_type": "double",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_double",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHC_rv",
                                            "cxx_rv_decl": "double & SHC_rv",
                                            "cxx_type": "double",
                                            "cxx_var": "SHC_rv",
                                            "f_intent": "OUT",
                                            "f_kind": "C_DOUBLE",
                                            "f_type": "real(C_DOUBLE)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "SHT_rv",
                                            "i_var": "SHT_rv",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt_name": "c_function_native_&"
                                        },
                                        "fmtf": {
                                            "C_call_function": "SH_this->at(\tn)",
                                            "C_call_list": "n",
                                            "C_name": "TEM_vector_double_at_bufferify",
                                            "C_prototype": "TEM_vector_double * self,\t TEM_vector_double_size_type n",
                                            "C_return_type": "double *",
                                            "F_C_arguments": "self,\t n",
                                            "F_C_call": "c_vector_double_at_bufferify",
                                            "F_C_name": "c_vector_double_at_bufferify",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_arg_c_call": "obj%cxxmem,\t n",
                                            "F_arguments": "obj,\t n",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "c_const": "",
                                            "c_get_value": "&",
                                            "c_type": "double",
                                            "c_var": "SHC_rv",
                                            "cfi_type": "CFI_type_double",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHC_rv",
                                            "cxx_rv_decl": "double & SHC_rv",
                                            "cxx_type": "double",
                                            "cxx_var": "SHC_rv",
                                            "f_c_suffix": "_bufferify",
                                            "f_intent": "OUT",
                                            "f_kind": "C_DOUBLE",
                                            "f_local_ptr": "SHC_rv_ptr",
                                            "f_type": "real(C_DOUBLE)",
                                            "f_type_module": "iso_c_binding",
                                            "f_var": "SHT_rv",
                                            "fc_var": "SHT_rv",
                                            "i_var": "SHT_rv",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt_name": "f_function_native_&_pointer"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_deref": "",
                                            "c_var": "SHCXX_rv",
                                            "ctor_expr": "SHCXX_rv",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHCXX_rv",
                                            "cxx_type": "double",
                                            "cxx_var": "SHCXX_rv",
                                            "data_var": "SHData_rv",
                                            "numpy_type": "NPY_DOUBLE",
                                            "py_var": "SHTPy_rv",
                                            "size_var": "SHSize_rv",
                                            "stmt": "py_function_native_&_pointer_numpy",
                                            "value_var": "SHValue_rv"
                                        }
                                    },
                                    "n": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "TEM_vector_double_size_type",
                                            "c_var": "n",
                                            "cfi_type": "CFI_type_size_t",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&n",
                                            "cxx_type": "std::vector<double>::size_type",
                                            "cxx_var": "n",
                                            "f_intent": "IN",
                                            "f_kind": "vector_double_size_type",
                                            "f_type": "integer(vector_double_size_type)",
                                            "f_type_module": "templates_std_mod",
                                            "f_var": "n",
                                            "i_var": "n",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_SIZE_T",
                                            "stmt_name": "c_in_native_scalar"
                                        },
                                        "fmtf": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_type": "TEM_vector_double_size_type",
                                            "c_var": "n",
                                            "cfi_type": "CFI_type_size_t",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&n",
                                            "cxx_type": "std::vector<double>::size_type",
                                            "cxx_var": "n",
                                            "f_intent": "IN",
                                            "f_kind": "vector_double_size_type",
                                            "f_type": "integer(vector_double_size_type)",
                                            "f_type_module": "templates_std_mod",
                                            "f_var": "n",
                                            "fc_var": "n",
                                            "i_var": "n",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_SIZE_T",
                                            "stmt_name": "f_in_native_scalar"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "TEM_vector_double_size_type",
                                            "c_var": "n",
                                            "ctor_expr": "n",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&n",
                                            "cxx_type": "std::vector<double>::size_type",
                                            "cxx_var": "n",
                                            "data_var": "SHData_n",
                                            "numpy_type": null,
                                            "py_var": "SHPy_n",
                                            "size_var": "SHSize_n",
                                            "stmt": "py_in_native_scalar",
                                            "value_var": "SHValue_n"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_name_api": "at",
                                    "F_name_api": "at",
                                    "F_name_function": "at",
                                    "F_name_generic": "at",
                                    "F_name_impl": "vector_double_at",
                                    "PY_name_impl": "PY_at",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "function_name": "at"
                                }
                            }
                        ],
                        "name": "vector",
                        "name_api": "vector_double",
                        "name_instantiation": "vector<double>",
                        "options": {},
                        "parse_keyword": "class",
                        "scope": "std::vector::",
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "fmtdict": {
                                    "C_impl_filename": "wrapvectorforint.cpp",
                                    "fmtsample": "one"
                                },
                                "instantiation": "<int>",
                                "options": {
                                    "optsample": "two"
                                }
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            }
                        ],
                        "template_parameters": [
                            "T"
                        ],
                        "typedef_map": [
                            [
                                "std::vector::size_type",
                                "std::vector<double>::size_type"
                            ]
                        ],
                        "typemap_name": "std::vector_double",
                        "user_fmt": {
                            "fmtsample": "original"
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapstd_vector_double.h",
                            "C_impl_filename": "wrapstd_vector_double.cpp",
                            "C_name_api": "vector_double",
                            "C_name_scope": "vector_double_",
                            "C_type_name": "TEM_vector_double",
                            "F_derived_name": "vector_double",
                            "F_name_api": "vector_double",
                            "F_name_scope": "vector_double_",
                            "PY_PyObject": "PY_vector_double",
                            "PY_PyTypeObject": "PY_vector_double_Type",
                            "PY_capsule_name": "PY_vector_double_capsule_name",
                            "PY_from_object_func": "PP_vector_double_from_Object",
                            "PY_this_call": "self->obj->",
                            "PY_to_object_func": "PP_vector_double_to_Object",
                            "PY_to_object_idtor_func": "PP_vector_double_to_Object_idtor",
                            "PY_type_filename": "pystd_vector_doubletype.cpp",
                            "class_scope": "vector<double>::",
                            "cxx_class": "vector_double",
                            "cxx_type": "vector<double>",
                            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
                            "f_helper_capsule_data_helper": "TEM_SHROUD_capsule_data",
                            "file_scope": "std_vector_double",
                            "fmtsample": "original"
                        }
                    }
                ],
                "name": "std",
                "options": {},
                "scope": "std::",
                "scope_file": [
                    "templates",
                    "std"
                ],
                "user_fmt": {
                    "C_name_api": "",
                    "PY_module_scope": "templates"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "std::",
                    "C_header_filename": "wraptemplates_std.h",
                    "C_impl_filename": "wraptemplates_std.cpp",
                    "C_name_api": "",
                    "F_impl_filename": "wrapftemplates_std.f",
                    "F_module_name": "templates_std_mod",
                    "F_name_api": "std",
                    "LUA_this_call": "std::",
                    "PY_library_doc": "library documentation",
                    "PY_module_filename": "pytemplates_stdmodule.cpp",
                    "PY_module_init": "templates_std",
                    "PY_module_name": "std",
                    "PY_module_scope": "templates",
                    "PY_this_call": "std::",
                    "file_scope": "templates_std",
                    "namespace_scope": "std::"
                }
            },
            {
                "<NAMESPACE>": "internal ****************************************",
                "classes": [
                    {
                        "<CLASS>": "ImplWorker1 ****************************************",
                        "cxx_header": [
                            "implworker1.hpp"
                        ],
                        "name": "ImplWorker1",
                        "options": {
                            "wrap_fortran": false
                        },
                        "parse_keyword": "class",
                        "scope": "internal::ImplWorker1::",
                        "typemap_name": "internal::ImplWorker1",
                        "wrap": {
                            "c": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapinternal_ImplWorker1.h",
                            "C_impl_filename": "wrapinternal_ImplWorker1.cpp",
                            "C_name_api": "ImplWorker1",
                            "C_name_scope": "internal_ImplWorker1_",
                            "C_type_name": "TEM_internal_ImplWorker1",
                            "F_derived_name": "impl_worker1",
                            "F_name_api": "impl_worker1",
                            "F_name_scope": "impl_worker1_",
                            "PY_PyObject": "PY_ImplWorker1",
                            "PY_PyTypeObject": "PY_ImplWorker1_Type",
                            "PY_capsule_name": "PY_ImplWorker1_capsule_name",
                            "PY_from_object_func": "PP_ImplWorker1_from_Object",
                            "PY_this_call": "self->obj->",
                            "PY_to_object_func": "PP_ImplWorker1_to_Object",
                            "PY_to_object_idtor_func": "PP_ImplWorker1_to_Object_idtor",
                            "PY_type_filename": "pyinternal_ImplWorker1type.cpp",
                            "class_scope": "ImplWorker1::",
                            "cxx_class": "ImplWorker1",
                            "cxx_type": "ImplWorker1",
                            "file_scope": "internal_ImplWorker1"
                        }
                    },
                    {
                        "<CLASS>": "ImplWorker2 ****************************************",
                        "cxx_header": [
                            "implworker2.hpp"
                        ],
                        "name": "ImplWorker2",
                        "options": {
                            "wrap_fortran": false
                        },
                        "parse_keyword": "class",
                        "scope": "internal::ImplWorker2::",
                        "typemap_name": "internal::ImplWorker2",
                        "wrap": {
                            "c": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapinternal_ImplWorker2.h",
                            "C_impl_filename": "wrapinternal_ImplWorker2.cpp",
                            "C_name_api": "ImplWorker2",
                            "C_name_scope": "internal_ImplWorker2_",
                            "C_type_name": "TEM_internal_ImplWorker2",
                            "F_derived_name": "impl_worker2",
                            "F_name_api": "impl_worker2",
                            "F_name_scope": "impl_worker2_",
                            "PY_PyObject": "PY_ImplWorker2",
                            "PY_PyTypeObject": "PY_ImplWorker2_Type",
                            "PY_capsule_name": "PY_ImplWorker2_capsule_name",
                            "PY_from_object_func": "PP_ImplWorker2_from_Object",
                            "PY_this_call": "self->obj->",
                            "PY_to_object_func": "PP_ImplWorker2_to_Object",
                            "PY_to_object_idtor_func": "PP_ImplWorker2_to_Object_idtor",
                            "PY_type_filename": "pyinternal_ImplWorker2type.cpp",
                            "class_scope": "ImplWorker2::",
                            "cxx_class": "ImplWorker2",
                            "cxx_type": "ImplWorker2",
                            "file_scope": "internal_ImplWorker2"
                        }
                    }
                ],
                "name": "internal",
                "options": {},
                "scope": "internal::",
                "scope_file": [
                    "templates",
                    "internal"
                ],
                "user_fmt": {
                    "PY_module_scope": "templates"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "internal::",
                    "C_header_filename": "wraptemplates_internal.h",
                    "C_impl_filename": "wraptemplates_internal.cpp",
                    "C_name_api": "internal",
                    "C_name_scope": "internal_",
                    "F_impl_filename": "wrapftemplates_internal.f",
                    "F_module_name": "templates_internal_mod",
                    "F_name_api": "internal",
                    "LUA_this_call": "internal::",
                    "PY_library_doc": "library documentation",
                    "PY_module_filename": "pytemplates_internalmodule.cpp",
                    "PY_module_init": "templates_internal",
                    "PY_module_name": "internal",
                    "PY_module_scope": "templates",
                    "PY_this_call": "internal::",
                    "file_scope": "templates_internal",
                    "namespace_scope": "internal::"
                }
            }
        ],
        "scope_file": [
            "templates"
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "python": true
        }
    },
    "symtab": {
        "Worker": "Worker",
        "internal": {
            "ImplWorker1": "internal::ImplWorker1",
            "ImplWorker2": "internal::ImplWorker2"
        },
        "std": {
            "vector": "std::vector"
        },
        "structAsClass": "structAsClass",
        "user": "user"
    },
    "types": {
        "Worker": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Worker",
            "PY_PyTypeObject": "PY_Worker_Type",
            "PY_from_object": "PP_Worker_from_Object",
            "PY_to_object": "PP_Worker_to_Object",
            "PY_to_object_idtor": "PP_Worker_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}Worker *>\t({c_var}->addr)",
            "c_type": "TEM_Worker",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "Worker",
            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
            "f_class": "class(worker)",
            "f_derived_type": "worker",
            "f_module": {
                "templates_mod": [
                    "worker"
                ]
            },
            "f_module_name": "templates_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(worker)",
            "flat_name": "Worker",
            "i_module": {
                "templates_mod": [
                    "TEM_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TEM_SHROUD_capsule_data)",
            "impl_header": [
                "templates.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestemplates.h"
            ]
        },
        "internal::ImplWorker1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_ImplWorker1",
            "PY_PyTypeObject": "PY_ImplWorker1_Type",
            "PY_from_object": "PP_ImplWorker1_from_Object",
            "PY_to_object": "PP_ImplWorker1_to_Object",
            "PY_to_object_idtor": "PP_ImplWorker1_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}internal::ImplWorker1 *>\t({c_var}->addr)",
            "c_type": "TEM_internal_ImplWorker1",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "internal::ImplWorker1",
            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
            "f_class": "class(impl_worker1)",
            "f_derived_type": "impl_worker1",
            "f_module": {
                "templates_internal_mod": [
                    "impl_worker1"
                ]
            },
            "f_module_name": "templates_internal_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(impl_worker1)",
            "flat_name": "internal_ImplWorker1",
            "i_module": {
                "templates_internal_mod": [
                    "TEM_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TEM_SHROUD_capsule_data)",
            "impl_header": [
                "implworker1.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestemplates.h"
            ]
        },
        "internal::ImplWorker2": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_ImplWorker2",
            "PY_PyTypeObject": "PY_ImplWorker2_Type",
            "PY_from_object": "PP_ImplWorker2_from_Object",
            "PY_to_object": "PP_ImplWorker2_to_Object",
            "PY_to_object_idtor": "PP_ImplWorker2_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}internal::ImplWorker2 *>\t({c_var}->addr)",
            "c_type": "TEM_internal_ImplWorker2",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "internal::ImplWorker2",
            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
            "f_class": "class(impl_worker2)",
            "f_derived_type": "impl_worker2",
            "f_module": {
                "templates_internal_mod": [
                    "impl_worker2"
                ]
            },
            "f_module_name": "templates_internal_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(impl_worker2)",
            "flat_name": "internal_ImplWorker2",
            "i_module": {
                "templates_internal_mod": [
                    "TEM_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TEM_SHROUD_capsule_data)",
            "impl_header": [
                "implworker2.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestemplates.h"
            ]
        },
        "std::vector": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}std::vector *>\t({c_var}->addr)",
            "c_type": "TEM_vector",
            "cxx_instantiation": {
                "<double>": "std::vector_double",
                "<int>": "std::vector_int"
            },
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector",
            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
            "f_class": "class(vector)",
            "f_derived_type": "vector",
            "f_module": {
                "templates_std_mod": [
                    "vector"
                ]
            },
            "f_module_name": "templates_std_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(vector)",
            "flat_name": "std_vector",
            "i_module": {
                "templates_std_mod": [
                    "TEM_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TEM_SHROUD_capsule_data)",
            "impl_header": [
                "<vector>"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestemplates.h"
            ]
        },
        "std::vector::size_type": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PY_ctor": "PyInt_FromSize_t({ctor_expr})",
            "PY_format": "n",
            "base": "integer",
            "c_header": [
                "<stddef.h>"
            ],
            "c_type": "TEM_vector_size_type",
            "cfi_type": "CFI_type_size_t",
            "cxx_header": [
                "<cstddef>"
            ],
            "cxx_type": "std::vector::size_type",
            "f_cast": "int({f_var}, C_SIZE_T)",
            "f_kind": "vector_size_type",
            "f_module": {
                "templates_std_mod": [
                    "vector_size_type"
                ]
            },
            "f_module_name": "templates_std_mod",
            "f_type": "integer(vector_size_type)",
            "flat_name": "size_t",
            "i_module": {
                "templates_std_mod": [
                    "vector_size_type"
                ]
            },
            "sgroup": "native",
            "sh_type": "SH_TYPE_SIZE_T",
            "typedef": "size_t",
            "wrap_header": [
                "wrapstd_vector.h"
            ]
        },
        "std::vector<double>::size_type": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PY_ctor": "PyInt_FromSize_t({ctor_expr})",
            "PY_format": "n",
            "base": "integer",
            "c_header": [
                "<stddef.h>"
            ],
            "c_type": "TEM_vector_double_size_type",
            "cfi_type": "CFI_type_size_t",
            "cxx_header": [
                "<cstddef>"
            ],
            "cxx_type": "std::vector<double>::size_type",
            "f_cast": "int({f_var}, C_SIZE_T)",
            "f_kind": "vector_double_size_type",
            "f_module": {
                "templates_std_mod": [
                    "vector_double_size_type"
                ]
            },
            "f_module_name": "templates_std_mod",
            "f_type": "integer(vector_double_size_type)",
            "flat_name": "size_t",
            "i_module": {
                "templates_std_mod": [
                    "vector_double_size_type"
                ]
            },
            "sgroup": "native",
            "sh_type": "SH_TYPE_SIZE_T",
            "typedef": "size_t",
            "wrap_header": [
                "wrapstd_vector_double.h"
            ]
        },
        "std::vector<int>::size_type": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PY_ctor": "PyInt_FromSize_t({ctor_expr})",
            "PY_format": "n",
            "base": "integer",
            "c_header": [
                "<stddef.h>"
            ],
            "c_type": "TEM_vector_int_size_type",
            "cfi_type": "CFI_type_size_t",
            "cxx_header": [
                "<cstddef>"
            ],
            "cxx_type": "std::vector<int>::size_type",
            "f_cast": "int({f_var}, C_SIZE_T)",
            "f_kind": "vector_int_size_type",
            "f_module": {
                "templates_std_mod": [
                    "vector_int_size_type"
                ]
            },
            "f_module_name": "templates_std_mod",
            "f_type": "integer(vector_int_size_type)",
            "flat_name": "size_t",
            "i_module": {
                "templates_std_mod": [
                    "vector_int_size_type"
                ]
            },
            "sgroup": "native",
            "sh_type": "SH_TYPE_SIZE_T",
            "typedef": "size_t",
            "wrap_header": [
                "wrapstd_vector_int.h"
            ]
        },
        "std::vector_double": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_vector_double",
            "PY_PyTypeObject": "PY_vector_double_Type",
            "PY_from_object": "PP_vector_double_from_Object",
            "PY_to_object": "PP_vector_double_to_Object",
            "PY_to_object_idtor": "PP_vector_double_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}std::vector<double> *>\t({c_var}->addr)",
            "c_type": "TEM_vector_double",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector<double>",
            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
            "f_class": "class(vector_double)",
            "f_derived_type": "vector_double",
            "f_module": {
                "templates_std_mod": [
                    "vector_double"
                ]
            },
            "f_module_name": "templates_std_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(vector_double)",
            "flat_name": "std_vector_double",
            "i_module": {
                "templates_std_mod": [
                    "TEM_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TEM_SHROUD_capsule_data)",
            "idtor": "2",
            "impl_header": [
                "<vector>"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestemplates.h"
            ]
        },
        "std::vector_int": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_vector_int",
            "PY_PyTypeObject": "PY_vector_int_Type",
            "PY_from_object": "PP_vector_int_from_Object",
            "PY_to_object": "PP_vector_int_to_Object",
            "PY_to_object_idtor": "PP_vector_int_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}std::vector<int> *>\t({c_var}->addr)",
            "c_type": "TEM_vector_int",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector<int>",
            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
            "f_class": "class(vector_int)",
            "f_derived_type": "vector_int",
            "f_module": {
                "templates_std_mod": [
                    "vector_int"
                ]
            },
            "f_module_name": "templates_std_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(vector_int)",
            "flat_name": "std_vector_int",
            "i_module": {
                "templates_std_mod": [
                    "TEM_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TEM_SHROUD_capsule_data)",
            "idtor": "1",
            "impl_header": [
                "<vector>"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestemplates.h"
            ]
        },
        "structAsClass": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}structAsClass *>\t({c_var}->addr)",
            "c_type": "TEM_structAsClass",
            "cxx_instantiation": {
                "<double>": "structAsClass_double",
                "<int>": "structAsClass_int"
            },
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "structAsClass",
            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
            "f_class": "class(struct_as_class)",
            "f_derived_type": "struct_as_class",
            "f_module": {
                "templates_mod": [
                    "struct_as_class"
                ]
            },
            "f_module_name": "templates_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(struct_as_class)",
            "flat_name": "structAsClass",
            "i_module": {
                "templates_mod": [
                    "TEM_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TEM_SHROUD_capsule_data)",
            "impl_header": [
                "templates.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestemplates.h"
            ]
        },
        "structAsClass_double": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}structAsClass<double> *>\t({c_var}->addr)",
            "c_type": "TEM_structAsClass_double",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "structAsClass<double>",
            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
            "f_class": "class(struct_as_class_double)",
            "f_derived_type": "struct_as_class_double",
            "f_module": {
                "templates_mod": [
                    "struct_as_class_double"
                ]
            },
            "f_module_name": "templates_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(struct_as_class_double)",
            "flat_name": "structAsClass_double",
            "i_module": {
                "templates_mod": [
                    "TEM_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TEM_SHROUD_capsule_data)",
            "idtor": "4",
            "impl_header": [
                "templates.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestemplates.h"
            ]
        },
        "structAsClass_int": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}structAsClass<int> *>\t({c_var}->addr)",
            "c_type": "TEM_structAsClass_int",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "structAsClass<int>",
            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
            "f_class": "class(struct_as_class_int)",
            "f_derived_type": "struct_as_class_int",
            "f_module": {
                "templates_mod": [
                    "struct_as_class_int"
                ]
            },
            "f_module_name": "templates_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(struct_as_class_int)",
            "flat_name": "structAsClass_int",
            "i_module": {
                "templates_mod": [
                    "TEM_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TEM_SHROUD_capsule_data)",
            "idtor": "3",
            "impl_header": [
                "templates.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestemplates.h"
            ]
        },
        "user": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}user *>\t({c_var}->addr)",
            "c_type": "TEM_user",
            "cxx_instantiation": {
                "<int>": "user_int"
            },
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "user",
            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
            "f_class": "class(user)",
            "f_derived_type": "user",
            "f_module": {
                "templates_mod": [
                    "user"
                ]
            },
            "f_module_name": "templates_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(user)",
            "flat_name": "user",
            "i_module": {
                "templates_mod": [
                    "TEM_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TEM_SHROUD_capsule_data)",
            "impl_header": [
                "templates.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestemplates.h"
            ]
        },
        "user_int": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_user_int",
            "PY_PyTypeObject": "PY_user_int_Type",
            "PY_from_object": "PP_user_int_from_Object",
            "PY_to_object": "PP_user_int_to_Object",
            "PY_to_object_idtor": "PP_user_int_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}user<int> *>\t({c_var}->addr)",
            "c_type": "TEM_user_int",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "user<int>",
            "f_capsule_data_type": "TEM_SHROUD_capsule_data",
            "f_class": "class(user_int)",
            "f_derived_type": "user_int",
            "f_module": {
                "templates_mod": [
                    "user_int"
                ]
            },
            "f_module_name": "templates_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(user_int)",
            "flat_name": "user_int",
            "i_module": {
                "templates_mod": [
                    "TEM_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TEM_SHROUD_capsule_data)",
            "idtor": "5",
            "impl_header": [
                "templates.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestemplates.h"
            ]
        }
    }
}