{
    "__NOTICE__": "This file is generated by Shroud 0.11.0 and is useful for debugging.",
    "library": {
        "classes": [
            {
                "cxx_header": [],
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapWorker.h",
                    "C_impl_filename": "wrapWorker.cpp",
                    "C_name_scope": "Worker_",
                    "C_type_name": "TEM_Worker",
                    "F_capsule_data_type": "SHROUD_worker_capsule",
                    "F_derived_name": "worker",
                    "F_name_scope": "worker_",
                    "PY_PyObject": "PY_Worker",
                    "PY_PyTypeObject": "PY_Worker_Type",
                    "PY_capsule_name": "PY_Worker_capsule_name",
                    "PY_from_object_func": "PP_Worker_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Worker_to_Object",
                    "PY_to_object_idtor_func": "PP_Worker_to_Object_idtor",
                    "PY_type_filename": "pyWorkertype.cpp",
                    "class_scope": "Worker::",
                    "cxx_class": "Worker",
                    "cxx_type": "Worker",
                    "file_scope": "Worker"
                },
                "name": "Worker",
                "options": {},
                "scope": "Worker::",
                "typemap_name": "Worker"
            },
            {
                "cxx_header": [],
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapuser_int.h",
                    "C_impl_filename": "wrapuser_int.cpp",
                    "C_name_scope": "user_int_",
                    "C_type_name": "TEM_user_int",
                    "F_capsule_data_type": "SHROUD_user_int_capsule",
                    "F_derived_name": "user_int",
                    "F_name_scope": "user_int_",
                    "PY_PyObject": "PY_user_int",
                    "PY_PyTypeObject": "PY_user_int_Type",
                    "PY_capsule_name": "PY_user_int_capsule_name",
                    "PY_from_object_func": "PP_user_int_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_user_int_to_Object",
                    "PY_to_object_idtor_func": "PP_user_int_to_Object_idtor",
                    "PY_type_filename": "pyuser_inttype.cpp",
                    "class_scope": "user_int::",
                    "cxx_class": "user_int",
                    "cxx_type": "user<int>",
                    "file_scope": "user_int"
                },
                "functions": [
                    {
                        "_overloaded": true,
                        "ast": {
                            "declarator": {
                                "name": "nested",
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "arg1",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "T"
                                    ],
                                    "typemap_name": "user::T"
                                },
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "arg2",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "U"
                                    ],
                                    "typemap_name": "U"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "cxx_template": {
                            "U": [
                                "double"
                            ]
                        },
                        "decl": "template<U> void nested( T arg1, U arg2 );",
                        "declgen": "void nested(T arg1 +intent(in)+value, U arg2 +intent(in)+value)",
                        "fmtdict": {
                            "function_name": "nested",
                            "underscore_name": "nested"
                        },
                        "have_template_args": true,
                        "options": {
                            "wrap_c": false,
                            "wrap_fortran": false,
                            "wrap_lua": false,
                            "wrap_python": false
                        },
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            }
                        ],
                        "template_parameters": [
                            "U"
                        ]
                    },
                    {
                        "_fmtargs": {
                            "arg1": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "arg1",
                                    "capsule_addr": "base",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_type": "int",
                                    "cxx_var": "arg1",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_native_scalar_in",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_pointer": "SHPTR_arg1",
                                    "c_var": "arg1",
                                    "f_intent": "IN",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "arg1",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "f_native_scalar_in",
                                    "stmt1": "f_default",
                                    "stmtc0": "c_native_scalar_in",
                                    "stmtc1": "c_default"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_decl": "int arg1",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "arg1",
                                    "cxx_addr": "&",
                                    "cxx_decl": "int arg1",
                                    "cxx_member": ".",
                                    "cxx_type": "int",
                                    "cxx_var": "arg1",
                                    "data_var": "SHData_arg1",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_arg1",
                                    "size_var": "SHSize_arg1",
                                    "stmt0": "py_native_scalar_in",
                                    "stmt1": "py_default"
                                }
                            },
                            "arg2": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "arg2",
                                    "capsule_addr": "base",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_type": "double",
                                    "cxx_var": "arg2",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt0": "c_native_scalar_in",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_pointer": "SHPTR_arg2",
                                    "c_var": "arg2",
                                    "f_intent": "IN",
                                    "f_type": "real(C_DOUBLE)",
                                    "f_var": "arg2",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt0": "f_native_scalar_in",
                                    "stmt1": "f_default",
                                    "stmtc0": "c_native_scalar_in",
                                    "stmtc1": "c_default"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_decl": "double arg2",
                                    "c_deref": "",
                                    "c_type": "double",
                                    "c_var": "arg2",
                                    "cxx_addr": "&",
                                    "cxx_decl": "double arg2",
                                    "cxx_member": ".",
                                    "cxx_type": "double",
                                    "cxx_var": "arg2",
                                    "data_var": "SHData_arg2",
                                    "numpy_type": "NPY_DOUBLE",
                                    "py_var": "SHPy_arg2",
                                    "size_var": "SHSize_arg2",
                                    "stmt0": "py_native_scalar_in",
                                    "stmt1": "py_default"
                                }
                            }
                        },
                        "_generated": "cxx_template",
                        "_overloaded": true,
                        "ast": {
                            "declarator": {
                                "name": "nested",
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "arg1",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                },
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "arg2",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "double"
                                    ],
                                    "typemap_name": "double"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "template<U> void nested( T arg1, U arg2 );",
                        "declgen": "void nested(int arg1 +intent(in)+value, double arg2 +intent(in)+value)",
                        "fmtdict": {
                            "CXX_template": "<double>",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "TEM_user_int_nested_double",
                            "C_prototype": "TEM_user_int * self,\t int arg1,\t double arg2",
                            "C_return_type": "void",
                            "F_C_call": "c_user_int_nested_double",
                            "F_C_name": "c_user_int_nested_double",
                            "F_arg_c_call": "obj%cxxmem,\t arg1,\t arg2",
                            "F_arguments": "obj,\t arg1,\t arg2",
                            "F_name_function": "nested_double",
                            "F_name_generic": "nested",
                            "F_name_impl": "user_int_nested_double",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_nested_double",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "capsule_addr": "base",
                            "function_name": "nested",
                            "stmt0": "f_subroutine",
                            "stmt1": "f_default",
                            "stmtc0": "c",
                            "stmtc1": "c_default",
                            "template_suffix": "_double",
                            "underscore_name": "nested"
                        },
                        "gen_headers_typedef": [
                            "double"
                        ],
                        "have_template_args": true,
                        "options": {
                            "wrap_c": true,
                            "wrap_fortran": true,
                            "wrap_lua": false,
                            "wrap_python": true
                        },
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            }
                        ],
                        "template_parameters": [
                            "U"
                        ]
                    }
                ],
                "name": "user",
                "options": {},
                "scope": "user::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "typemap_name": "user_int"
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "templates.hpp"
        ],
        "functions": [
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FunctionTU",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "T"
                            ],
                            "typemap_name": "T"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "U"
                            ],
                            "typemap_name": "U"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "cxx_template": {
                    "T": [
                        "int",
                        "float"
                    ]
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(T arg1 +intent(in)+value, U arg2 +intent(in)+value)",
                "doxygen": {
                    "brief": "Function template with two template parameters."
                },
                "fmtdict": {
                    "function_name": "FunctionTU",
                    "underscore_name": "function_tu"
                },
                "have_template_args": true,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ]
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg1",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "int arg1",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arg2",
                            "c_var": "arg2",
                            "f_intent": "IN",
                            "f_type": "integer(C_LONG)",
                            "f_var": "arg2",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "long arg2",
                            "c_deref": "",
                            "c_type": "long",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "long arg2",
                            "cxx_member": ".",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_LONG",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FunctionTU",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "long"
                            ],
                            "typemap_name": "long"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(int arg1 +intent(in)+value, long arg2 +intent(in)+value)",
                "doxygen": {
                    "brief": "Function template with two template parameters."
                },
                "fmtdict": {
                    "CXX_template": "<int, long>",
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "TEM_function_tu_0",
                    "C_prototype": "int arg1,\t long arg2",
                    "C_return_type": "void",
                    "F_C_call": "c_function_tu_0",
                    "F_C_name": "c_function_tu_0",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "function_tu_0",
                    "F_name_generic": "function_tu",
                    "F_name_impl": "function_tu_0",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_FunctionTU_0",
                    "function_name": "FunctionTU",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "template_suffix": "_0",
                    "underscore_name": "function_tu"
                },
                "have_template_args": true,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ]
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "float",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "IN",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "float arg1",
                            "c_deref": "",
                            "c_type": "float",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "float arg1",
                            "cxx_member": ".",
                            "cxx_type": "float",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_FLOAT",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arg2",
                            "c_var": "arg2",
                            "f_intent": "IN",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg2",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double arg2",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "double arg2",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FunctionTU",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(float arg1 +intent(in)+value, double arg2 +intent(in)+value)",
                "doxygen": {
                    "brief": "Function template with two template parameters."
                },
                "fmtdict": {
                    "CXX_template": "<float, double>",
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "TEM_function_tu_1",
                    "C_prototype": "float arg1,\t double arg2",
                    "C_return_type": "void",
                    "F_C_call": "c_function_tu_1",
                    "F_C_name": "c_function_tu_1",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "function_tu_1",
                    "F_name_generic": "function_tu",
                    "F_name_impl": "function_tu_1",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_FunctionTU_1",
                    "function_name": "FunctionTU",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "template_suffix": "_1",
                    "underscore_name": "function_tu"
                },
                "gen_headers_typedef": [
                    "double",
                    "float",
                    "int",
                    "long"
                ],
                "have_template_args": true,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ]
            },
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseImplWorker",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "cxx_template": {
                    "T": [
                        "internal::ImplWorker1",
                        "internal::ImplWorker2"
                    ]
                },
                "decl": "template<typename T> int UseImplWorker()",
                "declgen": "int UseImplWorker()",
                "doxygen": {
                    "brief": "Function which uses a templated T in the implemetation."
                },
                "fmtdict": {
                    "function_name": "UseImplWorker",
                    "underscore_name": "use_impl_worker"
                },
                "options": {
                    "F_create_generic": false,
                    "PY_create_generic": false,
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker2"
                                ],
                                "typemap_name": "internal::ImplWorker2"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker2>"
                    }
                ],
                "template_parameters": [
                    "T"
                ]
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseImplWorker",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "template<typename T> int UseImplWorker()",
                "declgen": "int UseImplWorker()",
                "doxygen": {
                    "brief": "Function which uses a templated T in the implemetation."
                },
                "fmtdict": {
                    "CXX_template": "<internal::ImplWorker1>",
                    "C_name": "TEM_use_impl_worker_internal_ImplWorker1",
                    "C_prototype": "",
                    "C_return_type": "int",
                    "F_C_call": "c_use_impl_worker_internal_implworker1",
                    "F_C_name": "c_use_impl_worker_internal_implworker1",
                    "F_arguments": "",
                    "F_name_function": "use_impl_worker_internal_ImplWorker1",
                    "F_name_generic": "use_impl_worker",
                    "F_name_impl": "use_impl_worker_internal_ImplWorker1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_UseImplWorker_internal_ImplWorker1",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseImplWorker",
                    "template_suffix": "_internal_ImplWorker1",
                    "underscore_name": "use_impl_worker"
                },
                "options": {
                    "F_create_generic": false,
                    "PY_create_generic": false,
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker2"
                                ],
                                "typemap_name": "internal::ImplWorker2"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker2>"
                    }
                ],
                "template_parameters": [
                    "T"
                ]
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseImplWorker",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "template<typename T> int UseImplWorker()",
                "declgen": "int UseImplWorker()",
                "doxygen": {
                    "brief": "Function which uses a templated T in the implemetation."
                },
                "fmtdict": {
                    "CXX_template": "<internal::ImplWorker2>",
                    "C_name": "TEM_use_impl_worker_internal_ImplWorker2",
                    "C_prototype": "",
                    "C_return_type": "int",
                    "F_C_call": "c_use_impl_worker_internal_implworker2",
                    "F_C_name": "c_use_impl_worker_internal_implworker2",
                    "F_arguments": "",
                    "F_name_function": "use_impl_worker_internal_ImplWorker2",
                    "F_name_generic": "use_impl_worker",
                    "F_name_impl": "use_impl_worker_internal_ImplWorker2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_UseImplWorker_internal_ImplWorker2",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseImplWorker",
                    "template_suffix": "_internal_ImplWorker2",
                    "underscore_name": "use_impl_worker"
                },
                "gen_headers_typedef": [
                    "internal::ImplWorker1",
                    "internal::ImplWorker2"
                ],
                "options": {
                    "F_create_generic": false,
                    "PY_create_generic": false,
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker2"
                                ],
                                "typemap_name": "internal::ImplWorker2"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker2>"
                    }
                ],
                "template_parameters": [
                    "T"
                ]
            }
        ],
        "language": "cxx",
        "namespaces": [
            {
                "classes": [
                    {
                        "cxx_header": [
                            "<vector>"
                        ],
                        "fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapstd_vector_int.h",
                            "C_impl_filename": "wrapvectorforint.cpp",
                            "C_name_scope": "vector_int_",
                            "C_type_name": "TEM_vector_int",
                            "F_capsule_data_type": "SHROUD_vector_int_capsule",
                            "F_derived_name": "vector_int",
                            "F_name_scope": "vector_int_",
                            "PY_PyObject": "PY_vector_int",
                            "PY_PyTypeObject": "PY_vector_int_Type",
                            "PY_capsule_name": "PY_vector_int_capsule_name",
                            "PY_from_object_func": "PP_vector_int_from_Object",
                            "PY_this_call": "self->obj->",
                            "PY_to_object_func": "PP_vector_int_to_Object",
                            "PY_to_object_idtor_func": "PP_vector_int_to_Object_idtor",
                            "PY_type_filename": "pystd_vector_inttype.cpp",
                            "class_scope": "vector_int::",
                            "cxx_class": "vector_int",
                            "cxx_type": "vector<int>",
                            "file_scope": "std_vector_int",
                            "fmtsample": "one"
                        },
                        "functions": [
                            {
                                "_fmtresult": {
                                    "fmtc": {
                                        "c_const": "",
                                        "c_type": "TEM_vector_int",
                                        "c_var": "SHC_rv",
                                        "capsule_addr": "base",
                                        "cxx_addr": "",
                                        "cxx_member": "->",
                                        "cxx_type": "std::vector<int>",
                                        "cxx_var": "SHCXX_rv",
                                        "idtor": "0",
                                        "sh_type": "SH_TYPE_OTHER",
                                        "stmt0": "c_shadow_scalar_ctor",
                                        "stmt1": "c_shadow_scalar_ctor"
                                    },
                                    "fmtf": {
                                        "cxx_type": "std::vector<int>",
                                        "f_type": "type(vector_int)",
                                        "f_var": "SHT_rv",
                                        "sh_type": "SH_TYPE_OTHER",
                                        "stmt0": "f_shadow_ctor",
                                        "stmt1": "f_shadow_ctor",
                                        "stmtc0": "c_shadow_ctor",
                                        "stmtc1": "c_shadow_ctor"
                                    },
                                    "fmtpy": {
                                        "PY_build_format": "O",
                                        "PY_to_object_idtor_func": "PP_vector_int_to_Object_idtor",
                                        "PyObject": "PY_vector_int",
                                        "PyTypeObject": "PY_vector_int_Type",
                                        "c_deref": "",
                                        "c_var": "SHCXX_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_type": "std::vector<int>",
                                        "cxx_var": "SHCXX_rv",
                                        "data_var": "SHData_rv",
                                        "numpy_type": null,
                                        "py_var": "SHTPy_rv",
                                        "size_var": "SHSize_rv",
                                        "stmt0": "py_default",
                                        "stmt1": "py_default",
                                        "vargs": "SHCXX_rv"
                                    }
                                },
                                "ast": {
                                    "attrs": {
                                        "_constructor": true,
                                        "_name": "ctor"
                                    },
                                    "params": [],
                                    "specifier": [
                                        "vector"
                                    ],
                                    "typemap_name": "std::vector_int"
                                },
                                "decl": "vector()",
                                "declgen": "vector()",
                                "fmtdict": {
                                    "C_name": "TEM_vector_int_ctor",
                                    "C_prototype": "TEM_vector_int * SHC_rv",
                                    "C_return_type": "TEM_vector_int *",
                                    "F_C_call": "c_vector_int_ctor",
                                    "F_C_name": "c_vector_int_ctor",
                                    "F_arg_c_call": "SHT_rv%cxxmem",
                                    "F_arguments": "",
                                    "F_name_function": "ctor",
                                    "F_name_generic": "ctor",
                                    "F_name_impl": "vector_int_ctor",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "PY_name_impl": "PY_vector_int_tp_init",
                                    "PY_type_impl": "PY_vector_int_tp_init",
                                    "PY_type_method": "tp_init",
                                    "cxx_rv_decl": "std::vector<int> SHCXX_rv",
                                    "function_name": "ctor",
                                    "underscore_name": "ctor"
                                },
                                "options": {}
                            },
                            {
                                "ast": {
                                    "attrs": {
                                        "_destructor": true,
                                        "_name": "dtor"
                                    },
                                    "params": [],
                                    "specifier": [
                                        "vector"
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "decl": "~vector()",
                                "declgen": "~vector()",
                                "fmtdict": {
                                    "C_name": "TEM_vector_int_dtor",
                                    "C_prototype": "TEM_vector_int * self",
                                    "C_return_type": "void",
                                    "F_C_call": "c_vector_int_dtor",
                                    "F_C_name": "c_vector_int_dtor",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_name_function": "dtor",
                                    "F_name_generic": "dtor",
                                    "F_name_impl": "vector_int_dtor",
                                    "F_subprogram": "subroutine",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "capsule_addr": "base",
                                    "function_name": "dtor",
                                    "stmt0": "f_shadow_dtor",
                                    "stmt1": "f_default",
                                    "stmtc0": "c_shadow_dtor",
                                    "stmtc1": "c_shadow_dtor",
                                    "underscore_name": "dtor"
                                },
                                "options": {}
                            },
                            {
                                "ast": {
                                    "declarator": {
                                        "name": "push_back",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "intent": "in"
                                            },
                                            "const": true,
                                            "declarator": {
                                                "name": "value",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "specifier": [
                                                "T"
                                            ],
                                            "typemap_name": "std::vector::T"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void push_back( const T& value+intent(in) )",
                                "declgen": "void push_back(const T & value +intent(in))",
                                "fmtdict": {
                                    "function_name": "push_back",
                                    "underscore_name": "push_back"
                                },
                                "have_template_args": true,
                                "options": {
                                    "wrap_c": false,
                                    "wrap_fortran": false,
                                    "wrap_lua": false,
                                    "wrap_python": false
                                }
                            },
                            {
                                "_fmtargs": {
                                    "value": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "value",
                                            "capsule_addr": "cbase",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "value",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "c_native_&_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_pointer": "SHPTR_value",
                                            "c_var": "value",
                                            "f_intent": "IN",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "value",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_&_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_&_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtpy": {
                                            "c_const": "const ",
                                            "c_decl": "int value",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "value",
                                            "cxx_addr": "&",
                                            "cxx_decl": "int value",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "value",
                                            "data_var": "SHData_value",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_value",
                                            "size_var": "SHSize_value",
                                            "stmt0": "py_native_&_in",
                                            "stmt1": "py_default"
                                        }
                                    }
                                },
                                "_generated": "cxx_template",
                                "ast": {
                                    "declarator": {
                                        "name": "push_back",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "intent": "in"
                                            },
                                            "const": true,
                                            "declarator": {
                                                "name": "value",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void push_back( const T& value+intent(in) )",
                                "declgen": "void push_back(const int & value +intent(in))",
                                "fmtdict": {
                                    "C_call_list": "*value",
                                    "C_name": "TEM_vector_int_push_back",
                                    "C_prototype": "TEM_vector_int * self,\t const int * value",
                                    "C_return_type": "void",
                                    "F_C_call": "c_vector_int_push_back",
                                    "F_C_name": "c_vector_int_push_back",
                                    "F_arg_c_call": "obj%cxxmem,\t value",
                                    "F_arguments": "obj,\t value",
                                    "F_name_function": "push_back",
                                    "F_name_generic": "push_back",
                                    "F_name_impl": "vector_int_push_back",
                                    "F_subprogram": "subroutine",
                                    "PY_name_impl": "PY_push_back",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "capsule_addr": "base",
                                    "function_name": "push_back",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "push_back"
                                },
                                "have_template_args": true,
                                "options": {
                                    "wrap_c": true,
                                    "wrap_fortran": true,
                                    "wrap_lua": false,
                                    "wrap_python": true
                                }
                            },
                            {
                                "ast": {
                                    "declarator": {
                                        "name": "at",
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "intent": "in",
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "n",
                                                "pointer": []
                                            },
                                            "specifier": [
                                                "size_type"
                                            ],
                                            "typemap_name": "std::vector::size_type"
                                        }
                                    ],
                                    "return_pointer_as": "pointer",
                                    "specifier": [
                                        "T"
                                    ],
                                    "typemap_name": "std::vector::T"
                                },
                                "decl": "T & at(size_type n)",
                                "declgen": "T & at(size_type n +intent(in)+value)",
                                "fmtdict": {
                                    "function_name": "at",
                                    "underscore_name": "at"
                                },
                                "have_template_args": true,
                                "options": {
                                    "wrap_c": false,
                                    "wrap_fortran": false,
                                    "wrap_lua": false,
                                    "wrap_python": false
                                }
                            },
                            {
                                "_fmtargs": {
                                    "n": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "n",
                                            "capsule_addr": "base",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_type": "std::vector::size_type",
                                            "cxx_var": "n",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_SIZE_T",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_pointer": "SHPTR_n",
                                            "c_var": "n",
                                            "f_intent": "IN",
                                            "f_type": "integer(C_SIZE_T)",
                                            "f_var": "n",
                                            "sh_type": "SH_TYPE_SIZE_T",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_decl": "size_t n",
                                            "c_deref": "",
                                            "c_type": "size_t",
                                            "c_var": "n",
                                            "cxx_addr": "&",
                                            "cxx_decl": "std::vector::size_type n",
                                            "cxx_member": ".",
                                            "cxx_type": "std::vector::size_type",
                                            "cxx_var": "n",
                                            "data_var": "SHData_n",
                                            "numpy_type": null,
                                            "py_var": "SHPy_n",
                                            "size_var": "SHSize_n",
                                            "stmt0": "py_native_scalar_in",
                                            "stmt1": "py_default"
                                        }
                                    }
                                },
                                "_fmtresult": {
                                    "fmtc": {
                                        "c_const": "",
                                        "c_get_value": "&",
                                        "c_type": "int",
                                        "c_var": "SHC_rv",
                                        "capsule_addr": "base",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_type": "int",
                                        "cxx_var": "SHC_rv",
                                        "idtor": "0",
                                        "sh_type": "SH_TYPE_INT",
                                        "stmt0": "c_native_&_result",
                                        "stmt1": "c_default"
                                    },
                                    "fmtf": {
                                        "cxx_type": "int",
                                        "f_type": "integer(C_INT)",
                                        "f_var": "SHT_rv",
                                        "sh_type": "SH_TYPE_INT",
                                        "stmt0": "f_native_&_result",
                                        "stmt1": "f_native_&_result",
                                        "stmtc0": "c_native_&_result",
                                        "stmtc1": "c_default"
                                    },
                                    "fmtpy": {
                                        "c_deref": "",
                                        "c_var": "SHCXX_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_type": "int",
                                        "cxx_var": "SHCXX_rv",
                                        "data_var": "SHData_rv",
                                        "numpy_type": "NPY_INT",
                                        "py_var": "SHTPy_rv",
                                        "size_var": "SHSize_rv",
                                        "stmt0": "py_native_result_dimension_numpy",
                                        "stmt1": "py_native_result_dimension_numpy"
                                    }
                                },
                                "_generated": "cxx_template",
                                "ast": {
                                    "declarator": {
                                        "name": "at",
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "intent": "in",
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "n",
                                                "pointer": []
                                            },
                                            "specifier": [
                                                "size_type"
                                            ],
                                            "typemap_name": "std::vector::size_type"
                                        }
                                    ],
                                    "return_pointer_as": "pointer",
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                },
                                "decl": "T & at(size_type n)",
                                "declgen": "int & at(size_type n +intent(in)+value)",
                                "fmtdict": {
                                    "C_call_list": "n",
                                    "C_name": "TEM_vector_int_at",
                                    "C_prototype": "TEM_vector_int * self,\t size_t n",
                                    "C_return_type": "int *",
                                    "F_C_call": "c_vector_int_at",
                                    "F_C_name": "c_vector_int_at",
                                    "F_arg_c_call": "obj%cxxmem,\t n",
                                    "F_arguments": "obj,\t n",
                                    "F_name_function": "at",
                                    "F_name_generic": "at",
                                    "F_name_impl": "vector_int_at",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "PY_name_impl": "PY_at",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "capsule_addr": "base",
                                    "cxx_rv_decl": "int & SHC_rv",
                                    "function_name": "at",
                                    "underscore_name": "at"
                                },
                                "have_template_args": true,
                                "options": {
                                    "F_create_generic": false,
                                    "wrap_c": true,
                                    "wrap_fortran": true,
                                    "wrap_lua": false,
                                    "wrap_python": true
                                }
                            }
                        ],
                        "name": "vector",
                        "options": {
                            "optsample": "two"
                        },
                        "scope": "std::vector::",
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "fmtdict": {
                                    "C_impl_filename": "wrapvectorforint.cpp",
                                    "fmtsample": "one"
                                },
                                "instantiation": "<int>",
                                "options": {
                                    "optsample": "two"
                                }
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            }
                        ],
                        "template_parameters": [
                            "T"
                        ],
                        "typemap_name": "std::vector_int"
                    },
                    {
                        "cxx_header": [
                            "<vector>"
                        ],
                        "fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapstd_vector_double.h",
                            "C_impl_filename": "wrapstd_vector_double.cpp",
                            "C_name_scope": "vector_double_",
                            "C_type_name": "TEM_vector_double",
                            "F_capsule_data_type": "SHROUD_vector_double_capsule",
                            "F_derived_name": "vector_double",
                            "F_name_scope": "vector_double_",
                            "PY_PyObject": "PY_vector_double",
                            "PY_PyTypeObject": "PY_vector_double_Type",
                            "PY_capsule_name": "PY_vector_double_capsule_name",
                            "PY_from_object_func": "PP_vector_double_from_Object",
                            "PY_this_call": "self->obj->",
                            "PY_to_object_func": "PP_vector_double_to_Object",
                            "PY_to_object_idtor_func": "PP_vector_double_to_Object_idtor",
                            "PY_type_filename": "pystd_vector_doubletype.cpp",
                            "class_scope": "vector_double::",
                            "cxx_class": "vector_double",
                            "cxx_type": "vector<double>",
                            "file_scope": "std_vector_double"
                        },
                        "functions": [
                            {
                                "_fmtresult": {
                                    "fmtc": {
                                        "c_const": "",
                                        "c_type": "TEM_vector_double",
                                        "c_var": "SHC_rv",
                                        "capsule_addr": "base",
                                        "cxx_addr": "",
                                        "cxx_member": "->",
                                        "cxx_type": "std::vector<double>",
                                        "cxx_var": "SHCXX_rv",
                                        "idtor": "0",
                                        "sh_type": "SH_TYPE_OTHER",
                                        "stmt0": "c_shadow_scalar_ctor",
                                        "stmt1": "c_shadow_scalar_ctor"
                                    },
                                    "fmtf": {
                                        "cxx_type": "std::vector<double>",
                                        "f_type": "type(vector_double)",
                                        "f_var": "SHT_rv",
                                        "sh_type": "SH_TYPE_OTHER",
                                        "stmt0": "f_shadow_ctor",
                                        "stmt1": "f_shadow_ctor",
                                        "stmtc0": "c_shadow_ctor",
                                        "stmtc1": "c_shadow_ctor"
                                    },
                                    "fmtpy": {
                                        "PY_build_format": "O",
                                        "PY_to_object_idtor_func": "PP_vector_double_to_Object_idtor",
                                        "PyObject": "PY_vector_double",
                                        "PyTypeObject": "PY_vector_double_Type",
                                        "c_deref": "",
                                        "c_var": "SHCXX_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_type": "std::vector<double>",
                                        "cxx_var": "SHCXX_rv",
                                        "data_var": "SHData_rv",
                                        "numpy_type": null,
                                        "py_var": "SHTPy_rv",
                                        "size_var": "SHSize_rv",
                                        "stmt0": "py_default",
                                        "stmt1": "py_default",
                                        "vargs": "SHCXX_rv"
                                    }
                                },
                                "ast": {
                                    "attrs": {
                                        "_constructor": true,
                                        "_name": "ctor"
                                    },
                                    "params": [],
                                    "specifier": [
                                        "vector"
                                    ],
                                    "typemap_name": "std::vector_double"
                                },
                                "decl": "vector()",
                                "declgen": "vector()",
                                "fmtdict": {
                                    "C_name": "TEM_vector_double_ctor",
                                    "C_prototype": "TEM_vector_double * SHC_rv",
                                    "C_return_type": "TEM_vector_double *",
                                    "F_C_call": "c_vector_double_ctor",
                                    "F_C_name": "c_vector_double_ctor",
                                    "F_arg_c_call": "SHT_rv%cxxmem",
                                    "F_arguments": "",
                                    "F_name_function": "ctor",
                                    "F_name_generic": "ctor",
                                    "F_name_impl": "vector_double_ctor",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "PY_name_impl": "PY_vector_double_tp_init",
                                    "PY_type_impl": "PY_vector_double_tp_init",
                                    "PY_type_method": "tp_init",
                                    "cxx_rv_decl": "std::vector<double> SHCXX_rv",
                                    "function_name": "ctor",
                                    "underscore_name": "ctor"
                                },
                                "options": {}
                            },
                            {
                                "ast": {
                                    "attrs": {
                                        "_destructor": true,
                                        "_name": "dtor"
                                    },
                                    "params": [],
                                    "specifier": [
                                        "vector"
                                    ],
                                    "typemap_name": "std::vector"
                                },
                                "decl": "~vector()",
                                "declgen": "~vector()",
                                "fmtdict": {
                                    "C_name": "TEM_vector_double_dtor",
                                    "C_prototype": "TEM_vector_double * self",
                                    "C_return_type": "void",
                                    "F_C_call": "c_vector_double_dtor",
                                    "F_C_name": "c_vector_double_dtor",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_name_function": "dtor",
                                    "F_name_generic": "dtor",
                                    "F_name_impl": "vector_double_dtor",
                                    "F_subprogram": "subroutine",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "capsule_addr": "base",
                                    "function_name": "dtor",
                                    "stmt0": "f_shadow_dtor",
                                    "stmt1": "f_default",
                                    "stmtc0": "c_shadow_dtor",
                                    "stmtc1": "c_shadow_dtor",
                                    "underscore_name": "dtor"
                                },
                                "options": {}
                            },
                            {
                                "ast": {
                                    "declarator": {
                                        "name": "push_back",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "intent": "in"
                                            },
                                            "const": true,
                                            "declarator": {
                                                "name": "value",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "specifier": [
                                                "T"
                                            ],
                                            "typemap_name": "std::vector::T"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void push_back( const T& value+intent(in) )",
                                "declgen": "void push_back(const T & value +intent(in))",
                                "fmtdict": {
                                    "function_name": "push_back",
                                    "underscore_name": "push_back"
                                },
                                "have_template_args": true,
                                "options": {
                                    "wrap_c": false,
                                    "wrap_fortran": false,
                                    "wrap_lua": false,
                                    "wrap_python": false
                                }
                            },
                            {
                                "_fmtargs": {
                                    "value": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "value",
                                            "capsule_addr": "cbase",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_type": "double",
                                            "cxx_var": "value",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt0": "c_native_&_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_pointer": "SHPTR_value",
                                            "c_var": "value",
                                            "f_intent": "IN",
                                            "f_type": "real(C_DOUBLE)",
                                            "f_var": "value",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt0": "f_native_&_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_&_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtpy": {
                                            "c_const": "const ",
                                            "c_decl": "double value",
                                            "c_deref": "",
                                            "c_type": "double",
                                            "c_var": "value",
                                            "cxx_addr": "&",
                                            "cxx_decl": "double value",
                                            "cxx_member": ".",
                                            "cxx_type": "double",
                                            "cxx_var": "value",
                                            "data_var": "SHData_value",
                                            "numpy_type": "NPY_DOUBLE",
                                            "py_var": "SHPy_value",
                                            "size_var": "SHSize_value",
                                            "stmt0": "py_native_&_in",
                                            "stmt1": "py_default"
                                        }
                                    }
                                },
                                "_generated": "cxx_template",
                                "ast": {
                                    "declarator": {
                                        "name": "push_back",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "intent": "in"
                                            },
                                            "const": true,
                                            "declarator": {
                                                "name": "value",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "specifier": [
                                                "double"
                                            ],
                                            "typemap_name": "double"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void push_back( const T& value+intent(in) )",
                                "declgen": "void push_back(const double & value +intent(in))",
                                "fmtdict": {
                                    "C_call_list": "*value",
                                    "C_name": "TEM_vector_double_push_back",
                                    "C_prototype": "TEM_vector_double * self,\t const double * value",
                                    "C_return_type": "void",
                                    "F_C_call": "c_vector_double_push_back",
                                    "F_C_name": "c_vector_double_push_back",
                                    "F_arg_c_call": "obj%cxxmem,\t value",
                                    "F_arguments": "obj,\t value",
                                    "F_name_function": "push_back",
                                    "F_name_generic": "push_back",
                                    "F_name_impl": "vector_double_push_back",
                                    "F_subprogram": "subroutine",
                                    "PY_name_impl": "PY_push_back",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "capsule_addr": "base",
                                    "function_name": "push_back",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "push_back"
                                },
                                "have_template_args": true,
                                "options": {
                                    "wrap_c": true,
                                    "wrap_fortran": true,
                                    "wrap_lua": false,
                                    "wrap_python": true
                                }
                            },
                            {
                                "ast": {
                                    "declarator": {
                                        "name": "at",
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "intent": "in",
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "n",
                                                "pointer": []
                                            },
                                            "specifier": [
                                                "size_type"
                                            ],
                                            "typemap_name": "std::vector::size_type"
                                        }
                                    ],
                                    "return_pointer_as": "pointer",
                                    "specifier": [
                                        "T"
                                    ],
                                    "typemap_name": "std::vector::T"
                                },
                                "decl": "T & at(size_type n)",
                                "declgen": "T & at(size_type n +intent(in)+value)",
                                "fmtdict": {
                                    "function_name": "at",
                                    "underscore_name": "at"
                                },
                                "have_template_args": true,
                                "options": {
                                    "wrap_c": false,
                                    "wrap_fortran": false,
                                    "wrap_lua": false,
                                    "wrap_python": false
                                }
                            },
                            {
                                "_fmtargs": {
                                    "n": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "n",
                                            "capsule_addr": "base",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_type": "std::vector::size_type",
                                            "cxx_var": "n",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_SIZE_T",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_pointer": "SHPTR_n",
                                            "c_var": "n",
                                            "f_intent": "IN",
                                            "f_type": "integer(C_SIZE_T)",
                                            "f_var": "n",
                                            "sh_type": "SH_TYPE_SIZE_T",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_decl": "size_t n",
                                            "c_deref": "",
                                            "c_type": "size_t",
                                            "c_var": "n",
                                            "cxx_addr": "&",
                                            "cxx_decl": "std::vector::size_type n",
                                            "cxx_member": ".",
                                            "cxx_type": "std::vector::size_type",
                                            "cxx_var": "n",
                                            "data_var": "SHData_n",
                                            "numpy_type": null,
                                            "py_var": "SHPy_n",
                                            "size_var": "SHSize_n",
                                            "stmt0": "py_native_scalar_in",
                                            "stmt1": "py_default"
                                        }
                                    }
                                },
                                "_fmtresult": {
                                    "fmtc": {
                                        "c_const": "",
                                        "c_get_value": "&",
                                        "c_type": "double",
                                        "c_var": "SHC_rv",
                                        "capsule_addr": "base",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_type": "double",
                                        "cxx_var": "SHC_rv",
                                        "idtor": "0",
                                        "sh_type": "SH_TYPE_DOUBLE",
                                        "stmt0": "c_native_&_result",
                                        "stmt1": "c_default"
                                    },
                                    "fmtf": {
                                        "cxx_type": "double",
                                        "f_type": "real(C_DOUBLE)",
                                        "f_var": "SHT_rv",
                                        "sh_type": "SH_TYPE_DOUBLE",
                                        "stmt0": "f_native_&_result",
                                        "stmt1": "f_native_&_result",
                                        "stmtc0": "c_native_&_result",
                                        "stmtc1": "c_default"
                                    },
                                    "fmtpy": {
                                        "c_deref": "",
                                        "c_var": "SHCXX_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_type": "double",
                                        "cxx_var": "SHCXX_rv",
                                        "data_var": "SHData_rv",
                                        "numpy_type": "NPY_DOUBLE",
                                        "py_var": "SHTPy_rv",
                                        "size_var": "SHSize_rv",
                                        "stmt0": "py_native_result_dimension_numpy",
                                        "stmt1": "py_native_result_dimension_numpy"
                                    }
                                },
                                "_generated": "cxx_template",
                                "ast": {
                                    "declarator": {
                                        "name": "at",
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "intent": "in",
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "n",
                                                "pointer": []
                                            },
                                            "specifier": [
                                                "size_type"
                                            ],
                                            "typemap_name": "std::vector::size_type"
                                        }
                                    ],
                                    "return_pointer_as": "pointer",
                                    "specifier": [
                                        "double"
                                    ],
                                    "typemap_name": "double"
                                },
                                "decl": "T & at(size_type n)",
                                "declgen": "double & at(size_type n +intent(in)+value)",
                                "fmtdict": {
                                    "C_call_list": "n",
                                    "C_name": "TEM_vector_double_at",
                                    "C_prototype": "TEM_vector_double * self,\t size_t n",
                                    "C_return_type": "double *",
                                    "F_C_call": "c_vector_double_at",
                                    "F_C_name": "c_vector_double_at",
                                    "F_arg_c_call": "obj%cxxmem,\t n",
                                    "F_arguments": "obj,\t n",
                                    "F_name_function": "at",
                                    "F_name_generic": "at",
                                    "F_name_impl": "vector_double_at",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "PY_name_impl": "PY_at",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "capsule_addr": "base",
                                    "cxx_rv_decl": "double & SHC_rv",
                                    "function_name": "at",
                                    "underscore_name": "at"
                                },
                                "have_template_args": true,
                                "options": {
                                    "F_create_generic": false,
                                    "wrap_c": true,
                                    "wrap_fortran": true,
                                    "wrap_lua": false,
                                    "wrap_python": true
                                }
                            }
                        ],
                        "name": "vector",
                        "options": {},
                        "scope": "std::vector::",
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "fmtdict": {
                                    "C_impl_filename": "wrapvectorforint.cpp",
                                    "fmtsample": "one"
                                },
                                "instantiation": "<int>",
                                "options": {
                                    "optsample": "two"
                                }
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            }
                        ],
                        "template_parameters": [
                            "T"
                        ],
                        "typemap_name": "std::vector_double"
                    }
                ],
                "fmtdict": {
                    "CXX_this_call": "std::",
                    "C_header_filename": "wraptemplates_std.h",
                    "C_impl_filename": "wraptemplates_std.cpp",
                    "C_name_scope": "",
                    "F_impl_filename": "wrapftemplates_std.f",
                    "F_module_name": "templates_std_mod",
                    "LUA_this_call": "std::",
                    "PY_library_doc": "library documentation",
                    "PY_module_filename": "pytemplates_stdmodule.cpp",
                    "PY_module_init": "templates_std",
                    "PY_module_name": "std",
                    "PY_module_scope": "templates",
                    "PY_this_call": "std::",
                    "file_scope": "templates_std",
                    "namespace_scope": "std::"
                },
                "name": "std",
                "options": {},
                "scope": "std::",
                "scope_file": [
                    "templates",
                    "std"
                ]
            },
            {
                "classes": [
                    {
                        "cxx_header": [
                            "implworker1.hpp"
                        ],
                        "fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapinternal_ImplWorker1.h",
                            "C_impl_filename": "wrapinternal_ImplWorker1.cpp",
                            "C_name_scope": "internal_ImplWorker1_",
                            "C_type_name": "TEM_internal_ImplWorker1",
                            "F_capsule_data_type": "SHROUD_implworker1_capsule",
                            "F_derived_name": "implworker1",
                            "F_name_scope": "implworker1_",
                            "PY_PyObject": "PY_ImplWorker1",
                            "PY_PyTypeObject": "PY_ImplWorker1_Type",
                            "PY_capsule_name": "PY_ImplWorker1_capsule_name",
                            "PY_from_object_func": "PP_ImplWorker1_from_Object",
                            "PY_this_call": "self->obj->",
                            "PY_to_object_func": "PP_ImplWorker1_to_Object",
                            "PY_to_object_idtor_func": "PP_ImplWorker1_to_Object_idtor",
                            "PY_type_filename": "pyinternal_ImplWorker1type.cpp",
                            "class_scope": "ImplWorker1::",
                            "cxx_class": "ImplWorker1",
                            "cxx_type": "ImplWorker1",
                            "file_scope": "internal_ImplWorker1"
                        },
                        "name": "ImplWorker1",
                        "options": {
                            "wrap_fortran": false
                        },
                        "scope": "internal::ImplWorker1::",
                        "typemap_name": "internal::ImplWorker1"
                    },
                    {
                        "cxx_header": [
                            "implworker2.hpp"
                        ],
                        "fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapinternal_ImplWorker2.h",
                            "C_impl_filename": "wrapinternal_ImplWorker2.cpp",
                            "C_name_scope": "internal_ImplWorker2_",
                            "C_type_name": "TEM_internal_ImplWorker2",
                            "F_capsule_data_type": "SHROUD_implworker2_capsule",
                            "F_derived_name": "implworker2",
                            "F_name_scope": "implworker2_",
                            "PY_PyObject": "PY_ImplWorker2",
                            "PY_PyTypeObject": "PY_ImplWorker2_Type",
                            "PY_capsule_name": "PY_ImplWorker2_capsule_name",
                            "PY_from_object_func": "PP_ImplWorker2_from_Object",
                            "PY_this_call": "self->obj->",
                            "PY_to_object_func": "PP_ImplWorker2_to_Object",
                            "PY_to_object_idtor_func": "PP_ImplWorker2_to_Object_idtor",
                            "PY_type_filename": "pyinternal_ImplWorker2type.cpp",
                            "class_scope": "ImplWorker2::",
                            "cxx_class": "ImplWorker2",
                            "cxx_type": "ImplWorker2",
                            "file_scope": "internal_ImplWorker2"
                        },
                        "name": "ImplWorker2",
                        "options": {
                            "wrap_fortran": false
                        },
                        "scope": "internal::ImplWorker2::",
                        "typemap_name": "internal::ImplWorker2"
                    }
                ],
                "fmtdict": {
                    "CXX_this_call": "internal::",
                    "C_header_filename": "wraptemplates_internal.h",
                    "C_impl_filename": "wraptemplates_internal.cpp",
                    "C_name_scope": "internal_",
                    "F_impl_filename": "wrapftemplates_internal.f",
                    "F_module_name": "templates_internal_mod",
                    "LUA_this_call": "internal::",
                    "PY_library_doc": "library documentation",
                    "PY_module_filename": "pytemplates_internalmodule.cpp",
                    "PY_module_init": "templates_internal",
                    "PY_module_name": "internal",
                    "PY_module_scope": "templates",
                    "PY_this_call": "internal::",
                    "file_scope": "templates_internal",
                    "namespace_scope": "internal::"
                },
                "name": "internal",
                "options": {},
                "scope": "internal::",
                "scope_file": [
                    "templates",
                    "internal"
                ]
            }
        ],
        "scope_file": [
            "templates"
        ]
    }
}