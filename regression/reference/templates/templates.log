Read yaml templates.yaml
Close templates_types.yaml
class vector<int>
C c vector(void)
C f vector(void)
C c ~vector(void)
C f ~vector(void)
C c void push_back(const int & value +intent(in))
C f void push_back(const int & value +intent(in))
C c int & at(size_type n +value)
C f int & at(size_type n +value)
Close wrapstd_vector_int.h
Close wrapvectorforint.cpp
class vector<double>
C c vector(void)
C f vector(void)
C c ~vector(void)
C f ~vector(void)
C c void push_back(const double & value +intent(in))
C f void push_back(const double & value +intent(in))
C c double & at(size_type n +value)
C f double & at(size_type n +value)
Close wrapstd_vector_double.h
Close wrapstd_vector_double.cpp
class ImplWorker1
class ImplWorker2
class Worker
class user<int>
C c void nested(int arg1 +value, double arg2 +value)
C f void nested(int arg1 +value, double arg2 +value)
Close wrapuser_int.h
Close wrapuser_int.cpp
class structAsClass<int>
C c structAsClass(void)
C f structAsClass(void)
C c void set_npts(int n +value)
C f void set_npts(int n +value)
C c int get_npts(void)
C f int get_npts(void)
C c void set_value(int v +value)
C f void set_value(int v +value)
C c int get_value(void)
C f int get_value(void)
Close wrapstructAsClass_int.h
Close wrapstructAsClass_int.cpp
class structAsClass<double>
C c structAsClass(void)
C f structAsClass(void)
C c void set_npts(int n +value)
C f void set_npts(int n +value)
C c int get_npts(void)
C f int get_npts(void)
C c void set_value(double v +value)
C f void set_value(double v +value)
C c double get_value(void)
C f double get_value(void)
Close wrapstructAsClass_double.h
Close wrapstructAsClass_double.cpp
C c user<int> returnUserType(void)
C f user<int> returnUserType(void)
C c void FunctionTU(int arg1 +value, long arg2 +value)
C f void FunctionTU(int arg1 +value, long arg2 +value)
C c void FunctionTU(float arg1 +value, double arg2 +value)
C f void FunctionTU(float arg1 +value, double arg2 +value)
C c int UseImplWorker(void)
C f int UseImplWorker(void)
C c int UseImplWorker(void)
C f int UseImplWorker(void)
Close wraptemplates.h
Close wraptemplates.cpp
class Worker
class user<int>
Fortran void nested(int arg1 +value, double arg2 +value)
C-interface f void nested(int arg1 +value, double arg2 +value)
class structAsClass<int>
Fortran structAsClass(void)
Fortran void set_npts(int n +value)
Fortran int get_npts(void)
Fortran void set_value(int v +value)
Fortran int get_value(void)
C-interface f structAsClass(void)
C-interface f void set_npts(int n +value)
C-interface f int get_npts(void)
C-interface f void set_value(int v +value)
C-interface f int get_value(void)
class structAsClass<double>
Fortran structAsClass(void)
Fortran void set_npts(int n +value)
Fortran int get_npts(void)
Fortran void set_value(double v +value)
Fortran double get_value(void)
C-interface f structAsClass(void)
C-interface f void set_npts(int n +value)
C-interface f int get_npts(void)
C-interface f void set_value(double v +value)
C-interface f double get_value(void)
Fortran user<int> returnUserType(void)
Fortran void FunctionTU(int arg1 +value, long arg2 +value)
Fortran void FunctionTU(float arg1 +value, double arg2 +value)
Fortran int UseImplWorker(void)
Fortran int UseImplWorker(void)
C-interface f user<int> returnUserType(void)
C-interface f void FunctionTU(int arg1 +value, long arg2 +value)
C-interface f void FunctionTU(float arg1 +value, double arg2 +value)
C-interface f int UseImplWorker(void)
C-interface f int UseImplWorker(void)
class vector<int>
typedef size_type
Fortran vector(void)
Fortran ~vector(void)
Fortran void push_back(const int & value +intent(in))
Fortran int & at(size_type n +value)
C-interface f vector(void)
C-interface f ~vector(void)
C-interface f void push_back(const int & value +intent(in))
C-interface c int & at(size_type n +value)
C-interface f int & at(size_type n +value)
class vector<double>
typedef size_type
Fortran vector(void)
Fortran ~vector(void)
Fortran void push_back(const double & value +intent(in))
Fortran double & at(size_type n +value)
C-interface f vector(void)
C-interface f ~vector(void)
C-interface f void push_back(const double & value +intent(in))
C-interface c double & at(size_type n +value)
C-interface f double & at(size_type n +value)
Close wrapftemplates_std.f
Close wrapftemplates_internal.f
Close wrapftemplates.f
Close utiltemplates.cpp
Close typestemplates.h
class vector
Python method vector(void)
Python method ~vector(void)
Python method void push_back(const int & value +intent(in))
Python method int & at(size_type n +value)
Close pystd_vector_inttype.cpp
class vector
Python method vector(void)
Python method ~vector(void)
Python method void push_back(const double & value +intent(in))
Python method double & at(size_type n +value)
Close pystd_vector_doubletype.cpp
Close pytemplates_stdmodule.cpp
class ImplWorker1
Close pyinternal_ImplWorker1type.cpp
class ImplWorker2
Close pyinternal_ImplWorker2type.cpp
Close pytemplates_internalmodule.cpp
class Worker
Close pyWorkertype.cpp
class user
Python method void nested(int arg1 +value, double arg2 +value)
Close pyuser_inttype.cpp
Python function void FunctionTU(int arg1 +value, long arg2 +value)
Python function void FunctionTU(float arg1 +value, double arg2 +value)
Python function int UseImplWorker(void)
Python function int UseImplWorker(void)
Close pytemplatesmodule.cpp
Close pytemplatesutil.cpp
Close pytemplatesmodule.hpp
Close setup.py
