// wraptemplates.cpp
// This file is generated by Shroud nowrite-version. Do not edit.
// Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
// other Shroud Project Developers.
// See the top-level COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//

// cxx_header
#include "templates.hpp"
// typemap
#include "implworker1.hpp"
#include "implworker2.hpp"
// shroud
#include "wraptemplates.h"

// splicer begin CXX_definitions
// splicer end CXX_definitions

extern "C" {

// splicer begin C_definitions
// splicer end C_definitions

// ----------------------------------------
// Function:  user<int> returnUserType
// Attrs:     +api(capptr)+intent(function)
// Requested: c_function_shadow_scalar_capptr_targ_native_scalar
// Match:     c_function_shadow_scalar_capptr
TEM_user_int * TEM_returnUserType(TEM_user_int * SHC_rv)
{
    // splicer begin function.returnUserType
    user<int> * SHCXX_rv = new user<int>;
    *SHCXX_rv = returnUserType();
    SHC_rv->addr = SHCXX_rv;
    SHC_rv->idtor = 5;
    return SHC_rv;
    // splicer end function.returnUserType
}

/**
 * \brief Function template with two template parameters.
 *
 */
// ----------------------------------------
// Function:  void FunctionTU
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  int arg1 +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
// ----------------------------------------
// Argument:  long arg2 +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
void TEM_FunctionTU_0(int arg1, long arg2)
{
    // splicer begin function.FunctionTU_0
    FunctionTU<int, long>(arg1, arg2);
    // splicer end function.FunctionTU_0
}

/**
 * \brief Function template with two template parameters.
 *
 */
// ----------------------------------------
// Function:  void FunctionTU
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  float arg1 +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
// ----------------------------------------
// Argument:  double arg2 +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
void TEM_FunctionTU_1(float arg1, double arg2)
{
    // splicer begin function.FunctionTU_1
    FunctionTU<float, double>(arg1, arg2);
    // splicer end function.FunctionTU_1
}

/**
 * \brief Function which uses a templated T in the implemetation.
 *
 */
// ----------------------------------------
// Function:  int UseImplWorker
// Attrs:     +intent(function)
// Requested: c_function_native_scalar
// Match:     c_function
int TEM_UseImplWorker_internal_ImplWorker1(void)
{
    // splicer begin function.UseImplWorker_internal_ImplWorker1
    int SHC_rv = UseImplWorker<internal::ImplWorker1>();
    return SHC_rv;
    // splicer end function.UseImplWorker_internal_ImplWorker1
}

/**
 * \brief Function which uses a templated T in the implemetation.
 *
 */
// ----------------------------------------
// Function:  int UseImplWorker
// Attrs:     +intent(function)
// Requested: c_function_native_scalar
// Match:     c_function
int TEM_UseImplWorker_internal_ImplWorker2(void)
{
    // splicer begin function.UseImplWorker_internal_ImplWorker2
    int SHC_rv = UseImplWorker<internal::ImplWorker2>();
    return SHC_rv;
    // splicer end function.UseImplWorker_internal_ImplWorker2
}

}  // extern "C"
