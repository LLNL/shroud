{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "class_map": [
            "ArrayWrapper"
        ],
        "classes": [
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "0 ****************************************",
                        "_overloaded": true,
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "_constructor": true,
                                    "_name": "ctor"
                                },
                                "metaattrs": {
                                    "api": "capptr",
                                    "intent": "ctor"
                                },
                                "params": [],
                                "typemap_name": "ArrayWrapper"
                            },
                            "is_ctor": true,
                            "specifier": [
                                "ArrayWrapper"
                            ],
                            "typemap_name": "ArrayWrapper"
                        },
                        "decl": "ArrayWrapper()",
                        "declgen": "ArrayWrapper(void)",
                        "name": "ctor",
                        "options": {
                            "F_create_generic": true
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "ARR_ArrayWrapper_ctor",
                            "C_name_api": "ctor",
                            "C_prototype": "ARR_ArrayWrapper * SHC_rv",
                            "C_return_type": "ARR_ArrayWrapper *",
                            "F_C_arguments": "SHT_rv",
                            "F_C_call": "c_ArrayWrapper_ctor",
                            "F_C_name": "c_ArrayWrapper_ctor",
                            "F_C_result_clause": "\fresult(SHT_prv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_name_api": "ctor",
                            "F_name_function": "ctor",
                            "F_name_generic": "ArrayWrapper",
                            "F_name_impl": "ArrayWrapper_ctor",
                            "F_result": "SHT_prv",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_ArrayWrapper_tp_init",
                            "PY_type_impl": "PY_ArrayWrapper_tp_init",
                            "PY_type_method": "tp_init",
                            "cxx_rv_decl": "ArrayWrapper SHCXX_rv",
                            "function_name": "ctor"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "ARR_ArrayWrapper",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_other",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_type": "ArrayWrapper",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "1",
                                "sh_type": "SH_TYPE_OTHER",
                                "stmt0": "c_ctor_shadow_scalar_capptr",
                                "stmt1": "c_ctor_shadow_scalar_capptr"
                            },
                            "fmtf": {
                                "C_result": "SHT_prv",
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "ArrayWrapper",
                                "f_c_module_line": "--import--:ARR_SHROUD_capsule_data",
                                "f_capsule_data_type": "ARR_SHROUD_capsule_data",
                                "f_intent": "OUT",
                                "f_type": "type(ArrayWrapper)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_OTHER",
                                "stmt0": "f_ctor_shadow_scalar_capptr",
                                "stmt1": "f_ctor_shadow_scalar_capptr",
                                "stmtc0": "c_ctor_shadow_scalar_capptr",
                                "stmtc1": "c_ctor_shadow_scalar_capptr"
                            },
                            "fmtpy": {
                                "PY_build_format": "O",
                                "PY_to_object_idtor_func": "PP_ArrayWrapper_to_Object_idtor",
                                "PyObject": "PY_ArrayWrapper",
                                "PyTypeObject": "PY_ArrayWrapper_Type",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "ArrayWrapper",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_default",
                                "stmt1": "py_default",
                                "value_var": "SHValue_rv",
                                "vargs": "SHCXX_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "1 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "setSize",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "size",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void setSize(int size)",
                        "declgen": "void setSize(int size +value)",
                        "name": "setSize",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "size": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "size",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&size",
                                    "cxx_type": "int",
                                    "cxx_var": "size",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_in_native_scalar",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "size",
                                    "c_var": "size",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "size",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "f_in_native_scalar",
                                    "stmt1": "f_default",
                                    "stmtc0": "c_in_native_scalar",
                                    "stmtc1": "c_default"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "size",
                                    "ctor_expr": "size",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&size",
                                    "cxx_type": "int",
                                    "cxx_var": "size",
                                    "data_var": "SHData_size",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_size",
                                    "size_var": "SHSize_size",
                                    "stmt0": "py_in_native_scalar",
                                    "stmt1": "py_default",
                                    "value_var": "SHValue_size"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "size",
                            "C_name": "ARR_ArrayWrapper_setSize",
                            "C_name_api": "setSize",
                            "C_prototype": "ARR_ArrayWrapper * self,\t int size",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t size",
                            "F_C_call": "c_ArrayWrapper_setSize",
                            "F_C_name": "c_ArrayWrapper_setSize",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t size",
                            "F_arguments": "obj,\t size",
                            "F_name_api": "setSize",
                            "F_name_function": "setSize",
                            "F_name_generic": "setSize",
                            "F_name_impl": "ArrayWrapper_setSize",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_setSize",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "setSize",
                            "stmt0": "f_subroutine",
                            "stmt1": "f_subroutine",
                            "stmtc0": "c_subroutine",
                            "stmtc1": "c_subroutine"
                        }
                    },
                    {
                        "<FUNCTION>": "2 ****************************************",
                        "ast": {
                            "declarator": {
                                "func_const": true,
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "getSize",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int getSize() const",
                        "declgen": "int getSize(void) const",
                        "name": "getSize",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "ARR_ArrayWrapper_getSize",
                            "C_name_api": "getSize",
                            "C_prototype": "const ARR_ArrayWrapper * self",
                            "C_return_type": "int",
                            "F_C_arguments": "self",
                            "F_C_call": "c_ArrayWrapper_getSize",
                            "F_C_name": "c_ArrayWrapper_getSize",
                            "F_C_pure_clause": "pure ",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_api": "getSize",
                            "F_name_function": "getSize",
                            "F_name_generic": "getSize",
                            "F_name_impl": "ArrayWrapper_getSize",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_getSize",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "function_name": "getSize"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_get_value": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_int",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHC_rv",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "c_function_native_scalar",
                                "stmt1": "c_function"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "int",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "f_function_native_scalar",
                                "stmt1": "f_function",
                                "stmtc0": "c_function_native_scalar",
                                "stmtc1": "c_function"
                            },
                            "fmtpy": {
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "int",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": "NPY_INT",
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_function_native_scalar",
                                "stmt1": "py_default",
                                "value_var": "SHValue_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "3 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "fillSize",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "out"
                                            },
                                            "metaattrs": {
                                                "intent": "out"
                                            },
                                            "name": "size",
                                            "pointer": [
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void fillSize(int &size +intent(out))",
                        "declgen": "void fillSize(int & size +intent(out))",
                        "name": "fillSize",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "size": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "int",
                                    "c_var": "size",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&size",
                                    "cxx_type": "int",
                                    "cxx_var": "size",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_out_native_&",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "size",
                                    "c_var": "size",
                                    "f_intent": "OUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "size",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "f_out_native_&",
                                    "stmt1": "f_default",
                                    "stmtc0": "c_out_native_&",
                                    "stmtc1": "c_default"
                                },
                                "fmtpy": {
                                    "array_size": "1",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "size",
                                    "ctor_expr": "size",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&size",
                                    "cxx_type": "int",
                                    "cxx_var": "size",
                                    "data_var": "SHData_size",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_size",
                                    "size_var": "SHSize_size",
                                    "stmt0": "py_out_native_&",
                                    "stmt1": "py_out_native_&",
                                    "value_var": "SHValue_size"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "*size",
                            "C_name": "ARR_ArrayWrapper_fillSize",
                            "C_name_api": "fillSize",
                            "C_prototype": "ARR_ArrayWrapper * self,\t int * size",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t size",
                            "F_C_call": "c_ArrayWrapper_fillSize",
                            "F_C_name": "c_ArrayWrapper_fillSize",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t size",
                            "F_arguments": "obj,\t size",
                            "F_name_api": "fillSize",
                            "F_name_function": "fillSize",
                            "F_name_generic": "fillSize",
                            "F_name_impl": "ArrayWrapper_fillSize",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_fillSize",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "fillSize",
                            "stmt0": "f_subroutine",
                            "stmt1": "f_subroutine",
                            "stmtc0": "c_subroutine",
                            "stmtc1": "c_subroutine"
                        }
                    },
                    {
                        "<FUNCTION>": "4 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "allocate",
                                "params": [],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void allocate()",
                        "declgen": "void allocate(void)",
                        "name": "allocate",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "ARR_ArrayWrapper_allocate",
                            "C_name_api": "allocate",
                            "C_prototype": "ARR_ArrayWrapper * self",
                            "C_return_type": "void",
                            "F_C_arguments": "self",
                            "F_C_call": "c_ArrayWrapper_allocate",
                            "F_C_name": "c_ArrayWrapper_allocate",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_api": "allocate",
                            "F_name_function": "allocate",
                            "F_name_generic": "allocate",
                            "F_name_impl": "ArrayWrapper_allocate",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_allocate",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "allocate",
                            "stmt0": "f_subroutine",
                            "stmt1": "f_subroutine",
                            "stmtc0": "c_subroutine",
                            "stmtc1": "c_subroutine"
                        }
                    },
                    {
                        "<FUNCTION>": "5 ****************************************",
                        "C_generated_path": [
                            "arg_to_buffer"
                        ],
                        "_PTR_F_C_index": "17",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "getSize()"
                                },
                                "metaattrs": {
                                    "deref": "pointer",
                                    "dimension": [
                                        {
                                            "args": [],
                                            "name": "getSize"
                                        }
                                    ],
                                    "intent": "function"
                                },
                                "name": "getArray",
                                "params": [],
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "decl": "double* getArray() +dimension(getSize())",
                        "declgen": "double * getArray(void) +dimension(getSize())",
                        "name": "getArray",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "ARR_ArrayWrapper_getArray",
                            "C_name_api": "getArray",
                            "C_prototype": "ARR_ArrayWrapper * self",
                            "C_return_type": "double *",
                            "F_C_arguments": "self",
                            "F_C_call": "c_ArrayWrapper_getArray_bufferify",
                            "F_C_name": "c_ArrayWrapper_getArray",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem,\t SHT_rv_cdesc",
                            "F_arguments": "obj",
                            "F_name_api": "getArray",
                            "F_name_function": "getArray",
                            "F_name_generic": "getArray",
                            "F_name_impl": "ArrayWrapper_getArray",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_getArray",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "double * SHC_rv",
                            "function_name": "getArray"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_array_size2": "SH_this->getSize()",
                                "c_const": "",
                                "c_get_value": "",
                                "c_type": "double",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_double",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "SHC_rv",
                                "cxx_type": "double",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "c_function_native_*_pointer",
                                "stmt1": "c_function_native_*"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "c_var_cdesc": "SHT_rv_cdesc",
                                "cxx_type": "double",
                                "f_array_allocate": "(SHT_rv_cdesc%shape(1))",
                                "f_array_shape": ",\t SHT_rv_cdesc%shape(1:1)",
                                "f_assumed_shape": "(:)",
                                "f_cdesc_shape": "\nSHT_rv_cdesc%shape(1:1) = shape(SHT_rv)",
                                "f_intent": "OUT",
                                "f_kind": "C_DOUBLE",
                                "f_type": "real(C_DOUBLE)",
                                "f_var": "SHT_rv",
                                "hnamefunc0": "array_context",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "f_function_native_*_cdesc_pointer",
                                "stmt1": "f_function_native_*_cdesc_pointer",
                                "stmtc0": "c_function_native_*_cdesc_pointer",
                                "stmtc1": "c_function_native_*_cdesc"
                            },
                            "fmtpy": {
                                "array_size": "self->obj->getSize()",
                                "c_deref": "*",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "*SHCXX_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "SHCXX_rv",
                                "cxx_type": "double",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "npy_dims_var": "SHD_rv",
                                "npy_intp_asgn": "SHD_rv[0] = self->obj->getSize();\n",
                                "npy_intp_decl": "npy_intp SHD_rv[1];\n",
                                "npy_rank": "1",
                                "numpy_type": "NPY_DOUBLE",
                                "py_var": "SHTPy_rv",
                                "rank": "1",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_function_native_*_pointer_numpy",
                                "stmt1": "py_function_native_*_pointer_numpy",
                                "value_var": "SHValue_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "17 ****************************************",
                        "_PTR_C_CXX_index": "5",
                        "_generated": "arg_to_buffer",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "getSize()"
                                },
                                "metaattrs": {
                                    "api": "cdesc",
                                    "deref": "pointer",
                                    "dimension": [
                                        {
                                            "args": [],
                                            "name": "getSize"
                                        }
                                    ],
                                    "intent": "function"
                                },
                                "name": "getArray",
                                "params": [],
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "decl": "double* getArray() +dimension(getSize())",
                        "declgen": "double * getArray(void) +dimension(getSize())",
                        "name": "getArray",
                        "options": {},
                        "splicer_group": "buf",
                        "wrap": {
                            "c": true,
                            "f_c": true
                        },
                        "zz_fmtdict": {
                            "C_name": "ARR_ArrayWrapper_getArray_bufferify",
                            "C_name_api": "getArray",
                            "C_prototype": "ARR_ArrayWrapper * self,\t ARR_SHROUD_array *SHT_rv_cdesc",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t SHT_rv",
                            "F_C_name": "c_ArrayWrapper_getArray_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_name_api": "getArray",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "double * SHC_rv",
                            "function_name": "getArray",
                            "function_suffix": "_bufferify"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_array_shape": "\nSHT_rv_cdesc->shape[0] = SH_this->getSize();",
                                "c_array_size": "SHT_rv_cdesc->shape[0]",
                                "c_array_size2": "SH_this->getSize()",
                                "c_const": "",
                                "c_type": "double",
                                "c_var": "SHC_rv",
                                "c_var_cdesc": "SHT_rv_cdesc",
                                "cfi_type": "CFI_type_double",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "SHC_rv",
                                "cxx_type": "double",
                                "cxx_var": "SHC_rv",
                                "hnamefunc0": "ShroudTypeDefines",
                                "hnamefunc1": "array_context",
                                "idtor": "0",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "c_function_native_*_cdesc_pointer",
                                "stmt1": "c_function_native_*_cdesc"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "c_var_cdesc": "SHT_rv_cdesc",
                                "f_array_allocate": "(obj->getSize())",
                                "f_assumed_shape": "(:)",
                                "f_intent": "OUT",
                                "f_kind": "C_DOUBLE",
                                "f_type": "real(C_DOUBLE)",
                                "f_var": "SHT_rv",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "6 ****************************************",
                        "C_generated_path": [
                            "arg_to_buffer"
                        ],
                        "_PTR_F_C_index": "18",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "getSize()"
                                },
                                "func_const": true,
                                "metaattrs": {
                                    "deref": "pointer",
                                    "dimension": [
                                        {
                                            "args": [],
                                            "name": "getSize"
                                        }
                                    ],
                                    "intent": "function"
                                },
                                "name": "getArrayConst",
                                "params": [],
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "decl": "double* getArrayConst() const +dimension(getSize())",
                        "declgen": "double * getArrayConst(void) const +dimension(getSize())",
                        "name": "getArrayConst",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "ARR_ArrayWrapper_getArrayConst",
                            "C_name_api": "getArrayConst",
                            "C_prototype": "const ARR_ArrayWrapper * self",
                            "C_return_type": "double *",
                            "F_C_arguments": "self",
                            "F_C_call": "c_ArrayWrapper_getArrayConst_bufferify",
                            "F_C_name": "c_ArrayWrapper_getArrayConst",
                            "F_C_pure_clause": "pure ",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem,\t SHT_rv_cdesc",
                            "F_arguments": "obj",
                            "F_name_api": "getArrayConst",
                            "F_name_function": "getArrayConst",
                            "F_name_generic": "getArrayConst",
                            "F_name_impl": "ArrayWrapper_getArrayConst",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_getArrayConst",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "double * SHC_rv",
                            "function_name": "getArrayConst"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_array_size2": "SH_this->getSize()",
                                "c_const": "",
                                "c_get_value": "",
                                "c_type": "double",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_double",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "SHC_rv",
                                "cxx_type": "double",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "c_function_native_*_pointer",
                                "stmt1": "c_function_native_*"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "c_var_cdesc": "SHT_rv_cdesc",
                                "cxx_type": "double",
                                "f_array_allocate": "(SHT_rv_cdesc%shape(1))",
                                "f_array_shape": ",\t SHT_rv_cdesc%shape(1:1)",
                                "f_assumed_shape": "(:)",
                                "f_cdesc_shape": "\nSHT_rv_cdesc%shape(1:1) = shape(SHT_rv)",
                                "f_intent": "OUT",
                                "f_kind": "C_DOUBLE",
                                "f_type": "real(C_DOUBLE)",
                                "f_var": "SHT_rv",
                                "hnamefunc0": "array_context",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "f_function_native_*_cdesc_pointer",
                                "stmt1": "f_function_native_*_cdesc_pointer",
                                "stmtc0": "c_function_native_*_cdesc_pointer",
                                "stmtc1": "c_function_native_*_cdesc"
                            },
                            "fmtpy": {
                                "array_size": "self->obj->getSize()",
                                "c_deref": "*",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "*SHCXX_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "SHCXX_rv",
                                "cxx_type": "double",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "npy_dims_var": "SHD_rv",
                                "npy_intp_asgn": "SHD_rv[0] = self->obj->getSize();\n",
                                "npy_intp_decl": "npy_intp SHD_rv[1];\n",
                                "npy_rank": "1",
                                "numpy_type": "NPY_DOUBLE",
                                "py_var": "SHTPy_rv",
                                "rank": "1",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_function_native_*_pointer_numpy",
                                "stmt1": "py_function_native_*_pointer_numpy",
                                "value_var": "SHValue_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "18 ****************************************",
                        "_PTR_C_CXX_index": "6",
                        "_generated": "arg_to_buffer",
                        "ast": {
                            "declarator": {
                                "attrs": {
                                    "dimension": "getSize()"
                                },
                                "func_const": true,
                                "metaattrs": {
                                    "api": "cdesc",
                                    "deref": "pointer",
                                    "dimension": [
                                        {
                                            "args": [],
                                            "name": "getSize"
                                        }
                                    ],
                                    "intent": "function"
                                },
                                "name": "getArrayConst",
                                "params": [],
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "decl": "double* getArrayConst() const +dimension(getSize())",
                        "declgen": "double * getArrayConst(void) const +dimension(getSize())",
                        "name": "getArrayConst",
                        "options": {},
                        "splicer_group": "buf",
                        "wrap": {
                            "c": true,
                            "f_c": true
                        },
                        "zz_fmtdict": {
                            "C_name": "ARR_ArrayWrapper_getArrayConst_bufferify",
                            "C_name_api": "getArrayConst",
                            "C_prototype": "const ARR_ArrayWrapper * self,\t ARR_SHROUD_array *SHT_rv_cdesc",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t SHT_rv",
                            "F_C_name": "c_ArrayWrapper_getArrayConst_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_name_api": "getArrayConst",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "double * SHC_rv",
                            "function_name": "getArrayConst",
                            "function_suffix": "_bufferify"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_array_shape": "\nSHT_rv_cdesc->shape[0] = SH_this->getSize();",
                                "c_array_size": "SHT_rv_cdesc->shape[0]",
                                "c_array_size2": "SH_this->getSize()",
                                "c_const": "",
                                "c_type": "double",
                                "c_var": "SHC_rv",
                                "c_var_cdesc": "SHT_rv_cdesc",
                                "cfi_type": "CFI_type_double",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "SHC_rv",
                                "cxx_type": "double",
                                "cxx_var": "SHC_rv",
                                "hnamefunc0": "ShroudTypeDefines",
                                "hnamefunc1": "array_context",
                                "idtor": "0",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "c_function_native_*_cdesc_pointer",
                                "stmt1": "c_function_native_*_cdesc"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "c_var_cdesc": "SHT_rv_cdesc",
                                "f_array_allocate": "(obj->getSize())",
                                "f_assumed_shape": "(:)",
                                "f_intent": "OUT",
                                "f_kind": "C_DOUBLE",
                                "f_type": "real(C_DOUBLE)",
                                "f_var": "SHT_rv",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "7 ****************************************",
                        "C_generated_path": [
                            "arg_to_buffer"
                        ],
                        "_PTR_F_C_index": "19",
                        "ast": {
                            "const": true,
                            "declarator": {
                                "attrs": {
                                    "dimension": "getSize()"
                                },
                                "metaattrs": {
                                    "deref": "pointer",
                                    "dimension": [
                                        {
                                            "args": [],
                                            "name": "getSize"
                                        }
                                    ],
                                    "intent": "function"
                                },
                                "name": "getArrayC",
                                "params": [],
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "decl": "const double *getArrayC() +dimension(getSize())",
                        "declgen": "const double * getArrayC(void) +dimension(getSize())",
                        "name": "getArrayC",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "ARR_ArrayWrapper_getArrayC",
                            "C_name_api": "getArrayC",
                            "C_prototype": "ARR_ArrayWrapper * self",
                            "C_return_type": "const double *",
                            "F_C_arguments": "self",
                            "F_C_call": "c_ArrayWrapper_getArrayC_bufferify",
                            "F_C_name": "c_ArrayWrapper_getArrayC",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem,\t SHT_rv_cdesc",
                            "F_arguments": "obj",
                            "F_name_api": "getArrayC",
                            "F_name_function": "getArrayC",
                            "F_name_generic": "getArrayC",
                            "F_name_impl": "ArrayWrapper_getArrayC",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_getArrayC",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "const double * SHC_rv",
                            "function_name": "getArrayC"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_array_size2": "SH_this->getSize()",
                                "c_const": "const ",
                                "c_get_value": "",
                                "c_type": "double",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_double",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "const_cast<double *>\t(SHC_rv)",
                                "cxx_type": "double",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "c_function_native_*_pointer",
                                "stmt1": "c_function_native_*"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "c_var_cdesc": "SHT_rv_cdesc",
                                "cxx_type": "double",
                                "f_array_allocate": "(SHT_rv_cdesc%shape(1))",
                                "f_array_shape": ",\t SHT_rv_cdesc%shape(1:1)",
                                "f_assumed_shape": "(:)",
                                "f_cdesc_shape": "\nSHT_rv_cdesc%shape(1:1) = shape(SHT_rv)",
                                "f_intent": "OUT",
                                "f_kind": "C_DOUBLE",
                                "f_type": "real(C_DOUBLE)",
                                "f_var": "SHT_rv",
                                "hnamefunc0": "array_context",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "f_function_native_*_cdesc_pointer",
                                "stmt1": "f_function_native_*_cdesc_pointer",
                                "stmtc0": "c_function_native_*_cdesc_pointer",
                                "stmtc1": "c_function_native_*_cdesc"
                            },
                            "fmtpy": {
                                "array_size": "self->obj->getSize()",
                                "c_deref": "*",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "*SHCXX_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "const_cast<double *>\t(SHCXX_rv)",
                                "cxx_type": "double",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "npy_dims_var": "SHD_rv",
                                "npy_intp_asgn": "SHD_rv[0] = self->obj->getSize();\n",
                                "npy_intp_decl": "npy_intp SHD_rv[1];\n",
                                "npy_rank": "1",
                                "numpy_type": "NPY_DOUBLE",
                                "py_var": "SHTPy_rv",
                                "rank": "1",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_function_native_*_pointer_numpy",
                                "stmt1": "py_function_native_*_pointer_numpy",
                                "value_var": "SHValue_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "19 ****************************************",
                        "_PTR_C_CXX_index": "7",
                        "_generated": "arg_to_buffer",
                        "ast": {
                            "const": true,
                            "declarator": {
                                "attrs": {
                                    "dimension": "getSize()"
                                },
                                "metaattrs": {
                                    "api": "cdesc",
                                    "deref": "pointer",
                                    "dimension": [
                                        {
                                            "args": [],
                                            "name": "getSize"
                                        }
                                    ],
                                    "intent": "function"
                                },
                                "name": "getArrayC",
                                "params": [],
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "decl": "const double *getArrayC() +dimension(getSize())",
                        "declgen": "const double * getArrayC(void) +dimension(getSize())",
                        "name": "getArrayC",
                        "options": {},
                        "splicer_group": "buf",
                        "wrap": {
                            "c": true,
                            "f_c": true
                        },
                        "zz_fmtdict": {
                            "C_name": "ARR_ArrayWrapper_getArrayC_bufferify",
                            "C_name_api": "getArrayC",
                            "C_prototype": "ARR_ArrayWrapper * self,\t ARR_SHROUD_array *SHT_rv_cdesc",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t SHT_rv",
                            "F_C_name": "c_ArrayWrapper_getArrayC_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_name_api": "getArrayC",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "const double * SHC_rv",
                            "function_name": "getArrayC",
                            "function_suffix": "_bufferify"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_array_shape": "\nSHT_rv_cdesc->shape[0] = SH_this->getSize();",
                                "c_array_size": "SHT_rv_cdesc->shape[0]",
                                "c_array_size2": "SH_this->getSize()",
                                "c_const": "const ",
                                "c_type": "double",
                                "c_var": "SHC_rv",
                                "c_var_cdesc": "SHT_rv_cdesc",
                                "cfi_type": "CFI_type_double",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "const_cast<double *>\t(SHC_rv)",
                                "cxx_type": "double",
                                "cxx_var": "SHC_rv",
                                "hnamefunc0": "ShroudTypeDefines",
                                "hnamefunc1": "array_context",
                                "idtor": "0",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "c_function_native_*_cdesc_pointer",
                                "stmt1": "c_function_native_*_cdesc"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "c_var_cdesc": "SHT_rv_cdesc",
                                "f_array_allocate": "(obj->getSize())",
                                "f_assumed_shape": "(:)",
                                "f_intent": "OUT",
                                "f_kind": "C_DOUBLE",
                                "f_type": "real(C_DOUBLE)",
                                "f_var": "SHT_rv",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "8 ****************************************",
                        "C_generated_path": [
                            "arg_to_buffer"
                        ],
                        "_PTR_F_C_index": "20",
                        "ast": {
                            "const": true,
                            "declarator": {
                                "attrs": {
                                    "dimension": "getSize()"
                                },
                                "func_const": true,
                                "metaattrs": {
                                    "deref": "pointer",
                                    "dimension": [
                                        {
                                            "args": [],
                                            "name": "getSize"
                                        }
                                    ],
                                    "intent": "function"
                                },
                                "name": "getArrayConstC",
                                "params": [],
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "decl": "const double *getArrayConstC() const +dimension(getSize())",
                        "declgen": "const double * getArrayConstC(void) const +dimension(getSize())",
                        "name": "getArrayConstC",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "ARR_ArrayWrapper_getArrayConstC",
                            "C_name_api": "getArrayConstC",
                            "C_prototype": "const ARR_ArrayWrapper * self",
                            "C_return_type": "const double *",
                            "F_C_arguments": "self",
                            "F_C_call": "c_ArrayWrapper_getArrayConstC_bufferify",
                            "F_C_name": "c_ArrayWrapper_getArrayConstC",
                            "F_C_pure_clause": "pure ",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem,\t SHT_rv_cdesc",
                            "F_arguments": "obj",
                            "F_name_api": "getArrayConstC",
                            "F_name_function": "getArrayConstC",
                            "F_name_generic": "getArrayConstC",
                            "F_name_impl": "ArrayWrapper_getArrayConstC",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_getArrayConstC",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "const double * SHC_rv",
                            "function_name": "getArrayConstC"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_array_size2": "SH_this->getSize()",
                                "c_const": "const ",
                                "c_get_value": "",
                                "c_type": "double",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_double",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "const_cast<double *>\t(SHC_rv)",
                                "cxx_type": "double",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "c_function_native_*_pointer",
                                "stmt1": "c_function_native_*"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "c_var_cdesc": "SHT_rv_cdesc",
                                "cxx_type": "double",
                                "f_array_allocate": "(SHT_rv_cdesc%shape(1))",
                                "f_array_shape": ",\t SHT_rv_cdesc%shape(1:1)",
                                "f_assumed_shape": "(:)",
                                "f_cdesc_shape": "\nSHT_rv_cdesc%shape(1:1) = shape(SHT_rv)",
                                "f_intent": "OUT",
                                "f_kind": "C_DOUBLE",
                                "f_type": "real(C_DOUBLE)",
                                "f_var": "SHT_rv",
                                "hnamefunc0": "array_context",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "f_function_native_*_cdesc_pointer",
                                "stmt1": "f_function_native_*_cdesc_pointer",
                                "stmtc0": "c_function_native_*_cdesc_pointer",
                                "stmtc1": "c_function_native_*_cdesc"
                            },
                            "fmtpy": {
                                "array_size": "self->obj->getSize()",
                                "c_deref": "*",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "*SHCXX_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "const_cast<double *>\t(SHCXX_rv)",
                                "cxx_type": "double",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "npy_dims_var": "SHD_rv",
                                "npy_intp_asgn": "SHD_rv[0] = self->obj->getSize();\n",
                                "npy_intp_decl": "npy_intp SHD_rv[1];\n",
                                "npy_rank": "1",
                                "numpy_type": "NPY_DOUBLE",
                                "py_var": "SHTPy_rv",
                                "rank": "1",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_function_native_*_pointer_numpy",
                                "stmt1": "py_function_native_*_pointer_numpy",
                                "value_var": "SHValue_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "20 ****************************************",
                        "_PTR_C_CXX_index": "8",
                        "_generated": "arg_to_buffer",
                        "ast": {
                            "const": true,
                            "declarator": {
                                "attrs": {
                                    "dimension": "getSize()"
                                },
                                "func_const": true,
                                "metaattrs": {
                                    "api": "cdesc",
                                    "deref": "pointer",
                                    "dimension": [
                                        {
                                            "args": [],
                                            "name": "getSize"
                                        }
                                    ],
                                    "intent": "function"
                                },
                                "name": "getArrayConstC",
                                "params": [],
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ],
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "decl": "const double *getArrayConstC() const +dimension(getSize())",
                        "declgen": "const double * getArrayConstC(void) const +dimension(getSize())",
                        "name": "getArrayConstC",
                        "options": {},
                        "splicer_group": "buf",
                        "wrap": {
                            "c": true,
                            "f_c": true
                        },
                        "zz_fmtdict": {
                            "C_name": "ARR_ArrayWrapper_getArrayConstC_bufferify",
                            "C_name_api": "getArrayConstC",
                            "C_prototype": "const ARR_ArrayWrapper * self,\t ARR_SHROUD_array *SHT_rv_cdesc",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t SHT_rv",
                            "F_C_name": "c_ArrayWrapper_getArrayConstC_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_name_api": "getArrayConstC",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "const double * SHC_rv",
                            "function_name": "getArrayConstC",
                            "function_suffix": "_bufferify"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_array_shape": "\nSHT_rv_cdesc->shape[0] = SH_this->getSize();",
                                "c_array_size": "SHT_rv_cdesc->shape[0]",
                                "c_array_size2": "SH_this->getSize()",
                                "c_const": "const ",
                                "c_type": "double",
                                "c_var": "SHC_rv",
                                "c_var_cdesc": "SHT_rv_cdesc",
                                "cfi_type": "CFI_type_double",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "const_cast<double *>\t(SHC_rv)",
                                "cxx_type": "double",
                                "cxx_var": "SHC_rv",
                                "hnamefunc0": "ShroudTypeDefines",
                                "hnamefunc1": "array_context",
                                "idtor": "0",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "c_function_native_*_cdesc_pointer",
                                "stmt1": "c_function_native_*_cdesc"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "c_var_cdesc": "SHT_rv_cdesc",
                                "f_array_allocate": "(obj->getSize())",
                                "f_assumed_shape": "(:)",
                                "f_intent": "OUT",
                                "f_kind": "C_DOUBLE",
                                "f_type": "real(C_DOUBLE)",
                                "f_var": "SHT_rv",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "9 ****************************************",
                        "C_generated_path": [
                            "arg_to_buffer"
                        ],
                        "_PTR_F_C_index": "21",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "fetchArrayPtr",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "dimension": "isize",
                                                "intent": "out"
                                            },
                                            "metaattrs": {
                                                "deref": "pointer",
                                                "dimension": [
                                                    {
                                                        "name": "isize"
                                                    }
                                                ],
                                                "intent": "out"
                                            },
                                            "name": "array",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                },
                                                {
                                                    "ptr": "*"
                                                }
                                            ],
                                            "typemap_name": "double"
                                        },
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    },
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "hidden": true
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "name": "isize",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                }
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void fetchArrayPtr(double **array +intent(out)+dimension(isize), int *isize     +hidden)",
                        "declgen": "void fetchArrayPtr(double * * array +dimension(isize)+intent(out), int * isize +hidden)",
                        "name": "fetchArrayPtr",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "array": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_array_size2": "isize",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "double",
                                    "c_var": "array",
                                    "cfi_type": "CFI_type_double",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "array",
                                    "cxx_type": "double",
                                    "cxx_var": "array",
                                    "idtor": "0",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt0": "c_out_native_**_pointer",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "array",
                                    "c_var": "array",
                                    "f_array_allocate": "(isize)",
                                    "f_assumed_shape": "(:)",
                                    "f_intent": "OUT",
                                    "f_kind": "C_DOUBLE",
                                    "f_type": "real(C_DOUBLE)",
                                    "f_var": "array",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE"
                                },
                                "fmtpy": {
                                    "array_size": "isize",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_type": "double",
                                    "c_var": "array",
                                    "ctor_expr": "*array",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "array",
                                    "cxx_type": "double",
                                    "cxx_var": "array",
                                    "data_var": "SHData_array",
                                    "npy_dims_var": "SHD_array",
                                    "npy_intp_asgn": "SHD_array[0] = isize;\n",
                                    "npy_intp_decl": "npy_intp SHD_array[1];\n",
                                    "npy_rank": "1",
                                    "numpy_type": "NPY_DOUBLE",
                                    "py_var": "SHPy_array",
                                    "rank": "1",
                                    "size_var": "SHSize_array",
                                    "stmt0": "py_out_native_**_pointer_numpy",
                                    "stmt1": "py_out_native_**_pointer_numpy",
                                    "value_var": "SHValue_array"
                                }
                            },
                            "isize": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "int",
                                    "c_var": "isize",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "isize",
                                    "cxx_type": "int",
                                    "cxx_var": "isize",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_inout_native_*",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "isize",
                                    "c_var": "isize",
                                    "f_intent": "INOUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "isize",
                                    "sh_type": "SH_TYPE_INT"
                                },
                                "fmtpy": {
                                    "array_size": "1",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_type": "int",
                                    "c_var": "isize",
                                    "ctor_expr": "isize",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "isize",
                                    "cxx_type": "int",
                                    "cxx_var": "isize",
                                    "data_var": "SHData_isize",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_isize",
                                    "size_var": "SHSize_isize",
                                    "stmt0": "py_inout_native_*",
                                    "stmt1": "py_inout_native_*",
                                    "value_var": "SHValue_isize"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "array,\t isize",
                            "C_name": "ARR_ArrayWrapper_fetchArrayPtr",
                            "C_name_api": "fetchArrayPtr",
                            "C_prototype": "ARR_ArrayWrapper * self,\t double * * array,\t int * isize",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t array,\t isize",
                            "F_C_call": "c_ArrayWrapper_fetchArrayPtr_bufferify",
                            "F_C_name": "c_ArrayWrapper_fetchArrayPtr",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t SHT_array_cdesc",
                            "F_arguments": "obj,\t array",
                            "F_name_api": "fetchArrayPtr",
                            "F_name_function": "fetchArrayPtr",
                            "F_name_generic": "fetchArrayPtr",
                            "F_name_impl": "ArrayWrapper_fetchArrayPtr",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_fetchArrayPtr",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "fetchArrayPtr",
                            "stmt0": "f_subroutine",
                            "stmt1": "f_subroutine",
                            "stmtc0": "c_subroutine",
                            "stmtc1": "c_subroutine"
                        }
                    },
                    {
                        "<FUNCTION>": "21 ****************************************",
                        "_PTR_C_CXX_index": "9",
                        "_generated": "arg_to_buffer",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "fetchArrayPtr",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "dimension": "isize",
                                                "intent": "out"
                                            },
                                            "metaattrs": {
                                                "api": "cdesc",
                                                "deref": "pointer",
                                                "dimension": [
                                                    {
                                                        "name": "isize"
                                                    }
                                                ],
                                                "intent": "out"
                                            },
                                            "name": "array",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                },
                                                {
                                                    "ptr": "*"
                                                }
                                            ],
                                            "typemap_name": "double"
                                        },
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    },
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "hidden": true
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "name": "isize",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                }
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void fetchArrayPtr(double **array +intent(out)+dimension(isize), int *isize     +hidden)",
                        "declgen": "void fetchArrayPtr(double * * array +dimension(isize)+intent(out), int * isize +hidden)",
                        "name": "fetchArrayPtr",
                        "options": {},
                        "splicer_group": "buf",
                        "wrap": {
                            "c": true,
                            "f_c": true
                        },
                        "zz_fmtargs": {
                            "array": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_array_shape": "\nSHT_array_cdesc->shape[0] = isize;",
                                    "c_array_size": "SHT_array_cdesc->shape[0]",
                                    "c_array_size2": "isize",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "double",
                                    "c_var": "array",
                                    "c_var_cdesc": "SHT_array_cdesc",
                                    "cfi_type": "CFI_type_double",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "array",
                                    "cxx_type": "double",
                                    "cxx_var": "array",
                                    "hnamefunc0": "ShroudTypeDefines",
                                    "hnamefunc1": "array_context",
                                    "idtor": "0",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt0": "c_out_native_**_cdesc_pointer",
                                    "stmt1": "c_out_native_**_cdesc"
                                },
                                "fmtf": {
                                    "F_C_var": "array",
                                    "c_var": "array",
                                    "c_var_cdesc": "SHT_array_cdesc",
                                    "f_array_allocate": "(SHT_array_cdesc%shape(1))",
                                    "f_array_shape": ",\t SHT_array_cdesc%shape(1:1)",
                                    "f_assumed_shape": "(:)",
                                    "f_cdesc_shape": "\nSHT_array_cdesc%shape(1:1) = shape(array)",
                                    "f_intent": "OUT",
                                    "f_kind": "C_DOUBLE",
                                    "f_type": "real(C_DOUBLE)",
                                    "f_var": "array",
                                    "hnamefunc0": "array_context",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt0": "f_out_native_**_cdesc_pointer",
                                    "stmt1": "f_out_native_**_cdesc_pointer",
                                    "stmtc0": "c_out_native_**_cdesc_pointer",
                                    "stmtc1": "c_out_native_**_cdesc"
                                }
                            },
                            "isize": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "int",
                                    "c_var": "isize",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "isize",
                                    "cxx_type": "int",
                                    "cxx_var": "isize",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_inout_native_*_hidden",
                                    "stmt1": "c_inout_native_*_hidden"
                                },
                                "fmtf": {
                                    "F_C_var": "isize",
                                    "c_var": "isize",
                                    "f_intent": "INOUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "isize",
                                    "sh_type": "SH_TYPE_INT"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "&array,\t &isize",
                            "C_name": "ARR_ArrayWrapper_fetchArrayPtr_bufferify",
                            "C_name_api": "fetchArrayPtr",
                            "C_prototype": "ARR_ArrayWrapper * self,\t ARR_SHROUD_array *SHT_array_cdesc",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t SHT_array_cdesc",
                            "F_C_name": "c_ArrayWrapper_fetchArrayPtr_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_name_api": "fetchArrayPtr",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "fetchArrayPtr",
                            "function_suffix": "_bufferify",
                            "stmt0": "c_subroutine",
                            "stmt1": "c_subroutine"
                        }
                    },
                    {
                        "<FUNCTION>": "10 ****************************************",
                        "C_generated_path": [
                            "arg_to_buffer"
                        ],
                        "_PTR_F_C_index": "22",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "fetchArrayRef",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "dimension": "isize",
                                                "intent": "out"
                                            },
                                            "metaattrs": {
                                                "deref": "pointer",
                                                "dimension": [
                                                    {
                                                        "name": "isize"
                                                    }
                                                ],
                                                "intent": "out"
                                            },
                                            "name": "array",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                },
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "double"
                                        },
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    },
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "hidden": true
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "name": "isize",
                                            "pointer": [
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void fetchArrayRef(double *&array +intent(out)+dimension(isize), int &isize     +hidden)",
                        "declgen": "void fetchArrayRef(double * & array +dimension(isize)+intent(out), int & isize +hidden)",
                        "name": "fetchArrayRef",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "array": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_array_size2": "isize",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "double",
                                    "c_var": "array",
                                    "cfi_type": "CFI_type_double",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "array",
                                    "cxx_type": "double",
                                    "cxx_var": "array",
                                    "idtor": "0",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt0": "c_out_native_*&_pointer",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "array",
                                    "c_var": "array",
                                    "f_array_allocate": "(isize)",
                                    "f_assumed_shape": "(:)",
                                    "f_intent": "OUT",
                                    "f_kind": "C_DOUBLE",
                                    "f_type": "real(C_DOUBLE)",
                                    "f_var": "array",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE"
                                },
                                "fmtpy": {
                                    "array_size": "isize",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_type": "double",
                                    "c_var": "array",
                                    "ctor_expr": "*array",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "array",
                                    "cxx_type": "double",
                                    "cxx_var": "array",
                                    "data_var": "SHData_array",
                                    "npy_dims_var": "SHD_array",
                                    "npy_intp_asgn": "SHD_array[0] = isize;\n",
                                    "npy_intp_decl": "npy_intp SHD_array[1];\n",
                                    "npy_rank": "1",
                                    "numpy_type": "NPY_DOUBLE",
                                    "py_var": "SHPy_array",
                                    "rank": "1",
                                    "size_var": "SHSize_array",
                                    "stmt0": "py_out_native_*&_pointer_numpy",
                                    "stmt1": "py_out_native_*&_pointer_numpy",
                                    "value_var": "SHValue_array"
                                }
                            },
                            "isize": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "int",
                                    "c_var": "isize",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&isize",
                                    "cxx_type": "int",
                                    "cxx_var": "isize",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_inout_native_&",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "isize",
                                    "c_var": "isize",
                                    "f_intent": "INOUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "isize",
                                    "sh_type": "SH_TYPE_INT"
                                },
                                "fmtpy": {
                                    "array_size": "1",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "isize",
                                    "ctor_expr": "isize",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&isize",
                                    "cxx_type": "int",
                                    "cxx_var": "isize",
                                    "data_var": "SHData_isize",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_isize",
                                    "size_var": "SHSize_isize",
                                    "stmt0": "py_inout_native_&",
                                    "stmt1": "py_inout_native_&",
                                    "value_var": "SHValue_isize"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "*array,\t *isize",
                            "C_name": "ARR_ArrayWrapper_fetchArrayRef",
                            "C_name_api": "fetchArrayRef",
                            "C_prototype": "ARR_ArrayWrapper * self,\t double * * array,\t int * isize",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t array,\t isize",
                            "F_C_call": "c_ArrayWrapper_fetchArrayRef_bufferify",
                            "F_C_name": "c_ArrayWrapper_fetchArrayRef",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t SHT_array_cdesc",
                            "F_arguments": "obj,\t array",
                            "F_name_api": "fetchArrayRef",
                            "F_name_function": "fetchArrayRef",
                            "F_name_generic": "fetchArrayRef",
                            "F_name_impl": "ArrayWrapper_fetchArrayRef",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_fetchArrayRef",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "fetchArrayRef",
                            "stmt0": "f_subroutine",
                            "stmt1": "f_subroutine",
                            "stmtc0": "c_subroutine",
                            "stmtc1": "c_subroutine"
                        }
                    },
                    {
                        "<FUNCTION>": "22 ****************************************",
                        "_PTR_C_CXX_index": "10",
                        "_generated": "arg_to_buffer",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "fetchArrayRef",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "dimension": "isize",
                                                "intent": "out"
                                            },
                                            "metaattrs": {
                                                "api": "cdesc",
                                                "deref": "pointer",
                                                "dimension": [
                                                    {
                                                        "name": "isize"
                                                    }
                                                ],
                                                "intent": "out"
                                            },
                                            "name": "array",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                },
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "double"
                                        },
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    },
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "hidden": true
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "name": "isize",
                                            "pointer": [
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void fetchArrayRef(double *&array +intent(out)+dimension(isize), int &isize     +hidden)",
                        "declgen": "void fetchArrayRef(double * & array +dimension(isize)+intent(out), int & isize +hidden)",
                        "name": "fetchArrayRef",
                        "options": {},
                        "splicer_group": "buf",
                        "wrap": {
                            "c": true,
                            "f_c": true
                        },
                        "zz_fmtargs": {
                            "array": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_array_shape": "\nSHT_array_cdesc->shape[0] = isize;",
                                    "c_array_size": "SHT_array_cdesc->shape[0]",
                                    "c_array_size2": "isize",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "double",
                                    "c_var": "array",
                                    "c_var_cdesc": "SHT_array_cdesc",
                                    "cfi_type": "CFI_type_double",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "array",
                                    "cxx_type": "double",
                                    "cxx_var": "array",
                                    "hnamefunc0": "ShroudTypeDefines",
                                    "hnamefunc1": "array_context",
                                    "idtor": "0",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt0": "c_out_native_*&_cdesc_pointer",
                                    "stmt1": "c_out_native_*&_cdesc"
                                },
                                "fmtf": {
                                    "F_C_var": "array",
                                    "c_var": "array",
                                    "c_var_cdesc": "SHT_array_cdesc",
                                    "f_array_allocate": "(SHT_array_cdesc%shape(1))",
                                    "f_array_shape": ",\t SHT_array_cdesc%shape(1:1)",
                                    "f_assumed_shape": "(:)",
                                    "f_cdesc_shape": "\nSHT_array_cdesc%shape(1:1) = shape(array)",
                                    "f_intent": "OUT",
                                    "f_kind": "C_DOUBLE",
                                    "f_type": "real(C_DOUBLE)",
                                    "f_var": "array",
                                    "hnamefunc0": "array_context",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt0": "f_out_native_*&_cdesc_pointer",
                                    "stmt1": "f_out_native_*&_cdesc_pointer",
                                    "stmtc0": "c_out_native_*&_cdesc_pointer",
                                    "stmtc1": "c_out_native_*&_cdesc"
                                }
                            },
                            "isize": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "int",
                                    "c_var": "isize",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&isize",
                                    "cxx_type": "int",
                                    "cxx_var": "isize",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_inout_native_&_hidden",
                                    "stmt1": "c_inout_native_&_hidden"
                                },
                                "fmtf": {
                                    "F_C_var": "isize",
                                    "c_var": "isize",
                                    "f_intent": "INOUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "isize",
                                    "sh_type": "SH_TYPE_INT"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "array,\t isize",
                            "C_name": "ARR_ArrayWrapper_fetchArrayRef_bufferify",
                            "C_name_api": "fetchArrayRef",
                            "C_prototype": "ARR_ArrayWrapper * self,\t ARR_SHROUD_array *SHT_array_cdesc",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t SHT_array_cdesc",
                            "F_C_name": "c_ArrayWrapper_fetchArrayRef_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_name_api": "fetchArrayRef",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "fetchArrayRef",
                            "function_suffix": "_bufferify",
                            "stmt0": "c_subroutine",
                            "stmt1": "c_subroutine"
                        }
                    },
                    {
                        "<FUNCTION>": "11 ****************************************",
                        "C_generated_path": [
                            "arg_to_buffer"
                        ],
                        "_PTR_F_C_index": "23",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "fetchArrayPtrConst",
                                "params": [
                                    {
                                        "const": true,
                                        "declarator": {
                                            "attrs": {
                                                "dimension": "isize",
                                                "intent": "out"
                                            },
                                            "metaattrs": {
                                                "deref": "pointer",
                                                "dimension": [
                                                    {
                                                        "name": "isize"
                                                    }
                                                ],
                                                "intent": "out"
                                            },
                                            "name": "array",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                },
                                                {
                                                    "ptr": "*"
                                                }
                                            ],
                                            "typemap_name": "double"
                                        },
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    },
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "hidden": true
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "name": "isize",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                }
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void fetchArrayPtrConst( const double **array +intent(out)+dimension(isize), int *isize     +hidden)",
                        "declgen": "void fetchArrayPtrConst(const double * * array +dimension(isize)+intent(out), int * isize +hidden)",
                        "name": "fetchArrayPtrConst",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "array": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_array_size2": "isize",
                                    "c_const": "const ",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "double",
                                    "c_var": "array",
                                    "cfi_type": "CFI_type_double",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "const_cast<double *>\t(array)",
                                    "cxx_type": "double",
                                    "cxx_var": "array",
                                    "idtor": "0",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt0": "c_out_native_**_pointer",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "array",
                                    "c_var": "array",
                                    "f_array_allocate": "(isize)",
                                    "f_assumed_shape": "(:)",
                                    "f_intent": "OUT",
                                    "f_kind": "C_DOUBLE",
                                    "f_type": "real(C_DOUBLE)",
                                    "f_var": "array",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE"
                                },
                                "fmtpy": {
                                    "array_size": "isize",
                                    "c_const": "const ",
                                    "c_deref": "*",
                                    "c_type": "double",
                                    "c_var": "array",
                                    "ctor_expr": "*array",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "const_cast<double *>\t(array)",
                                    "cxx_type": "double",
                                    "cxx_var": "array",
                                    "data_var": "SHData_array",
                                    "npy_dims_var": "SHD_array",
                                    "npy_intp_asgn": "SHD_array[0] = isize;\n",
                                    "npy_intp_decl": "npy_intp SHD_array[1];\n",
                                    "npy_rank": "1",
                                    "numpy_type": "NPY_DOUBLE",
                                    "py_var": "SHPy_array",
                                    "rank": "1",
                                    "size_var": "SHSize_array",
                                    "stmt0": "py_out_native_**_pointer_numpy",
                                    "stmt1": "py_out_native_**_pointer_numpy",
                                    "value_var": "SHValue_array"
                                }
                            },
                            "isize": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "int",
                                    "c_var": "isize",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "isize",
                                    "cxx_type": "int",
                                    "cxx_var": "isize",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_inout_native_*",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "isize",
                                    "c_var": "isize",
                                    "f_intent": "INOUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "isize",
                                    "sh_type": "SH_TYPE_INT"
                                },
                                "fmtpy": {
                                    "array_size": "1",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_type": "int",
                                    "c_var": "isize",
                                    "ctor_expr": "isize",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "isize",
                                    "cxx_type": "int",
                                    "cxx_var": "isize",
                                    "data_var": "SHData_isize",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_isize",
                                    "size_var": "SHSize_isize",
                                    "stmt0": "py_inout_native_*",
                                    "stmt1": "py_inout_native_*",
                                    "value_var": "SHValue_isize"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "array,\t isize",
                            "C_name": "ARR_ArrayWrapper_fetchArrayPtrConst",
                            "C_name_api": "fetchArrayPtrConst",
                            "C_prototype": "ARR_ArrayWrapper * self,\t const double * * array,\t int * isize",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t array,\t isize",
                            "F_C_call": "c_ArrayWrapper_fetchArrayPtrConst_bufferify",
                            "F_C_name": "c_ArrayWrapper_fetchArrayPtrConst",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t SHT_array_cdesc",
                            "F_arguments": "obj,\t array",
                            "F_name_api": "fetchArrayPtrConst",
                            "F_name_function": "fetchArrayPtrConst",
                            "F_name_generic": "fetchArrayPtrConst",
                            "F_name_impl": "ArrayWrapper_fetchArrayPtrConst",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_fetchArrayPtrConst",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "fetchArrayPtrConst",
                            "stmt0": "f_subroutine",
                            "stmt1": "f_subroutine",
                            "stmtc0": "c_subroutine",
                            "stmtc1": "c_subroutine"
                        }
                    },
                    {
                        "<FUNCTION>": "23 ****************************************",
                        "_PTR_C_CXX_index": "11",
                        "_generated": "arg_to_buffer",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "fetchArrayPtrConst",
                                "params": [
                                    {
                                        "const": true,
                                        "declarator": {
                                            "attrs": {
                                                "dimension": "isize",
                                                "intent": "out"
                                            },
                                            "metaattrs": {
                                                "api": "cdesc",
                                                "deref": "pointer",
                                                "dimension": [
                                                    {
                                                        "name": "isize"
                                                    }
                                                ],
                                                "intent": "out"
                                            },
                                            "name": "array",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                },
                                                {
                                                    "ptr": "*"
                                                }
                                            ],
                                            "typemap_name": "double"
                                        },
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    },
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "hidden": true
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "name": "isize",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                }
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void fetchArrayPtrConst( const double **array +intent(out)+dimension(isize), int *isize     +hidden)",
                        "declgen": "void fetchArrayPtrConst(const double * * array +dimension(isize)+intent(out), int * isize +hidden)",
                        "name": "fetchArrayPtrConst",
                        "options": {},
                        "splicer_group": "buf",
                        "wrap": {
                            "c": true,
                            "f_c": true
                        },
                        "zz_fmtargs": {
                            "array": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_array_shape": "\nSHT_array_cdesc->shape[0] = isize;",
                                    "c_array_size": "SHT_array_cdesc->shape[0]",
                                    "c_array_size2": "isize",
                                    "c_const": "const ",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "double",
                                    "c_var": "array",
                                    "c_var_cdesc": "SHT_array_cdesc",
                                    "cfi_type": "CFI_type_double",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "const_cast<double *>\t(array)",
                                    "cxx_type": "double",
                                    "cxx_var": "array",
                                    "hnamefunc0": "ShroudTypeDefines",
                                    "hnamefunc1": "array_context",
                                    "idtor": "0",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt0": "c_out_native_**_cdesc_pointer",
                                    "stmt1": "c_out_native_**_cdesc"
                                },
                                "fmtf": {
                                    "F_C_var": "array",
                                    "c_var": "array",
                                    "c_var_cdesc": "SHT_array_cdesc",
                                    "f_array_allocate": "(SHT_array_cdesc%shape(1))",
                                    "f_array_shape": ",\t SHT_array_cdesc%shape(1:1)",
                                    "f_assumed_shape": "(:)",
                                    "f_cdesc_shape": "\nSHT_array_cdesc%shape(1:1) = shape(array)",
                                    "f_intent": "OUT",
                                    "f_kind": "C_DOUBLE",
                                    "f_type": "real(C_DOUBLE)",
                                    "f_var": "array",
                                    "hnamefunc0": "array_context",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt0": "f_out_native_**_cdesc_pointer",
                                    "stmt1": "f_out_native_**_cdesc_pointer",
                                    "stmtc0": "c_out_native_**_cdesc_pointer",
                                    "stmtc1": "c_out_native_**_cdesc"
                                }
                            },
                            "isize": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "int",
                                    "c_var": "isize",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "isize",
                                    "cxx_type": "int",
                                    "cxx_var": "isize",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_inout_native_*_hidden",
                                    "stmt1": "c_inout_native_*_hidden"
                                },
                                "fmtf": {
                                    "F_C_var": "isize",
                                    "c_var": "isize",
                                    "f_intent": "INOUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "isize",
                                    "sh_type": "SH_TYPE_INT"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "&array,\t &isize",
                            "C_name": "ARR_ArrayWrapper_fetchArrayPtrConst_bufferify",
                            "C_name_api": "fetchArrayPtrConst",
                            "C_prototype": "ARR_ArrayWrapper * self,\t ARR_SHROUD_array *SHT_array_cdesc",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t SHT_array_cdesc",
                            "F_C_name": "c_ArrayWrapper_fetchArrayPtrConst_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_name_api": "fetchArrayPtrConst",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "fetchArrayPtrConst",
                            "function_suffix": "_bufferify",
                            "stmt0": "c_subroutine",
                            "stmt1": "c_subroutine"
                        }
                    },
                    {
                        "<FUNCTION>": "12 ****************************************",
                        "C_generated_path": [
                            "arg_to_buffer"
                        ],
                        "_PTR_F_C_index": "24",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "fetchArrayRefConst",
                                "params": [
                                    {
                                        "const": true,
                                        "declarator": {
                                            "attrs": {
                                                "dimension": "isize",
                                                "intent": "out"
                                            },
                                            "metaattrs": {
                                                "deref": "pointer",
                                                "dimension": [
                                                    {
                                                        "name": "isize"
                                                    }
                                                ],
                                                "intent": "out"
                                            },
                                            "name": "array",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                },
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "double"
                                        },
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    },
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "hidden": true
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "name": "isize",
                                            "pointer": [
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void fetchArrayRefConst( const double *&array +intent(out)+dimension(isize), int &isize     +hidden)",
                        "declgen": "void fetchArrayRefConst(const double * & array +dimension(isize)+intent(out), int & isize +hidden)",
                        "name": "fetchArrayRefConst",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "array": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_array_size2": "isize",
                                    "c_const": "const ",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "double",
                                    "c_var": "array",
                                    "cfi_type": "CFI_type_double",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "const_cast<double *>\t(array)",
                                    "cxx_type": "double",
                                    "cxx_var": "array",
                                    "idtor": "0",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt0": "c_out_native_*&_pointer",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "array",
                                    "c_var": "array",
                                    "f_array_allocate": "(isize)",
                                    "f_assumed_shape": "(:)",
                                    "f_intent": "OUT",
                                    "f_kind": "C_DOUBLE",
                                    "f_type": "real(C_DOUBLE)",
                                    "f_var": "array",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE"
                                },
                                "fmtpy": {
                                    "array_size": "isize",
                                    "c_const": "const ",
                                    "c_deref": "*",
                                    "c_type": "double",
                                    "c_var": "array",
                                    "ctor_expr": "*array",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "const_cast<double *>\t(array)",
                                    "cxx_type": "double",
                                    "cxx_var": "array",
                                    "data_var": "SHData_array",
                                    "npy_dims_var": "SHD_array",
                                    "npy_intp_asgn": "SHD_array[0] = isize;\n",
                                    "npy_intp_decl": "npy_intp SHD_array[1];\n",
                                    "npy_rank": "1",
                                    "numpy_type": "NPY_DOUBLE",
                                    "py_var": "SHPy_array",
                                    "rank": "1",
                                    "size_var": "SHSize_array",
                                    "stmt0": "py_out_native_*&_pointer_numpy",
                                    "stmt1": "py_out_native_*&_pointer_numpy",
                                    "value_var": "SHValue_array"
                                }
                            },
                            "isize": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "int",
                                    "c_var": "isize",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&isize",
                                    "cxx_type": "int",
                                    "cxx_var": "isize",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_inout_native_&",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "isize",
                                    "c_var": "isize",
                                    "f_intent": "INOUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "isize",
                                    "sh_type": "SH_TYPE_INT"
                                },
                                "fmtpy": {
                                    "array_size": "1",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "isize",
                                    "ctor_expr": "isize",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&isize",
                                    "cxx_type": "int",
                                    "cxx_var": "isize",
                                    "data_var": "SHData_isize",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_isize",
                                    "size_var": "SHSize_isize",
                                    "stmt0": "py_inout_native_&",
                                    "stmt1": "py_inout_native_&",
                                    "value_var": "SHValue_isize"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "*array,\t *isize",
                            "C_name": "ARR_ArrayWrapper_fetchArrayRefConst",
                            "C_name_api": "fetchArrayRefConst",
                            "C_prototype": "ARR_ArrayWrapper * self,\t const double * * array,\t int * isize",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t array,\t isize",
                            "F_C_call": "c_ArrayWrapper_fetchArrayRefConst_bufferify",
                            "F_C_name": "c_ArrayWrapper_fetchArrayRefConst",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t SHT_array_cdesc",
                            "F_arguments": "obj,\t array",
                            "F_name_api": "fetchArrayRefConst",
                            "F_name_function": "fetchArrayRefConst",
                            "F_name_generic": "fetchArrayRefConst",
                            "F_name_impl": "ArrayWrapper_fetchArrayRefConst",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_fetchArrayRefConst",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "fetchArrayRefConst",
                            "stmt0": "f_subroutine",
                            "stmt1": "f_subroutine",
                            "stmtc0": "c_subroutine",
                            "stmtc1": "c_subroutine"
                        }
                    },
                    {
                        "<FUNCTION>": "24 ****************************************",
                        "_PTR_C_CXX_index": "12",
                        "_generated": "arg_to_buffer",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "fetchArrayRefConst",
                                "params": [
                                    {
                                        "const": true,
                                        "declarator": {
                                            "attrs": {
                                                "dimension": "isize",
                                                "intent": "out"
                                            },
                                            "metaattrs": {
                                                "api": "cdesc",
                                                "deref": "pointer",
                                                "dimension": [
                                                    {
                                                        "name": "isize"
                                                    }
                                                ],
                                                "intent": "out"
                                            },
                                            "name": "array",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                },
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "double"
                                        },
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    },
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "hidden": true
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "name": "isize",
                                            "pointer": [
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void fetchArrayRefConst( const double *&array +intent(out)+dimension(isize), int &isize     +hidden)",
                        "declgen": "void fetchArrayRefConst(const double * & array +dimension(isize)+intent(out), int & isize +hidden)",
                        "name": "fetchArrayRefConst",
                        "options": {},
                        "splicer_group": "buf",
                        "wrap": {
                            "c": true,
                            "f_c": true
                        },
                        "zz_fmtargs": {
                            "array": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_array_shape": "\nSHT_array_cdesc->shape[0] = isize;",
                                    "c_array_size": "SHT_array_cdesc->shape[0]",
                                    "c_array_size2": "isize",
                                    "c_const": "const ",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "double",
                                    "c_var": "array",
                                    "c_var_cdesc": "SHT_array_cdesc",
                                    "cfi_type": "CFI_type_double",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "const_cast<double *>\t(array)",
                                    "cxx_type": "double",
                                    "cxx_var": "array",
                                    "hnamefunc0": "ShroudTypeDefines",
                                    "hnamefunc1": "array_context",
                                    "idtor": "0",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt0": "c_out_native_*&_cdesc_pointer",
                                    "stmt1": "c_out_native_*&_cdesc"
                                },
                                "fmtf": {
                                    "F_C_var": "array",
                                    "c_var": "array",
                                    "c_var_cdesc": "SHT_array_cdesc",
                                    "f_array_allocate": "(SHT_array_cdesc%shape(1))",
                                    "f_array_shape": ",\t SHT_array_cdesc%shape(1:1)",
                                    "f_assumed_shape": "(:)",
                                    "f_cdesc_shape": "\nSHT_array_cdesc%shape(1:1) = shape(array)",
                                    "f_intent": "OUT",
                                    "f_kind": "C_DOUBLE",
                                    "f_type": "real(C_DOUBLE)",
                                    "f_var": "array",
                                    "hnamefunc0": "array_context",
                                    "rank": "1",
                                    "sh_type": "SH_TYPE_DOUBLE",
                                    "stmt0": "f_out_native_*&_cdesc_pointer",
                                    "stmt1": "f_out_native_*&_cdesc_pointer",
                                    "stmtc0": "c_out_native_*&_cdesc_pointer",
                                    "stmtc1": "c_out_native_*&_cdesc"
                                }
                            },
                            "isize": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "int",
                                    "c_var": "isize",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&isize",
                                    "cxx_type": "int",
                                    "cxx_var": "isize",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_inout_native_&_hidden",
                                    "stmt1": "c_inout_native_&_hidden"
                                },
                                "fmtf": {
                                    "F_C_var": "isize",
                                    "c_var": "isize",
                                    "f_intent": "INOUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "isize",
                                    "sh_type": "SH_TYPE_INT"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "array,\t isize",
                            "C_name": "ARR_ArrayWrapper_fetchArrayRefConst_bufferify",
                            "C_name_api": "fetchArrayRefConst",
                            "C_prototype": "ARR_ArrayWrapper * self,\t ARR_SHROUD_array *SHT_array_cdesc",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t SHT_array_cdesc",
                            "F_C_name": "c_ArrayWrapper_fetchArrayRefConst_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_name_api": "fetchArrayRefConst",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "fetchArrayRefConst",
                            "function_suffix": "_bufferify",
                            "stmt0": "c_subroutine",
                            "stmt1": "c_subroutine"
                        }
                    },
                    {
                        "<FUNCTION>": "13 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "fetchVoidPtr",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "out"
                                            },
                                            "metaattrs": {
                                                "intent": "out"
                                            },
                                            "name": "array",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                },
                                                {
                                                    "ptr": "*"
                                                }
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "specifier": [
                                            "void"
                                        ],
                                        "typemap_name": "void"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void fetchVoidPtr(void **array +intent(out))",
                        "declgen": "void fetchVoidPtr(void * * array +intent(out))",
                        "name": "fetchVoidPtr",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "array": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "void",
                                    "c_var": "array",
                                    "cfi_type": "CFI_type_intptr_t",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "array",
                                    "cxx_type": "void",
                                    "cxx_var": "array",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_CPTR",
                                    "stmt0": "c_out_void_**",
                                    "stmt1": "c_out_void_**"
                                },
                                "fmtf": {
                                    "F_C_var": "array",
                                    "c_var": "array",
                                    "f_intent": "OUT",
                                    "f_type": "type(C_PTR)",
                                    "f_var": "array",
                                    "sh_type": "SH_TYPE_CPTR",
                                    "stmt0": "f_out_void_**",
                                    "stmt1": "f_out_void_**",
                                    "stmtc0": "c_out_void_**",
                                    "stmtc1": "c_out_void_**"
                                },
                                "fmtpy": {
                                    "array_size": "1",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_type": "void",
                                    "c_var": "array",
                                    "ctor_expr": "array",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "array",
                                    "cxx_type": "void",
                                    "cxx_var": "array",
                                    "data_var": "SHData_array",
                                    "numpy_type": null,
                                    "py_var": "SHPy_array",
                                    "size_var": "SHSize_array",
                                    "stmt0": "py_out_void_**",
                                    "stmt1": "py_out_void_**",
                                    "value_var": "SHValue_array"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "array",
                            "C_name": "ARR_ArrayWrapper_fetchVoidPtr",
                            "C_name_api": "fetchVoidPtr",
                            "C_prototype": "ARR_ArrayWrapper * self,\t void **array",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t array",
                            "F_C_call": "c_ArrayWrapper_fetchVoidPtr",
                            "F_C_name": "c_ArrayWrapper_fetchVoidPtr",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t array",
                            "F_arguments": "obj,\t array",
                            "F_name_api": "fetchVoidPtr",
                            "F_name_function": "fetchVoidPtr",
                            "F_name_generic": "fetchVoidPtr",
                            "F_name_impl": "ArrayWrapper_fetchVoidPtr",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_fetchVoidPtr",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "fetchVoidPtr",
                            "stmt0": "f_subroutine",
                            "stmt1": "f_subroutine",
                            "stmtc0": "c_subroutine",
                            "stmtc1": "c_subroutine"
                        }
                    },
                    {
                        "<FUNCTION>": "14 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "fetchVoidRef",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "out"
                                            },
                                            "metaattrs": {
                                                "intent": "out"
                                            },
                                            "name": "array",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                },
                                                {
                                                    "ptr": "&"
                                                }
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "specifier": [
                                            "void"
                                        ],
                                        "typemap_name": "void"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void fetchVoidRef(void *&array +intent(out))",
                        "declgen": "void fetchVoidRef(void * & array +intent(out))",
                        "name": "fetchVoidRef",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "array": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "void",
                                    "c_var": "array",
                                    "cfi_type": "CFI_type_intptr_t",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "array",
                                    "cxx_type": "void",
                                    "cxx_var": "array",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_CPTR",
                                    "stmt0": "c_out_void_*&",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "array",
                                    "c_var": "array",
                                    "f_intent": "OUT",
                                    "f_type": "type(C_PTR)",
                                    "f_var": "array",
                                    "sh_type": "SH_TYPE_CPTR",
                                    "stmt0": "f_out_void_*&",
                                    "stmt1": "f_default",
                                    "stmtc0": "c_out_void_*&",
                                    "stmtc1": "c_default"
                                },
                                "fmtpy": {
                                    "array_size": "1",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_type": "void",
                                    "c_var": "array",
                                    "ctor_expr": "array",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "array",
                                    "cxx_type": "void",
                                    "cxx_var": "array",
                                    "data_var": "SHData_array",
                                    "numpy_type": null,
                                    "py_var": "SHPy_array",
                                    "size_var": "SHSize_array",
                                    "stmt0": "py_out_void_*&",
                                    "stmt1": "py_out_void_*&",
                                    "value_var": "SHValue_array"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "*array",
                            "C_name": "ARR_ArrayWrapper_fetchVoidRef",
                            "C_name_api": "fetchVoidRef",
                            "C_prototype": "ARR_ArrayWrapper * self,\t void * * array",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t array",
                            "F_C_call": "c_ArrayWrapper_fetchVoidRef",
                            "F_C_name": "c_ArrayWrapper_fetchVoidRef",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t array",
                            "F_arguments": "obj,\t array",
                            "F_name_api": "fetchVoidRef",
                            "F_name_function": "fetchVoidRef",
                            "F_name_generic": "fetchVoidRef",
                            "F_name_impl": "ArrayWrapper_fetchVoidRef",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_fetchVoidRef",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "fetchVoidRef",
                            "stmt0": "f_subroutine",
                            "stmt1": "f_subroutine",
                            "stmtc0": "c_subroutine",
                            "stmtc1": "c_subroutine"
                        }
                    },
                    {
                        "<FUNCTION>": "15 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "checkPtr",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "name": "array",
                                            "pointer": [
                                                {
                                                    "ptr": "*"
                                                }
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "specifier": [
                                            "void"
                                        ],
                                        "typemap_name": "void"
                                    }
                                ],
                                "typemap_name": "bool"
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        },
                        "decl": "bool checkPtr(void *array)",
                        "declgen": "bool checkPtr(void * array +value)",
                        "name": "checkPtr",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "array": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "void",
                                    "c_var": "array",
                                    "cfi_type": "CFI_type_intptr_t",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "array",
                                    "cxx_type": "void",
                                    "cxx_var": "array",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_CPTR",
                                    "stmt0": "c_in_void_*",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "array",
                                    "c_var": "array",
                                    "f_intent": "IN",
                                    "f_type": "type(C_PTR)",
                                    "f_var": "array",
                                    "sh_type": "SH_TYPE_CPTR",
                                    "stmt0": "f_in_void_*",
                                    "stmt1": "f_in_void_*",
                                    "stmtc0": "c_in_void_*",
                                    "stmtc1": "c_default"
                                },
                                "fmtpy": {
                                    "array_size": "1",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_type": "void",
                                    "c_var": "array",
                                    "ctor_expr": "*array",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "array",
                                    "cxx_type": "void",
                                    "cxx_var": "array",
                                    "data_var": "SHData_array",
                                    "numpy_type": null,
                                    "py_var": "SHPy_array",
                                    "pytmp_var": "SHTPy_array",
                                    "size_var": "SHSize_array",
                                    "stmt0": "py_in_void_*",
                                    "stmt1": "py_in_void_*",
                                    "value_var": "SHValue_array"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "array",
                            "C_name": "ARR_ArrayWrapper_checkPtr",
                            "C_name_api": "checkPtr",
                            "C_prototype": "ARR_ArrayWrapper * self,\t void * array",
                            "C_return_type": "bool",
                            "F_C_arguments": "self,\t array",
                            "F_C_call": "c_ArrayWrapper_checkPtr",
                            "F_C_name": "c_ArrayWrapper_checkPtr",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem,\t array",
                            "F_arguments": "obj,\t array",
                            "F_name_api": "checkPtr",
                            "F_name_function": "checkPtr",
                            "F_name_generic": "checkPtr",
                            "F_name_impl": "ArrayWrapper_checkPtr",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_checkPtr",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "bool SHC_rv",
                            "function_name": "checkPtr"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_get_value": "",
                                "c_type": "bool",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_Bool",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHC_rv",
                                "cxx_type": "bool",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_BOOL",
                                "stmt0": "c_function_bool_scalar",
                                "stmt1": "c_function"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "bool",
                                "f_intent": "OUT",
                                "f_kind": "C_BOOL",
                                "f_type": "logical",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_BOOL",
                                "stmt0": "f_function_bool_scalar",
                                "stmt1": "f_function_bool",
                                "stmtc0": "c_function_bool_scalar",
                                "stmtc1": "c_function"
                            },
                            "fmtpy": {
                                "PyTypeObject": "PyBool_Type",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "bool",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": "NPY_BOOL",
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_function_bool_scalar",
                                "stmt1": "py_function_bool",
                                "value_var": "SHValue_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "16 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "function"
                                },
                                "name": "sumArray",
                                "params": [],
                                "typemap_name": "double"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "decl": "double sumArray()",
                        "declgen": "double sumArray(void)",
                        "name": "sumArray",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "ARR_ArrayWrapper_sumArray",
                            "C_name_api": "sumArray",
                            "C_prototype": "ARR_ArrayWrapper * self",
                            "C_return_type": "double",
                            "F_C_arguments": "self",
                            "F_C_call": "c_ArrayWrapper_sumArray",
                            "F_C_name": "c_ArrayWrapper_sumArray",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_api": "sumArray",
                            "F_name_function": "sumArray",
                            "F_name_generic": "sumArray",
                            "F_name_impl": "ArrayWrapper_sumArray",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_sumArray",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "double SHC_rv",
                            "function_name": "sumArray"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_get_value": "",
                                "c_type": "double",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_double",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHC_rv",
                                "cxx_type": "double",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "c_function_native_scalar",
                                "stmt1": "c_function"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "double",
                                "f_intent": "OUT",
                                "f_kind": "C_DOUBLE",
                                "f_type": "real(C_DOUBLE)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "f_function_native_scalar",
                                "stmt1": "f_function",
                                "stmtc0": "c_function_native_scalar",
                                "stmtc1": "c_function"
                            },
                            "fmtpy": {
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "double",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": "NPY_DOUBLE",
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_function_native_scalar",
                                "stmt1": "py_default",
                                "value_var": "SHValue_rv"
                            }
                        }
                    }
                ],
                "name": "ArrayWrapper",
                "options": {},
                "parse_keyword": "class",
                "scope": "ArrayWrapper::",
                "typemap_name": "ArrayWrapper",
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapArrayWrapper.h",
                    "C_impl_filename": "wrapArrayWrapper.cpp",
                    "C_name_api": "ArrayWrapper",
                    "C_name_scope": "ArrayWrapper_",
                    "C_type_name": "ARR_ArrayWrapper",
                    "F_derived_name": "ArrayWrapper",
                    "F_name_api": "ArrayWrapper",
                    "F_name_scope": "ArrayWrapper_",
                    "PY_PyObject": "PY_ArrayWrapper",
                    "PY_PyTypeObject": "PY_ArrayWrapper_Type",
                    "PY_capsule_name": "PY_ArrayWrapper_capsule_name",
                    "PY_from_object_func": "PP_ArrayWrapper_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_ArrayWrapper_to_Object",
                    "PY_to_object_idtor_func": "PP_ArrayWrapper_to_Object_idtor",
                    "PY_type_filename": "pyArrayWrappertype.cpp",
                    "class_scope": "ArrayWrapper::",
                    "cxx_class": "ArrayWrapper",
                    "cxx_type": "ArrayWrapper",
                    "f_capsule_data_type": "ARR_SHROUD_capsule_data",
                    "file_scope": "ArrayWrapper",
                    "hnamefunc0": "capsule_data_helper"
                }
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "arrayclass.hpp"
        ],
        "language": "cxx",
        "scope_file": [
            "arrayclass"
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "python": true
        }
    },
    "symtab": {
        "ArrayWrapper": "ArrayWrapper"
    },
    "types": {
        "ArrayWrapper": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_ArrayWrapper",
            "PY_PyTypeObject": "PY_ArrayWrapper_Type",
            "PY_from_object": "PP_ArrayWrapper_from_Object",
            "PY_to_object": "PP_ArrayWrapper_to_Object",
            "PY_to_object_idtor": "PP_ArrayWrapper_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}ArrayWrapper *>\t({c_var}->addr)",
            "c_type": "ARR_ArrayWrapper",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "ArrayWrapper",
            "f_c_module": {
                "--import--": [
                    "ARR_SHROUD_capsule_data"
                ]
            },
            "f_c_module_line": "--import--:ARR_SHROUD_capsule_data",
            "f_c_type": "type(ARR_SHROUD_capsule_data)",
            "f_capsule_data_type": "ARR_SHROUD_capsule_data",
            "f_class": "class(ArrayWrapper)",
            "f_derived_type": "ArrayWrapper",
            "f_module": {
                "arrayclass_mod": [
                    "ArrayWrapper"
                ]
            },
            "f_module_line": "arrayclass_mod:ArrayWrapper",
            "f_module_name": "arrayclass_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(ArrayWrapper)",
            "flat_name": "ArrayWrapper",
            "idtor": "1",
            "impl_header": [
                "arrayclass.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesarrayclass.h"
            ]
        }
    }
}