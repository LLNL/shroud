// wrapArrayWrapper.h
// This file is generated by Shroud nowrite-version. Do not edit.
// Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
// other Shroud Project Developers.
// See the top-level COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//
/**
 * \file wrapArrayWrapper.h
 * \brief Shroud generated wrapper for ArrayWrapper class
 */
// For C users and C++ implementation

#ifndef WRAPARRAYWRAPPER_H
#define WRAPARRAYWRAPPER_H

// typemap
#ifndef __cplusplus
#include <stdbool.h>
#endif
// shroud
#include "typesarrayclass.h"

// splicer begin class.ArrayWrapper.CXX_declarations
// splicer end class.ArrayWrapper.CXX_declarations

#ifdef __cplusplus
extern "C" {
#endif

// splicer begin class.ArrayWrapper.C_declarations
// splicer end class.ArrayWrapper.C_declarations

ARR_ArrayWrapper * ARR_ArrayWrapper_ctor(ARR_ArrayWrapper * SHC_rv);

void ARR_ArrayWrapper_setSize(ARR_ArrayWrapper * self, int size);

int ARR_ArrayWrapper_getSize(const ARR_ArrayWrapper * self);

void ARR_ArrayWrapper_fillSize(ARR_ArrayWrapper * self, int * size);

void ARR_ArrayWrapper_allocate(ARR_ArrayWrapper * self);

double * ARR_ArrayWrapper_getArray(ARR_ArrayWrapper * self);

void ARR_ArrayWrapper_getArray_bufferify(ARR_ArrayWrapper * self,
    ARR_SHROUD_array *SHT_rv_cdesc);

double * ARR_ArrayWrapper_getArrayConst(const ARR_ArrayWrapper * self);

void ARR_ArrayWrapper_getArrayConst_bufferify(
    const ARR_ArrayWrapper * self, ARR_SHROUD_array *SHT_rv_cdesc);

const double * ARR_ArrayWrapper_getArrayC(ARR_ArrayWrapper * self);

void ARR_ArrayWrapper_getArrayC_bufferify(ARR_ArrayWrapper * self,
    ARR_SHROUD_array *SHT_rv_cdesc);

const double * ARR_ArrayWrapper_getArrayConstC(
    const ARR_ArrayWrapper * self);

void ARR_ArrayWrapper_getArrayConstC_bufferify(
    const ARR_ArrayWrapper * self, ARR_SHROUD_array *SHT_rv_cdesc);

void ARR_ArrayWrapper_fetchArrayPtr(ARR_ArrayWrapper * self,
    double * * array, int * isize);

void ARR_ArrayWrapper_fetchArrayPtr_bufferify(ARR_ArrayWrapper * self,
    ARR_SHROUD_array *SHT_array_cdesc);

void ARR_ArrayWrapper_fetchArrayRef(ARR_ArrayWrapper * self,
    double * * array, int * isize);

void ARR_ArrayWrapper_fetchArrayRef_bufferify(ARR_ArrayWrapper * self,
    ARR_SHROUD_array *SHT_array_cdesc);

void ARR_ArrayWrapper_fetchArrayPtrConst(ARR_ArrayWrapper * self,
    const double * * array, int * isize);

void ARR_ArrayWrapper_fetchArrayPtrConst_bufferify(
    ARR_ArrayWrapper * self, ARR_SHROUD_array *SHT_array_cdesc);

void ARR_ArrayWrapper_fetchArrayRefConst(ARR_ArrayWrapper * self,
    const double * * array, int * isize);

void ARR_ArrayWrapper_fetchArrayRefConst_bufferify(
    ARR_ArrayWrapper * self, ARR_SHROUD_array *SHT_array_cdesc);

void ARR_ArrayWrapper_fetchVoidPtr(ARR_ArrayWrapper * self,
    void **array);

void ARR_ArrayWrapper_fetchVoidRef(ARR_ArrayWrapper * self,
    void * * array);

bool ARR_ArrayWrapper_checkPtr(ARR_ArrayWrapper * self, void * array);

double ARR_ArrayWrapper_sumArray(ARR_ArrayWrapper * self);

#ifdef __cplusplus
}
#endif

#endif  // WRAPARRAYWRAPPER_H
