{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "class_map": [
            "CAPI_Class1",
            "Cstruct_as_class",
            "Cstruct_as_subclass",
            "Names2",
            "internal_ImplWorker1",
            "ns0_Names",
            "std_vector_double",
            "std_vector_int",
            "std_vector_internal_ImplWorker1",
            "std_vector_long",
            "twoTs_float,_double",
            "twoTs_int,_long"
        ],
        "classes": [
            {
                "<CLASS>": "Names2 ****************************************",
                "cxx_header": [],
                "name": "Names2",
                "options": {},
                "parse_keyword": "class",
                "scope": "Names2::",
                "typemap_name": "Names2",
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapNames2.hh",
                    "C_impl_filename": "wrapNames2.cc",
                    "C_name_api": "Names2",
                    "C_name_scope": "Names2_",
                    "C_type_name": "TES_Names2",
                    "F_derived_name": "names2",
                    "F_name_api": "names2",
                    "F_name_scope": "names2_",
                    "PY_PyObject": "PY_Names2",
                    "PY_PyTypeObject": "PY_Names2_Type",
                    "PY_capsule_name": "PY_Names2_capsule_name",
                    "PY_from_object_func": "PP_Names2_from_Object",
                    "PY_this_call": "self->myobj->",
                    "PY_to_object_func": "PP_Names2_to_Object",
                    "PY_to_object_idtor_func": "PP_Names2_to_Object_idtor",
                    "PY_type_filename": "pyNames2type.cpp",
                    "class_scope": "Names2::",
                    "cxx_class": "Names2",
                    "cxx_type": "Names2",
                    "f_capsule_data_type": "TES_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "TES_SHROUD_capsule_data",
                    "file_scope": "Names2"
                }
            },
            {
                "<CLASS>": "twoTs ****************************************",
                "cxx_header": [],
                "name": "twoTs",
                "name_api": "twoTs_0",
                "name_instantiation": "twoTs<int, long>",
                "options": {},
                "parse_keyword": "class",
                "scope": "twoTs::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "template_suffix": "_instantiation4"
                        },
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T1",
                    "T2"
                ],
                "typemap_name": "twoTs_0",
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wraptwoTs_0.hh",
                    "C_impl_filename": "wraptwoTs_0.cc",
                    "C_name_api": "twoTs_0",
                    "C_name_scope": "twoTs_0_",
                    "C_type_name": "TES_twoTs_0",
                    "F_derived_name": "two_ts_0",
                    "F_name_api": "two_ts_0",
                    "F_name_scope": "two_ts_0_",
                    "PY_PyObject": "PY_twoTs_0",
                    "PY_PyTypeObject": "PY_twoTs_0_Type",
                    "PY_capsule_name": "PY_twoTs_0_capsule_name",
                    "PY_from_object_func": "PP_twoTs_0_from_Object",
                    "PY_this_call": "self->myobj->",
                    "PY_to_object_func": "PP_twoTs_0_to_Object",
                    "PY_to_object_idtor_func": "PP_twoTs_0_to_Object_idtor",
                    "PY_type_filename": "pytwoTs_0type.cpp",
                    "class_scope": "twoTs<int, long>::",
                    "cxx_class": "twoTs_0",
                    "cxx_type": "twoTs<int, long>",
                    "f_capsule_data_type": "TES_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "TES_SHROUD_capsule_data",
                    "file_scope": "twoTs_0"
                }
            },
            {
                "<CLASS>": "twoTs ****************************************",
                "cxx_header": [],
                "name": "twoTs",
                "name_api": "twoTs_instantiation4",
                "name_instantiation": "twoTs<float, double>",
                "options": {},
                "parse_keyword": "class",
                "scope": "twoTs::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "template_suffix": "_instantiation4"
                        },
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T1",
                    "T2"
                ],
                "typemap_name": "twoTs_instantiation4",
                "user_fmt": {
                    "template_suffix": "_instantiation4"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wraptwoTs_instantiation4.hh",
                    "C_impl_filename": "wraptwoTs_instantiation4.cc",
                    "C_name_api": "twoTs_instantiation4",
                    "C_name_scope": "twoTs_instantiation4_",
                    "C_type_name": "TES_twoTs_instantiation4",
                    "F_derived_name": "two_ts_instantiation4",
                    "F_name_api": "two_ts_instantiation4",
                    "F_name_scope": "two_ts_instantiation4_",
                    "PY_PyObject": "PY_twoTs_instantiation4",
                    "PY_PyTypeObject": "PY_twoTs_instantiation4_Type",
                    "PY_capsule_name": "PY_twoTs_instantiation4_capsule_name",
                    "PY_from_object_func": "PP_twoTs_instantiation4_from_Object",
                    "PY_this_call": "self->myobj->",
                    "PY_to_object_func": "PP_twoTs_instantiation4_to_Object",
                    "PY_to_object_idtor_func": "PP_twoTs_instantiation4_to_Object_idtor",
                    "PY_type_filename": "pytwoTs_instantiation4type.cpp",
                    "class_scope": "twoTs<float, double>::",
                    "cxx_class": "twoTs_instantiation4",
                    "cxx_type": "twoTs<float, double>",
                    "f_capsule_data_type": "TES_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "TES_SHROUD_capsule_data",
                    "file_scope": "twoTs_instantiation4",
                    "template_suffix": "_instantiation4"
                }
            },
            {
                "<CLASS>": "Cstruct_as_class ****************************************",
                "cxx_header": [],
                "name": "Cstruct_as_class",
                "options": {
                    "wrap_struct_as": "class"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct_as_class::",
                "typemap_name": "Cstruct_as_class",
                "user_fmt": {
                    "F_derived_name": "Fstruct_as_class"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "wrap_as": "class",
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapCstruct_as_class.hh",
                    "C_impl_filename": "wrapCstruct_as_class.cc",
                    "C_name_api": "Cstruct_as_class",
                    "C_name_scope": "Cstruct_as_class_",
                    "C_type_name": "TES_Cstruct_as_class",
                    "F_derived_name": "Fstruct_as_class",
                    "F_name_api": "cstruct_as_class",
                    "F_name_scope": "cstruct_as_class_",
                    "PY_PyObject": "PY_Cstruct_as_class",
                    "PY_PyTypeObject": "PY_Cstruct_as_class_Type",
                    "PY_from_object_func": "PP_Cstruct_as_class_from_Object",
                    "PY_struct_array_descr_create": "PY_Cstruct_as_class_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_as_class_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_as_class_array_descr",
                    "PY_to_object_func": "PP_Cstruct_as_class_to_Object",
                    "PY_to_object_idtor_func": "PP_Cstruct_as_class_to_Object_idtor",
                    "class_scope": "Cstruct_as_class::",
                    "cxx_class": "Cstruct_as_class",
                    "cxx_type": "Cstruct_as_class",
                    "f_capsule_data_type": "TES_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "TES_SHROUD_capsule_data",
                    "file_scope": "Cstruct_as_class"
                }
            },
            {
                "<CLASS>": "Cstruct_as_subclass ****************************************",
                "cxx_header": [],
                "name": "Cstruct_as_subclass",
                "options": {
                    "class_baseclass": "Cstruct_as_class",
                    "wrap_struct_as": "class"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct_as_subclass::",
                "typemap_name": "Cstruct_as_subclass",
                "user_fmt": {
                    "F_derived_name": "Fstruct_as_subclass"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "wrap_as": "class",
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapCstruct_as_subclass.hh",
                    "C_impl_filename": "wrapCstruct_as_subclass.cc",
                    "C_name_api": "Cstruct_as_subclass",
                    "C_name_scope": "Cstruct_as_subclass_",
                    "C_type_name": "TES_Cstruct_as_subclass",
                    "F_derived_member_base": "Fstruct_as_class",
                    "F_derived_name": "Fstruct_as_subclass",
                    "F_name_api": "cstruct_as_subclass",
                    "F_name_scope": "cstruct_as_subclass_",
                    "PY_PyObject": "PY_Cstruct_as_subclass",
                    "PY_PyTypeObject": "PY_Cstruct_as_subclass_Type",
                    "PY_from_object_func": "PP_Cstruct_as_subclass_from_Object",
                    "PY_struct_array_descr_create": "PY_Cstruct_as_subclass_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_as_subclass_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_as_subclass_array_descr",
                    "PY_to_object_func": "PP_Cstruct_as_subclass_to_Object",
                    "PY_to_object_idtor_func": "PP_Cstruct_as_subclass_to_Object_idtor",
                    "class_scope": "Cstruct_as_subclass::",
                    "cxx_class": "Cstruct_as_subclass",
                    "cxx_type": "Cstruct_as_subclass",
                    "f_capsule_data_type": "TES_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "TES_SHROUD_capsule_data",
                    "file_scope": "Cstruct_as_subclass"
                }
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "enums": [
            {
                "<ENUM>": "Color ****************************************",
                "_fmtmembers": {
                    "BLUE": {
                        "C_enum_member": "TES_BLUE",
                        "F_enum_member": "blue",
                        "F_value": 1,
                        "enum_member_lower": "blue",
                        "enum_member_name": "BLUE",
                        "enum_member_upper": "BLUE"
                    },
                    "RED": {
                        "C_enum_member": "TES_RED",
                        "F_enum_member": "red",
                        "F_value": 0,
                        "enum_member_lower": "red",
                        "enum_member_name": "RED",
                        "enum_member_upper": "RED"
                    },
                    "WHITE": {
                        "C_enum_member": "TES_WHITE",
                        "F_enum_member": "white",
                        "F_value": 2,
                        "enum_member_lower": "white",
                        "enum_member_name": "WHITE",
                        "enum_member_upper": "WHITE"
                    }
                },
                "ast": {
                    "members": [
                        {
                            "name": "RED"
                        },
                        {
                            "name": "BLUE"
                        },
                        {
                            "name": "WHITE"
                        }
                    ],
                    "name": "Color"
                },
                "decl": "enum Color {\n  RED,\n  BLUE,\n  WHITE\n};\n",
                "name": "Color",
                "options": {
                    "bar": 4
                },
                "typemap_name": "Color",
                "user_fmt": {
                    "baz": "4"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_enum": "TES_Color",
                    "enum_lower": "color",
                    "enum_name": "Color",
                    "enum_upper": "COLOR"
                }
            }
        ],
        "functions": [
            {
                "<FUNCTION>": "getName  4 ****************************************",
                "_PTR_F_C_index": "19",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getName",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "len": "worklen",
                                        "len_trim": "worktrim"
                                    },
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getName(char *name +len(worklen) +len_trim(worktrim))",
                "declgen": "void getName(char * name +len(worklen)+len_trim(worktrim))",
                "name": "getName",
                "options": {},
                "wrap": {
                    "c": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_char_len": "worklen",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_inout_char_*"
                        },
                        "fmtf": {
                            "F_C_var": "name",
                            "f_char_len": "len=worklen",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "i_var": "name",
                            "sh_type": "SH_TYPE_OTHER"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name",
                            "ctor_expr": "name",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "data_var": "SHData_name",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt": "py_inout_char_*",
                            "value_var": "SHValue_name"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "name",
                    "C_name": "TES_getName",
                    "C_name_api": "getName",
                    "C_prototype": "char * name",
                    "C_return_type": "void",
                    "F_C_arguments": "name",
                    "F_C_name": "c_get_name",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "get_name",
                    "PY_name_impl": "PY_getName",
                    "function_name": "getName",
                    "stmtc": "f_subroutine"
                }
            },
            {
                "<FUNCTION>": "getName  19 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_C_CXX_index": "4",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "getName",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "len": "worklen",
                                        "len_trim": "worktrim"
                                    },
                                    "metaattrs": {
                                        "api": "buf",
                                        "intent": "inout"
                                    },
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getName(char *name +len(worklen) +len_trim(worktrim))",
                "declgen": "void getName(char * name +len(worklen)+len_trim(worktrim))",
                "name": "getName",
                "options": {},
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_char_len": "worklen",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_alloc": "ShroudCharAlloc",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_helper_char_free": "ShroudCharFree",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "c_var_len": "SHT_name_len",
                            "c_var_str": "SHT_name_str",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_inout_char_*_buf"
                        },
                        "fmtf": {
                            "F_C_var": "name",
                            "c_var_len": "SHT_name_len",
                            "c_var_str": "SHT_name_str",
                            "f_char_len": "len=worklen",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "f_var_len": "SHT_name_len",
                            "fc_var": "name",
                            "i_var": "name",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtf": "f_inout_char_*_buf"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHT_name_str",
                    "C_name": "TES_getName_bufferify",
                    "C_name_api": "getName",
                    "C_prototype": "char *name,\t int SHT_name_len",
                    "C_return_type": "void",
                    "F_C_arguments": "name,\t SHT_name_len",
                    "F_C_call": "c_get_name_bufferify",
                    "F_C_name": "c_get_name_bufferify",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "name,\t SHT_name_len",
                    "F_arguments": "name",
                    "F_name_api": "get_name",
                    "F_name_function": "get_name",
                    "F_name_generic": "get_name",
                    "F_name_impl": "get_name",
                    "F_subprogram": "subroutine",
                    "f_c_suffix": "_bufferify",
                    "function_name": "getName",
                    "stmtc": "f_subroutine",
                    "stmtf": "f_subroutine"
                }
            },
            {
                "<FUNCTION>": "function1  5 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "function1",
                        "params": [],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void function1()",
                "declgen": "void function1(void)",
                "name": "function1",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "YYY_TES_function1",
                    "C_name_api": "function1",
                    "C_prototype": "void",
                    "C_return_type": "void",
                    "F_C_arguments": "",
                    "F_C_call": "YYY_TES_function1",
                    "F_C_name": "YYY_TES_function1",
                    "F_C_subprogram": "subroutine",
                    "F_arguments": "",
                    "F_name_api": "function1",
                    "F_name_function": "function1",
                    "F_name_generic": "function1",
                    "F_name_impl": "testnames_function1",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_function1",
                    "function_name": "function1",
                    "stmtc": "f_subroutine",
                    "stmtf": "f_subroutine"
                }
            },
            {
                "<FUNCTION>": "function2  6 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "function2",
                        "params": [],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void function2()",
                "declgen": "void function2(void)",
                "name": "function2",
                "options": {},
                "user_fmt": {
                    "C_name": "c_name_special",
                    "F_C_name": "f_c_name_special",
                    "F_name_impl": "f_name_special"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "c_name_special",
                    "C_name_api": "function2",
                    "C_prototype": "void",
                    "C_return_type": "void",
                    "F_C_arguments": "",
                    "F_C_call": "f_c_name_special",
                    "F_C_name": "f_c_name_special",
                    "F_C_subprogram": "subroutine",
                    "F_arguments": "",
                    "F_name_api": "function2",
                    "F_name_function": "function2",
                    "F_name_generic": "function2",
                    "F_name_impl": "f_name_special",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_function2",
                    "function_name": "function2",
                    "stmtc": "f_subroutine",
                    "stmtf": "f_subroutine"
                }
            },
            {
                "<FUNCTION>": "function3a  7 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "function3a",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "i",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void function3a(int i)",
                "declgen": "void function3a(int i +value)",
                "name": "function3a",
                "options": {},
                "user_fmt": {
                    "F_name_generic": "generic3",
                    "F_name_impl": "F_name_function3a_int"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "i": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "i",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "i",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "i",
                            "fc_var": "i",
                            "i_var": "i",
                            "sh_type": "SH_TYPE_INT",
                            "stmtf": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "i",
                            "ctor_expr": "i",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "data_var": "SHData_i",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_i",
                            "size_var": "SHSize_i",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_i"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "i",
                    "C_name": "YYY_TES_function3a_0",
                    "C_name_api": "function3a",
                    "C_prototype": "int i",
                    "C_return_type": "void",
                    "F_C_arguments": "i",
                    "F_C_call": "YYY_TES_function3a_0",
                    "F_C_name": "YYY_TES_function3a_0",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "i",
                    "F_arguments": "i",
                    "F_name_api": "function3a",
                    "F_name_function": "function3a_0",
                    "F_name_generic": "generic3",
                    "F_name_impl": "F_name_function3a_int",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_function3a_0",
                    "function_name": "function3a",
                    "function_suffix": "_0",
                    "stmtc": "f_subroutine",
                    "stmtf": "f_subroutine"
                }
            },
            {
                "<FUNCTION>": "function3a  8 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "function3a",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "i",
                                    "typemap_name": "long"
                                },
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void function3a(long i)",
                "declgen": "void function3a(long i +value)",
                "name": "function3a",
                "options": {},
                "user_fmt": {
                    "F_name_generic": "generic3",
                    "F_name_impl": "F_name_function3a_long"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "i": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "long",
                            "c_var": "i",
                            "cfi_type": "CFI_type_long",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "long",
                            "cxx_var": "i",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "stmtc": "f_in_native_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "i",
                            "f_intent": "IN",
                            "f_kind": "C_LONG",
                            "f_type": "integer(C_LONG)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "i",
                            "fc_var": "i",
                            "i_var": "i",
                            "sh_type": "SH_TYPE_LONG",
                            "stmtf": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "long",
                            "c_var": "i",
                            "ctor_expr": "i",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "long",
                            "cxx_var": "i",
                            "data_var": "SHData_i",
                            "numpy_type": "NPY_LONG",
                            "py_var": "SHPy_i",
                            "size_var": "SHSize_i",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_i"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "i",
                    "C_name": "YYY_TES_function3a_1",
                    "C_name_api": "function3a",
                    "C_prototype": "long i",
                    "C_return_type": "void",
                    "F_C_arguments": "i",
                    "F_C_call": "YYY_TES_function3a_1",
                    "F_C_name": "YYY_TES_function3a_1",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "i",
                    "F_arguments": "i",
                    "F_name_api": "function3a",
                    "F_name_function": "function3a_1",
                    "F_name_generic": "generic3",
                    "F_name_impl": "F_name_function3a_long",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_function3a_1",
                    "function_name": "function3a",
                    "function_suffix": "_1",
                    "stmtc": "f_subroutine",
                    "stmtf": "f_subroutine"
                }
            },
            {
                "<FUNCTION>": "function4  9 ****************************************",
                "_PTR_F_C_index": "20",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "function4",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "rv",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int function4(const std::string &rv)",
                "declgen": "int function4(const std::string & rv)",
                "name": "function4",
                "options": {},
                "wrap": {
                    "c": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&ARG_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "ARG_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_in_string_&"
                        },
                        "fmtf": {
                            "F_C_var": "rv",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "rv",
                            "i_var": "rv",
                            "sh_type": "SH_TYPE_OTHER"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "rv",
                            "ctor_expr": "SH_rv.data(),\t SH_rv.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_in_string_&",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "ARG_rv",
                    "C_name": "YYY_TES_function4",
                    "C_name_api": "function4",
                    "C_prototype": "const char * rv",
                    "C_return_type": "int",
                    "F_C_arguments": "rv",
                    "F_C_name": "YYY_TES_function4",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_name_api": "function4",
                    "PY_name_impl": "PY_function4",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "function4"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "ARG_rv",
                        "ctor_expr": "ARG_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&ARG_rv",
                        "cxx_type": "int",
                        "cxx_var": "ARG_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt": "py_function_native_scalar",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "function4  20 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_C_CXX_index": "9",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "function4",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "api": "buf",
                                        "intent": "in"
                                    },
                                    "name": "rv",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int function4(const std::string &rv)",
                "declgen": "int function4(const std::string & rv)",
                "name": "function4",
                "options": {},
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "rv",
                            "c_var_len": "SHT_rv_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&ARG_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "ARG_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_in_string_&_buf"
                        },
                        "fmtf": {
                            "F_C_var": "rv",
                            "c_var_len": "SHT_rv_len",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "rv",
                            "f_var_len": "SHT_rv_len",
                            "fc_var": "rv",
                            "i_var": "rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtf": "f_in_string_&_buf"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "ARG_rv",
                    "C_name": "YYY_TES_function4_bufferify",
                    "C_name_api": "function4",
                    "C_prototype": "char *rv,\t int SHT_rv_len",
                    "C_return_type": "int",
                    "F_C_arguments": "rv,\t SHT_rv_len",
                    "F_C_call": "YYY_TES_function4_bufferify",
                    "F_C_name": "YYY_TES_function4_bufferify",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "rv,\t SHT_rv_len",
                    "F_arguments": "rv",
                    "F_name_api": "function4",
                    "F_name_function": "function4",
                    "F_name_generic": "function4",
                    "F_name_impl": "testnames_function4",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "f_c_suffix": "_bufferify",
                    "function_name": "function4"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmtf": "f_function_native_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "fiveplus  10 ****************************************",
                "ast": {
                    "declarator": {
                        "attrs": {
                            "name": "fiveplus"
                        },
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "function5",
                        "params": [],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void function5() +name(fiveplus)",
                "declgen": "void function5(void) +name(fiveplus)",
                "name": "fiveplus",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "YYY_TES_fiveplus",
                    "C_name_api": "fiveplus",
                    "C_prototype": "void",
                    "C_return_type": "void",
                    "F_C_arguments": "",
                    "F_C_call": "YYY_TES_fiveplus",
                    "F_C_name": "YYY_TES_fiveplus",
                    "F_C_subprogram": "subroutine",
                    "F_arguments": "",
                    "F_name_api": "fiveplus",
                    "F_name_function": "fiveplus",
                    "F_name_generic": "fiveplus",
                    "F_name_impl": "testnames_fiveplus",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_fiveplus",
                    "function_name": "fiveplus",
                    "stmtc": "f_subroutine",
                    "stmtf": "f_subroutine"
                }
            },
            {
                "<FUNCTION>": "TestMultilineSplicer  11 ****************************************",
                "_PTR_F_C_index": "21",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "TestMultilineSplicer",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "inout"
                                    },
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "value",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void TestMultilineSplicer(std::string & name, int *value+intent(out))",
                "declgen": "void TestMultilineSplicer(std::string & name, int * value +intent(out))",
                "doxygen": {
                    "description": "Use std::string argument to get bufferified function.\n"
                },
                "name": "TestMultilineSplicer",
                "options": {},
                "splicer": {
                    "c": [
                        "// line 1",
                        "// line 2"
                    ],
                    "c_buf": [
                        "// buf line 1",
                        "// buf line 2"
                    ],
                    "f": [
                        "! line 1",
                        "! line 2"
                    ],
                    "py": [
                        "// py line 1",
                        "// py line 2"
                    ]
                },
                "wrap": {
                    "c": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&ARG_name",
                            "cxx_type": "std::string",
                            "cxx_var": "ARG_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_inout_string_&"
                        },
                        "fmtf": {
                            "F_C_var": "name",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "i_var": "name",
                            "sh_type": "SH_TYPE_OTHER"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "name",
                            "ctor_expr": "SH_name.data(),\t SH_name.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&name",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_name",
                            "data_var": "SHData_name",
                            "numpy_type": null,
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt": "py_inout_string_&",
                            "value_var": "SHValue_name"
                        }
                    },
                    "value": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "value",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "value",
                            "cxx_type": "int",
                            "cxx_var": "value",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*"
                        },
                        "fmtf": {
                            "F_C_var": "value",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "value",
                            "i_var": "value",
                            "sh_type": "SH_TYPE_INT"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "value",
                            "ctor_expr": "value",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "value",
                            "cxx_type": "int",
                            "cxx_var": "value",
                            "data_var": "SHData_value",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_value",
                            "size_var": "SHSize_value",
                            "stmt": "py_out_native_*",
                            "value_var": "SHValue_value"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "ARG_name,\t value",
                    "C_name": "TES_TestMultilineSplicer",
                    "C_name_api": "TestMultilineSplicer",
                    "C_prototype": "char * name,\t int * value",
                    "C_return_type": "void",
                    "F_C_arguments": "name,\t value",
                    "F_C_name": "c_test_multiline_splicer",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "test_multiline_splicer",
                    "PY_name_impl": "PY_TestMultilineSplicer",
                    "function_name": "TestMultilineSplicer",
                    "stmtc": "f_subroutine"
                }
            },
            {
                "<FUNCTION>": "TestMultilineSplicer  21 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_C_CXX_index": "11",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "TestMultilineSplicer",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "api": "buf",
                                        "intent": "inout"
                                    },
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "value",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void TestMultilineSplicer(std::string & name, int *value+intent(out))",
                "declgen": "void TestMultilineSplicer(std::string & name, int * value +intent(out))",
                "doxygen": {
                    "description": "Use std::string argument to get bufferified function.\n"
                },
                "name": "TestMultilineSplicer",
                "options": {},
                "splicer": {
                    "c": [
                        "// line 1",
                        "// line 2"
                    ],
                    "c_buf": [
                        "// buf line 1",
                        "// buf line 2"
                    ],
                    "f": [
                        "! line 1",
                        "! line 2"
                    ],
                    "py": [
                        "// py line 1",
                        "// py line 2"
                    ]
                },
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "c_var_len": "SHT_name_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&ARG_name",
                            "cxx_type": "std::string",
                            "cxx_var": "ARG_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_inout_string_&_buf"
                        },
                        "fmtf": {
                            "F_C_var": "name",
                            "c_var_len": "SHT_name_len",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "f_var_len": "SHT_name_len",
                            "fc_var": "name",
                            "i_var": "name",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtf": "f_inout_string_&_buf"
                        }
                    },
                    "value": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "value",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "value",
                            "cxx_type": "int",
                            "cxx_var": "value",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_out_native_*"
                        },
                        "fmtf": {
                            "F_C_var": "value",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "value",
                            "fc_var": "value",
                            "i_var": "value",
                            "sh_type": "SH_TYPE_INT",
                            "stmtf": "f_out_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "ARG_name,\t value",
                    "C_name": "TES_TestMultilineSplicer_bufferify",
                    "C_name_api": "TestMultilineSplicer",
                    "C_prototype": "char *name,\t int SHT_name_len,\t int * value",
                    "C_return_type": "void",
                    "F_C_arguments": "name,\t SHT_name_len,\t value",
                    "F_C_call": "c_test_multiline_splicer_bufferify",
                    "F_C_name": "c_test_multiline_splicer_bufferify",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "name,\t SHT_name_len,\t value",
                    "F_arguments": "name,\t value",
                    "F_name_api": "test_multiline_splicer",
                    "F_name_function": "test_multiline_splicer",
                    "F_name_generic": "test_multiline_splicer",
                    "F_name_impl": "test_multiline_splicer",
                    "F_subprogram": "subroutine",
                    "f_c_suffix": "_bufferify",
                    "function_name": "TestMultilineSplicer",
                    "stmtc": "f_subroutine",
                    "stmtf": "f_subroutine"
                }
            },
            {
                "<FUNCTION>": "FunctionTU  12 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "FunctionTU",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1"
                                },
                                "specifier": [
                                    "T"
                                ],
                                "template_argument": "T"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2"
                                },
                                "specifier": [
                                    "U"
                                ],
                                "template_argument": "U"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "cxx_template": {
                    "T": [
                        "int",
                        "float"
                    ]
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(T arg1 +value, U arg2 +value)",
                "doxygen": {
                    "brief": "Function template with two template parameters."
                },
                "have_template_args": true,
                "name": "FunctionTU",
                "options": {},
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "fmtdict": {
                            "C_name": "c_name_instantiation1",
                            "F_C_name": "f_c_name_instantiation1",
                            "F_name_impl": "f_name_instantiation1",
                            "PY_name_impl": "PY_name_instantiation1"
                        },
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "template_suffix": "_instantiation2"
                        },
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ],
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "FunctionTU",
                    "F_name_api": "function_tu",
                    "function_name": "FunctionTU"
                }
            },
            {
                "<FUNCTION>": "FunctionTU  16 ****************************************",
                "C_generated_path": [
                    "cxx_template"
                ],
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "FunctionTU",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "template_argument": "T",
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2"
                                },
                                "specifier": [
                                    "long"
                                ],
                                "template_argument": "U",
                                "typemap_name": "long"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(int arg1 +value, long arg2 +value)",
                "doxygen": {
                    "brief": "Function template with two template parameters."
                },
                "have_template_args": true,
                "name": "FunctionTU",
                "options": {},
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "fmtdict": {
                            "C_name": "c_name_instantiation1",
                            "F_C_name": "f_c_name_instantiation1",
                            "F_name_impl": "f_name_instantiation1",
                            "PY_name_impl": "PY_name_instantiation1"
                        },
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "template_suffix": "_instantiation2"
                        },
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ],
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmtc": "f_in_native_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "sh_type": "SH_TYPE_INT",
                            "stmtf": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg1",
                            "ctor_expr": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "long",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_long",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "stmtc": "f_in_native_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_LONG",
                            "f_type": "integer(C_LONG)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "fc_var": "arg2",
                            "i_var": "arg2",
                            "sh_type": "SH_TYPE_LONG",
                            "stmtf": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "long",
                            "c_var": "arg2",
                            "ctor_expr": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_LONG",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "CXX_template": "<int, long>",
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "c_name_instantiation1",
                    "C_name_api": "FunctionTU",
                    "C_prototype": "int arg1,\t long arg2",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1,\t arg2",
                    "F_C_call": "f_c_name_instantiation1",
                    "F_C_name": "f_c_name_instantiation1",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_api": "function_tu",
                    "F_name_function": "function_tu_0",
                    "F_name_generic": "function_tu",
                    "F_name_impl": "f_name_instantiation1",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_name_instantiation1",
                    "function_name": "FunctionTU",
                    "stmtc": "f_subroutine",
                    "stmtf": "f_subroutine",
                    "template_suffix": "_0"
                }
            },
            {
                "<FUNCTION>": "FunctionTU  17 ****************************************",
                "C_generated_path": [
                    "cxx_template"
                ],
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "FunctionTU",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "template_argument": "T",
                                "typemap_name": "float"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "template_argument": "U",
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(float arg1 +value, double arg2 +value)",
                "doxygen": {
                    "brief": "Function template with two template parameters."
                },
                "gen_headers_typedef": [
                    "int",
                    "long",
                    "float",
                    "double"
                ],
                "have_template_args": true,
                "name": "FunctionTU",
                "options": {},
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "fmtdict": {
                            "C_name": "c_name_instantiation1",
                            "F_C_name": "f_c_name_instantiation1",
                            "F_name_impl": "f_name_instantiation1",
                            "PY_name_impl": "PY_name_instantiation1"
                        },
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "template_suffix": "_instantiation2"
                        },
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ],
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "float",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_float",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "float",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmtc": "f_in_native_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_FLOAT",
                            "f_type": "real(C_FLOAT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmtf": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "float",
                            "c_var": "arg1",
                            "ctor_expr": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "float",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_FLOAT",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmtc": "f_in_native_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "fc_var": "arg2",
                            "i_var": "arg2",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmtf": "f_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg2",
                            "ctor_expr": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "CXX_template": "<float, double>",
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "TES_FunctionTU_instantiation2",
                    "C_name_api": "FunctionTU",
                    "C_prototype": "float arg1,\t double arg2",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1,\t arg2",
                    "F_C_call": "c_function_tu_instantiation2",
                    "F_C_name": "c_function_tu_instantiation2",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_api": "function_tu",
                    "F_name_function": "function_tu_instantiation2",
                    "F_name_generic": "function_tu",
                    "F_name_impl": "function_tu_instantiation2",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_FunctionTU_instantiation2",
                    "function_name": "FunctionTU",
                    "stmtc": "f_subroutine",
                    "stmtf": "f_subroutine",
                    "template_suffix": "_instantiation2"
                }
            },
            {
                "<FUNCTION>": "UseImplWorker  13 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "UseImplWorker",
                        "params": [],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "cxx_template": {
                    "T": [
                        "internal::ImplWorker1"
                    ]
                },
                "decl": "template<typename T> int UseImplWorker()",
                "declgen": "int UseImplWorker(void)",
                "doxygen": {
                    "brief": "Function which uses a templated T in the implemetation."
                },
                "name": "UseImplWorker",
                "options": {},
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "wrap": {},
                "zz_fmtdict": {
                    "C_name_api": "UseImplWorker",
                    "F_name_api": "use_impl_worker",
                    "function_name": "UseImplWorker"
                }
            },
            {
                "<FUNCTION>": "UseImplWorker  18 ****************************************",
                "C_generated_path": [
                    "cxx_template"
                ],
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "UseImplWorker",
                        "params": [],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "template<typename T> int UseImplWorker()",
                "declgen": "int UseImplWorker(void)",
                "doxygen": {
                    "brief": "Function which uses a templated T in the implemetation."
                },
                "gen_headers_typedef": [
                    "internal::ImplWorker1"
                ],
                "name": "UseImplWorker",
                "options": {},
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_template": "<internal::ImplWorker1>",
                    "C_name": "TES_UseImplWorker_instantiation3",
                    "C_name_api": "UseImplWorker",
                    "C_prototype": "void",
                    "C_return_type": "int",
                    "F_C_arguments": "",
                    "F_C_call": "c_use_impl_worker_instantiation3",
                    "F_C_name": "c_use_impl_worker_instantiation3",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arguments": "",
                    "F_name_api": "use_impl_worker",
                    "F_name_function": "use_impl_worker_instantiation3",
                    "F_name_generic": "use_impl_worker",
                    "F_name_impl": "use_impl_worker_instantiation3",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_UseImplWorker_instantiation3",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseImplWorker",
                    "template_suffix": "_instantiation3"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmtf": "f_function_native_scalar"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "ARG_rv",
                        "ctor_expr": "ARG_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&ARG_rv",
                        "cxx_type": "int",
                        "cxx_var": "ARG_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt": "py_function_native_scalar",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "Cstruct_as_class_sum  14 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "function"
                        },
                        "name": "Cstruct_as_class_sum",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "pass": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "point",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "Cstruct_as_class"
                                },
                                "specifier": [
                                    "Cstruct_as_class"
                                ],
                                "typemap_name": "Cstruct_as_class"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int Cstruct_as_class_sum(const Cstruct_as_class *point +pass)",
                "declgen": "int Cstruct_as_class_sum(const Cstruct_as_class * point +pass)",
                "name": "Cstruct_as_class_sum",
                "options": {
                    "class_method": "Cstruct_as_class"
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "point": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "TES_Cstruct_as_class",
                            "c_var": "point",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<Cstruct_as_class *>\t(ARG_point)",
                            "cxx_type": "Cstruct_as_class",
                            "cxx_var": "ARG_point",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_in_shadow_*"
                        },
                        "fmtf": {
                            "F_C_var": "point",
                            "f_capsule_data_type": "TES_SHROUD_capsule_data",
                            "f_derived_type": "Fstruct_as_class",
                            "f_intent": "IN",
                            "f_type": "type(Fstruct_as_class)",
                            "f_type_module": "top_module",
                            "f_var": "point",
                            "fc_var": "point",
                            "i_var": "point",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtf": "f_in_shadow_*"
                        },
                        "fmtpy": {
                            "PY_to_object_idtor_func": "PP_Cstruct_as_class_to_Object_idtor",
                            "PyObject": "PY_Cstruct_as_class",
                            "PyTypeObject": "PY_Cstruct_as_class_Type",
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "TES_Cstruct_as_class",
                            "c_var": "point",
                            "ctor_expr": "*point",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<Cstruct_as_class *>\t(point)",
                            "cxx_type": "Cstruct_as_class",
                            "cxx_var": "point",
                            "data_var": "SHData_point",
                            "numpy_type": null,
                            "py_object": "PY_Cstruct_as_class",
                            "py_var": "SHPy_point",
                            "size_var": "SHSize_point",
                            "stmt": "py_in_shadow_*",
                            "value_var": "SHValue_point"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "ARG_point",
                    "C_name": "TES_Cstruct_as_class_sum",
                    "C_name_api": "Cstruct_as_class_sum",
                    "C_prototype": "TES_Cstruct_as_class * point",
                    "C_return_type": "int",
                    "F_C_arguments": "point",
                    "F_C_call": "c_cstruct_as_class_sum",
                    "F_C_name": "c_cstruct_as_class_sum",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "point%cxxmem",
                    "F_arguments": "point",
                    "F_name_api": "cstruct_as_class_sum",
                    "F_name_function": "cstruct_as_class_sum",
                    "F_name_generic": "cstruct_as_class_sum",
                    "F_name_impl": "cstruct_as_class_sum",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_Cstruct_as_class_sum",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "Cstruct_as_class_sum"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmtc": "f_function_native_scalar"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_type_module": "iso_c_binding",
                        "f_var": "SHT_rv",
                        "fc_var": "SHT_rv",
                        "i_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmtf": "f_function_native_scalar"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "ARG_rv",
                        "ctor_expr": "ARG_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&ARG_rv",
                        "cxx_type": "int",
                        "cxx_var": "ARG_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt": "py_function_native_scalar",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "external_funcs  15 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "external_funcs",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "rdbase",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "ftrim_char_in": true,
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            },
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "pkg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "ftrim_char_in": true,
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            },
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "ftrim_char_in": true,
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "func": {
                                        "name": "alloc",
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "alloc",
                                    "params": [
                                        {
                                            "declarator": {
                                                "attrs": {
                                                    "intent": "inout"
                                                },
                                                "metaattrs": {
                                                    "intent": "inout"
                                                },
                                                "name": "arr",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ],
                                                "typemap_name": "double"
                                            },
                                            "specifier": [
                                                "double"
                                            ],
                                            "typemap_name": "double"
                                        },
                                        {
                                            "declarator": {
                                                "attrs": {
                                                    "intent": "out"
                                                },
                                                "metaattrs": {
                                                    "intent": "out"
                                                },
                                                "name": "err",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ],
                                                "typemap_name": "int"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "func": {
                                        "name": "afree",
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "afree",
                                    "params": [
                                        {
                                            "declarator": {
                                                "attrs": {
                                                    "intent": "inout"
                                                },
                                                "metaattrs": {
                                                    "intent": "inout"
                                                },
                                                "name": "arr",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ],
                                                "typemap_name": "double"
                                            },
                                            "specifier": [
                                                "double"
                                            ],
                                            "typemap_name": "double"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "func": {
                                        "name": "assoc",
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ],
                                        "typemap_name": "void"
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "assoc",
                                    "params": [
                                        {
                                            "declarator": {
                                                "attrs": {
                                                    "intent": "in"
                                                },
                                                "metaattrs": {
                                                    "intent": "in"
                                                },
                                                "name": "arr",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ],
                                                "typemap_name": "double"
                                            },
                                            "specifier": [
                                                "double"
                                            ],
                                            "typemap_name": "double"
                                        },
                                        {
                                            "declarator": {
                                                "attrs": {
                                                    "intent": "out"
                                                },
                                                "metaattrs": {
                                                    "intent": "out"
                                                },
                                                "name": "err",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ],
                                                "typemap_name": "int"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void external_funcs(const char *rdbase, const char *pkg, const char *name, void (*alloc)(double *arr+intent(inout), int *err+intent(out)), void (*afree)(double *arr+intent(inout)), void (*assoc)(double *arr+intent(in), int *err+intent(out)))",
                "declgen": "void external_funcs(const char * rdbase, const char * pkg, const char * name, void ( * alloc)(double * arr +intent(inout), int * err +intent(out)) +value, void ( * afree)(double * arr +intent(inout)) +value, void ( * assoc)(double * arr +intent(in), int * err +intent(out)) +value)",
                "name": "external_funcs",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "afree": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "void",
                            "c_var": "afree",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&afree",
                            "cxx_type": "void",
                            "cxx_var": "afree",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmtc": "f_in_void_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "afree",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "afree",
                            "fc_var": "afree",
                            "i_var": "afree",
                            "sh_type": "SH_TYPE_CPTR"
                        }
                    },
                    "alloc": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "void",
                            "c_var": "alloc",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&alloc",
                            "cxx_type": "void",
                            "cxx_var": "alloc",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmtc": "f_in_void_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "alloc",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "alloc",
                            "fc_var": "alloc",
                            "i_var": "alloc",
                            "sh_type": "SH_TYPE_CPTR"
                        }
                    },
                    "assoc": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "void",
                            "c_var": "assoc",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&assoc",
                            "cxx_type": "void",
                            "cxx_var": "assoc",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmtc": "f_in_void_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "assoc",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "assoc",
                            "fc_var": "assoc",
                            "i_var": "assoc",
                            "sh_type": "SH_TYPE_CPTR"
                        }
                    },
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(name)",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_in_char_*"
                        },
                        "fmtf": {
                            "F_C_var": "name",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "fc_var": "name",
                            "i_var": "name",
                            "sh_type": "SH_TYPE_OTHER"
                        }
                    },
                    "pkg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "pkg",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(pkg)",
                            "cxx_type": "char",
                            "cxx_var": "pkg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_in_char_*"
                        },
                        "fmtf": {
                            "F_C_var": "pkg",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "pkg",
                            "fc_var": "pkg",
                            "i_var": "pkg",
                            "sh_type": "SH_TYPE_OTHER"
                        }
                    },
                    "rdbase": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "rdbase",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(rdbase)",
                            "cxx_type": "char",
                            "cxx_var": "rdbase",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmtc": "f_in_char_*"
                        },
                        "fmtf": {
                            "F_C_var": "rdbase",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "rdbase",
                            "fc_var": "rdbase",
                            "i_var": "rdbase",
                            "sh_type": "SH_TYPE_OTHER"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "rdbase,\t pkg,\t name,\t alloc,\t afree,\t assoc",
                    "C_name": "TES_external_funcs",
                    "C_name_api": "external_funcs",
                    "C_prototype": "const char * rdbase,\t const char * pkg,\t const char * name,\t void ( * alloc)(\tdouble * arr,\t int * err),\t void ( * afree)(\tdouble * arr),\t void ( * assoc)(\tdouble * arr,\t int * err)",
                    "C_return_type": "void",
                    "F_C_arguments": "rdbase,\t pkg,\t name,\t alloc,\t afree,\t assoc",
                    "F_C_call": "c_external_funcs",
                    "F_C_name": "c_external_funcs",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "trim(rdbase)//C_NULL_CHAR,\t trim(pkg)//C_NULL_CHAR,\t trim(name)//C_NULL_CHAR,\t alloc,\t afree,\t assoc",
                    "F_arguments": "rdbase,\t pkg,\t name,\t alloc,\t afree,\t assoc",
                    "F_name_api": "external_funcs",
                    "F_name_function": "external_funcs",
                    "F_name_generic": "external_funcs",
                    "F_name_impl": "external_funcs",
                    "F_subprogram": "subroutine",
                    "function_name": "external_funcs",
                    "stmtc": "f_subroutine",
                    "stmtf": "f_subroutine"
                }
            }
        ],
        "language": "cxx",
        "namespaces": [
            {
                "<NAMESPACE>": "ns0 ****************************************",
                "classes": [
                    {
                        "<CLASS>": "Names ****************************************",
                        "cxx_header": [],
                        "functions": [
                            {
                                "<FUNCTION>": "defaultctor  0 ****************************************",
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "attrs": {
                                            "_constructor": true,
                                            "_name": "ctor",
                                            "name": "defaultctor"
                                        },
                                        "metaattrs": {
                                            "api": "capptr",
                                            "intent": "ctor"
                                        },
                                        "params": [],
                                        "typemap_name": "ns0::Names"
                                    },
                                    "is_ctor": true,
                                    "specifier": [
                                        "Names"
                                    ],
                                    "typemap_name": "ns0::Names"
                                },
                                "decl": "Names()         +name(defaultctor)",
                                "declgen": "Names(void) +name(defaultctor)",
                                "name": "defaultctor",
                                "options": {
                                    "F_create_generic": true
                                },
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "python": true
                                },
                                "zz_fmtdict": {
                                    "C_name": "XXX_TES_ns0_Names_defaultctor",
                                    "C_name_api": "defaultctor",
                                    "C_prototype": "TES_ns0_Names * SHC_rv",
                                    "C_return_type": "TES_ns0_Names *",
                                    "F_C_arguments": "SHT_rv",
                                    "F_C_call": "XXX_TES_names_defaultctor",
                                    "F_C_name": "XXX_TES_names_defaultctor",
                                    "F_C_result_clause": "\fresult(SHT_prv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "SHT_rv%cxxmem",
                                    "F_arguments": "",
                                    "F_name_api": "defaultctor",
                                    "F_name_function": "defaultctor",
                                    "F_name_generic": "FNames",
                                    "F_name_impl": "names_defaultctor",
                                    "F_result": "SHT_prv",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "PY_name_impl": "PY_Names_tp_init",
                                    "PY_type_impl": "PY_Names_tp_init",
                                    "PY_type_method": "tp_init",
                                    "cxx_rv_decl": "ns0::Names ARG_rv",
                                    "function_name": "defaultctor"
                                },
                                "zz_fmtresult": {
                                    "fmtc": {
                                        "c_const": "",
                                        "c_get_value": "",
                                        "c_type": "TES_ns0_Names",
                                        "c_var": "SHC_rv",
                                        "cfi_type": "CFI_type_other",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_type": "ns0::Names",
                                        "cxx_var": "ARG_rv",
                                        "f_local_ptr": "SHT_prv",
                                        "idtor": "1",
                                        "sh_type": "SH_TYPE_OTHER",
                                        "stmtc": "f_ctor_shadow_scalar_capptr"
                                    },
                                    "fmtf": {
                                        "F_C_var": "SHT_rv",
                                        "f_capsule_data_type": "TES_SHROUD_capsule_data",
                                        "f_derived_type": "FNames",
                                        "f_intent": "OUT",
                                        "f_local_ptr": "SHT_prv",
                                        "f_type": "type(FNames)",
                                        "f_type_module": "name_module",
                                        "f_var": "SHT_rv",
                                        "fc_var": "SHT_rv",
                                        "i_var": "SHT_rv",
                                        "sh_type": "SH_TYPE_OTHER",
                                        "stmtf": "f_ctor_shadow_scalar_capptr"
                                    },
                                    "fmtpy": {
                                        "PY_build_format": "O",
                                        "PY_to_object_idtor_func": "PP_Names_to_Object_idtor",
                                        "PyObject": "PY_Names",
                                        "PyTypeObject": "PY_Names_Type",
                                        "c_deref": "",
                                        "c_var": "ARG_rv",
                                        "ctor_expr": "ARG_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_nonconst_ptr": "&ARG_rv",
                                        "cxx_type": "ns0::Names",
                                        "cxx_var": "ARG_rv",
                                        "data_var": "SHData_rv",
                                        "numpy_type": null,
                                        "py_var": "SHTPy_rv",
                                        "size_var": "SHSize_rv",
                                        "stmt": "py_default",
                                        "value_var": "SHValue_rv",
                                        "vargs": "ARG_rv"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "method1  1 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "metaattrs": {
                                            "intent": "subroutine"
                                        },
                                        "name": "method1",
                                        "params": [],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void method1()",
                                "declgen": "void method1(void)",
                                "name": "method1",
                                "options": {},
                                "user_fmt": {
                                    "F_name_function": "type_method1"
                                },
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "python": true
                                },
                                "zz_fmtdict": {
                                    "C_name": "XXX_TES_ns0_Names_method1",
                                    "C_name_api": "method1",
                                    "C_prototype": "TES_ns0_Names * self",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self",
                                    "F_C_call": "XXX_TES_names_method1",
                                    "F_C_name": "XXX_TES_names_method1",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_name_api": "method1",
                                    "F_name_function": "type_method1",
                                    "F_name_generic": "method1",
                                    "F_name_impl": "names_method1",
                                    "F_subprogram": "subroutine",
                                    "PY_name_impl": "PY_method1",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "function_name": "method1",
                                    "stmtc": "f_subroutine",
                                    "stmtf": "f_subroutine"
                                }
                            },
                            {
                                "<FUNCTION>": "method2  2 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "metaattrs": {
                                            "intent": "subroutine"
                                        },
                                        "name": "method2",
                                        "params": [],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void method2()",
                                "declgen": "void method2(void)",
                                "name": "method2",
                                "options": {},
                                "user_fmt": {
                                    "CXX_this": "SH_this2",
                                    "C_this": "self2",
                                    "F_this": "obj2"
                                },
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "python": true
                                },
                                "zz_fmtdict": {
                                    "CXX_this": "SH_this2",
                                    "C_name": "XXX_TES_ns0_Names_method2",
                                    "C_name_api": "method2",
                                    "C_prototype": "TES_ns0_Names * self2",
                                    "C_return_type": "void",
                                    "C_this": "self2",
                                    "F_C_arguments": "self2",
                                    "F_C_call": "XXX_TES_names_method2",
                                    "F_C_name": "XXX_TES_names_method2",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj2%cxxmem",
                                    "F_arguments": "obj2",
                                    "F_name_api": "method2",
                                    "F_name_function": "method2",
                                    "F_name_generic": "method2",
                                    "F_name_impl": "names_method2",
                                    "F_subprogram": "subroutine",
                                    "F_this": "obj2",
                                    "PY_name_impl": "PY_method2",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self2",
                                    "function_name": "method2",
                                    "stmtc": "f_subroutine",
                                    "stmtf": "f_subroutine"
                                }
                            }
                        ],
                        "name": "Names",
                        "options": {
                            "C_name_template": "XXX_{C_prefix}{C_name_scope}{C_name_api}{function_suffix}{f_c_suffix}",
                            "F_C_name_template": "XXX_{C_prefix}{F_name_scope}{C_name_api}{function_suffix}{f_c_suffix}",
                            "none": "foo"
                        },
                        "parse_keyword": "class",
                        "scope": "ns0::Names::",
                        "typemap_name": "ns0::Names",
                        "user_fmt": {
                            "C_header_filename": "foo.h",
                            "C_impl_filename": "foo.cpp",
                            "F_derived_name": "FNames"
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "foo.h",
                            "C_impl_filename": "foo.cpp",
                            "C_name_api": "Names",
                            "C_name_scope": "ns0_Names_",
                            "C_type_name": "TES_ns0_Names",
                            "F_derived_name": "FNames",
                            "F_name_api": "names",
                            "F_name_scope": "names_",
                            "PY_PyObject": "PY_Names",
                            "PY_PyTypeObject": "PY_Names_Type",
                            "PY_capsule_name": "PY_Names_capsule_name",
                            "PY_from_object_func": "PP_Names_from_Object",
                            "PY_this_call": "self->myobj->",
                            "PY_to_object_func": "PP_Names_to_Object",
                            "PY_to_object_idtor_func": "PP_Names_to_Object_idtor",
                            "PY_type_filename": "pyns0_Namestype.cpp",
                            "class_scope": "Names::",
                            "cxx_class": "Names",
                            "cxx_type": "Names",
                            "f_capsule_data_type": "TES_SHROUD_capsule_data",
                            "f_helper_capsule_data_helper": "TES_SHROUD_capsule_data",
                            "file_scope": "ns0_Names"
                        }
                    }
                ],
                "name": "ns0",
                "namespaces": [
                    {
                        "<NAMESPACE>": "inner ****************************************",
                        "name": "inner",
                        "options": {},
                        "scope": "ns0::inner::",
                        "scope_file": [
                            "testnames",
                            "ns0",
                            "inner"
                        ],
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "ns0::inner::",
                            "C_header_filename": "wraptestnames_ns0_inner.hh",
                            "C_impl_filename": "wraptestnames_ns0_inner.cc",
                            "C_name_api": "inner",
                            "C_name_scope": "ns0_inner_",
                            "F_impl_filename": "wrapftestnames_ns0_inner.F",
                            "F_module_name": "testnames_ns0_inner_mod",
                            "F_name_api": "inner",
                            "LUA_this_call": "ns0::inner::",
                            "PY_library_doc": "library documentation",
                            "PY_module_filename": "pytestnames_ns0_innermodule.cpp",
                            "PY_module_init": "testnames_ns0_inner",
                            "PY_module_name": "inner",
                            "PY_module_scope": "testnames.ns0.inner",
                            "PY_this_call": "ns0::inner::",
                            "file_scope": "testnames_ns0_inner",
                            "namespace_scope": "ns0::inner::"
                        }
                    }
                ],
                "options": {},
                "scope": "ns0::",
                "scope_file": [
                    "testnames",
                    "ns0"
                ],
                "user_fmt": {
                    "C_header_filename": "foons0.h",
                    "C_impl_filename": "foons0.cpp",
                    "F_impl_filename": "foo.f",
                    "F_module_name": "name_module"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "ns0::",
                    "C_header_filename": "foons0.h",
                    "C_impl_filename": "foons0.cpp",
                    "C_name_api": "ns0",
                    "C_name_scope": "ns0_",
                    "F_impl_filename": "foo.f",
                    "F_module_name": "name_module",
                    "F_name_api": "ns0",
                    "LUA_this_call": "ns0::",
                    "PY_library_doc": "library documentation",
                    "PY_module_filename": "pytestnames_ns0module.cpp",
                    "PY_module_init": "testnames_ns0",
                    "PY_module_name": "ns0",
                    "PY_module_scope": "testnames.ns0",
                    "PY_this_call": "ns0::",
                    "file_scope": "testnames_ns0",
                    "namespace_scope": "ns0::"
                }
            },
            {
                "<NAMESPACE>": "ns1 ****************************************",
                "functions": [
                    {
                        "<FUNCTION>": "init_ns1  22 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "init_ns1",
                                "params": [],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void init_ns1()",
                        "declgen": "void init_ns1(void)",
                        "name": "init_ns1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "TES_ns1_init_ns1",
                            "C_name_api": "init_ns1",
                            "C_prototype": "void",
                            "C_return_type": "void",
                            "F_C_arguments": "",
                            "F_C_call": "c_init_ns1",
                            "F_C_name": "c_init_ns1",
                            "F_C_subprogram": "subroutine",
                            "F_arguments": "",
                            "F_name_api": "init_ns1",
                            "F_name_function": "init_ns1",
                            "F_name_generic": "init_ns1",
                            "F_name_impl": "testnames_init_ns1",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_init_ns1",
                            "function_name": "init_ns1",
                            "stmtc": "f_subroutine",
                            "stmtf": "f_subroutine"
                        }
                    }
                ],
                "name": "ns1",
                "options": {
                    "F_name_impl_template": "{library_lower}_{F_name_scope}{F_name_api}{function_suffix}"
                },
                "scope": "ns1::",
                "scope_file": [
                    "testnames",
                    "ns1"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "ns1::",
                    "C_header_filename": "wraptestnames_ns1.hh",
                    "C_impl_filename": "wraptestnames_ns1.cc",
                    "C_name_api": "ns1",
                    "C_name_scope": "ns1_",
                    "F_impl_filename": "wrapftestnames_ns1.F",
                    "F_module_name": "testnames_ns1_mod",
                    "F_name_api": "ns1",
                    "LUA_this_call": "ns1::",
                    "PY_library_doc": "library documentation",
                    "PY_module_filename": "pytestnames_ns1module.cpp",
                    "PY_module_init": "testnames_ns1",
                    "PY_module_name": "ns1",
                    "PY_module_scope": "testnames.ns1",
                    "PY_this_call": "ns1::",
                    "file_scope": "testnames_ns1",
                    "namespace_scope": "ns1::"
                }
            },
            {
                "<NAMESPACE>": "internal ****************************************",
                "classes": [
                    {
                        "<CLASS>": "ImplWorker1 ****************************************",
                        "cxx_header": [],
                        "name": "ImplWorker1",
                        "options": {
                            "wrap_fortran": false,
                            "wrap_python": false
                        },
                        "parse_keyword": "class",
                        "scope": "internal::ImplWorker1::",
                        "typemap_name": "internal::ImplWorker1",
                        "user_fmt": {
                            "template_suffix": "_instantiation3"
                        },
                        "wrap": {
                            "c": true
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapinternal_ImplWorker1.hh",
                            "C_impl_filename": "wrapinternal_ImplWorker1.cc",
                            "C_name_api": "ImplWorker1",
                            "C_name_scope": "internal_ImplWorker1_",
                            "C_type_name": "TES_internal_ImplWorker1",
                            "F_derived_name": "impl_worker1",
                            "F_name_api": "impl_worker1",
                            "F_name_scope": "impl_worker1_",
                            "class_scope": "ImplWorker1::",
                            "cxx_class": "ImplWorker1",
                            "cxx_type": "ImplWorker1",
                            "file_scope": "internal_ImplWorker1",
                            "template_suffix": "_instantiation3"
                        }
                    }
                ],
                "name": "internal",
                "options": {},
                "scope": "internal::",
                "scope_file": [
                    "testnames",
                    "internal"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "internal::",
                    "C_header_filename": "wraptestnames_internal.hh",
                    "C_impl_filename": "wraptestnames_internal.cc",
                    "C_name_api": "internal",
                    "C_name_scope": "internal_",
                    "F_impl_filename": "wrapftestnames_internal.F",
                    "F_module_name": "testnames_internal_mod",
                    "F_name_api": "internal",
                    "LUA_this_call": "internal::",
                    "PY_library_doc": "library documentation",
                    "PY_module_filename": "pytestnames_internalmodule.cpp",
                    "PY_module_init": "testnames_internal",
                    "PY_module_name": "internal",
                    "PY_module_scope": "testnames.internal",
                    "PY_this_call": "internal::",
                    "file_scope": "testnames_internal",
                    "namespace_scope": "internal::"
                }
            },
            {
                "<NAMESPACE>": "std ****************************************",
                "classes": [
                    {
                        "<CLASS>": "vector ****************************************",
                        "cxx_header": [
                            "<vector>"
                        ],
                        "name": "vector",
                        "name_api": "Vvv1",
                        "name_instantiation": "vector<int>",
                        "options": {},
                        "parse_keyword": "class",
                        "scope": "std::vector::",
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "fmtdict": {
                                    "F_derived_name": "FFvvv1",
                                    "cxx_class": "Vvv1"
                                },
                                "instantiation": "<int>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "long"
                                        ],
                                        "typemap_name": "long"
                                    }
                                ],
                                "fmtdict": {
                                    "template_suffix": "_instantiation5"
                                },
                                "instantiation": "<long>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "internal::ImplWorker1"
                                        ],
                                        "typemap_name": "internal::ImplWorker1"
                                    }
                                ],
                                "instantiation": "<internal::ImplWorker1>"
                            }
                        ],
                        "template_parameters": [
                            "T"
                        ],
                        "typemap_name": "std::Vvv1",
                        "user_fmt": {
                            "F_derived_name": "FFvvv1",
                            "cxx_class": "Vvv1"
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapstd_vector_int.hh",
                            "C_impl_filename": "wrapstd_vector_int.cc",
                            "C_name_api": "Vvv1",
                            "C_name_scope": "std_Vvv1_",
                            "C_type_name": "TES_std_Vvv1",
                            "F_derived_name": "FFvvv1",
                            "F_name_api": "vvv1",
                            "F_name_scope": "vvv1_",
                            "PY_PyObject": "PY_Vvv1",
                            "PY_PyTypeObject": "PY_Vvv1_Type",
                            "PY_capsule_name": "PY_Vvv1_capsule_name",
                            "PY_from_object_func": "PP_Vvv1_from_Object",
                            "PY_this_call": "self->myobj->",
                            "PY_to_object_func": "PP_Vvv1_to_Object",
                            "PY_to_object_idtor_func": "PP_Vvv1_to_Object_idtor",
                            "PY_type_filename": "pystd_vector_inttype.cpp",
                            "class_scope": "vector<int>::",
                            "cxx_class": "Vvv1",
                            "cxx_type": "vector<int>",
                            "f_capsule_data_type": "TES_SHROUD_capsule_data",
                            "f_helper_capsule_data_helper": "TES_SHROUD_capsule_data",
                            "file_scope": "std_vector_int"
                        }
                    },
                    {
                        "<CLASS>": "vector ****************************************",
                        "cxx_header": [
                            "<vector>"
                        ],
                        "name": "vector",
                        "name_api": "vector_double",
                        "name_instantiation": "vector<double>",
                        "options": {},
                        "parse_keyword": "class",
                        "scope": "std::vector::",
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "fmtdict": {
                                    "F_derived_name": "FFvvv1",
                                    "cxx_class": "Vvv1"
                                },
                                "instantiation": "<int>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "long"
                                        ],
                                        "typemap_name": "long"
                                    }
                                ],
                                "fmtdict": {
                                    "template_suffix": "_instantiation5"
                                },
                                "instantiation": "<long>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "internal::ImplWorker1"
                                        ],
                                        "typemap_name": "internal::ImplWorker1"
                                    }
                                ],
                                "instantiation": "<internal::ImplWorker1>"
                            }
                        ],
                        "template_parameters": [
                            "T"
                        ],
                        "typemap_name": "std::vector_double",
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapstd_vector_double.hh",
                            "C_impl_filename": "wrapstd_vector_double.cc",
                            "C_name_api": "vector_double",
                            "C_name_scope": "std_vector_double_",
                            "C_type_name": "TES_std_vector_double",
                            "F_derived_name": "vector_double",
                            "F_name_api": "vector_double",
                            "F_name_scope": "vector_double_",
                            "PY_PyObject": "PY_vector_double",
                            "PY_PyTypeObject": "PY_vector_double_Type",
                            "PY_capsule_name": "PY_vector_double_capsule_name",
                            "PY_from_object_func": "PP_vector_double_from_Object",
                            "PY_this_call": "self->myobj->",
                            "PY_to_object_func": "PP_vector_double_to_Object",
                            "PY_to_object_idtor_func": "PP_vector_double_to_Object_idtor",
                            "PY_type_filename": "pystd_vector_doubletype.cpp",
                            "class_scope": "vector<double>::",
                            "cxx_class": "vector_double",
                            "cxx_type": "vector<double>",
                            "f_capsule_data_type": "TES_SHROUD_capsule_data",
                            "f_helper_capsule_data_helper": "TES_SHROUD_capsule_data",
                            "file_scope": "std_vector_double"
                        }
                    },
                    {
                        "<CLASS>": "vector ****************************************",
                        "cxx_header": [
                            "<vector>"
                        ],
                        "name": "vector",
                        "name_api": "vector_instantiation5",
                        "name_instantiation": "vector<long>",
                        "options": {},
                        "parse_keyword": "class",
                        "scope": "std::vector::",
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "fmtdict": {
                                    "F_derived_name": "FFvvv1",
                                    "cxx_class": "Vvv1"
                                },
                                "instantiation": "<int>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "long"
                                        ],
                                        "typemap_name": "long"
                                    }
                                ],
                                "fmtdict": {
                                    "template_suffix": "_instantiation5"
                                },
                                "instantiation": "<long>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "internal::ImplWorker1"
                                        ],
                                        "typemap_name": "internal::ImplWorker1"
                                    }
                                ],
                                "instantiation": "<internal::ImplWorker1>"
                            }
                        ],
                        "template_parameters": [
                            "T"
                        ],
                        "typemap_name": "std::vector_instantiation5",
                        "user_fmt": {
                            "template_suffix": "_instantiation5"
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapstd_vector_instantiation5.hh",
                            "C_impl_filename": "wrapstd_vector_instantiation5.cc",
                            "C_name_api": "vector_instantiation5",
                            "C_name_scope": "std_vector_instantiation5_",
                            "C_type_name": "TES_std_vector_instantiation5",
                            "F_derived_name": "vector_instantiation5",
                            "F_name_api": "vector_instantiation5",
                            "F_name_scope": "vector_instantiation5_",
                            "PY_PyObject": "PY_vector_instantiation5",
                            "PY_PyTypeObject": "PY_vector_instantiation5_Type",
                            "PY_capsule_name": "PY_vector_instantiation5_capsule_name",
                            "PY_from_object_func": "PP_vector_instantiation5_from_Object",
                            "PY_this_call": "self->myobj->",
                            "PY_to_object_func": "PP_vector_instantiation5_to_Object",
                            "PY_to_object_idtor_func": "PP_vector_instantiation5_to_Object_idtor",
                            "PY_type_filename": "pystd_vector_instantiation5type.cpp",
                            "class_scope": "vector<long>::",
                            "cxx_class": "vector_instantiation5",
                            "cxx_type": "vector<long>",
                            "f_capsule_data_type": "TES_SHROUD_capsule_data",
                            "f_helper_capsule_data_helper": "TES_SHROUD_capsule_data",
                            "file_scope": "std_vector_instantiation5",
                            "template_suffix": "_instantiation5"
                        }
                    },
                    {
                        "<CLASS>": "vector ****************************************",
                        "cxx_header": [
                            "<vector>"
                        ],
                        "name": "vector",
                        "name_api": "vector_instantiation3",
                        "name_instantiation": "vector<internal::ImplWorker1>",
                        "options": {},
                        "parse_keyword": "class",
                        "scope": "std::vector::",
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "fmtdict": {
                                    "F_derived_name": "FFvvv1",
                                    "cxx_class": "Vvv1"
                                },
                                "instantiation": "<int>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "long"
                                        ],
                                        "typemap_name": "long"
                                    }
                                ],
                                "fmtdict": {
                                    "template_suffix": "_instantiation5"
                                },
                                "instantiation": "<long>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "internal::ImplWorker1"
                                        ],
                                        "typemap_name": "internal::ImplWorker1"
                                    }
                                ],
                                "instantiation": "<internal::ImplWorker1>"
                            }
                        ],
                        "template_parameters": [
                            "T"
                        ],
                        "typemap_name": "std::vector_instantiation3",
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapstd_vector_instantiation3.hh",
                            "C_impl_filename": "wrapstd_vector_instantiation3.cc",
                            "C_name_api": "vector_instantiation3",
                            "C_name_scope": "std_vector_instantiation3_",
                            "C_type_name": "TES_std_vector_instantiation3",
                            "F_derived_name": "vector_instantiation3",
                            "F_name_api": "vector_instantiation3",
                            "F_name_scope": "vector_instantiation3_",
                            "PY_PyObject": "PY_vector_instantiation3",
                            "PY_PyTypeObject": "PY_vector_instantiation3_Type",
                            "PY_capsule_name": "PY_vector_instantiation3_capsule_name",
                            "PY_from_object_func": "PP_vector_instantiation3_from_Object",
                            "PY_this_call": "self->myobj->",
                            "PY_to_object_func": "PP_vector_instantiation3_to_Object",
                            "PY_to_object_idtor_func": "PP_vector_instantiation3_to_Object_idtor",
                            "PY_type_filename": "pystd_vector_instantiation3type.cpp",
                            "class_scope": "vector<internal::ImplWorker1>::",
                            "cxx_class": "vector_instantiation3",
                            "cxx_type": "vector<internal::ImplWorker1>",
                            "f_capsule_data_type": "TES_SHROUD_capsule_data",
                            "f_helper_capsule_data_helper": "TES_SHROUD_capsule_data",
                            "file_scope": "std_vector_instantiation3"
                        }
                    }
                ],
                "name": "std",
                "options": {},
                "scope": "std::",
                "scope_file": [
                    "testnames",
                    "std"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "std::",
                    "C_header_filename": "wraptestnames_std.hh",
                    "C_impl_filename": "wraptestnames_std.cc",
                    "C_name_api": "std",
                    "C_name_scope": "std_",
                    "F_impl_filename": "wrapftestnames_std.F",
                    "F_module_name": "testnames_std_mod",
                    "F_name_api": "std",
                    "LUA_this_call": "std::",
                    "PY_library_doc": "library documentation",
                    "PY_module_filename": "pytestnames_stdmodule.cpp",
                    "PY_module_init": "testnames_std",
                    "PY_module_name": "std",
                    "PY_module_scope": "testnames.std",
                    "PY_this_call": "std::",
                    "file_scope": "testnames_std",
                    "namespace_scope": "std::"
                }
            },
            {
                "<NAMESPACE>": "CAPI ****************************************",
                "classes": [
                    {
                        "<CLASS>": "Class1 ****************************************",
                        "cxx_header": [],
                        "functions": [
                            {
                                "<FUNCTION>": "Member1  3 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "metaattrs": {
                                            "intent": "subroutine"
                                        },
                                        "name": "Member1",
                                        "params": [],
                                        "typemap_name": "void"
                                    },
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void Member1()",
                                "declgen": "void Member1(void)",
                                "name": "Member1",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true
                                },
                                "zz_fmtdict": {
                                    "C_name": "TES_capi_class1_member1",
                                    "C_name_api": "member1",
                                    "C_prototype": "TES_capi_class1 * self",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_class1_member1",
                                    "F_C_name": "c_class1_member1",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_name_api": "member1",
                                    "F_name_function": "member1",
                                    "F_name_generic": "member1",
                                    "F_name_impl": "class1_member1",
                                    "F_subprogram": "subroutine",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "function_name": "Member1",
                                    "stmtc": "f_subroutine",
                                    "stmtf": "f_subroutine"
                                }
                            }
                        ],
                        "name": "Class1",
                        "options": {},
                        "parse_keyword": "class",
                        "scope": "CAPI::Class1::",
                        "typemap_name": "CAPI::Class1",
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapCAPI_Class1.hh",
                            "C_impl_filename": "wrapCAPI_Class1.cc",
                            "C_name_api": "class1",
                            "C_name_scope": "capi_class1_",
                            "C_type_name": "TES_capi_class1",
                            "F_derived_name": "class1",
                            "F_name_api": "class1",
                            "F_name_scope": "class1_",
                            "class_scope": "Class1::",
                            "cxx_class": "Class1",
                            "cxx_type": "Class1",
                            "f_capsule_data_type": "TES_SHROUD_capsule_data",
                            "f_helper_capsule_data_helper": "TES_SHROUD_capsule_data",
                            "file_scope": "CAPI_Class1"
                        }
                    }
                ],
                "functions": [
                    {
                        "<FUNCTION>": "Worker1  23 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "Worker1",
                                "params": [],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void Worker1()",
                        "declgen": "void Worker1(void)",
                        "name": "Worker1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "C_name": "TES_capi_worker1",
                            "C_name_api": "worker1",
                            "C_prototype": "void",
                            "C_return_type": "void",
                            "F_C_arguments": "",
                            "F_C_call": "c_worker1",
                            "F_C_name": "c_worker1",
                            "F_C_subprogram": "subroutine",
                            "F_arguments": "",
                            "F_name_api": "worker1",
                            "F_name_function": "worker1",
                            "F_name_generic": "worker1",
                            "F_name_impl": "worker1",
                            "F_subprogram": "subroutine",
                            "function_name": "Worker1",
                            "stmtc": "f_subroutine",
                            "stmtf": "f_subroutine"
                        }
                    }
                ],
                "name": "CAPI",
                "options": {
                    "C_API_case": "lower",
                    "wrap_python": false
                },
                "scope": "CAPI::",
                "scope_file": [
                    "testnames",
                    "CAPI"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "CAPI::",
                    "C_header_filename": "wraptestnames_CAPI.hh",
                    "C_impl_filename": "wraptestnames_CAPI.cc",
                    "C_name_api": "capi",
                    "C_name_scope": "capi_",
                    "F_impl_filename": "wrapftestnames_CAPI.F",
                    "F_module_name": "testnames_capi_mod",
                    "F_name_api": "capi",
                    "LUA_this_call": "CAPI::",
                    "PY_module_init": "testnames_CAPI",
                    "PY_module_name": "CAPI",
                    "PY_module_scope": "testnames.CAPI",
                    "PY_this_call": "CAPI::",
                    "file_scope": "testnames_CAPI",
                    "namespace_scope": "CAPI::"
                }
            },
            {
                "<NAMESPACE>": "CAPI2 ****************************************",
                "functions": [
                    {
                        "<FUNCTION>": "Worker1  24 ****************************************",
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "subroutine"
                                },
                                "name": "Worker1",
                                "params": [],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void Worker1()",
                        "declgen": "void Worker1(void)",
                        "name": "Worker1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "C_name": "TES_CAPItwo_Worker1",
                            "C_name_api": "Worker1",
                            "C_prototype": "void",
                            "C_return_type": "void",
                            "F_C_arguments": "",
                            "F_C_call": "c_worker1",
                            "F_C_name": "c_worker1",
                            "F_C_subprogram": "subroutine",
                            "F_arguments": "",
                            "F_name_api": "worker1",
                            "F_name_function": "worker1",
                            "F_name_generic": "worker1",
                            "F_name_impl": "worker1",
                            "F_subprogram": "subroutine",
                            "function_name": "Worker1",
                            "stmtc": "f_subroutine",
                            "stmtf": "f_subroutine"
                        }
                    }
                ],
                "name": "CAPI2",
                "options": {
                    "wrap_python": false
                },
                "scope": "CAPI2::",
                "scope_file": [
                    "testnames",
                    "CAPI2"
                ],
                "user_fmt": {
                    "C_name_api": "CAPItwo",
                    "F_name_api": "FAPItwo"
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "CAPI2::",
                    "C_header_filename": "wraptestnames_CAPI2.hh",
                    "C_impl_filename": "wraptestnames_CAPI2.cc",
                    "C_name_api": "CAPItwo",
                    "C_name_scope": "CAPItwo_",
                    "F_impl_filename": "wrapftestnames_CAPI2.F",
                    "F_module_name": "testnames_capi2_mod",
                    "F_name_api": "FAPItwo",
                    "LUA_this_call": "CAPI2::",
                    "PY_module_init": "testnames_CAPI2",
                    "PY_module_name": "CAPI2",
                    "PY_module_scope": "testnames.CAPI2",
                    "PY_this_call": "CAPI2::",
                    "file_scope": "testnames_CAPI2",
                    "namespace_scope": "CAPI2::"
                }
            }
        ],
        "scope_file": [
            "testnames"
        ],
        "user_fmt": {
            "CXX_local": "ARG_",
            "C_header_filename": "top.h",
            "C_header_filename_suffix": "hh",
            "C_impl_filename": "top.cpp",
            "C_impl_filename_suffix": "cc",
            "F_filename_suffix": "F",
            "F_impl_filename": "top.f",
            "F_module_name": "top_module",
            "LUA_module_name": "lua_module_name",
            "PY_type_dtor": "mydtor",
            "PY_type_obj": "myobj"
        },
        "wrap": {
            "c": true,
            "fortran": true,
            "python": true
        }
    },
    "symtab": {
        "CAPI": {
            "Class1": "CAPI::Class1"
        },
        "Color": "enum-Color",
        "Cstruct_as_class": "struct-Cstruct_as_class",
        "Cstruct_as_subclass": "struct-Cstruct_as_subclass",
        "Names2": "Names2",
        "enum-Color": "Color",
        "internal": {
            "ImplWorker1": "internal::ImplWorker1"
        },
        "ns0": {
            "Names": "ns0::Names"
        },
        "std": {
            "vector": "std::vector"
        },
        "struct-Cstruct_as_class": "Cstruct_as_class",
        "struct-Cstruct_as_subclass": "Cstruct_as_subclass",
        "twoTs": "twoTs"
    },
    "types": {
        "CAPI::Class1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}CAPI::Class1 *>\t({c_var}->addr)",
            "c_type": "TES_capi_class1",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "CAPI::Class1",
            "f_capsule_data_type": "TES_SHROUD_capsule_data",
            "f_class": "class(class1)",
            "f_derived_type": "class1",
            "f_module": {
                "testnames_capi_mod": [
                    "class1"
                ]
            },
            "f_module_name": "testnames_capi_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(class1)",
            "flat_name": "CAPI_Class1",
            "i_module": {
                "testnames_capi_mod": [
                    "TES_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TES_SHROUD_capsule_data)",
            "impl_header": [],
            "sgroup": "shadow",
            "wrap_header": [
                "typestestnames.hh"
            ]
        },
        "Color": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({ctor_expr})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "base": "integer",
            "c_to_cxx": "static_cast<Color>({c_var})",
            "c_type": "int",
            "cfi_type": "CFI_type_int",
            "cxx_to_c": "static_cast<int>({cxx_var})",
            "cxx_type": "Color",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_module_name": "iso_c_binding",
            "f_type": "integer(C_INT)",
            "flat_name": "int",
            "sgroup": "native",
            "sh_type": "SH_TYPE_INT"
        },
        "Cstruct_as_class": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Cstruct_as_class",
            "PY_PyTypeObject": "PY_Cstruct_as_class_Type",
            "PY_from_object": "PP_Cstruct_as_class_from_Object",
            "PY_to_object": "PP_Cstruct_as_class_to_Object",
            "PY_to_object_idtor": "PP_Cstruct_as_class_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}Cstruct_as_class *>\t({c_var}->addr)",
            "c_type": "TES_Cstruct_as_class",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "Cstruct_as_class",
            "f_capsule_data_type": "TES_SHROUD_capsule_data",
            "f_class": "class(Fstruct_as_class)",
            "f_derived_type": "Fstruct_as_class",
            "f_module": {
                "top_module": [
                    "Fstruct_as_class"
                ]
            },
            "f_module_name": "top_module",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(Fstruct_as_class)",
            "flat_name": "Cstruct_as_class",
            "i_module": {
                "top_module": [
                    "TES_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TES_SHROUD_capsule_data)",
            "impl_header": [],
            "sgroup": "shadow",
            "wrap_header": [
                "typestestnames.hh"
            ]
        },
        "Cstruct_as_subclass": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Cstruct_as_subclass",
            "PY_PyTypeObject": "PY_Cstruct_as_subclass_Type",
            "PY_from_object": "PP_Cstruct_as_subclass_from_Object",
            "PY_to_object": "PP_Cstruct_as_subclass_to_Object",
            "PY_to_object_idtor": "PP_Cstruct_as_subclass_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}Cstruct_as_subclass *>\t({c_var}->addr)",
            "c_type": "TES_Cstruct_as_subclass",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "Cstruct_as_subclass",
            "f_capsule_data_type": "TES_SHROUD_capsule_data",
            "f_class": "class(Fstruct_as_subclass)",
            "f_derived_type": "Fstruct_as_subclass",
            "f_module": {
                "top_module": [
                    "Fstruct_as_subclass"
                ]
            },
            "f_module_name": "top_module",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(Fstruct_as_subclass)",
            "flat_name": "Cstruct_as_subclass",
            "i_module": {
                "top_module": [
                    "TES_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TES_SHROUD_capsule_data)",
            "impl_header": [],
            "sgroup": "shadow",
            "wrap_header": [
                "typestestnames.hh"
            ]
        },
        "Names2": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Names2",
            "PY_PyTypeObject": "PY_Names2_Type",
            "PY_from_object": "PP_Names2_from_Object",
            "PY_to_object": "PP_Names2_to_Object",
            "PY_to_object_idtor": "PP_Names2_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}Names2 *>\t({c_var}->addr)",
            "c_type": "TES_Names2",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "Names2",
            "f_capsule_data_type": "TES_SHROUD_capsule_data",
            "f_class": "class(names2)",
            "f_derived_type": "names2",
            "f_module": {
                "top_module": [
                    "names2"
                ]
            },
            "f_module_name": "top_module",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(names2)",
            "flat_name": "Names2",
            "i_module": {
                "top_module": [
                    "TES_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TES_SHROUD_capsule_data)",
            "impl_header": [],
            "sgroup": "shadow",
            "wrap_header": [
                "typestestnames.hh"
            ]
        },
        "internal::ImplWorker1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}internal::ImplWorker1 *>\t({c_var}->addr)",
            "c_type": "TES_internal_ImplWorker1",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "internal::ImplWorker1",
            "f_capsule_data_type": "TES_SHROUD_capsule_data",
            "f_class": "class(impl_worker1)",
            "f_derived_type": "impl_worker1",
            "f_module": {
                "testnames_internal_mod": [
                    "impl_worker1"
                ]
            },
            "f_module_name": "testnames_internal_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(impl_worker1)",
            "flat_name": "internal_ImplWorker1",
            "i_module": {
                "testnames_internal_mod": [
                    "TES_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TES_SHROUD_capsule_data)",
            "impl_header": [],
            "sgroup": "shadow",
            "template_suffix": "_instantiation3",
            "wrap_header": [
                "typestestnames.hh"
            ]
        },
        "ns0::Names": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Names",
            "PY_PyTypeObject": "PY_Names_Type",
            "PY_from_object": "PP_Names_from_Object",
            "PY_to_object": "PP_Names_to_Object",
            "PY_to_object_idtor": "PP_Names_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}ns0::Names *>\t({c_var}->addr)",
            "c_type": "TES_ns0_Names",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "ns0::Names",
            "f_capsule_data_type": "TES_SHROUD_capsule_data",
            "f_class": "class(FNames)",
            "f_derived_type": "FNames",
            "f_module": {
                "name_module": [
                    "FNames"
                ]
            },
            "f_module_name": "name_module",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(FNames)",
            "flat_name": "ns0_Names",
            "i_module": {
                "name_module": [
                    "TES_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TES_SHROUD_capsule_data)",
            "idtor": "1",
            "impl_header": [],
            "sgroup": "shadow",
            "wrap_header": [
                "typestestnames.hh"
            ]
        },
        "std::Vvv1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Vvv1",
            "PY_PyTypeObject": "PY_Vvv1_Type",
            "PY_from_object": "PP_Vvv1_from_Object",
            "PY_to_object": "PP_Vvv1_to_Object",
            "PY_to_object_idtor": "PP_Vvv1_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}std::vector<int> *>\t({c_var}->addr)",
            "c_type": "TES_std_Vvv1",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector<int>",
            "f_capsule_data_type": "TES_SHROUD_capsule_data",
            "f_class": "class(FFvvv1)",
            "f_derived_type": "FFvvv1",
            "f_module": {
                "testnames_std_mod": [
                    "FFvvv1"
                ]
            },
            "f_module_name": "testnames_std_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(FFvvv1)",
            "flat_name": "std_vector_int",
            "i_module": {
                "testnames_std_mod": [
                    "TES_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TES_SHROUD_capsule_data)",
            "impl_header": [
                "<vector>"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestestnames.hh"
            ]
        },
        "std::vector": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}std::vector *>\t({c_var}->addr)",
            "c_type": "TES_std_vector",
            "cxx_instantiation": {
                "<double>": "std::vector_double",
                "<int>": "std::Vvv1",
                "<internal::ImplWorker1>": "std::vector_instantiation3",
                "<long>": "std::vector_instantiation5"
            },
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector",
            "f_capsule_data_type": "TES_SHROUD_capsule_data",
            "f_class": "class(vector)",
            "f_derived_type": "vector",
            "f_module": {
                "testnames_std_mod": [
                    "vector"
                ]
            },
            "f_module_name": "testnames_std_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(vector)",
            "flat_name": "std_vector",
            "i_module": {
                "testnames_std_mod": [
                    "TES_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TES_SHROUD_capsule_data)",
            "impl_header": [
                "<vector>"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestestnames.hh"
            ]
        },
        "std::vector_double": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_vector_double",
            "PY_PyTypeObject": "PY_vector_double_Type",
            "PY_from_object": "PP_vector_double_from_Object",
            "PY_to_object": "PP_vector_double_to_Object",
            "PY_to_object_idtor": "PP_vector_double_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}std::vector<double> *>\t({c_var}->addr)",
            "c_type": "TES_std_vector_double",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector<double>",
            "f_capsule_data_type": "TES_SHROUD_capsule_data",
            "f_class": "class(vector_double)",
            "f_derived_type": "vector_double",
            "f_module": {
                "testnames_std_mod": [
                    "vector_double"
                ]
            },
            "f_module_name": "testnames_std_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(vector_double)",
            "flat_name": "std_vector_double",
            "i_module": {
                "testnames_std_mod": [
                    "TES_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TES_SHROUD_capsule_data)",
            "impl_header": [
                "<vector>"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestestnames.hh"
            ]
        },
        "std::vector_instantiation3": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_vector_instantiation3",
            "PY_PyTypeObject": "PY_vector_instantiation3_Type",
            "PY_from_object": "PP_vector_instantiation3_from_Object",
            "PY_to_object": "PP_vector_instantiation3_to_Object",
            "PY_to_object_idtor": "PP_vector_instantiation3_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}std::vector<internal::ImplWorker1> *>\t({c_var}->addr)",
            "c_type": "TES_std_vector_instantiation3",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector<internal::ImplWorker1>",
            "f_capsule_data_type": "TES_SHROUD_capsule_data",
            "f_class": "class(vector_instantiation3)",
            "f_derived_type": "vector_instantiation3",
            "f_module": {
                "testnames_std_mod": [
                    "vector_instantiation3"
                ]
            },
            "f_module_name": "testnames_std_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(vector_instantiation3)",
            "flat_name": "std_vector_internal_ImplWorker1",
            "i_module": {
                "testnames_std_mod": [
                    "TES_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TES_SHROUD_capsule_data)",
            "impl_header": [
                "<vector>"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestestnames.hh"
            ]
        },
        "std::vector_instantiation5": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_vector_instantiation5",
            "PY_PyTypeObject": "PY_vector_instantiation5_Type",
            "PY_from_object": "PP_vector_instantiation5_from_Object",
            "PY_to_object": "PP_vector_instantiation5_to_Object",
            "PY_to_object_idtor": "PP_vector_instantiation5_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}std::vector<long> *>\t({c_var}->addr)",
            "c_type": "TES_std_vector_instantiation5",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector<long>",
            "f_capsule_data_type": "TES_SHROUD_capsule_data",
            "f_class": "class(vector_instantiation5)",
            "f_derived_type": "vector_instantiation5",
            "f_module": {
                "testnames_std_mod": [
                    "vector_instantiation5"
                ]
            },
            "f_module_name": "testnames_std_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(vector_instantiation5)",
            "flat_name": "std_vector_long",
            "i_module": {
                "testnames_std_mod": [
                    "TES_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TES_SHROUD_capsule_data)",
            "impl_header": [
                "<vector>"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typestestnames.hh"
            ]
        },
        "twoTs": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}twoTs *>\t({c_var}->addr)",
            "c_type": "TES_twoTs",
            "cxx_instantiation": {
                "<float, double>": "twoTs_instantiation4",
                "<int, long>": "twoTs_0"
            },
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "twoTs",
            "f_capsule_data_type": "TES_SHROUD_capsule_data",
            "f_class": "class(two_ts)",
            "f_derived_type": "two_ts",
            "f_module": {
                "top_module": [
                    "two_ts"
                ]
            },
            "f_module_name": "top_module",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(two_ts)",
            "flat_name": "twoTs",
            "i_module": {
                "top_module": [
                    "TES_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TES_SHROUD_capsule_data)",
            "impl_header": [],
            "sgroup": "shadow",
            "wrap_header": [
                "typestestnames.hh"
            ]
        },
        "twoTs_0": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_twoTs_0",
            "PY_PyTypeObject": "PY_twoTs_0_Type",
            "PY_from_object": "PP_twoTs_0_from_Object",
            "PY_to_object": "PP_twoTs_0_to_Object",
            "PY_to_object_idtor": "PP_twoTs_0_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}twoTs<int, long> *>\t({c_var}->addr)",
            "c_type": "TES_twoTs_0",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "twoTs<int, long>",
            "f_capsule_data_type": "TES_SHROUD_capsule_data",
            "f_class": "class(two_ts_0)",
            "f_derived_type": "two_ts_0",
            "f_module": {
                "top_module": [
                    "two_ts_0"
                ]
            },
            "f_module_name": "top_module",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(two_ts_0)",
            "flat_name": "twoTs_int,_long",
            "i_module": {
                "top_module": [
                    "TES_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TES_SHROUD_capsule_data)",
            "impl_header": [],
            "sgroup": "shadow",
            "wrap_header": [
                "typestestnames.hh"
            ]
        },
        "twoTs_instantiation4": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_twoTs_instantiation4",
            "PY_PyTypeObject": "PY_twoTs_instantiation4_Type",
            "PY_from_object": "PP_twoTs_instantiation4_from_Object",
            "PY_to_object": "PP_twoTs_instantiation4_to_Object",
            "PY_to_object_idtor": "PP_twoTs_instantiation4_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}twoTs<float, double> *>\t({c_var}->addr)",
            "c_type": "TES_twoTs_instantiation4",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "twoTs<float, double>",
            "f_capsule_data_type": "TES_SHROUD_capsule_data",
            "f_class": "class(two_ts_instantiation4)",
            "f_derived_type": "two_ts_instantiation4",
            "f_module": {
                "top_module": [
                    "two_ts_instantiation4"
                ]
            },
            "f_module_name": "top_module",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(two_ts_instantiation4)",
            "flat_name": "twoTs_float,_double",
            "i_module": {
                "top_module": [
                    "TES_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(TES_SHROUD_capsule_data)",
            "impl_header": [],
            "sgroup": "shadow",
            "wrap_header": [
                "typestestnames.hh"
            ]
        }
    }
}