{
    "__NOTICE__": "This file is generated by Shroud 0.11.0 and is useful for debugging.",
    "library": {
        "classes": [
            {
                "cxx_header": [],
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapNames2.hh",
                    "C_impl_filename": "wrapNames2.cc",
                    "C_name_scope": "Names2_",
                    "C_type_name": "TES_Names2",
                    "F_capsule_data_type": "SHROUD_names2_capsule",
                    "F_derived_name": "names2",
                    "F_name_scope": "names2_",
                    "PY_PyObject": "PY_Names2",
                    "PY_PyTypeObject": "PY_Names2_Type",
                    "PY_capsule_name": "PY_Names2_capsule_name",
                    "PY_from_object_func": "PP_Names2_from_Object",
                    "PY_this_call": "self->myobj->",
                    "PY_to_object_func": "PP_Names2_to_Object",
                    "PY_to_object_idtor_func": "PP_Names2_to_Object_idtor",
                    "PY_type_filename": "pyNames2type.cpp",
                    "class_scope": "Names2::",
                    "cxx_class": "Names2",
                    "cxx_type": "Names2",
                    "file_scope": "Names2"
                },
                "name": "Names2",
                "options": {},
                "scope": "Names2::",
                "typemap_name": "Names2"
            },
            {
                "cxx_header": [],
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wraptwoTs_0.hh",
                    "C_impl_filename": "wraptwoTs_0.cc",
                    "C_name_scope": "twoTs_0_",
                    "C_type_name": "TES_twoTs_0",
                    "F_capsule_data_type": "SHROUD_twots_0_capsule",
                    "F_derived_name": "twots_0",
                    "F_name_scope": "twots_0_",
                    "PY_PyObject": "PY_twoTs_0",
                    "PY_PyTypeObject": "PY_twoTs_0_Type",
                    "PY_capsule_name": "PY_twoTs_0_capsule_name",
                    "PY_from_object_func": "PP_twoTs_0_from_Object",
                    "PY_this_call": "self->myobj->",
                    "PY_to_object_func": "PP_twoTs_0_to_Object",
                    "PY_to_object_idtor_func": "PP_twoTs_0_to_Object_idtor",
                    "PY_type_filename": "pytwoTs_0type.cpp",
                    "class_scope": "twoTs_0::",
                    "cxx_class": "twoTs_0",
                    "cxx_type": "twoTs<int, long>",
                    "file_scope": "twoTs_0"
                },
                "name": "twoTs",
                "options": {},
                "scope": "twoTs::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "template_suffix": "_instantiation4"
                        },
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T1",
                    "T2"
                ],
                "typemap_name": "twoTs_0"
            },
            {
                "cxx_header": [],
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wraptwoTs_instantiation4.hh",
                    "C_impl_filename": "wraptwoTs_instantiation4.cc",
                    "C_name_scope": "twoTs_instantiation4_",
                    "C_type_name": "TES_twoTs_instantiation4",
                    "F_capsule_data_type": "SHROUD_twots_instantiation4_capsule",
                    "F_derived_name": "twots_instantiation4",
                    "F_name_scope": "twots_instantiation4_",
                    "PY_PyObject": "PY_twoTs_instantiation4",
                    "PY_PyTypeObject": "PY_twoTs_instantiation4_Type",
                    "PY_capsule_name": "PY_twoTs_instantiation4_capsule_name",
                    "PY_from_object_func": "PP_twoTs_instantiation4_from_Object",
                    "PY_this_call": "self->myobj->",
                    "PY_to_object_func": "PP_twoTs_instantiation4_to_Object",
                    "PY_to_object_idtor_func": "PP_twoTs_instantiation4_to_Object_idtor",
                    "PY_type_filename": "pytwoTs_instantiation4type.cpp",
                    "class_scope": "twoTs_instantiation4::",
                    "cxx_class": "twoTs_instantiation4",
                    "cxx_type": "twoTs<float, double>",
                    "file_scope": "twoTs_instantiation4",
                    "template_suffix": "_instantiation4"
                },
                "name": "twoTs",
                "options": {},
                "scope": "twoTs::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "template_suffix": "_instantiation4"
                        },
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T1",
                    "T2"
                ],
                "typemap_name": "twoTs_instantiation4"
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "enums": [
            {
                "_fmtmembers": {
                    "BLUE": {
                        "C_enum_member": "TES_BLUE",
                        "F_enum_member": "blue",
                        "F_value": 1,
                        "enum_member_lower": "blue",
                        "enum_member_name": "BLUE",
                        "enum_member_upper": "BLUE"
                    },
                    "RED": {
                        "C_enum_member": "TES_RED",
                        "F_enum_member": "red",
                        "F_value": 0,
                        "enum_member_lower": "red",
                        "enum_member_name": "RED",
                        "enum_member_upper": "RED"
                    },
                    "WHITE": {
                        "C_enum_member": "TES_WHITE",
                        "F_enum_member": "white",
                        "F_value": 2,
                        "enum_member_lower": "white",
                        "enum_member_name": "WHITE",
                        "enum_member_upper": "WHITE"
                    }
                },
                "ast": {
                    "members": [
                        {
                            "name": "RED"
                        },
                        {
                            "name": "BLUE"
                        },
                        {
                            "name": "WHITE"
                        }
                    ],
                    "name": "Color"
                },
                "decl": "enum Color {\n  RED,\n  BLUE,\n  WHITE\n};\n",
                "fmtdict": {
                    "C_enum": "TES_Color",
                    "enum_lower": "color",
                    "enum_name": "Color",
                    "enum_upper": "COLOR"
                },
                "name": "Color",
                "options": {
                    "bar": 4
                },
                "typemap_name": "Color"
            }
        ],
        "functions": [
            {
                "ast": {
                    "declarator": {
                        "name": "function1",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void function1()",
                "declgen": "void function1()",
                "fmtdict": {
                    "C_name": "YYY_TES_function1",
                    "C_prototype": "",
                    "C_return_type": "void",
                    "F_C_call": "yyy_tes_function1",
                    "F_C_name": "yyy_tes_function1",
                    "F_arguments": "",
                    "F_name_function": "function1",
                    "F_name_generic": "function1",
                    "F_name_impl": "testnames_function1",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_function1",
                    "function_name": "function1",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "function1"
                },
                "options": {}
            },
            {
                "ast": {
                    "declarator": {
                        "name": "function2",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void function2()",
                "declgen": "void function2()",
                "fmtdict": {
                    "C_name": "c_name_special",
                    "C_prototype": "",
                    "C_return_type": "void",
                    "F_C_call": "f_c_name_special",
                    "F_C_name": "f_c_name_special",
                    "F_arguments": "",
                    "F_name_function": "function2",
                    "F_name_generic": "function2",
                    "F_name_impl": "f_name_special",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_function2",
                    "function_name": "function2",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "function2"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "i": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "i",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_i",
                            "c_var": "i",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "i",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int i",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "i",
                            "cxx_addr": "&",
                            "cxx_decl": "int i",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "data_var": "SHData_i",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_i",
                            "size_var": "SHSize_i",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "function3a",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "i",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void function3a(int i)",
                "declgen": "void function3a(int i +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "i",
                    "C_name": "YYY_TES_function3a_0",
                    "C_prototype": "int i",
                    "C_return_type": "void",
                    "F_C_call": "yyy_tes_function3a_0",
                    "F_C_name": "yyy_tes_function3a_0",
                    "F_arg_c_call": "i",
                    "F_arguments": "i",
                    "F_name_function": "function3a_0",
                    "F_name_generic": "generic3",
                    "F_name_impl": "F_name_function3a_int",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_function3a_0",
                    "function_name": "function3a",
                    "function_suffix": "_0",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "function3a"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "i": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "i",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "long",
                            "cxx_var": "i",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_i",
                            "c_var": "i",
                            "f_intent": "IN",
                            "f_type": "integer(C_LONG)",
                            "f_var": "i",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "long i",
                            "c_deref": "",
                            "c_type": "long",
                            "c_var": "i",
                            "cxx_addr": "&",
                            "cxx_decl": "long i",
                            "cxx_member": ".",
                            "cxx_type": "long",
                            "cxx_var": "i",
                            "data_var": "SHData_i",
                            "numpy_type": "NPY_LONG",
                            "py_var": "SHPy_i",
                            "size_var": "SHSize_i",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "function3a",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "i",
                                "pointer": []
                            },
                            "specifier": [
                                "long"
                            ],
                            "typemap_name": "long"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void function3a(long i)",
                "declgen": "void function3a(long i +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "i",
                    "C_name": "YYY_TES_function3a_1",
                    "C_prototype": "long i",
                    "C_return_type": "void",
                    "F_C_call": "yyy_tes_function3a_1",
                    "F_C_name": "yyy_tes_function3a_1",
                    "F_arg_c_call": "i",
                    "F_arguments": "i",
                    "F_name_function": "function3a_1",
                    "F_name_generic": "generic3",
                    "F_name_impl": "F_name_function3a_long",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_function3a_1",
                    "function_name": "function3a",
                    "function_suffix": "_1",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "function3a"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "rv",
                            "capsule_addr": "cbase",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "ARG_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_in",
                            "stmt1": "c_string_in"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt0": "py_string_&_in",
                            "stmt1": "py_string_in"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result_buf",
                        "stmtc1": "c_default"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "ARG_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "ARG_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "function4",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "const": true,
                            "declarator": {
                                "name": "rv",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int function4(const std::string &rv)",
                "declgen": "int function4(const std::string & rv +intent(in))",
                "fmtdict": {
                    "C_call_list": "ARG_rv",
                    "C_name": "YYY_TES_function4",
                    "C_prototype": "const char * rv",
                    "C_return_type": "int",
                    "F_C_call": "yyy_tes_function4_bufferify",
                    "F_C_name": "yyy_tes_function4",
                    "F_arg_c_call": "rv,\t len_trim(rv, kind=C_INT)",
                    "F_arguments": "rv",
                    "F_name_function": "function4",
                    "F_name_generic": "function4",
                    "F_name_impl": "testnames_function4",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_function4",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "function4",
                    "underscore_name": "function4"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "rv",
                            "c_var_trim": "Lrv",
                            "capsule_addr": "cbase",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "ARG_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_in_buf",
                            "stmt1": "c_string_in_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_rv",
                            "c_var": "rv",
                            "c_var_trim": "Lrv",
                            "f_intent": "IN",
                            "f_type": "character(*)",
                            "f_var": "rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_in_buf",
                            "stmtc1": "c_string_in_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "function4",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "len_trim": "Lrv"
                            },
                            "const": true,
                            "declarator": {
                                "name": "rv",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int function4(const std::string &rv)",
                "declgen": "int function4(const std::string & rv +intent(in)+len_trim(Lrv))",
                "fmtdict": {
                    "C_call_list": "ARG_rv",
                    "C_name": "YYY_TES_function4_bufferify",
                    "C_prototype": "const char * rv,\t int Lrv",
                    "C_return_type": "int",
                    "F_C_name": "yyy_tes_function4_bufferify",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "function4",
                    "function_suffix": "_bufferify",
                    "underscore_name": "function4"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "attrs": {
                        "name": "fiveplus"
                    },
                    "declarator": {
                        "name": "function5",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void function5() +name(fiveplus)",
                "declgen": "void function5() +name(fiveplus)",
                "fmtdict": {
                    "C_name": "YYY_TES_fiveplus",
                    "C_prototype": "",
                    "C_return_type": "void",
                    "F_C_call": "yyy_tes_fiveplus",
                    "F_C_name": "yyy_tes_fiveplus",
                    "F_arguments": "",
                    "F_name_function": "fiveplus",
                    "F_name_generic": "fiveplus",
                    "F_name_impl": "testnames_fiveplus",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_fiveplus",
                    "function_name": "fiveplus",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "fiveplus"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "ARG_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_inout",
                            "stmt1": "c_string_inout"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "name",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_name",
                            "data_var": "SHData_name",
                            "numpy_type": null,
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt0": "py_string_&_inout",
                            "stmt1": "py_string_inout"
                        }
                    },
                    "value": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "value",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "value",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int value",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "value",
                            "cxx_addr": "",
                            "cxx_decl": "int value",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "value",
                            "data_var": "SHData_value",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_value",
                            "size_var": "SHSize_value",
                            "stmt0": "py_native_*_out",
                            "stmt1": "py_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "TestMultilineSplicer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "value",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void TestMultilineSplicer(std::string & name, int *value+intent(out))",
                "declgen": "void TestMultilineSplicer(std::string & name +intent(inout), int * value +intent(out))",
                "doxygen": {
                    "description": "Use std::string argument to get bufferified function.\n"
                },
                "fmtdict": {
                    "C_call_list": "ARG_name,\t value",
                    "C_name": "TES_test_multiline_splicer",
                    "C_prototype": "char * name,\t int * value",
                    "C_return_type": "void",
                    "F_C_call": "c_test_multiline_splicer_bufferify",
                    "F_C_name": "c_test_multiline_splicer",
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT),\t len(name, kind=C_INT),\t value",
                    "F_arguments": "name,\t value",
                    "F_name_function": "test_multiline_splicer",
                    "F_name_generic": "test_multiline_splicer",
                    "F_name_impl": "test_multiline_splicer",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_TestMultilineSplicer",
                    "function_name": "TestMultilineSplicer",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "test_multiline_splicer"
                },
                "options": {},
                "splicer": {
                    "c": [
                        "// line 1",
                        "// line 2"
                    ],
                    "c_buf": [
                        "// buf line 1",
                        "// buf line 2"
                    ],
                    "f": [
                        "! line 1",
                        "! line 2"
                    ],
                    "py": [
                        "// py line 1",
                        "// py line 2"
                    ]
                }
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "c_var_len": "Nname",
                            "c_var_trim": "Lname",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "ARG_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_inout_buf",
                            "stmt1": "c_string_inout_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_name",
                            "c_var": "name",
                            "c_var_len": "Nname",
                            "c_var_trim": "Lname",
                            "f_intent": "INOUT",
                            "f_type": "character(*)",
                            "f_var": "name",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_inout",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_inout_buf",
                            "stmtc1": "c_string_inout_buf"
                        }
                    },
                    "value": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "value",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "value",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_out_buf",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_value",
                            "c_var": "value",
                            "f_intent": "OUT",
                            "f_type": "integer(C_INT)",
                            "f_var": "value",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out_buf",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "TestMultilineSplicer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout",
                                "len": "Nname",
                                "len_trim": "Lname"
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "value",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void TestMultilineSplicer(std::string & name, int *value+intent(out))",
                "declgen": "void TestMultilineSplicer(std::string & name +intent(inout)+len(Nname)+len_trim(Lname), int * value +intent(out))",
                "doxygen": {
                    "description": "Use std::string argument to get bufferified function.\n"
                },
                "fmtdict": {
                    "C_call_list": "ARG_name,\t value",
                    "C_name": "TES_test_multiline_splicer_bufferify",
                    "C_prototype": "char * name,\t int Lname,\t int Nname,\t int * value",
                    "C_return_type": "void",
                    "F_C_name": "c_test_multiline_splicer_bufferify",
                    "function_name": "TestMultilineSplicer",
                    "function_suffix": "_bufferify",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "test_multiline_splicer"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "splicer": {
                    "c": [
                        "// line 1",
                        "// line 2"
                    ],
                    "c_buf": [
                        "// buf line 1",
                        "// buf line 2"
                    ],
                    "f": [
                        "! line 1",
                        "! line 2"
                    ],
                    "py": [
                        "// py line 1",
                        "// py line 2"
                    ]
                }
            },
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FunctionTU",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "T"
                            ],
                            "typemap_name": "T"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "U"
                            ],
                            "typemap_name": "U"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "cxx_template": {
                    "T": [
                        "int",
                        "float"
                    ]
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(T arg1 +intent(in)+value, U arg2 +intent(in)+value)",
                "doxygen": {
                    "brief": "Function template with two template parameters."
                },
                "fmtdict": {
                    "function_name": "FunctionTU",
                    "underscore_name": "function_tu"
                },
                "have_template_args": true,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "fmtdict": {
                            "C_name": "c_name_instantiation1",
                            "F_C_name": "f_c_name_instantiation1",
                            "F_name_impl": "f_name_instantiation1",
                            "PY_name_impl": "PY_name_instantiation1"
                        },
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "template_suffix": "_instantiation2"
                        },
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ]
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg1",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "int arg1",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arg2",
                            "c_var": "arg2",
                            "f_intent": "IN",
                            "f_type": "integer(C_LONG)",
                            "f_var": "arg2",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "long arg2",
                            "c_deref": "",
                            "c_type": "long",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "long arg2",
                            "cxx_member": ".",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_LONG",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FunctionTU",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "long"
                            ],
                            "typemap_name": "long"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(int arg1 +intent(in)+value, long arg2 +intent(in)+value)",
                "doxygen": {
                    "brief": "Function template with two template parameters."
                },
                "fmtdict": {
                    "CXX_template": "<int, long>",
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "c_name_instantiation1",
                    "C_prototype": "int arg1,\t long arg2",
                    "C_return_type": "void",
                    "F_C_call": "f_c_name_instantiation1",
                    "F_C_name": "f_c_name_instantiation1",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "function_tu_0",
                    "F_name_generic": "function_tu",
                    "F_name_impl": "f_name_instantiation1",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_name_instantiation1",
                    "function_name": "FunctionTU",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "template_suffix": "_0",
                    "underscore_name": "function_tu"
                },
                "have_template_args": true,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "fmtdict": {
                            "C_name": "c_name_instantiation1",
                            "F_C_name": "f_c_name_instantiation1",
                            "F_name_impl": "f_name_instantiation1",
                            "PY_name_impl": "PY_name_instantiation1"
                        },
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "template_suffix": "_instantiation2"
                        },
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ]
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "float",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "IN",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "float arg1",
                            "c_deref": "",
                            "c_type": "float",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "float arg1",
                            "cxx_member": ".",
                            "cxx_type": "float",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_FLOAT",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arg2",
                            "c_var": "arg2",
                            "f_intent": "IN",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg2",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double arg2",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "double arg2",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FunctionTU",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(float arg1 +intent(in)+value, double arg2 +intent(in)+value)",
                "doxygen": {
                    "brief": "Function template with two template parameters."
                },
                "fmtdict": {
                    "CXX_template": "<float, double>",
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "TES_function_tu_instantiation2",
                    "C_prototype": "float arg1,\t double arg2",
                    "C_return_type": "void",
                    "F_C_call": "c_function_tu_instantiation2",
                    "F_C_name": "c_function_tu_instantiation2",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "function_tu_instantiation2",
                    "F_name_generic": "function_tu",
                    "F_name_impl": "function_tu_instantiation2",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_FunctionTU_instantiation2",
                    "function_name": "FunctionTU",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "template_suffix": "_instantiation2",
                    "underscore_name": "function_tu"
                },
                "gen_headers_typedef": [
                    "double",
                    "float",
                    "int",
                    "long"
                ],
                "have_template_args": true,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "fmtdict": {
                            "C_name": "c_name_instantiation1",
                            "F_C_name": "f_c_name_instantiation1",
                            "F_name_impl": "f_name_instantiation1",
                            "PY_name_impl": "PY_name_instantiation1"
                        },
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "template_suffix": "_instantiation2"
                        },
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ]
            },
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseImplWorker",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "cxx_template": {
                    "T": [
                        "internal::ImplWorker1"
                    ]
                },
                "decl": "template<typename T> int UseImplWorker()",
                "declgen": "int UseImplWorker()",
                "doxygen": {
                    "brief": "Function which uses a templated T in the implemetation."
                },
                "fmtdict": {
                    "function_name": "UseImplWorker",
                    "underscore_name": "use_impl_worker"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    }
                ],
                "template_parameters": [
                    "T"
                ]
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "ARG_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "ARG_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseImplWorker",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "template<typename T> int UseImplWorker()",
                "declgen": "int UseImplWorker()",
                "doxygen": {
                    "brief": "Function which uses a templated T in the implemetation."
                },
                "fmtdict": {
                    "CXX_template": "<internal::ImplWorker1>",
                    "C_name": "TES_use_impl_worker_instantiation3",
                    "C_prototype": "",
                    "C_return_type": "int",
                    "F_C_call": "c_use_impl_worker_instantiation3",
                    "F_C_name": "c_use_impl_worker_instantiation3",
                    "F_arguments": "",
                    "F_name_function": "use_impl_worker_instantiation3",
                    "F_name_generic": "use_impl_worker",
                    "F_name_impl": "use_impl_worker_instantiation3",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_UseImplWorker_instantiation3",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseImplWorker",
                    "template_suffix": "_instantiation3",
                    "underscore_name": "use_impl_worker"
                },
                "gen_headers_typedef": [
                    "internal::ImplWorker1"
                ],
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    }
                ],
                "template_parameters": [
                    "T"
                ]
            }
        ],
        "language": "cxx",
        "namespaces": [
            {
                "classes": [
                    {
                        "cxx_header": [],
                        "fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "foo.h",
                            "C_impl_filename": "foo.cpp",
                            "C_name_scope": "ns0_Names_",
                            "C_type_name": "TES_ns0_Names",
                            "F_capsule_data_type": "SHROUD_names_capsule",
                            "F_derived_name": "FNames",
                            "F_name_scope": "names_",
                            "PY_PyObject": "PY_Names",
                            "PY_PyTypeObject": "PY_Names_Type",
                            "PY_capsule_name": "PY_Names_capsule_name",
                            "PY_from_object_func": "PP_Names_from_Object",
                            "PY_this_call": "self->myobj->",
                            "PY_to_object_func": "PP_Names_to_Object",
                            "PY_to_object_idtor_func": "PP_Names_to_Object_idtor",
                            "PY_type_filename": "pyns0_Namestype.cpp",
                            "class_scope": "Names::",
                            "cxx_class": "Names",
                            "cxx_type": "Names",
                            "file_scope": "ns0_Names"
                        },
                        "functions": [
                            {
                                "ast": {
                                    "declarator": {
                                        "name": "method1",
                                        "pointer": []
                                    },
                                    "params": [],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void method1()",
                                "declgen": "void method1()",
                                "fmtdict": {
                                    "C_name": "XXX_TES_ns0_Names_method1",
                                    "C_prototype": "TES_ns0_Names * self",
                                    "C_return_type": "void",
                                    "F_C_call": "xxx_tes_names_method1",
                                    "F_C_name": "xxx_tes_names_method1",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_name_function": "type_method1",
                                    "F_name_generic": "method1",
                                    "F_name_impl": "names_method1",
                                    "F_subprogram": "subroutine",
                                    "PY_name_impl": "PY_method1",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "capsule_addr": "base",
                                    "function_name": "method1",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "method1"
                                },
                                "options": {}
                            },
                            {
                                "ast": {
                                    "declarator": {
                                        "name": "method2",
                                        "pointer": []
                                    },
                                    "params": [],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void method2()",
                                "declgen": "void method2()",
                                "fmtdict": {
                                    "CXX_this": "SH_this2",
                                    "C_name": "XXX_TES_ns0_Names_method2",
                                    "C_prototype": "TES_ns0_Names * self2",
                                    "C_return_type": "void",
                                    "C_this": "self2",
                                    "F_C_call": "xxx_tes_names_method2",
                                    "F_C_name": "xxx_tes_names_method2",
                                    "F_arg_c_call": "obj2%cxxmem",
                                    "F_arguments": "obj2",
                                    "F_name_function": "method2",
                                    "F_name_generic": "method2",
                                    "F_name_impl": "names_method2",
                                    "F_subprogram": "subroutine",
                                    "F_this": "obj2",
                                    "PY_name_impl": "PY_method2",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self2",
                                    "capsule_addr": "base",
                                    "function_name": "method2",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "method2"
                                },
                                "options": {}
                            }
                        ],
                        "name": "Names",
                        "options": {
                            "C_name_template": "XXX_{C_prefix}{C_name_scope}{underscore_name}{function_suffix}",
                            "F_C_name_template": "XXX_{C_prefix}{F_name_scope}{underscore_name}{function_suffix}",
                            "none": "foo"
                        },
                        "scope": "ns0::Names::",
                        "typemap_name": "ns0::Names"
                    }
                ],
                "fmtdict": {
                    "CXX_this_call": "ns0::",
                    "C_header_filename": "foons0.h",
                    "C_impl_filename": "foons0.cpp",
                    "C_name_scope": "ns0_",
                    "F_impl_filename": "foo.f",
                    "F_module_name": "name_module",
                    "LUA_this_call": "ns0::",
                    "PY_library_doc": "library documentation",
                    "PY_module_filename": "pytestnames_ns0module.cpp",
                    "PY_module_init": "testnames_ns0",
                    "PY_module_name": "ns0",
                    "PY_module_scope": "testnames.ns0",
                    "PY_this_call": "ns0::",
                    "file_scope": "testnames_ns0",
                    "namespace_scope": "ns0::"
                },
                "name": "ns0",
                "namespaces": [
                    {
                        "fmtdict": {
                            "CXX_this_call": "ns0::inner::",
                            "C_header_filename": "wraptestnames_ns0_inner.hh",
                            "C_impl_filename": "wraptestnames_ns0_inner.cc",
                            "C_name_scope": "ns0_inner_",
                            "F_impl_filename": "wrapftestnames_ns0_inner.F",
                            "F_module_name": "testnames_ns0_inner_mod",
                            "LUA_this_call": "ns0::inner::",
                            "PY_library_doc": "library documentation",
                            "PY_module_filename": "pytestnames_ns0_innermodule.cpp",
                            "PY_module_init": "testnames_ns0_inner",
                            "PY_module_name": "inner",
                            "PY_module_scope": "testnames.ns0.inner",
                            "PY_this_call": "ns0::inner::",
                            "file_scope": "testnames_ns0_inner",
                            "namespace_scope": "ns0::inner::"
                        },
                        "name": "inner",
                        "options": {},
                        "scope": "ns0::inner::",
                        "scope_file": [
                            "testnames",
                            "ns0",
                            "inner"
                        ]
                    }
                ],
                "options": {},
                "scope": "ns0::",
                "scope_file": [
                    "testnames",
                    "ns0"
                ]
            },
            {
                "fmtdict": {
                    "CXX_this_call": "ns1::",
                    "C_header_filename": "wraptestnames_ns1.hh",
                    "C_impl_filename": "wraptestnames_ns1.cc",
                    "C_name_scope": "ns1_",
                    "F_impl_filename": "wrapftestnames_ns1.F",
                    "F_module_name": "testnames_ns1_mod",
                    "LUA_this_call": "ns1::",
                    "PY_library_doc": "library documentation",
                    "PY_module_filename": "pytestnames_ns1module.cpp",
                    "PY_module_init": "testnames_ns1",
                    "PY_module_name": "ns1",
                    "PY_module_scope": "testnames.ns1",
                    "PY_this_call": "ns1::",
                    "file_scope": "testnames_ns1",
                    "namespace_scope": "ns1::"
                },
                "functions": [
                    {
                        "ast": {
                            "declarator": {
                                "name": "init_ns1",
                                "pointer": []
                            },
                            "params": [],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void init_ns1()",
                        "declgen": "void init_ns1()",
                        "fmtdict": {
                            "C_name": "TES_ns1_init_ns1",
                            "C_prototype": "",
                            "C_return_type": "void",
                            "F_C_call": "c_init_ns1",
                            "F_C_name": "c_init_ns1",
                            "F_arguments": "",
                            "F_name_function": "init_ns1",
                            "F_name_generic": "init_ns1",
                            "F_name_impl": "testnames_init_ns1",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_init_ns1",
                            "function_name": "init_ns1",
                            "stmt0": "f_subroutine",
                            "stmt1": "f_default",
                            "stmtc0": "c",
                            "stmtc1": "c_default",
                            "underscore_name": "init_ns1"
                        },
                        "options": {}
                    }
                ],
                "name": "ns1",
                "options": {
                    "F_name_impl_template": "{library_lower}_{F_name_scope}{underscore_name}{function_suffix}"
                },
                "scope": "ns1::",
                "scope_file": [
                    "testnames",
                    "ns1"
                ]
            },
            {
                "classes": [
                    {
                        "cxx_header": [],
                        "fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapinternal_ImplWorker1.hh",
                            "C_impl_filename": "wrapinternal_ImplWorker1.cc",
                            "C_name_scope": "internal_ImplWorker1_",
                            "C_type_name": "TES_internal_ImplWorker1",
                            "F_capsule_data_type": "SHROUD_implworker1_capsule",
                            "F_derived_name": "implworker1",
                            "F_name_scope": "implworker1_",
                            "class_scope": "ImplWorker1::",
                            "cxx_class": "ImplWorker1",
                            "cxx_type": "ImplWorker1",
                            "file_scope": "internal_ImplWorker1",
                            "template_suffix": "_instantiation3"
                        },
                        "name": "ImplWorker1",
                        "options": {
                            "wrap_fortran": false,
                            "wrap_python": false
                        },
                        "scope": "internal::ImplWorker1::",
                        "typemap_name": "internal::ImplWorker1"
                    }
                ],
                "fmtdict": {
                    "CXX_this_call": "internal::",
                    "C_header_filename": "wraptestnames_internal.hh",
                    "C_impl_filename": "wraptestnames_internal.cc",
                    "C_name_scope": "internal_",
                    "F_impl_filename": "wrapftestnames_internal.F",
                    "F_module_name": "testnames_internal_mod",
                    "LUA_this_call": "internal::",
                    "PY_library_doc": "library documentation",
                    "PY_module_filename": "pytestnames_internalmodule.cpp",
                    "PY_module_init": "testnames_internal",
                    "PY_module_name": "internal",
                    "PY_module_scope": "testnames.internal",
                    "PY_this_call": "internal::",
                    "file_scope": "testnames_internal",
                    "namespace_scope": "internal::"
                },
                "name": "internal",
                "options": {},
                "scope": "internal::",
                "scope_file": [
                    "testnames",
                    "internal"
                ]
            },
            {
                "classes": [
                    {
                        "cxx_header": [
                            "<vector>"
                        ],
                        "fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapstd_vector_int.hh",
                            "C_impl_filename": "wrapstd_vector_int.cc",
                            "C_name_scope": "std_Vvv1_",
                            "C_type_name": "TES_std_Vvv1",
                            "F_capsule_data_type": "SHROUD_vvv1_capsule",
                            "F_derived_name": "FFvvv1",
                            "F_name_scope": "vvv1_",
                            "PY_PyObject": "PY_Vvv1",
                            "PY_PyTypeObject": "PY_Vvv1_Type",
                            "PY_capsule_name": "PY_Vvv1_capsule_name",
                            "PY_from_object_func": "PP_Vvv1_from_Object",
                            "PY_this_call": "self->myobj->",
                            "PY_to_object_func": "PP_Vvv1_to_Object",
                            "PY_to_object_idtor_func": "PP_Vvv1_to_Object_idtor",
                            "PY_type_filename": "pystd_vector_inttype.cpp",
                            "class_scope": "Vvv1::",
                            "cxx_class": "Vvv1",
                            "cxx_type": "vector<int>",
                            "file_scope": "std_vector_int"
                        },
                        "name": "vector",
                        "options": {},
                        "scope": "std::vector::",
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "fmtdict": {
                                    "F_derived_name": "FFvvv1",
                                    "cxx_class": "Vvv1"
                                },
                                "instantiation": "<int>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "long"
                                        ],
                                        "typemap_name": "long"
                                    }
                                ],
                                "fmtdict": {
                                    "template_suffix": "_instantiation5"
                                },
                                "instantiation": "<long>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "internal::ImplWorker1"
                                        ],
                                        "typemap_name": "internal::ImplWorker1"
                                    }
                                ],
                                "instantiation": "<internal::ImplWorker1>"
                            }
                        ],
                        "template_parameters": [
                            "T"
                        ],
                        "typemap_name": "std::Vvv1"
                    },
                    {
                        "cxx_header": [
                            "<vector>"
                        ],
                        "fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapstd_vector_double.hh",
                            "C_impl_filename": "wrapstd_vector_double.cc",
                            "C_name_scope": "std_vector_double_",
                            "C_type_name": "TES_std_vector_double",
                            "F_capsule_data_type": "SHROUD_vector_double_capsule",
                            "F_derived_name": "vector_double",
                            "F_name_scope": "vector_double_",
                            "PY_PyObject": "PY_vector_double",
                            "PY_PyTypeObject": "PY_vector_double_Type",
                            "PY_capsule_name": "PY_vector_double_capsule_name",
                            "PY_from_object_func": "PP_vector_double_from_Object",
                            "PY_this_call": "self->myobj->",
                            "PY_to_object_func": "PP_vector_double_to_Object",
                            "PY_to_object_idtor_func": "PP_vector_double_to_Object_idtor",
                            "PY_type_filename": "pystd_vector_doubletype.cpp",
                            "class_scope": "vector_double::",
                            "cxx_class": "vector_double",
                            "cxx_type": "vector<double>",
                            "file_scope": "std_vector_double"
                        },
                        "name": "vector",
                        "options": {},
                        "scope": "std::vector::",
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "fmtdict": {
                                    "F_derived_name": "FFvvv1",
                                    "cxx_class": "Vvv1"
                                },
                                "instantiation": "<int>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "long"
                                        ],
                                        "typemap_name": "long"
                                    }
                                ],
                                "fmtdict": {
                                    "template_suffix": "_instantiation5"
                                },
                                "instantiation": "<long>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "internal::ImplWorker1"
                                        ],
                                        "typemap_name": "internal::ImplWorker1"
                                    }
                                ],
                                "instantiation": "<internal::ImplWorker1>"
                            }
                        ],
                        "template_parameters": [
                            "T"
                        ],
                        "typemap_name": "std::vector_double"
                    },
                    {
                        "cxx_header": [
                            "<vector>"
                        ],
                        "fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapstd_vector_instantiation5.hh",
                            "C_impl_filename": "wrapstd_vector_instantiation5.cc",
                            "C_name_scope": "std_vector_instantiation5_",
                            "C_type_name": "TES_std_vector_instantiation5",
                            "F_capsule_data_type": "SHROUD_vector_instantiation5_capsule",
                            "F_derived_name": "vector_instantiation5",
                            "F_name_scope": "vector_instantiation5_",
                            "PY_PyObject": "PY_vector_instantiation5",
                            "PY_PyTypeObject": "PY_vector_instantiation5_Type",
                            "PY_capsule_name": "PY_vector_instantiation5_capsule_name",
                            "PY_from_object_func": "PP_vector_instantiation5_from_Object",
                            "PY_this_call": "self->myobj->",
                            "PY_to_object_func": "PP_vector_instantiation5_to_Object",
                            "PY_to_object_idtor_func": "PP_vector_instantiation5_to_Object_idtor",
                            "PY_type_filename": "pystd_vector_instantiation5type.cpp",
                            "class_scope": "vector_instantiation5::",
                            "cxx_class": "vector_instantiation5",
                            "cxx_type": "vector<long>",
                            "file_scope": "std_vector_instantiation5",
                            "template_suffix": "_instantiation5"
                        },
                        "name": "vector",
                        "options": {},
                        "scope": "std::vector::",
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "fmtdict": {
                                    "F_derived_name": "FFvvv1",
                                    "cxx_class": "Vvv1"
                                },
                                "instantiation": "<int>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "long"
                                        ],
                                        "typemap_name": "long"
                                    }
                                ],
                                "fmtdict": {
                                    "template_suffix": "_instantiation5"
                                },
                                "instantiation": "<long>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "internal::ImplWorker1"
                                        ],
                                        "typemap_name": "internal::ImplWorker1"
                                    }
                                ],
                                "instantiation": "<internal::ImplWorker1>"
                            }
                        ],
                        "template_parameters": [
                            "T"
                        ],
                        "typemap_name": "std::vector_instantiation5"
                    },
                    {
                        "cxx_header": [
                            "<vector>"
                        ],
                        "fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapstd_vector_instantiation3.hh",
                            "C_impl_filename": "wrapstd_vector_instantiation3.cc",
                            "C_name_scope": "std_vector_instantiation3_",
                            "C_type_name": "TES_std_vector_instantiation3",
                            "F_capsule_data_type": "SHROUD_vector_instantiation3_capsule",
                            "F_derived_name": "vector_instantiation3",
                            "F_name_scope": "vector_instantiation3_",
                            "PY_PyObject": "PY_vector_instantiation3",
                            "PY_PyTypeObject": "PY_vector_instantiation3_Type",
                            "PY_capsule_name": "PY_vector_instantiation3_capsule_name",
                            "PY_from_object_func": "PP_vector_instantiation3_from_Object",
                            "PY_this_call": "self->myobj->",
                            "PY_to_object_func": "PP_vector_instantiation3_to_Object",
                            "PY_to_object_idtor_func": "PP_vector_instantiation3_to_Object_idtor",
                            "PY_type_filename": "pystd_vector_instantiation3type.cpp",
                            "class_scope": "vector_instantiation3::",
                            "cxx_class": "vector_instantiation3",
                            "cxx_type": "vector<internal::ImplWorker1>",
                            "file_scope": "std_vector_instantiation3"
                        },
                        "name": "vector",
                        "options": {},
                        "scope": "std::vector::",
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "fmtdict": {
                                    "F_derived_name": "FFvvv1",
                                    "cxx_class": "Vvv1"
                                },
                                "instantiation": "<int>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "long"
                                        ],
                                        "typemap_name": "long"
                                    }
                                ],
                                "fmtdict": {
                                    "template_suffix": "_instantiation5"
                                },
                                "instantiation": "<long>"
                            },
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "internal::ImplWorker1"
                                        ],
                                        "typemap_name": "internal::ImplWorker1"
                                    }
                                ],
                                "instantiation": "<internal::ImplWorker1>"
                            }
                        ],
                        "template_parameters": [
                            "T"
                        ],
                        "typemap_name": "std::vector_instantiation3"
                    }
                ],
                "fmtdict": {
                    "CXX_this_call": "std::",
                    "C_header_filename": "wraptestnames_std.hh",
                    "C_impl_filename": "wraptestnames_std.cc",
                    "C_name_scope": "std_",
                    "F_impl_filename": "wrapftestnames_std.F",
                    "F_module_name": "testnames_std_mod",
                    "LUA_this_call": "std::",
                    "PY_library_doc": "library documentation",
                    "PY_module_filename": "pytestnames_stdmodule.cpp",
                    "PY_module_init": "testnames_std",
                    "PY_module_name": "std",
                    "PY_module_scope": "testnames.std",
                    "PY_this_call": "std::",
                    "file_scope": "testnames_std",
                    "namespace_scope": "std::"
                },
                "name": "std",
                "options": {},
                "scope": "std::",
                "scope_file": [
                    "testnames",
                    "std"
                ]
            },
            {
                "classes": [
                    {
                        "cxx_header": [],
                        "fmtdict": {
                            "CXX_this_call": "SH_this->",
                            "C_header_filename": "wrapCAPI_Class1.hh",
                            "C_impl_filename": "wrapCAPI_Class1.cc",
                            "C_name_scope": "capi_class1_",
                            "C_type_name": "TES_capi_class1",
                            "F_capsule_data_type": "SHROUD_class1_capsule",
                            "F_derived_name": "class1",
                            "F_name_scope": "class1_",
                            "class_scope": "Class1::",
                            "cxx_class": "Class1",
                            "cxx_type": "Class1",
                            "file_scope": "CAPI_Class1"
                        },
                        "functions": [
                            {
                                "ast": {
                                    "declarator": {
                                        "name": "Member1",
                                        "pointer": []
                                    },
                                    "params": [],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void Member1()",
                                "declgen": "void Member1()",
                                "fmtdict": {
                                    "C_name": "TES_capi_class1_member1",
                                    "C_prototype": "TES_capi_class1 * self",
                                    "C_return_type": "void",
                                    "F_C_call": "c_class1_member1",
                                    "F_C_name": "c_class1_member1",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_name_function": "member1",
                                    "F_name_generic": "member1",
                                    "F_name_impl": "class1_member1",
                                    "F_subprogram": "subroutine",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "self",
                                    "capsule_addr": "base",
                                    "function_name": "Member1",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "member1"
                                },
                                "options": {}
                            }
                        ],
                        "name": "Class1",
                        "options": {},
                        "scope": "CAPI::Class1::",
                        "typemap_name": "CAPI::Class1"
                    }
                ],
                "fmtdict": {
                    "CXX_this_call": "CAPI::",
                    "C_header_filename": "wraptestnames_CAPI.hh",
                    "C_impl_filename": "wraptestnames_CAPI.cc",
                    "C_name_scope": "capi_",
                    "F_impl_filename": "wrapftestnames_CAPI.F",
                    "F_module_name": "testnames_capi_mod",
                    "LUA_this_call": "CAPI::",
                    "PY_module_init": "testnames_CAPI",
                    "PY_module_name": "CAPI",
                    "PY_module_scope": "testnames.CAPI",
                    "PY_this_call": "CAPI::",
                    "file_scope": "testnames_CAPI",
                    "namespace_scope": "CAPI::"
                },
                "functions": [
                    {
                        "ast": {
                            "declarator": {
                                "name": "Worker1",
                                "pointer": []
                            },
                            "params": [],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void Worker1()",
                        "declgen": "void Worker1()",
                        "fmtdict": {
                            "C_name": "TES_capi_worker1",
                            "C_prototype": "",
                            "C_return_type": "void",
                            "F_C_call": "c_worker1",
                            "F_C_name": "c_worker1",
                            "F_arguments": "",
                            "F_name_function": "worker1",
                            "F_name_generic": "worker1",
                            "F_name_impl": "worker1",
                            "F_subprogram": "subroutine",
                            "function_name": "Worker1",
                            "stmt0": "f_subroutine",
                            "stmt1": "f_default",
                            "stmtc0": "c",
                            "stmtc1": "c_default",
                            "underscore_name": "worker1"
                        },
                        "options": {}
                    }
                ],
                "name": "CAPI",
                "options": {
                    "C_API_case": "lower",
                    "wrap_python": false
                },
                "scope": "CAPI::",
                "scope_file": [
                    "testnames",
                    "CAPI"
                ]
            }
        ],
        "scope_file": [
            "testnames"
        ]
    }
}