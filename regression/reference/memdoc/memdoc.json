{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "functions": [
            {
                "<FUNCTION>": "getConstStringPtrAlloc  0 ****************************************",
                "_PTR_F_C_index": "1",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "owner": "library"
                        },
                        "metaattrs": {
                            "deref": "allocatable",
                            "intent": "function"
                        },
                        "name": "getConstStringPtrAlloc",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrAlloc() +owner(library)",
                "declgen": "const std::string * getConstStringPtrAlloc(void) +owner(library)",
                "helpers": {
                    "c": [
                        "array_context",
                        "string_to_cdesc",
                        "copy_string"
                    ],
                    "f": [
                        "array_context",
                        "copy_string",
                        "capsule_dtor"
                    ]
                },
                "name": "getConstStringPtrAlloc",
                "options": {},
                "wrap": {
                    "c": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "stmt": "c_function_string_*_library"
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "const ",
                            "c_rv_decl": "const char * SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv->c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const std::string * SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_*_library"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name": "STR_getConstStringPtrAlloc",
                    "C_name_api": "getConstStringPtrAlloc",
                    "F_C_name": "c_get_const_string_ptr_alloc",
                    "F_name_api": "get_const_string_ptr_alloc",
                    "function_name": "getConstStringPtrAlloc"
                }
            },
            {
                "<FUNCTION>": "getConstStringPtrAlloc  1 ****************************************",
                "_generated": "arg_to_buffer",
                "_generated_path": [
                    "arg_to_buffer"
                ],
                "_orig_node_index": 0,
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "owner": "library"
                        },
                        "metaattrs": {
                            "api": "cdesc",
                            "deref": "allocatable",
                            "intent": "function"
                        },
                        "name": "getConstStringPtrAlloc",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrAlloc() +owner(library)",
                "declgen": "const std::string * getConstStringPtrAlloc(void) +owner(library)",
                "helpers": {
                    "c": [
                        "array_context",
                        "string_to_cdesc",
                        "copy_string"
                    ],
                    "f": [
                        "array_context",
                        "copy_string",
                        "capsule_dtor"
                    ]
                },
                "name": "getConstStringPtrAlloc",
                "options": {},
                "splicer_group": "buf",
                "wrap": {
                    "fortran": true
                },
                "zz_bind": {
                    "f": {
                        "+result": {
                            "stmt": "f_function_string_*_cdesc_allocatable_library"
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtf": {
                            "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc,\t STR_SHROUD_capsule_data *SHT_rv_capsule",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_C_call": "c_get_const_string_ptr_alloc_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_helper_array_context": "STR_SHROUD_array",
                            "c_helper_copy_string": "STR_ShroudCopyString",
                            "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_capsule": "SHT_rv_capsule",
                            "c_var_cdesc": "SHT_rv_cdesc",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const std::string * SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_helper_array_context": "STR_SHROUD_array",
                            "f_helper_capsule_dtor": "STR_SHROUD_capsule_dtor",
                            "f_helper_copy_string": "STR_SHROUD_copy_string",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_capsule": "SHT_rv_capsule",
                            "f_var_cdesc": "SHT_rv_cdesc",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_capsule": "SHT_rv_capsule",
                            "i_var_cdesc": "SHT_rv_cdesc",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_*_cdesc_allocatable_library"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name": "STR_getConstStringPtrAlloc_bufferify",
                    "C_name_api": "getConstStringPtrAlloc",
                    "F_C_name": "c_get_const_string_ptr_alloc_bufferify",
                    "F_name_api": "get_const_string_ptr_alloc",
                    "F_name_function": "get_const_string_ptr_alloc",
                    "F_name_generic": "get_const_string_ptr_alloc",
                    "F_name_impl": "get_const_string_ptr_alloc",
                    "f_c_suffix": "_bufferify",
                    "function_name": "getConstStringPtrAlloc"
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "memdoc"
        ],
        "user_fmt": {
            "C_prefix": "STR_"
        },
        "wrap": {
            "c": true,
            "fortran": true
        }
    }
}