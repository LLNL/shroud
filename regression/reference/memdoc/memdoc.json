{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "functions": [
            {
                "<FUNCTION>": "0 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "1",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "owner": "library"
                        },
                        "metaattrs": {
                            "deref": "allocatable",
                            "intent": "function"
                        },
                        "name": "getConstStringPtrAlloc",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrAlloc() +owner(library)",
                "declgen": "const std::string * getConstStringPtrAlloc(void) +owner(library)",
                "name": "getConstStringPtrAlloc",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_getConstStringPtrAlloc",
                    "C_name_api": "getConstStringPtrAlloc",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_const_string_ptr_alloc_bufferify",
                    "F_C_name": "c_get_const_string_ptr_alloc",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "SHT_rv_cdesc",
                    "F_arguments": "",
                    "F_name_api": "get_const_string_ptr_alloc",
                    "F_name_function": "get_const_string_ptr_alloc",
                    "F_name_generic": "get_const_string_ptr_alloc",
                    "F_name_impl": "get_const_string_ptr_alloc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrAlloc"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv->c_str()",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_other",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_*_allocatable",
                        "stmt1": "c_function_string_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cxx_type": "std::string",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "hnamefunc0": "STR_SHROUD_copy_string_and_free",
                        "hnamefunc1": "array_context",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_string_*_cdesc_allocatable_library",
                        "stmt1": "f_function_string_*_cdesc_allocatable",
                        "stmtc0": "c_function_string_*_cdesc_allocatable",
                        "stmtc1": "c_function_string_*_cdesc_allocatable"
                    }
                }
            },
            {
                "<FUNCTION>": "1 ****************************************",
                "_generated": "arg_to_buffer",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "owner": "library"
                        },
                        "metaattrs": {
                            "api": "cdesc",
                            "deref": "allocatable",
                            "intent": "function"
                        },
                        "name": "getConstStringPtrAlloc",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrAlloc() +owner(library)",
                "declgen": "const std::string * getConstStringPtrAlloc(void) +owner(library)",
                "name": "getConstStringPtrAlloc",
                "options": {},
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_getConstStringPtrAlloc_bufferify",
                    "C_name_api": "getConstStringPtrAlloc",
                    "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv",
                    "F_C_name": "c_get_const_string_ptr_alloc_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_name_api": "get_const_string_ptr_alloc",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrAlloc",
                    "function_suffix": "_bufferify"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cfi_type": "CFI_type_other",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "hnamefunc0": "ShroudStrToArray",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_*_cdesc_allocatable",
                        "stmt1": "c_function_string_*_cdesc_allocatable"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER"
                    }
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "memdoc"
        ],
        "user_fmt": {
            "C_prefix": "STR_"
        },
        "wrap": {
            "c": true,
            "fortran": true
        }
    }
}