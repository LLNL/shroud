// wrapmemdoc.cpp
// This file is generated by Shroud nowrite-version. Do not edit.
// Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
// other Shroud Project Developers.
// See the top-level COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//

// typemap
#include <string>
// shroud
#include <cstddef>
#include <cstring>
#include "wrapmemdoc.h"

// splicer begin CXX_definitions
// splicer end CXX_definitions

extern "C" {


// start helper string_to_cdesc
// helper string_to_cdesc
// Save std::string metadata into array to allow Fortran to access values.
// CHARACTER(len=elem_size) src
static void ShroudStringToCdesc(STR_SHROUD_array *cdesc,
    const std::string * src, int idtor)
{
    cdesc->cxx.addr = const_cast<std::string *>(src);
    cdesc->cxx.idtor = idtor;
    if (src->empty()) {
        cdesc->addr.ccharp = NULL;
        cdesc->elem_len = 0;
    } else {
        cdesc->addr.ccharp = src->data();
        cdesc->elem_len = src->length();
    }
    cdesc->size = 1;
    cdesc->rank = 0;  // scalar
}
// end helper string_to_cdesc
// splicer begin C_definitions
// splicer end C_definitions

// ----------------------------------------
// Function:  const std::string * getConstStringPtrAlloc +owner(library)
// Attrs:     +deref(allocatable)+intent(function)
// Statement: f_function_string_*_allocatable
// start STR_getConstStringPtrAlloc
const char * STR_getConstStringPtrAlloc(void)
{
    // splicer begin function.getConstStringPtrAlloc
    const std::string * SHCXX_rv = getConstStringPtrAlloc();
    const char * SHC_rv = SHCXX_rv->c_str();
    return SHC_rv;
    // splicer end function.getConstStringPtrAlloc
}
// end STR_getConstStringPtrAlloc

// Generated by arg_to_buffer
// ----------------------------------------
// Function:  const std::string * getConstStringPtrAlloc +owner(library)
// Attrs:     +api(cdesc)+deref(allocatable)+intent(function)
// Statement: f_function_string_*_cdesc_allocatable
// start STR_getConstStringPtrAlloc_bufferify
void STR_getConstStringPtrAlloc_bufferify(
    STR_SHROUD_array *SHT_rv_cdesc)
{
    // splicer begin function.getConstStringPtrAlloc_bufferify
    const std::string * SHCXX_rv = getConstStringPtrAlloc();
    ShroudStringToCdesc(SHT_rv_cdesc, SHCXX_rv, 0);
    // splicer end function.getConstStringPtrAlloc_bufferify
}
// end STR_getConstStringPtrAlloc_bufferify

}  // extern "C"
