{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "class_map": [
            "Cstruct_as_subclass"
        ],
        "classes": [
            {
                "<CLASS>": "Cstruct_as_subclass ****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "get_x1  0 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "getter"
                                },
                                "name": "get_x1",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int get_x1()",
                        "declgen": "int get_x1(void)",
                        "name": "get_x1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "x1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "x1"
                        },
                        "wrap": {
                            "fortran": true
                        },
                        "zz_bind": {
                            "f": {
                                "+result": {
                                    "stmt": "f_getter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtf": {
                                    "C_prototype": "ERR_Cstruct_as_subclass * self",
                                    "C_return_type": "int",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_cstruct_as_subclass_get_x1",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_getter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name": "ERR_Cstruct_as_subclass_get_x1",
                            "C_name_api": "get_x1",
                            "F_C_name": "c_cstruct_as_subclass_get_x1",
                            "F_name_api": "get_x1",
                            "F_name_function": "get_x1",
                            "F_name_generic": "get_x1",
                            "F_name_impl": "cstruct_as_subclass_get_x1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "x1",
                            "function_name": "get_x1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "x1"
                        }
                    },
                    {
                        "<FUNCTION>": "set_x1  1 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "setter"
                                },
                                "name": "set_x1",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "in",
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "setter"
                                            },
                                            "name": "val",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_x1(int val)",
                        "declgen": "void set_x1(int val +intent(in)+value)",
                        "name": "set_x1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "x1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "x1"
                        },
                        "wrap": {
                            "fortran": true
                        },
                        "zz_bind": {
                            "f": {
                                "+result": {
                                    "stmt": "f_setter"
                                },
                                "val": {
                                    "stmt": "f_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtf": {
                                    "C_call_list": "val",
                                    "C_prototype": "ERR_Cstruct_as_subclass * self,\t int val",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t val",
                                    "F_C_call": "c_cstruct_as_subclass_set_x1",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t val",
                                    "F_arguments": "obj,\t val",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_setter"
                                }
                            },
                            "val": {
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "val",
                                    "fc_var": "val",
                                    "i_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name": "ERR_Cstruct_as_subclass_set_x1",
                            "C_name_api": "set_x1",
                            "F_C_name": "c_cstruct_as_subclass_set_x1",
                            "F_name_api": "set_x1",
                            "F_name_function": "set_x1",
                            "F_name_generic": "set_x1",
                            "F_name_impl": "cstruct_as_subclass_set_x1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "x1",
                            "function_name": "set_x1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "x1"
                        }
                    },
                    {
                        "<FUNCTION>": "get_y1  2 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "getter"
                                },
                                "name": "get_y1",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int get_y1()",
                        "declgen": "int get_y1(void)",
                        "name": "get_y1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "y1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "y1"
                        },
                        "wrap": {
                            "fortran": true
                        },
                        "zz_bind": {
                            "f": {
                                "+result": {
                                    "stmt": "f_getter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtf": {
                                    "C_prototype": "ERR_Cstruct_as_subclass * self",
                                    "C_return_type": "int",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_cstruct_as_subclass_get_y1",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_getter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name": "ERR_Cstruct_as_subclass_get_y1",
                            "C_name_api": "get_y1",
                            "F_C_name": "c_cstruct_as_subclass_get_y1",
                            "F_name_api": "get_y1",
                            "F_name_function": "get_y1",
                            "F_name_generic": "get_y1",
                            "F_name_impl": "cstruct_as_subclass_get_y1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "y1",
                            "function_name": "get_y1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "y1"
                        }
                    },
                    {
                        "<FUNCTION>": "set_y1  3 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "setter"
                                },
                                "name": "set_y1",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "in",
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "setter"
                                            },
                                            "name": "val",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_y1(int val)",
                        "declgen": "void set_y1(int val +intent(in)+value)",
                        "name": "set_y1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "y1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "y1"
                        },
                        "wrap": {
                            "fortran": true
                        },
                        "zz_bind": {
                            "f": {
                                "+result": {
                                    "stmt": "f_setter"
                                },
                                "val": {
                                    "stmt": "f_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtf": {
                                    "C_call_list": "val",
                                    "C_prototype": "ERR_Cstruct_as_subclass * self,\t int val",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t val",
                                    "F_C_call": "c_cstruct_as_subclass_set_y1",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t val",
                                    "F_arguments": "obj,\t val",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_setter"
                                }
                            },
                            "val": {
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "val",
                                    "fc_var": "val",
                                    "i_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name": "ERR_Cstruct_as_subclass_set_y1",
                            "C_name_api": "set_y1",
                            "F_C_name": "c_cstruct_as_subclass_set_y1",
                            "F_name_api": "set_y1",
                            "F_name_function": "set_y1",
                            "F_name_generic": "set_y1",
                            "F_name_impl": "cstruct_as_subclass_set_y1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "y1",
                            "function_name": "set_y1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "y1"
                        }
                    },
                    {
                        "<FUNCTION>": "get_z1  4 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "getter"
                                },
                                "name": "get_z1",
                                "params": [],
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int get_z1()",
                        "declgen": "int get_z1(void)",
                        "name": "get_z1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "z1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "z1"
                        },
                        "wrap": {
                            "fortran": true
                        },
                        "zz_bind": {
                            "f": {
                                "+result": {
                                    "stmt": "f_getter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtf": {
                                    "C_prototype": "ERR_Cstruct_as_subclass * self",
                                    "C_return_type": "int",
                                    "F_C_arguments": "self",
                                    "F_C_call": "c_cstruct_as_subclass_get_z1",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_arg_c_call": "obj%cxxmem",
                                    "F_arguments": "obj",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "c_const": "",
                                    "c_type": "int",
                                    "c_var": "SHC_rv",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "cxx_type": "int",
                                    "cxx_var": "SHC_rv",
                                    "f_intent": "OUT",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "SHT_rv",
                                    "fc_var": "SHT_rv",
                                    "i_var": "SHT_rv",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_getter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name": "ERR_Cstruct_as_subclass_get_z1",
                            "C_name_api": "get_z1",
                            "F_C_name": "c_cstruct_as_subclass_get_z1",
                            "F_name_api": "get_z1",
                            "F_name_function": "get_z1",
                            "F_name_generic": "get_z1",
                            "F_name_impl": "cstruct_as_subclass_get_z1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "z1",
                            "function_name": "get_z1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "z1"
                        }
                    },
                    {
                        "<FUNCTION>": "set_z1  5 ****************************************",
                        "_generated": "getter/setter",
                        "_generated_path": [
                            "getter/setter"
                        ],
                        "ast": {
                            "declarator": {
                                "metaattrs": {
                                    "intent": "setter"
                                },
                                "name": "set_z1",
                                "params": [
                                    {
                                        "declarator": {
                                            "attrs": {
                                                "intent": "in",
                                                "value": true
                                            },
                                            "metaattrs": {
                                                "intent": "setter"
                                            },
                                            "name": "val",
                                            "typemap_name": "int"
                                        },
                                        "specifier": [
                                            "int"
                                        ],
                                        "typemap_name": "int"
                                    }
                                ],
                                "typemap_name": "void"
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void set_z1(int val)",
                        "declgen": "void set_z1(int val +intent(in)+value)",
                        "name": "set_z1",
                        "options": {},
                        "user_fmt": {
                            "field_name": "z1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "z1"
                        },
                        "wrap": {
                            "fortran": true
                        },
                        "zz_bind": {
                            "f": {
                                "+result": {
                                    "stmt": "f_setter"
                                },
                                "val": {
                                    "stmt": "f_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtargs": {
                            "+result": {
                                "fmtf": {
                                    "C_call_list": "val",
                                    "C_prototype": "ERR_Cstruct_as_subclass * self,\t int val",
                                    "C_return_type": "void",
                                    "F_C_arguments": "self,\t val",
                                    "F_C_call": "c_cstruct_as_subclass_set_z1",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "obj%cxxmem,\t val",
                                    "F_arguments": "obj,\t val",
                                    "F_subprogram": "subroutine",
                                    "stmt_name": "f_setter"
                                }
                            },
                            "val": {
                                "fmtf": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_type_module": "iso_c_binding",
                                    "f_var": "val",
                                    "fc_var": "val",
                                    "i_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt_name": "f_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_name": "ERR_Cstruct_as_subclass_set_z1",
                            "C_name_api": "set_z1",
                            "F_C_name": "c_cstruct_as_subclass_set_z1",
                            "F_name_api": "set_z1",
                            "F_name_function": "set_z1",
                            "F_name_generic": "set_z1",
                            "F_name_impl": "cstruct_as_subclass_set_z1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "z1",
                            "function_name": "set_z1",
                            "struct_name": "Cstruct_as_subclass",
                            "wrapped_name": "z1"
                        }
                    }
                ],
                "name": "Cstruct_as_subclass",
                "options": {
                    "class_baseclass": "Cstruct_as_class",
                    "wrap_struct_as": "class"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct_as_subclass::",
                "typemap_name": "Cstruct_as_subclass",
                "variables": [
                    {
                        "<VARIABLE>": "x1 ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "x1",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "x1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "x1",
                            "variable_lower": "x1",
                            "variable_name": "x1",
                            "variable_upper": "X1"
                        }
                    },
                    {
                        "<VARIABLE>": "y1 ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "y1",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "y1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "y1",
                            "variable_lower": "y1",
                            "variable_name": "y1",
                            "variable_upper": "Y1"
                        }
                    },
                    {
                        "<VARIABLE>": "z1 ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "z1",
                                "typemap_name": "int"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "z1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "z1",
                            "variable_lower": "z1",
                            "variable_name": "z1",
                            "variable_upper": "Z1"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "wrap_as": "class",
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapCstruct_as_subclass.h",
                    "C_impl_filename": "wrapCstruct_as_subclass.cpp",
                    "C_name_api": "Cstruct_as_subclass",
                    "C_name_scope": "Cstruct_as_subclass_",
                    "C_type_name": "ERR_Cstruct_as_subclass",
                    "F_derived_member_base": "===>F_derived_member_base<===",
                    "F_derived_name": "cstruct_as_subclass",
                    "F_name_api": "cstruct_as_subclass",
                    "F_name_scope": "cstruct_as_subclass_",
                    "PY_PyObject": "PY_Cstruct_as_subclass",
                    "PY_PyTypeObject": "PY_Cstruct_as_subclass_Type",
                    "PY_from_object_func": "PP_Cstruct_as_subclass_from_Object",
                    "PY_struct_array_descr_create": "PY_Cstruct_as_subclass_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_as_subclass_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_as_subclass_array_descr",
                    "PY_to_object_func": "PP_Cstruct_as_subclass_to_Object",
                    "PY_to_object_idtor_func": "PP_Cstruct_as_subclass_to_Object_idtor",
                    "class_scope": "Cstruct_as_subclass::",
                    "cxx_class": "Cstruct_as_subclass",
                    "cxx_type": "Cstruct_as_subclass",
                    "f_capsule_data_type": "ERR_SHROUD_capsule_data",
                    "f_helper_capsule_data_helper": "ERR_SHROUD_capsule_data",
                    "file_scope": "Cstruct_as_subclass"
                }
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "error.hpp"
        ],
        "functions": [
            {
                "<FUNCTION>": "BadFstatements  6 ****************************************",
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "BadFstatements",
                        "params": [],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void BadFstatements(void)",
                "declgen": "void BadFstatements(void)",
                "fstatements": {
                    "c": {
                        "c_helper": [
                            "no_c_helper2"
                        ],
                        "c_post_call": [
                            "{no_c_var} = 11;",
                            "{bad_format = 12;"
                        ]
                    },
                    "f": {
                        "c_helper": [
                            "no_c_helper"
                        ],
                        "c_return_type": "no-such-type",
                        "f_helper": [
                            "no_f_helper"
                        ],
                        "f_post_call": [
                            "{no_such_var} = 10"
                        ]
                    }
                },
                "name": "BadFstatements",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "stmt": "c_subroutine"
                        }
                    },
                    "f": {
                        "+result": {
                            "stmt": "f_subroutine"
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_prototype": "void",
                            "C_return_type": "void",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_prototype": "void",
                            "C_return_type": "no-such-type",
                            "F_C_arguments": "",
                            "F_C_call": "c_bad_fstatements",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arguments": "",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name": "ERR_BadFstatements",
                    "C_name_api": "BadFstatements",
                    "F_C_name": "c_bad_fstatements",
                    "F_name_api": "bad_fstatements",
                    "F_name_function": "bad_fstatements",
                    "F_name_generic": "bad_fstatements",
                    "F_name_impl": "bad_fstatements",
                    "PY_name_impl": "PY_BadFstatements",
                    "function_name": "BadFstatements"
                }
            },
            {
                "<FUNCTION>": "AssumedRank  7 ****************************************",
                "_gen_fortran_generic": true,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "AssumedRank",
                        "params": [
                            {
                                "declarator": {
                                    "metaattrs": {
                                        "dimension": {
                                            "assumedrank": true
                                        },
                                        "intent": "inout"
                                    },
                                    "name": "data",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssumedRank(int *data+dimension(..))",
                "declgen": "void AssumedRank(int * data)",
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 0
                                    },
                                    "metaattrs": {
                                        "dimension": {
                                            "assumedrank": true
                                        },
                                        "intent": "inout"
                                    },
                                    "name": "data",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_0d",
                        "generic": ""
                    },
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "dimension": {
                                            "assumedrank": true
                                        },
                                        "intent": "inout"
                                    },
                                    "name": "data",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_1d",
                        "generic": ""
                    },
                    {
                        "decls": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 2
                                    },
                                    "metaattrs": {
                                        "dimension": {
                                            "assumedrank": true
                                        },
                                        "intent": "inout"
                                    },
                                    "name": "data",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_2d",
                        "generic": ""
                    }
                ],
                "name": "AssumedRank",
                "options": {},
                "wrap": {
                    "c": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "stmt": "c_subroutine"
                        },
                        "data": {
                            "stmt": "c_inout_native_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "stmt": "f_subroutine"
                        },
                        "data": {
                            "stmt": "f_inout_native_*"
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_list": "data",
                            "C_prototype": "int * data",
                            "C_return_type": "void",
                            "F_C_arguments": "data",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        }
                    },
                    "data": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "data",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "data",
                            "cxx_type": "int",
                            "cxx_var": "data",
                            "f_intent": "INOUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "data",
                            "i_var": "data",
                            "idtor": "0",
                            "rank": "assumed",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_inout_native_*"
                        },
                        "fmtpy": {
                            "array_size": "===assumed-rank===",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "data",
                            "ctor_expr": "data",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "data",
                            "cxx_type": "int",
                            "cxx_var": "data",
                            "data_var": "SHData_data",
                            "npy_dims_var": "SHD_data",
                            "npy_intp_asgn": "SHD_data[0] = ===assumed-rank===;\n",
                            "npy_intp_decl": "npy_intp SHD_data[0];\n",
                            "npy_rank": "0",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_data",
                            "rank": "0",
                            "size_var": "SHSize_data",
                            "stmt": "py_inout_native_*",
                            "value_var": "SHValue_data"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name": "ERR_AssumedRank",
                    "C_name_api": "AssumedRank",
                    "F_C_name": "c_assumed_rank",
                    "F_name_api": "assumed_rank",
                    "PY_name_impl": "PY_AssumedRank",
                    "function_name": "AssumedRank"
                }
            },
            {
                "<FUNCTION>": "AssumedRank  8 ****************************************",
                "C_force_wrapper": "True",
                "_PTR_C_CXX_index": "7",
                "_gen_fortran_generic": true,
                "_generated": "fortran_generic",
                "_generated_path": [
                    "fortran_generic"
                ],
                "_orig_node_index": 7,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "AssumedRank",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 0
                                    },
                                    "metaattrs": {
                                        "dimension": {
                                            "assumedrank": true
                                        },
                                        "intent": "inout"
                                    },
                                    "name": "data",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssumedRank(int *data+dimension(..))",
                "declgen": "void AssumedRank(int * data +rank(0))",
                "name": "AssumedRank",
                "options": {},
                "wrap": {
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "stmt": "c_subroutine"
                        },
                        "data": {
                            "stmt": "c_inout_native_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "stmt": "f_subroutine"
                        },
                        "data": {
                            "stmt": "f_inout_native_*"
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtf": {
                            "C_call_list": "data",
                            "C_prototype": "int * data",
                            "C_return_type": "void",
                            "F_C_arguments": "data",
                            "F_C_call": "c_assumed_rank_0d",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "data",
                            "F_arguments": "data",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "data": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "data",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "data",
                            "cxx_type": "int",
                            "cxx_var": "data",
                            "f_intent": "INOUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "data",
                            "fc_var": "data",
                            "i_var": "data",
                            "idtor": "0",
                            "rank": "0",
                            "sh_type": "SH_TYPE_INT",
                            "size": "1",
                            "stmt_name": "f_inout_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name": "ERR_AssumedRank_0d",
                    "C_name_api": "AssumedRank",
                    "F_C_name": "c_assumed_rank_0d",
                    "F_name_api": "assumed_rank",
                    "F_name_function": "assumed_rank_0d",
                    "F_name_generic": "assumed_rank",
                    "F_name_impl": "assumed_rank_0d",
                    "function_name": "AssumedRank",
                    "function_suffix": "_0d"
                }
            },
            {
                "<FUNCTION>": "AssumedRank  9 ****************************************",
                "C_force_wrapper": "True",
                "_PTR_C_CXX_index": "7",
                "_gen_fortran_generic": true,
                "_generated": "fortran_generic",
                "_generated_path": [
                    "fortran_generic"
                ],
                "_orig_node_index": 7,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "AssumedRank",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "metaattrs": {
                                        "dimension": {
                                            "assumedrank": true
                                        },
                                        "intent": "inout"
                                    },
                                    "name": "data",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssumedRank(int *data+dimension(..))",
                "declgen": "void AssumedRank(int * data +rank(1))",
                "name": "AssumedRank",
                "options": {},
                "wrap": {
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "stmt": "c_subroutine"
                        },
                        "data": {
                            "stmt": "c_inout_native_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "stmt": "f_subroutine"
                        },
                        "data": {
                            "stmt": "f_inout_native_*"
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtf": {
                            "C_call_list": "data",
                            "C_prototype": "int * data",
                            "C_return_type": "void",
                            "F_C_arguments": "data",
                            "F_C_call": "c_assumed_rank_1d",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "data",
                            "F_arguments": "data",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "data": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "data",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "data",
                            "cxx_type": "int",
                            "cxx_var": "data",
                            "f_assumed_shape": "(:)",
                            "f_intent": "INOUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "data",
                            "fc_var": "data",
                            "i_dimension": "(*)",
                            "i_var": "data",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(data)",
                            "stmt_name": "f_inout_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name": "ERR_AssumedRank_1d",
                    "C_name_api": "AssumedRank",
                    "F_C_name": "c_assumed_rank_1d",
                    "F_name_api": "assumed_rank",
                    "F_name_function": "assumed_rank_1d",
                    "F_name_generic": "assumed_rank",
                    "F_name_impl": "assumed_rank_1d",
                    "function_name": "AssumedRank",
                    "function_suffix": "_1d"
                }
            },
            {
                "<FUNCTION>": "AssumedRank  10 ****************************************",
                "C_force_wrapper": "True",
                "_PTR_C_CXX_index": "7",
                "_gen_fortran_generic": true,
                "_generated": "fortran_generic",
                "_generated_path": [
                    "fortran_generic"
                ],
                "_orig_node_index": 7,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "metaattrs": {
                            "intent": "subroutine"
                        },
                        "name": "AssumedRank",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 2
                                    },
                                    "metaattrs": {
                                        "dimension": {
                                            "assumedrank": true
                                        },
                                        "intent": "inout"
                                    },
                                    "name": "data",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssumedRank(int *data+dimension(..))",
                "declgen": "void AssumedRank(int * data +rank(2))",
                "name": "AssumedRank",
                "options": {},
                "wrap": {
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "stmt": "c_subroutine"
                        },
                        "data": {
                            "stmt": "c_inout_native_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "stmt": "f_subroutine"
                        },
                        "data": {
                            "stmt": "f_inout_native_*"
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtf": {
                            "C_call_list": "data",
                            "C_prototype": "int * data",
                            "C_return_type": "void",
                            "F_C_arguments": "data",
                            "F_C_call": "c_assumed_rank_2d",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "data",
                            "F_arguments": "data",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "data": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "data",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "data",
                            "cxx_type": "int",
                            "cxx_var": "data",
                            "f_assumed_shape": "(:,:)",
                            "f_intent": "INOUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "data",
                            "fc_var": "data",
                            "i_dimension": "(*)",
                            "i_var": "data",
                            "idtor": "0",
                            "rank": "2",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(data)",
                            "stmt_name": "f_inout_native_*"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name": "ERR_AssumedRank_2d",
                    "C_name_api": "AssumedRank",
                    "F_C_name": "c_assumed_rank_2d",
                    "F_name_api": "assumed_rank",
                    "F_name_function": "assumed_rank_2d",
                    "F_name_generic": "assumed_rank",
                    "F_name_impl": "assumed_rank_2d",
                    "function_name": "AssumedRank",
                    "function_suffix": "_2d"
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "error"
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "python": true
        }
    },
    "symtab": {
        "Cstruct_as_subclass": "struct-Cstruct_as_subclass",
        "struct-Cstruct_as_subclass": "Cstruct_as_subclass"
    },
    "types": {
        "Cstruct_as_subclass": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Cstruct_as_subclass",
            "PY_PyTypeObject": "PY_Cstruct_as_subclass_Type",
            "PY_from_object": "PP_Cstruct_as_subclass_from_Object",
            "PY_to_object": "PP_Cstruct_as_subclass_to_Object",
            "PY_to_object_idtor": "PP_Cstruct_as_subclass_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}Cstruct_as_subclass *>\t({c_var}->addr)",
            "c_type": "ERR_Cstruct_as_subclass",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "Cstruct_as_subclass",
            "f_capsule_data_type": "ERR_SHROUD_capsule_data",
            "f_class": "class(cstruct_as_subclass)",
            "f_derived_type": "cstruct_as_subclass",
            "f_module": {
                "error_mod": [
                    "cstruct_as_subclass"
                ]
            },
            "f_module_name": "error_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(cstruct_as_subclass)",
            "flat_name": "Cstruct_as_subclass",
            "i_module": {
                "error_mod": [
                    "ERR_SHROUD_capsule_data"
                ]
            },
            "i_type": "type(ERR_SHROUD_capsule_data)",
            "impl_header": [
                "error.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typeserror.h"
            ]
        }
    }
}