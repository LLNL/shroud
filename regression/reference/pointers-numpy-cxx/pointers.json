{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2024, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "pointers.h"
        ],
        "functions": [
            {
                "<FUNCTION>": "intargs_in  0 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "intargs_in",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void  intargs_in(const int *arg)",
                "declgen": "void intargs_in(const int * arg)",
                "name": "intargs_in",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "arg",
                            "ctor_expr": "*arg",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(arg)",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_in_native_*",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "intargs_in",
                    "F_name_api": "intargs_in",
                    "PY_name_impl": "PY_intargs_in",
                    "function_name": "intargs_in"
                }
            },
            {
                "<FUNCTION>": "intargs_inout  1 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "intargs_inout",
                        "params": [
                            {
                                "declarator": {
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void  intargs_inout(int *arg)",
                "declgen": "void intargs_inout(int * arg)",
                "doxygen": {
                    "description": "Argument is modified by library, defaults to intent(inout).\n"
                },
                "name": "intargs_inout",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "inout"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "inout"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_inout_native_*",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "intargs_inout",
                    "F_name_api": "intargs_inout",
                    "PY_name_impl": "PY_intargs_inout",
                    "function_name": "intargs_inout"
                }
            },
            {
                "<FUNCTION>": "intargs_out  2 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "intargs_out",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void  intargs_out(int *arg +intent(out))",
                "declgen": "void intargs_out(int * arg +intent(out))",
                "name": "intargs_out",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_out_native_*",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "intargs_out",
                    "F_name_api": "intargs_out",
                    "PY_name_impl": "PY_intargs_out",
                    "function_name": "intargs_out"
                }
            },
            {
                "<FUNCTION>": "intargs  3 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "intargs",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "intent": "in"
                                    },
                                    "name": "argin",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "inout"
                                    },
                                    "name": "arginout",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "argout",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void  intargs(const int argin      +intent(in), int * arginout +intent(inout), int * argout   +intent(out))",
                "declgen": "void intargs(const int argin +intent(in), int * arginout +intent(inout), int * argout +intent(out))",
                "name": "intargs",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "argin": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arginout": {
                            "meta": {
                                "intent": "inout"
                            }
                        },
                        "argout": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "argin": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arginout": {
                            "meta": {
                                "intent": "inout"
                            }
                        },
                        "argout": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "argin": {
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "argin",
                            "ctor_expr": "argin",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(&argin)",
                            "cxx_type": "int",
                            "cxx_var": "argin",
                            "data_var": "SHData_argin",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_argin",
                            "size_var": "SHSize_argin",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_argin"
                        }
                    },
                    "arginout": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "arginout",
                            "ctor_expr": "arginout",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arginout",
                            "cxx_type": "int",
                            "cxx_var": "arginout",
                            "data_var": "SHData_arginout",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arginout",
                            "size_var": "SHSize_arginout",
                            "stmt": "py_inout_native_*",
                            "value_var": "SHValue_arginout"
                        }
                    },
                    "argout": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "argout",
                            "ctor_expr": "argout",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "argout",
                            "cxx_type": "int",
                            "cxx_var": "argout",
                            "data_var": "SHData_argout",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_argout",
                            "size_var": "SHSize_argout",
                            "stmt": "py_out_native_*",
                            "value_var": "SHValue_argout"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "intargs",
                    "F_name_api": "intargs",
                    "PY_name_impl": "PY_intargs",
                    "function_name": "intargs"
                }
            },
            {
                "<FUNCTION>": "cos_doubles  4 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "cos_doubles",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "name": "in",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "size(in)",
                                        "intent": "out"
                                    },
                                    "name": "out",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(in)"
                                    },
                                    "name": "sizein",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void cos_doubles(double * in     +intent(in)  +rank(1), double * out    +intent(out) +dimension(size(in)), int      sizein +implied(size(in)))",
                "declgen": "void cos_doubles(double * in +intent(in)+rank(1), double * out +dimension(size(in))+intent(out), int sizein +implied(size(in)))",
                "doxygen": {
                    "brief": "compute cos of IN and save in OUT",
                    "description": "allocate OUT same type as IN implied size of array"
                },
                "name": "cos_doubles",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "out": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "args": [
                                            {
                                                "name": "in"
                                            }
                                        ],
                                        "name": "size"
                                    }
                                ],
                                "intent": "out"
                            }
                        },
                        "sizein": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "out": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "args": [
                                            {
                                                "name": "in"
                                            }
                                        ],
                                        "name": "size"
                                    }
                                ],
                                "intent": "out"
                            }
                        },
                        "sizein": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "in": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double",
                            "c_var": "in",
                            "ctor_expr": "*in",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "in",
                            "cxx_type": "double",
                            "cxx_var": "in",
                            "data_var": "SHData_in",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_in",
                            "pytmp_var": "SHTPy_in",
                            "rank": "1",
                            "size_var": "SHSize_in",
                            "stmt": "py_in_native_*_numpy",
                            "value_var": "SHValue_in"
                        }
                    },
                    "out": {
                        "fmtpy": {
                            "array_size": "PyArray_SIZE(SHPy_in)",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double",
                            "c_var": "out",
                            "ctor_expr": "*out",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out",
                            "cxx_type": "double",
                            "cxx_var": "out",
                            "data_var": "SHData_out",
                            "npy_dims_var": "SHD_out",
                            "npy_intp_asgn": "SHD_out[0] = PyArray_SIZE(SHPy_in);\n",
                            "npy_intp_decl": "npy_intp SHD_out[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_out",
                            "rank": "1",
                            "size_var": "SHSize_out",
                            "stmt": "py_out_native_*_numpy",
                            "value_var": "SHValue_out"
                        }
                    },
                    "sizein": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "sizein",
                            "ctor_expr": "sizein",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&sizein",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "data_var": "SHData_sizein",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "PyArray_SIZE(SHPy_in)",
                            "py_var": "SHPy_sizein",
                            "size_var": "SHSize_sizein",
                            "value_var": "SHValue_sizein"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "cos_doubles",
                    "F_name_api": "cos_doubles",
                    "PY_name_impl": "PY_cos_doubles",
                    "function_name": "cos_doubles"
                }
            },
            {
                "<FUNCTION>": "truncate_to_int  5 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "truncate_to_int",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "name": "in",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "size(in)",
                                        "intent": "out"
                                    },
                                    "name": "out",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(in)"
                                    },
                                    "name": "sizein",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void truncate_to_int(double * in     +intent(in)  +rank(1), int *    out    +intent(out) +dimension(size(in)), int      sizein +implied(size(in)))",
                "declgen": "void truncate_to_int(double * in +intent(in)+rank(1), int * out +dimension(size(in))+intent(out), int sizein +implied(size(in)))",
                "doxygen": {
                    "brief": "truncate IN argument and save in OUT",
                    "description": "allocate OUT different type as IN\nimplied size of array\n"
                },
                "name": "truncate_to_int",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "out": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "args": [
                                            {
                                                "name": "in"
                                            }
                                        ],
                                        "name": "size"
                                    }
                                ],
                                "intent": "out"
                            }
                        },
                        "sizein": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "out": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "args": [
                                            {
                                                "name": "in"
                                            }
                                        ],
                                        "name": "size"
                                    }
                                ],
                                "intent": "out"
                            }
                        },
                        "sizein": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "in": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double",
                            "c_var": "in",
                            "ctor_expr": "*in",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "in",
                            "cxx_type": "double",
                            "cxx_var": "in",
                            "data_var": "SHData_in",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_in",
                            "pytmp_var": "SHTPy_in",
                            "rank": "1",
                            "size_var": "SHSize_in",
                            "stmt": "py_in_native_*_numpy",
                            "value_var": "SHValue_in"
                        }
                    },
                    "out": {
                        "fmtpy": {
                            "array_size": "PyArray_SIZE(SHPy_in)",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "out",
                            "ctor_expr": "*out",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out",
                            "cxx_type": "int",
                            "cxx_var": "out",
                            "data_var": "SHData_out",
                            "npy_dims_var": "SHD_out",
                            "npy_intp_asgn": "SHD_out[0] = PyArray_SIZE(SHPy_in);\n",
                            "npy_intp_decl": "npy_intp SHD_out[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_out",
                            "rank": "1",
                            "size_var": "SHSize_out",
                            "stmt": "py_out_native_*_numpy",
                            "value_var": "SHValue_out"
                        }
                    },
                    "sizein": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "sizein",
                            "ctor_expr": "sizein",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&sizein",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "data_var": "SHData_sizein",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "PyArray_SIZE(SHPy_in)",
                            "py_var": "SHPy_sizein",
                            "size_var": "SHSize_sizein",
                            "value_var": "SHValue_sizein"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "truncate_to_int",
                    "F_name_api": "truncate_to_int",
                    "PY_name_impl": "PY_truncate_to_int",
                    "function_name": "truncate_to_int"
                }
            },
            {
                "<FUNCTION>": "get_values  6 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "get_values",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "OUT"
                                    },
                                    "name": "nvalues",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "3",
                                        "intent": "out"
                                    },
                                    "name": "values",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void get_values(int *nvalues+intent(OUT), int *values +intent(out)+dimension(3))",
                "declgen": "void get_values(int * nvalues +intent(OUT), int * values +dimension(3)+intent(out))",
                "doxygen": {
                    "brief": "fill values into array",
                    "description": "The function knows how long the array must be.\nFortran will treat the dimension as assumed-length.\nThe Python wrapper will create a NumPy array or list so it must\nhave an explicit dimension (not assumed-length).\n"
                },
                "name": "get_values",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "nvalues": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "values": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "3"
                                    }
                                ],
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "nvalues": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "values": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "3"
                                    }
                                ],
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "nvalues": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "nvalues",
                            "ctor_expr": "nvalues",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nvalues",
                            "cxx_type": "int",
                            "cxx_var": "nvalues",
                            "data_var": "SHData_nvalues",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_nvalues",
                            "size_var": "SHSize_nvalues",
                            "stmt": "py_out_native_*",
                            "value_var": "SHValue_nvalues"
                        }
                    },
                    "values": {
                        "fmtpy": {
                            "array_size": "3",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "values",
                            "ctor_expr": "*values",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "values",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "data_var": "SHData_values",
                            "npy_dims_var": "SHD_values",
                            "npy_intp_asgn": "SHD_values[0] = 3;\n",
                            "npy_intp_decl": "npy_intp SHD_values[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_values",
                            "rank": "1",
                            "size_var": "SHSize_values",
                            "stmt": "py_out_native_*_numpy",
                            "value_var": "SHValue_values"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "get_values",
                    "F_name_api": "get_values",
                    "PY_name_impl": "PY_get_values",
                    "function_name": "get_values"
                }
            },
            {
                "<FUNCTION>": "get_values2  7 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "get_values2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "3",
                                        "intent": "out"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "3",
                                        "intent": "out"
                                    },
                                    "name": "arg2",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void get_values2(int *arg1 +intent(out)+dimension(3), int *arg2 +intent(out)+dimension(3))",
                "declgen": "void get_values2(int * arg1 +dimension(3)+intent(out), int * arg2 +dimension(3)+intent(out))",
                "doxygen": {
                    "brief": "fill values into two arrays",
                    "description": "Test two intent(out) arguments.\nMake sure error handling works with C++.\n"
                },
                "name": "get_values2",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "3"
                                    }
                                ],
                                "intent": "out"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "3"
                                    }
                                ],
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "3"
                                    }
                                ],
                                "intent": "out"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "3"
                                    }
                                ],
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtpy": {
                            "array_size": "3",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "arg1",
                            "ctor_expr": "*arg1",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "npy_dims_var": "SHD_arg1",
                            "npy_intp_asgn": "SHD_arg1[0] = 3;\n",
                            "npy_intp_decl": "npy_intp SHD_arg1[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg1",
                            "rank": "1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_out_native_*_numpy",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtpy": {
                            "array_size": "3",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "arg2",
                            "ctor_expr": "*arg2",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "npy_dims_var": "SHD_arg2",
                            "npy_intp_asgn": "SHD_arg2[0] = 3;\n",
                            "npy_intp_decl": "npy_intp SHD_arg2[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg2",
                            "rank": "1",
                            "size_var": "SHSize_arg2",
                            "stmt": "py_out_native_*_numpy",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "get_values2",
                    "F_name_api": "get_values2",
                    "PY_name_impl": "PY_get_values2",
                    "function_name": "get_values2"
                }
            },
            {
                "<FUNCTION>": "iota_dimension  8 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "iota_dimension",
                        "params": [
                            {
                                "declarator": {
                                    "name": "nvar",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "nvar",
                                        "intent": "out"
                                    },
                                    "name": "values",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void iota_dimension (int nvar, int *values+intent(out)+dimension(nvar))",
                "declgen": "void iota_dimension(int nvar, int * values +dimension(nvar)+intent(out))",
                "name": "iota_dimension",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "nvar": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "values": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "name": "nvar"
                                    }
                                ],
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "nvar": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "values": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "name": "nvar"
                                    }
                                ],
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "nvar": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "nvar",
                            "ctor_expr": "nvar",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nvar",
                            "cxx_type": "int",
                            "cxx_var": "nvar",
                            "data_var": "SHData_nvar",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_nvar",
                            "size_var": "SHSize_nvar",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_nvar"
                        }
                    },
                    "values": {
                        "fmtpy": {
                            "array_size": "nvar",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "values",
                            "ctor_expr": "*values",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "values",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "data_var": "SHData_values",
                            "npy_dims_var": "SHD_values",
                            "npy_intp_asgn": "SHD_values[0] = nvar;\n",
                            "npy_intp_decl": "npy_intp SHD_values[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_values",
                            "rank": "1",
                            "size_var": "SHSize_values",
                            "stmt": "py_out_native_*_numpy",
                            "value_var": "SHValue_values"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "iota_dimension",
                    "F_name_api": "iota_dimension",
                    "PY_name_impl": "PY_iota_dimension",
                    "function_name": "iota_dimension"
                }
            },
            {
                "<FUNCTION>": "Sum  9 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "Sum",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(values)"
                                    },
                                    "name": "len",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "name": "values",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "result",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void Sum(int len +implied(size(values)), const int *values +rank(1), int *result +intent(out))",
                "declgen": "void Sum(int len +implied(size(values)), const int * values +rank(1), int * result +intent(out))",
                "name": "Sum",
                "options": {
                    "wrap_lua": false
                },
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "len": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "result": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "values": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "len": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "result": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "values": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "len": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "len",
                            "ctor_expr": "len",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&len",
                            "cxx_type": "int",
                            "cxx_var": "len",
                            "data_var": "SHData_len",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "PyArray_SIZE(SHPy_values)",
                            "py_var": "SHPy_len",
                            "size_var": "SHSize_len",
                            "value_var": "SHValue_len"
                        }
                    },
                    "result": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "result",
                            "ctor_expr": "result",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "result",
                            "cxx_type": "int",
                            "cxx_var": "result",
                            "data_var": "SHData_result",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_result",
                            "size_var": "SHSize_result",
                            "stmt": "py_out_native_*",
                            "value_var": "SHValue_result"
                        }
                    },
                    "values": {
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "values",
                            "ctor_expr": "*values",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(values)",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "data_var": "SHData_values",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_values",
                            "pytmp_var": "SHTPy_values",
                            "rank": "1",
                            "size_var": "SHSize_values",
                            "stmt": "py_in_native_*_numpy",
                            "value_var": "SHValue_values"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "Sum",
                    "F_name_api": "sum",
                    "PY_name_impl": "PY_Sum",
                    "function_name": "Sum"
                }
            },
            {
                "<FUNCTION>": "fillIntArray  10 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "fillIntArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "3",
                                        "intent": "out"
                                    },
                                    "name": "out",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fillIntArray(int *out +intent(out)+dimension(3))",
                "declgen": "void fillIntArray(int * out +dimension(3)+intent(out))",
                "doxygen": {
                    "description": "Return three values into memory the user provides.\n"
                },
                "name": "fillIntArray",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "out": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "3"
                                    }
                                ],
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "out": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "3"
                                    }
                                ],
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "out": {
                        "fmtpy": {
                            "array_size": "3",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "out",
                            "ctor_expr": "*out",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "out",
                            "cxx_type": "int",
                            "cxx_var": "out",
                            "data_var": "SHData_out",
                            "npy_dims_var": "SHD_out",
                            "npy_intp_asgn": "SHD_out[0] = 3;\n",
                            "npy_intp_decl": "npy_intp SHD_out[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_out",
                            "rank": "1",
                            "size_var": "SHSize_out",
                            "stmt": "py_out_native_*_numpy",
                            "value_var": "SHValue_out"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "fillIntArray",
                    "F_name_api": "fill_int_array",
                    "PY_name_impl": "PY_fillIntArray",
                    "function_name": "fillIntArray"
                }
            },
            {
                "<FUNCTION>": "incrementIntArray  11 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "incrementIntArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "inout",
                                        "rank": 1
                                    },
                                    "name": "array",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(array)"
                                    },
                                    "name": "sizein",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void incrementIntArray(int * array  +rank(1)+intent(inout), int   sizein +implied(size(array)))",
                "declgen": "void incrementIntArray(int * array +intent(inout)+rank(1), int sizein +implied(size(array)))",
                "doxygen": {
                    "description": "Increment array in place using intent(INOUT).\n"
                },
                "name": "incrementIntArray",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "array": {
                            "meta": {
                                "intent": "inout"
                            }
                        },
                        "sizein": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "array": {
                            "meta": {
                                "intent": "inout"
                            }
                        },
                        "sizein": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "array": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "array",
                            "ctor_expr": "*array",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "array",
                            "cxx_type": "int",
                            "cxx_var": "array",
                            "data_var": "SHData_array",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_array",
                            "pytmp_var": "SHTPy_array",
                            "rank": "1",
                            "size_var": "SHSize_array",
                            "stmt": "py_inout_native_*_numpy",
                            "value_var": "SHValue_array"
                        }
                    },
                    "sizein": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "sizein",
                            "ctor_expr": "sizein",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&sizein",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "data_var": "SHData_sizein",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "PyArray_SIZE(SHPy_array)",
                            "py_var": "SHPy_sizein",
                            "size_var": "SHSize_sizein",
                            "value_var": "SHValue_sizein"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "incrementIntArray",
                    "F_name_api": "increment_int_array",
                    "PY_name_impl": "PY_incrementIntArray",
                    "function_name": "incrementIntArray"
                }
            },
            {
                "<FUNCTION>": "fill_with_zeros  12 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "fill_with_zeros",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "name": "x",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(x)"
                                    },
                                    "name": "x_length",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fill_with_zeros(double* x+rank(1), int x_length+implied(size(x)));",
                "declgen": "void fill_with_zeros(double * x +rank(1), int x_length +implied(size(x)))",
                "name": "fill_with_zeros",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "x": {
                            "meta": {
                                "intent": "inout"
                            }
                        },
                        "x_length": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "x": {
                            "meta": {
                                "intent": "inout"
                            }
                        },
                        "x_length": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "x": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double",
                            "c_var": "x",
                            "ctor_expr": "*x",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "x",
                            "cxx_type": "double",
                            "cxx_var": "x",
                            "data_var": "SHData_x",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_x",
                            "pytmp_var": "SHTPy_x",
                            "rank": "1",
                            "size_var": "SHSize_x",
                            "stmt": "py_inout_native_*_numpy",
                            "value_var": "SHValue_x"
                        }
                    },
                    "x_length": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "x_length",
                            "ctor_expr": "x_length",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&x_length",
                            "cxx_type": "int",
                            "cxx_var": "x_length",
                            "data_var": "SHData_x_length",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "PyArray_SIZE(SHPy_x)",
                            "py_var": "SHPy_x_length",
                            "size_var": "SHSize_x_length",
                            "value_var": "SHValue_x_length"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "fill_with_zeros",
                    "F_name_api": "fill_with_zeros",
                    "PY_name_impl": "PY_fill_with_zeros",
                    "function_name": "fill_with_zeros"
                }
            },
            {
                "<FUNCTION>": "accumulate  13 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "accumulate",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "name": "arr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "implied": "size(arr)"
                                    },
                                    "name": "len",
                                    "typemap_name": "size_t"
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int accumulate(const int *arr+rank(1), size_t len+implied(size(arr)));",
                "declgen": "int accumulate(const int * arr +rank(1), size_t len +implied(size(arr)))",
                "name": "accumulate",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arr": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "len": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arr": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "len": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "arr": {
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "arr",
                            "ctor_expr": "*arr",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(arr)",
                            "cxx_type": "int",
                            "cxx_var": "arr",
                            "data_var": "SHData_arr",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arr",
                            "pytmp_var": "SHTPy_arr",
                            "rank": "1",
                            "size_var": "SHSize_arr",
                            "stmt": "py_in_native_*_numpy",
                            "value_var": "SHValue_arr"
                        }
                    },
                    "len": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "size_t",
                            "c_var": "len",
                            "ctor_expr": "len",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&len",
                            "cxx_type": "size_t",
                            "cxx_var": "len",
                            "data_var": "SHData_len",
                            "numpy_type": null,
                            "pre_call_intent": "PyArray_SIZE(SHPy_arr)",
                            "py_var": "SHPy_len",
                            "size_var": "SHSize_len",
                            "value_var": "SHValue_len"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "accumulate",
                    "F_name_api": "accumulate",
                    "PY_name_impl": "PY_accumulate",
                    "function_name": "accumulate"
                }
            },
            {
                "<FUNCTION>": "acceptCharArrayIn  14 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "acceptCharArrayIn",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "name": "names",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int acceptCharArrayIn(char **names +intent(in))",
                "declgen": "int acceptCharArrayIn(char * * names +intent(in))",
                "doxygen": {
                    "description": "Return strlen of the first index as a check.\n"
                },
                "name": "acceptCharArrayIn",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "names": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "names": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "names": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "names",
                            "ctor_expr": "*names",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "names",
                            "cxx_type": "char",
                            "cxx_var": "names",
                            "data_var": "SHData_names",
                            "hnamefunc0": "SHROUD_get_from_object_charptr",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_names",
                            "pytmp_var": "SHTPy_names",
                            "rank": "1",
                            "size_var": "SHSize_names",
                            "stmt": "py_in_char_**",
                            "value_var": "SHValue_names"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "acceptCharArrayIn",
                    "F_name_api": "accept_char_array_in",
                    "PY_name_impl": "PY_acceptCharArrayIn",
                    "function_name": "acceptCharArrayIn"
                }
            },
            {
                "<FUNCTION>": "setGlobalInt  15 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "setGlobalInt",
                        "params": [
                            {
                                "declarator": {
                                    "name": "value",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void setGlobalInt(int value)",
                "declgen": "void setGlobalInt(int value)",
                "name": "setGlobalInt",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "value": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "value": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "value": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "value",
                            "ctor_expr": "value",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&value",
                            "cxx_type": "int",
                            "cxx_var": "value",
                            "data_var": "SHData_value",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_value",
                            "size_var": "SHSize_value",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_value"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "setGlobalInt",
                    "F_name_api": "set_global_int",
                    "PY_name_impl": "PY_setGlobalInt",
                    "function_name": "setGlobalInt"
                }
            },
            {
                "<FUNCTION>": "sumFixedArray  16 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "sumFixedArray",
                        "params": [],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int sumFixedArray(void)",
                "declgen": "int sumFixedArray(void)",
                "doxygen": {
                    "description": "Used to test values global_array.\n"
                },
                "name": "sumFixedArray",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "sumFixedArray",
                    "F_name_api": "sum_fixed_array",
                    "PY_name_impl": "PY_sumFixedArray",
                    "function_name": "sumFixedArray"
                }
            },
            {
                "<FUNCTION>": "getPtrToScalar  17 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getPtrToScalar",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "nitems",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToScalar(int **nitems+intent(out))",
                "declgen": "void getPtrToScalar(int * * nitems +intent(out))",
                "name": "getPtrToScalar",
                "options": {
                    "wrap_python": false
                },
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "nitems": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getPtrToScalar",
                    "F_name_api": "get_ptr_to_scalar",
                    "function_name": "getPtrToScalar"
                }
            },
            {
                "<FUNCTION>": "getPtrToFixedArray  18 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getPtrToFixedArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "10",
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToFixedArray(int **count+intent(out)+dimension(10))",
                "declgen": "void getPtrToFixedArray(int * * count +dimension(10)+intent(out))",
                "doxygen": {
                    "description": "Return a Fortran pointer to an array which is always the same length.\n"
                },
                "name": "getPtrToFixedArray",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "10"
                                    }
                                ],
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "10"
                                    }
                                ],
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtpy": {
                            "array_size": "10",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "count",
                            "ctor_expr": "*count",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "data_var": "SHData_count",
                            "npy_dims_var": "SHD_count",
                            "npy_intp_asgn": "SHD_count[0] = 10;\n",
                            "npy_intp_decl": "npy_intp SHD_count[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_count",
                            "rank": "1",
                            "size_var": "SHSize_count",
                            "stmt": "py_out_native_**_numpy",
                            "value_var": "SHValue_count"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getPtrToFixedArray",
                    "F_name_api": "get_ptr_to_fixed_array",
                    "PY_name_impl": "PY_getPtrToFixedArray",
                    "function_name": "getPtrToFixedArray"
                }
            },
            {
                "<FUNCTION>": "getPtrToDynamicArray  19 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getPtrToDynamicArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "ncount",
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "name": "ncount",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToDynamicArray(int **count+intent(out)+dimension(ncount), int *ncount+intent(out)+hidden)",
                "declgen": "void getPtrToDynamicArray(int * * count +dimension(ncount)+intent(out), int * ncount +hidden+intent(out))",
                "doxygen": {
                    "description": "Return a Fortran pointer to an array which is the length of\nthe argument ncount.\n"
                },
                "name": "getPtrToDynamicArray",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "name": "ncount"
                                    }
                                ],
                                "intent": "out"
                            }
                        },
                        "ncount": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "name": "ncount"
                                    }
                                ],
                                "intent": "out"
                            }
                        },
                        "ncount": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtpy": {
                            "array_size": "ncount",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "count",
                            "ctor_expr": "*count",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "data_var": "SHData_count",
                            "npy_dims_var": "SHD_count",
                            "npy_intp_asgn": "SHD_count[0] = ncount;\n",
                            "npy_intp_decl": "npy_intp SHD_count[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_count",
                            "rank": "1",
                            "size_var": "SHSize_count",
                            "stmt": "py_out_native_**_numpy",
                            "value_var": "SHValue_count"
                        }
                    },
                    "ncount": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "ncount",
                            "ctor_expr": "ncount",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "ncount",
                            "cxx_type": "int",
                            "cxx_var": "ncount",
                            "data_var": "SHData_ncount",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_ncount",
                            "size_var": "SHSize_ncount",
                            "stmt": "py_out_native_*",
                            "value_var": "SHValue_ncount"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getPtrToDynamicArray",
                    "F_name_api": "get_ptr_to_dynamic_array",
                    "PY_name_impl": "PY_getPtrToDynamicArray",
                    "function_name": "getPtrToDynamicArray"
                }
            },
            {
                "<FUNCTION>": "getPtrToFuncArray  20 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getPtrToFuncArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "getLen()",
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToFuncArray(int **count+intent(out) +dimension(getLen()))",
                "declgen": "void getPtrToFuncArray(int * * count +dimension(getLen())+intent(out))",
                "doxygen": {
                    "description": "Return a Fortran pointer to an array which is the length\nis computed by C++ function getLen.\ngetLen will be called from C/C++ to compute the shape.\n"
                },
                "name": "getPtrToFuncArray",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "args": [],
                                        "name": "getLen"
                                    }
                                ],
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "args": [],
                                        "name": "getLen"
                                    }
                                ],
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtpy": {
                            "array_size": "getLen()",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "count",
                            "ctor_expr": "*count",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "data_var": "SHData_count",
                            "npy_dims_var": "SHD_count",
                            "npy_intp_asgn": "SHD_count[0] = getLen();\n",
                            "npy_intp_decl": "npy_intp SHD_count[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_count",
                            "rank": "1",
                            "size_var": "SHSize_count",
                            "stmt": "py_out_native_**_numpy",
                            "value_var": "SHValue_count"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getPtrToFuncArray",
                    "F_name_api": "get_ptr_to_func_array",
                    "PY_name_impl": "PY_getPtrToFuncArray",
                    "function_name": "getPtrToFuncArray"
                }
            },
            {
                "<FUNCTION>": "getPtrToConstScalar  21 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getPtrToConstScalar",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "nitems",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToConstScalar( const int **nitems+intent(out))",
                "declgen": "void getPtrToConstScalar(const int * * nitems +intent(out))",
                "name": "getPtrToConstScalar",
                "options": {
                    "wrap_python": false
                },
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "nitems": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getPtrToConstScalar",
                    "F_name_api": "get_ptr_to_const_scalar",
                    "function_name": "getPtrToConstScalar"
                }
            },
            {
                "<FUNCTION>": "getPtrToFixedConstArray  22 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getPtrToFixedConstArray",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "dimension": "10",
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToFixedConstArray( const int **count+intent(out)+dimension(10));",
                "declgen": "void getPtrToFixedConstArray(const int * * count +dimension(10)+intent(out))",
                "name": "getPtrToFixedConstArray",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "10"
                                    }
                                ],
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "10"
                                    }
                                ],
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtpy": {
                            "array_size": "10",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "count",
                            "ctor_expr": "*count",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(count)",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "data_var": "SHData_count",
                            "npy_dims_var": "SHD_count",
                            "npy_intp_asgn": "SHD_count[0] = 10;\n",
                            "npy_intp_decl": "npy_intp SHD_count[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_count",
                            "rank": "1",
                            "size_var": "SHSize_count",
                            "stmt": "py_out_native_**_numpy",
                            "value_var": "SHValue_count"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getPtrToFixedConstArray",
                    "F_name_api": "get_ptr_to_fixed_const_array",
                    "PY_name_impl": "PY_getPtrToFixedConstArray",
                    "function_name": "getPtrToFixedConstArray"
                }
            },
            {
                "<FUNCTION>": "getPtrToDynamicConstArray  23 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getPtrToDynamicConstArray",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "dimension": "ncount",
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "name": "ncount",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToDynamicConstArray( const int **count+intent(out)+dimension(ncount), int *ncount+intent(out)+hidden)",
                "declgen": "void getPtrToDynamicConstArray(const int * * count +dimension(ncount)+intent(out), int * ncount +hidden+intent(out))",
                "name": "getPtrToDynamicConstArray",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "name": "ncount"
                                    }
                                ],
                                "intent": "out"
                            }
                        },
                        "ncount": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "name": "ncount"
                                    }
                                ],
                                "intent": "out"
                            }
                        },
                        "ncount": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtpy": {
                            "array_size": "ncount",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "count",
                            "ctor_expr": "*count",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(count)",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "data_var": "SHData_count",
                            "npy_dims_var": "SHD_count",
                            "npy_intp_asgn": "SHD_count[0] = ncount;\n",
                            "npy_intp_decl": "npy_intp SHD_count[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_count",
                            "rank": "1",
                            "size_var": "SHSize_count",
                            "stmt": "py_out_native_**_numpy",
                            "value_var": "SHValue_count"
                        }
                    },
                    "ncount": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "ncount",
                            "ctor_expr": "ncount",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "ncount",
                            "cxx_type": "int",
                            "cxx_var": "ncount",
                            "data_var": "SHData_ncount",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_ncount",
                            "size_var": "SHSize_ncount",
                            "stmt": "py_out_native_*",
                            "value_var": "SHValue_ncount"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getPtrToDynamicConstArray",
                    "F_name_api": "get_ptr_to_dynamic_const_array",
                    "PY_name_impl": "PY_getPtrToDynamicConstArray",
                    "function_name": "getPtrToDynamicConstArray"
                }
            },
            {
                "<FUNCTION>": "getRawPtrToScalar  24 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getRawPtrToScalar",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "raw",
                                        "intent": "out"
                                    },
                                    "name": "nitems",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getRawPtrToScalar(int **nitems+intent(out)+deref(raw))",
                "declgen": "void getRawPtrToScalar(int * * nitems +deref(raw)+intent(out))",
                "doxygen": {
                    "description": "Called directly via an interface in Fortran.\n"
                },
                "name": "getRawPtrToScalar",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "nitems": {
                            "meta": {
                                "deref": "raw",
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "nitems": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "nitems": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "nitems",
                            "ctor_expr": "*nitems",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nitems",
                            "cxx_type": "int",
                            "cxx_var": "nitems",
                            "data_var": "SHData_nitems",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_nitems",
                            "size_var": "SHSize_nitems",
                            "stmt": "py_out_native_**_raw",
                            "value_var": "SHValue_nitems"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getRawPtrToScalar",
                    "F_name_api": "get_raw_ptr_to_scalar",
                    "PY_name_impl": "PY_getRawPtrToScalar",
                    "function_name": "getRawPtrToScalar"
                }
            },
            {
                "<FUNCTION>": "getRawPtrToScalarForce  25 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getRawPtrToScalarForce",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "raw",
                                        "intent": "out"
                                    },
                                    "name": "nitems",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getRawPtrToScalarForce(int **nitems+intent(out)+deref(raw))",
                "declgen": "void getRawPtrToScalarForce(int * * nitems +deref(raw)+intent(out))",
                "doxygen": {
                    "description": "Create a Fortran wrapper.\n"
                },
                "name": "getRawPtrToScalarForce",
                "options": {
                    "F_force_wrapper": true,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "nitems": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getRawPtrToScalarForce",
                    "F_name_api": "get_raw_ptr_to_scalar_force",
                    "function_name": "getRawPtrToScalarForce"
                }
            },
            {
                "<FUNCTION>": "getRawPtrToFixedArray  26 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getRawPtrToFixedArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "raw",
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getRawPtrToFixedArray(int **count+intent(out)+deref(raw))",
                "declgen": "void getRawPtrToFixedArray(int * * count +deref(raw)+intent(out))",
                "doxygen": {
                    "description": "Return a type(C_PTR) to an array which is always the same length.\nCalled directly via an interface in Fortran.\n# Uses +deref(raw) instead of +dimension(10) like getPtrToFixedArray.\n"
                },
                "name": "getRawPtrToFixedArray",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "deref": "raw",
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "count",
                            "ctor_expr": "*count",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "data_var": "SHData_count",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_count",
                            "size_var": "SHSize_count",
                            "stmt": "py_out_native_**_raw",
                            "value_var": "SHValue_count"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getRawPtrToFixedArray",
                    "F_name_api": "get_raw_ptr_to_fixed_array",
                    "PY_name_impl": "PY_getRawPtrToFixedArray",
                    "function_name": "getRawPtrToFixedArray"
                }
            },
            {
                "<FUNCTION>": "getRawPtrToFixedArrayForce  27 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getRawPtrToFixedArrayForce",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "raw",
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getRawPtrToFixedArrayForce(int **count+intent(out)+deref(raw))",
                "declgen": "void getRawPtrToFixedArrayForce(int * * count +deref(raw)+intent(out))",
                "doxygen": {
                    "description": "Return a type(C_PTR) to an array which is always the same length.\nCreate a Fortran wrapper.\n"
                },
                "name": "getRawPtrToFixedArrayForce",
                "options": {
                    "F_force_wrapper": true,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getRawPtrToFixedArrayForce",
                    "F_name_api": "get_raw_ptr_to_fixed_array_force",
                    "function_name": "getRawPtrToFixedArrayForce"
                }
            },
            {
                "<FUNCTION>": "getRawPtrToInt2d  28 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getRawPtrToInt2d",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getRawPtrToInt2d(int ***arg +intent(out))",
                "declgen": "void getRawPtrToInt2d(int * * * arg +intent(out))",
                "doxygen": {
                    "description": "Test multiple layers of indirection.\n"
                },
                "name": "getRawPtrToInt2d",
                "options": {
                    "wrap_python": false
                },
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getRawPtrToInt2d",
                    "F_name_api": "get_raw_ptr_to_int2d",
                    "function_name": "getRawPtrToInt2d"
                }
            },
            {
                "<FUNCTION>": "checkInt2d  29 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "checkInt2d",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int checkInt2d(int **arg +intent(in))",
                "declgen": "int checkInt2d(int * * arg +intent(in))",
                "doxygen": {
                    "description": "Check results of getRawPtrToInt2d.\n"
                },
                "name": "checkInt2d",
                "options": {
                    "wrap_python": false
                },
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "checkInt2d",
                    "F_name_api": "check_int2d",
                    "function_name": "checkInt2d"
                }
            },
            {
                "<FUNCTION>": "DimensionIn  30 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "DimensionIn",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "dimension": "10,20"
                                    },
                                    "name": "arg",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void DimensionIn(const int *arg +dimension(10,20))",
                "declgen": "void DimensionIn(const int * arg +dimension(10,20))",
                "doxygen": {
                    "description": "Test +dimension(10,20) +intent(in) together.\nThis will not use assumed-shape in the Fortran wrapper.\n"
                },
                "name": "DimensionIn",
                "options": {
                    "F_force_wrapper": true,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "10"
                                    },
                                    {
                                        "constant": "20"
                                    }
                                ],
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "DimensionIn",
                    "F_name_api": "dimension_in",
                    "function_name": "DimensionIn"
                }
            },
            {
                "<FUNCTION>": "getAllocToFixedArray  31 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getAllocToFixedArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "allocatable",
                                        "dimension": "10",
                                        "intent": "out"
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getAllocToFixedArray(int **count+intent(out)+dimension(10)+deref(allocatable))",
                "declgen": "void getAllocToFixedArray(int * * count +deref(allocatable)+dimension(10)+intent(out))",
                "doxygen": {
                    "description": "Return a Fortran pointer to an array which is always the same length.\n"
                },
                "name": "getAllocToFixedArray",
                "options": {
                    "wrap_python": false
                },
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "10"
                                    }
                                ],
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getAllocToFixedArray",
                    "F_name_api": "get_alloc_to_fixed_array",
                    "function_name": "getAllocToFixedArray"
                }
            },
            {
                "<FUNCTION>": "returnAddress1  32 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "returnAddress1",
                        "params": [
                            {
                                "declarator": {
                                    "name": "flag",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void *returnAddress1(int flag)",
                "declgen": "void * returnAddress1(int flag)",
                "name": "returnAddress1",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_type": "void",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_void_*",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "flag": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "flag",
                            "ctor_expr": "flag",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "int",
                            "cxx_var": "flag",
                            "data_var": "SHData_flag",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_flag"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnAddress1",
                    "F_name_api": "return_address1",
                    "PY_name_impl": "PY_returnAddress1",
                    "function_name": "returnAddress1"
                }
            },
            {
                "<FUNCTION>": "returnAddress2  33 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "returnAddress2",
                        "params": [
                            {
                                "declarator": {
                                    "name": "flag",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void *returnAddress2(int flag)",
                "declgen": "void * returnAddress2(int flag)",
                "name": "returnAddress2",
                "options": {
                    "F_force_wrapper": true
                },
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "flag": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_type": "void",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_void_*",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "flag": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "flag",
                            "ctor_expr": "flag",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "int",
                            "cxx_var": "flag",
                            "data_var": "SHData_flag",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_flag"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnAddress2",
                    "F_name_api": "return_address2",
                    "PY_name_impl": "PY_returnAddress2",
                    "function_name": "returnAddress2"
                }
            },
            {
                "<FUNCTION>": "fetchVoidPtr  34 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "fetchVoidPtr",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fetchVoidPtr(void **addr+intent(out))",
                "declgen": "void fetchVoidPtr(void * * addr +intent(out))",
                "name": "fetchVoidPtr",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "addr": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "addr": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "addr": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "void",
                            "c_var": "addr",
                            "ctor_expr": "addr",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "addr",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "data_var": "SHData_addr",
                            "numpy_type": null,
                            "py_var": "SHPy_addr",
                            "size_var": "SHSize_addr",
                            "stmt": "py_out_void_**",
                            "value_var": "SHValue_addr"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "fetchVoidPtr",
                    "F_name_api": "fetch_void_ptr",
                    "PY_name_impl": "PY_fetchVoidPtr",
                    "function_name": "fetchVoidPtr"
                }
            },
            {
                "<FUNCTION>": "updateVoidPtr  35 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "updateVoidPtr",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "inout"
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void updateVoidPtr(void **addr+intent(inout))",
                "declgen": "void updateVoidPtr(void * * addr +intent(inout))",
                "name": "updateVoidPtr",
                "options": {
                    "F_force_wrapper": true,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "addr": {
                            "meta": {
                                "intent": "inout"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "updateVoidPtr",
                    "F_name_api": "update_void_ptr",
                    "function_name": "updateVoidPtr"
                }
            },
            {
                "<FUNCTION>": "VoidPtrArray  36 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "VoidPtrArray",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "rank": 1
                                    },
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int VoidPtrArray(void **addr+rank(1))",
                "declgen": "int VoidPtrArray(void * * addr +rank(1))",
                "name": "VoidPtrArray",
                "options": {
                    "F_force_wrapper": true,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "addr": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "VoidPtrArray",
                    "F_name_api": "void_ptr_array",
                    "function_name": "VoidPtrArray"
                }
            },
            {
                "<FUNCTION>": "returnIntPtrToScalar  37 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "returnIntPtrToScalar",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntPtrToScalar(void)",
                "declgen": "int * returnIntPtrToScalar(void)",
                "name": "returnIntPtrToScalar",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "*SHCXX_rv",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_*_numpy",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnIntPtrToScalar",
                    "F_name_api": "return_int_ptr_to_scalar",
                    "PY_name_impl": "PY_returnIntPtrToScalar",
                    "function_name": "returnIntPtrToScalar"
                }
            },
            {
                "<FUNCTION>": "returnIntPtrToFixedArray  38 ****************************************",
                "ast": {
                    "declarator": {
                        "attrs": {
                            "dimension": "10"
                        },
                        "name": "returnIntPtrToFixedArray",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntPtrToFixedArray(void) +dimension(10)",
                "declgen": "int * returnIntPtrToFixedArray(void) +dimension(10)",
                "name": "returnIntPtrToFixedArray",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "10"
                                    }
                                ],
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "10"
                                    }
                                ],
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtpy": {
                            "array_size": "10",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "*SHCXX_rv",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "npy_dims_var": "SHD_rv",
                            "npy_intp_asgn": "SHD_rv[0] = 10;\n",
                            "npy_intp_decl": "npy_intp SHD_rv[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "rank": "1",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_*_numpy",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnIntPtrToFixedArray",
                    "F_name_api": "return_int_ptr_to_fixed_array",
                    "PY_name_impl": "PY_returnIntPtrToFixedArray",
                    "function_name": "returnIntPtrToFixedArray"
                }
            },
            {
                "<FUNCTION>": "returnIntPtrToConstScalar  39 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "returnIntPtrToConstScalar",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "const int *returnIntPtrToConstScalar(void)",
                "declgen": "const int * returnIntPtrToConstScalar(void)",
                "name": "returnIntPtrToConstScalar",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "*SHCXX_rv",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(SHCXX_rv)",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_*_numpy",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnIntPtrToConstScalar",
                    "F_name_api": "return_int_ptr_to_const_scalar",
                    "PY_name_impl": "PY_returnIntPtrToConstScalar",
                    "function_name": "returnIntPtrToConstScalar"
                }
            },
            {
                "<FUNCTION>": "returnIntPtrToFixedConstArray  40 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "dimension": "10"
                        },
                        "name": "returnIntPtrToFixedConstArray",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "const int *returnIntPtrToFixedConstArray(void) +dimension(10)",
                "declgen": "const int * returnIntPtrToFixedConstArray(void) +dimension(10)",
                "name": "returnIntPtrToFixedConstArray",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "10"
                                    }
                                ],
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "10"
                                    }
                                ],
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtpy": {
                            "array_size": "10",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "*SHCXX_rv",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(SHCXX_rv)",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "npy_dims_var": "SHD_rv",
                            "npy_intp_asgn": "SHD_rv[0] = 10;\n",
                            "npy_intp_decl": "npy_intp SHD_rv[1];\n",
                            "npy_rank": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "rank": "1",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_*_numpy",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnIntPtrToFixedConstArray",
                    "F_name_api": "return_int_ptr_to_fixed_const_array",
                    "PY_name_impl": "PY_returnIntPtrToFixedConstArray",
                    "function_name": "returnIntPtrToFixedConstArray"
                }
            },
            {
                "<FUNCTION>": "returnIntScalar  41 ****************************************",
                "ast": {
                    "declarator": {
                        "attrs": {
                            "deref": "scalar"
                        },
                        "name": "returnIntScalar",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntScalar(void) +deref(scalar)",
                "declgen": "int * returnIntScalar(void) +deref(scalar)",
                "name": "returnIntScalar",
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "deref": "scalar",
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "*SHCXX_rv",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_*_scalar",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnIntScalar",
                    "F_name_api": "return_int_scalar",
                    "PY_name_impl": "PY_returnIntScalar",
                    "function_name": "returnIntScalar"
                }
            },
            {
                "<FUNCTION>": "returnIntRaw  42 ****************************************",
                "ast": {
                    "declarator": {
                        "attrs": {
                            "deref": "raw"
                        },
                        "name": "returnIntRaw",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntRaw(void) +deref(raw)",
                "declgen": "int * returnIntRaw(void) +deref(raw)",
                "doxygen": {
                    "description": "Call directly via interface.\n"
                },
                "name": "returnIntRaw",
                "options": {
                    "wrap_python": false
                },
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnIntRaw",
                    "F_name_api": "return_int_raw",
                    "function_name": "returnIntRaw"
                }
            },
            {
                "<FUNCTION>": "returnIntRawWithArgs  43 ****************************************",
                "ast": {
                    "declarator": {
                        "attrs": {
                            "deref": "raw"
                        },
                        "name": "returnIntRawWithArgs",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntRawWithArgs(const char *name) +deref(raw)",
                "declgen": "int * returnIntRawWithArgs(const char * name) +deref(raw)",
                "doxygen": {
                    "description": "Like returnIntRaw but with another argument to force a wrapper.\nUses fc_statements f_function_native_*_raw.\n"
                },
                "name": "returnIntRawWithArgs",
                "options": {
                    "wrap_python": false
                },
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnIntRawWithArgs",
                    "F_name_api": "return_int_raw_with_args",
                    "function_name": "returnIntRawWithArgs"
                }
            },
            {
                "<FUNCTION>": "returnRawPtrToInt2d  44 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "returnRawPtrToInt2d",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            },
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int **returnRawPtrToInt2d(void)",
                "declgen": "int * * returnRawPtrToInt2d(void)",
                "doxygen": {
                    "description": "Test multiple layers of indirection.\n# getRawPtrToInt2d\n"
                },
                "name": "returnRawPtrToInt2d",
                "options": {
                    "F_force_wrapper": true,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnRawPtrToInt2d",
                    "F_name_api": "return_raw_ptr_to_int2d",
                    "function_name": "returnRawPtrToInt2d"
                }
            },
            {
                "<FUNCTION>": "returnIntAllocToFixedArray  45 ****************************************",
                "ast": {
                    "declarator": {
                        "attrs": {
                            "deref": "allocatable",
                            "dimension": "10"
                        },
                        "name": "returnIntAllocToFixedArray",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int *returnIntAllocToFixedArray(void) +dimension(10)+deref(allocatable)",
                "declgen": "int * returnIntAllocToFixedArray(void) +deref(allocatable)+dimension(10)",
                "name": "returnIntAllocToFixedArray",
                "options": {
                    "wrap_python": false
                },
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "constant": "10"
                                    }
                                ],
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnIntAllocToFixedArray",
                    "F_name_api": "return_int_alloc_to_fixed_array",
                    "function_name": "returnIntAllocToFixedArray"
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "pointers"
        ],
        "wrap": {
            "python": true
        }
    }
}