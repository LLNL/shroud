{
    "__NOTICE__": "This file is generated by Shroud 0.11.0 and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "strings.hpp"
        ],
        "functions": [
            {
                "_fmtargs": {
                    "status": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "status",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_schar_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_status",
                            "c_var": "status",
                            "f_intent": "IN",
                            "f_type": "character",
                            "f_var": "status",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_schar_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_schar_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "char status",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "status",
                            "cxx_addr": "&",
                            "cxx_decl": "char status",
                            "cxx_member": ".",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "data_var": "SHData_status",
                            "numpy_type": null,
                            "py_var": "SHPy_status",
                            "size_var": "SHSize_status",
                            "stmt0": "py_schar_scalar_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passChar",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "status",
                                "pointer": []
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char_scalar"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passChar(char status)",
                "declgen": "void passChar(char status +intent(in)+value)",
                "doxygen": {
                    "brief": "pass a single char argument as a scalar."
                },
                "fmtdict": {
                    "C_call_list": "status",
                    "C_name": "STR_pass_char",
                    "C_prototype": "char status",
                    "C_return_type": "void",
                    "F_C_call": "c_pass_char",
                    "F_C_name": "pass_char",
                    "F_arg_c_call": "status",
                    "F_arguments": "status",
                    "F_name_function": "pass_char",
                    "F_name_generic": "pass_char",
                    "F_name_impl": "pass_char",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_passChar",
                    "function_name": "passChar",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "pass_char"
                },
                "options": {}
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_schar_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "char",
                        "f_type": "character",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_schar_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_schar_scalar_result_buf",
                        "stmtc1": "c_schar_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "char",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_schar_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "returnChar",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char_scalar"
                },
                "decl": "char returnChar()",
                "declgen": "char returnChar()",
                "doxygen": {
                    "brief": "return a char argument (non-pointer)"
                },
                "fmtdict": {
                    "C_name": "STR_return_char",
                    "C_prototype": "",
                    "C_return_type": "char",
                    "F_C_call": "c_return_char_bufferify",
                    "F_C_name": "c_return_char",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "return_char",
                    "F_name_generic": "return_char",
                    "F_name_impl": "return_char",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_returnChar",
                    "cxx_rv_decl": "char SHC_rv",
                    "function_name": "returnChar",
                    "underscore_name": "return_char"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_schar_scalar_result_buf",
                            "stmt1": "c_schar_result_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_len": "NSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_schar_*_result",
                            "stmt1": "f_default",
                            "stmtc0": "c_schar_*_result_buf",
                            "stmtc1": "c_schar_result_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "returnChar",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char_scalar"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "char returnChar()",
                "declgen": "void returnChar(char * SHF_rv +intent(out)+len(NSHF_rv))",
                "doxygen": {
                    "brief": "return a char argument (non-pointer)"
                },
                "fmtdict": {
                    "C_name": "STR_return_char_bufferify",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_return_char_bufferify",
                    "cxx_rv_decl": "char SHC_rv",
                    "function_name": "returnChar",
                    "function_suffix": "_bufferify",
                    "underscore_name": "return_char"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "dest",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "dest",
                            "charlen": "40",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "data_var": "SHData_dest",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_dest",
                            "size_var": "SHSize_dest",
                            "stmt0": "py_char_*_out_charlen",
                            "stmt1": "py_char_*_out_charlen"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "src",
                            "capsule_addr": "cbase",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_in",
                            "stmt1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "src",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "data_var": "SHData_src",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_src",
                            "size_var": "SHSize_src",
                            "stmt0": "py_char_*_in",
                            "stmt1": "py_char_*_in"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passCharPtr",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "40",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "dest",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "const": true,
                            "declarator": {
                                "name": "src",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtr(char * dest+intent(out)+charlen(40), const char *src)",
                "declgen": "void passCharPtr(char * dest +charlen(40)+intent(out), const char * src +intent(in))",
                "doxygen": {
                    "brief": "strcpy like behavior",
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\nIn Python, src must not be over 40 characters, defined by charlen.\n"
                },
                "fmtdict": {
                    "C_call_list": "dest,\t src",
                    "C_name": "STR_pass_char_ptr",
                    "C_prototype": "char * dest,\t const char * src",
                    "C_return_type": "void",
                    "F_C_call": "c_pass_char_ptr_bufferify",
                    "F_C_name": "c_pass_char_ptr",
                    "F_arg_c_call": "dest,\t len(dest, kind=C_INT),\t trim(src)//C_NULL_CHAR",
                    "F_arguments": "dest,\t src",
                    "F_name_function": "pass_char_ptr",
                    "F_name_generic": "pass_char_ptr",
                    "F_name_impl": "pass_char_ptr",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_passCharPtr",
                    "function_name": "passCharPtr",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "pass_char_ptr"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_Lua": false
                }
            },
            {
                "_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "dest",
                            "c_var_len": "Ndest",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_out_buf",
                            "stmt1": "c_char_out_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_dest",
                            "c_var": "dest",
                            "c_var_len": "Ndest",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "dest",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_char_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_*_out_buf",
                            "stmtc1": "c_char_out_buf"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "src",
                            "capsule_addr": "cbase",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_src",
                            "c_var": "src",
                            "f_intent": "IN",
                            "f_type": "character(*)",
                            "f_var": "src",
                            "sh_type": "SH_TYPE_OTHER"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "passCharPtr",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "40",
                                "intent": "out",
                                "len": "Ndest"
                            },
                            "declarator": {
                                "name": "dest",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "const": true,
                            "declarator": {
                                "name": "src",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtr(char * dest+intent(out)+charlen(40), const char *src)",
                "declgen": "void passCharPtr(char * dest +charlen(40)+intent(out)+len(Ndest), const char * src +intent(in))",
                "doxygen": {
                    "brief": "strcpy like behavior",
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\nIn Python, src must not be over 40 characters, defined by charlen.\n"
                },
                "fmtdict": {
                    "C_call_list": "dest,\t src",
                    "C_name": "STR_pass_char_ptr_bufferify",
                    "C_prototype": "char * dest,\t int Ndest,\t const char * src",
                    "C_return_type": "void",
                    "F_C_name": "c_pass_char_ptr_bufferify",
                    "function_name": "passCharPtr",
                    "function_suffix": "_bufferify",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "pass_char_ptr"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_Lua": false,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "s": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "s",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "s",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_inout",
                            "stmt1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "s",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "s",
                            "data_var": "SHData_s",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_s",
                            "size_var": "SHSize_s",
                            "stmt0": "py_char_*_inout",
                            "stmt1": "py_char_*_inout"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passCharPtrInOut",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "s",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtrInOut(char * s+intent(inout))",
                "declgen": "void passCharPtrInOut(char * s +intent(inout))",
                "doxygen": {
                    "brief": "toupper",
                    "description": "Change a string in-place.\nFor Python, return a new string since strings are immutable.\n"
                },
                "fmtdict": {
                    "C_call_list": "s",
                    "C_name": "STR_pass_char_ptr_in_out",
                    "C_prototype": "char * s",
                    "C_return_type": "void",
                    "F_C_call": "c_pass_char_ptr_in_out_bufferify",
                    "F_C_name": "c_pass_char_ptr_in_out",
                    "F_arg_c_call": "s,\t len_trim(s, kind=C_INT),\t len(s, kind=C_INT)",
                    "F_arguments": "s",
                    "F_name_function": "pass_char_ptr_in_out",
                    "F_name_generic": "pass_char_ptr_in_out",
                    "F_name_impl": "pass_char_ptr_in_out",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_passCharPtrInOut",
                    "function_name": "passCharPtrInOut",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "pass_char_ptr_in_out"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "s": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "s",
                            "c_var_len": "Ns",
                            "c_var_trim": "Ls",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SHCXX_s",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_inout_buf",
                            "stmt1": "c_char_inout_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_s",
                            "c_var": "s",
                            "c_var_len": "Ns",
                            "c_var_trim": "Ls",
                            "f_intent": "INOUT",
                            "f_type": "character(*)",
                            "f_var": "s",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_char_*_inout",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_*_inout_buf",
                            "stmtc1": "c_char_inout_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "passCharPtrInOut",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout",
                                "len": "Ns",
                                "len_trim": "Ls"
                            },
                            "declarator": {
                                "name": "s",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtrInOut(char * s+intent(inout))",
                "declgen": "void passCharPtrInOut(char * s +intent(inout)+len(Ns)+len_trim(Ls))",
                "doxygen": {
                    "brief": "toupper",
                    "description": "Change a string in-place.\nFor Python, return a new string since strings are immutable.\n"
                },
                "fmtdict": {
                    "C_call_list": "SHCXX_s",
                    "C_name": "STR_pass_char_ptr_in_out_bufferify",
                    "C_prototype": "char * s,\t int Ls,\t int Ns",
                    "C_return_type": "void",
                    "F_C_name": "c_pass_char_ptr_in_out_bufferify",
                    "function_name": "passCharPtrInOut",
                    "function_suffix": "_bufferify",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "pass_char_ptr_in_out"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_get_value": "",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "capsule_addr": "cbase",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_char_*_result",
                        "stmt1": "c_char_result"
                    },
                    "fmtf": {
                        "cxx_type": "char",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_char_scalar_result_allocatable",
                        "stmt1": "f_char_result_allocatable",
                        "stmtc0": "c_char_scalar_result_buf",
                        "stmtc1": "c_char_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "char",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INTP",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_char_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getCharPtr1",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr1()",
                "declgen": "const char * getCharPtr1() +deref(allocatable)",
                "doxygen": {
                    "brief": "return a 'const char *' as character(*)"
                },
                "fmtdict": {
                    "C_name": "STR_get_char_ptr1",
                    "C_prototype": "",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_char_ptr1_bufferify",
                    "F_C_name": "c_get_char_ptr1",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_name_function": "get_char_ptr1",
                    "F_name_generic": "get_char_ptr1",
                    "F_name_impl": "get_char_ptr1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getCharPtr1",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr1",
                    "underscore_name": "get_char_ptr1"
                },
                "options": {
                    "literalinclude": true
                }
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "capsule_addr": "cbase",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_result_buf_allocatable",
                            "stmt1": "c_char_result_buf_allocatable"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_char_*_result_allocatable",
                            "stmt1": "f_char_result_allocatable",
                            "stmtc0": "c_char_*_result_buf_allocatable",
                            "stmtc1": "c_char_result_buf_allocatable"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getCharPtr1",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const char * getCharPtr1()",
                "declgen": "void getCharPtr1(const char * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))",
                "doxygen": {
                    "brief": "return a 'const char *' as character(*)"
                },
                "fmtdict": {
                    "C_name": "STR_get_char_ptr1_bufferify",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_get_char_ptr1_bufferify",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr1",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_char_ptr1"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_get_value": "",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_len": "30",
                        "capsule_addr": "cbase",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_char_*_result",
                        "stmt1": "c_char_result"
                    },
                    "fmtf": {
                        "c_var_len": "30",
                        "cxx_type": "char",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_char_scalar_result_result-as-arg",
                        "stmt1": "f_default",
                        "stmtc0": "c_char_scalar_result_buf",
                        "stmtc1": "c_char_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "char",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INTP",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_char_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result-as-arg",
                        "len": "30"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getCharPtr2",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "result-as-arg",
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr2() +len(30)",
                "declgen": "const char * getCharPtr2() +deref(result-as-arg)+len(30)",
                "doxygen": {
                    "brief": "return 'const char *' with fixed size (len=30)"
                },
                "fmtdict": {
                    "C_name": "STR_get_char_ptr2",
                    "C_prototype": "",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_char_ptr2_bufferify",
                    "F_C_name": "c_get_char_ptr2",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "get_char_ptr2",
                    "F_name_generic": "get_char_ptr2",
                    "F_name_impl": "get_char_ptr2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getCharPtr2",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr2",
                    "underscore_name": "get_char_ptr2"
                },
                "options": {
                    "literalinclude": true
                }
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_result_buf",
                            "stmt1": "c_char_result_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_len": "NSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_char_*_result",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_*_result_buf",
                            "stmtc1": "c_char_result_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "c_var_len": "30",
                        "capsule_addr": "base",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": "30"
                    },
                    "declarator": {
                        "name": "getCharPtr2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const char * getCharPtr2() +len(30)",
                "declgen": "void getCharPtr2(char * SHF_rv +intent(out)+len(NSHF_rv)) +len(30)",
                "doxygen": {
                    "brief": "return 'const char *' with fixed size (len=30)"
                },
                "fmtdict": {
                    "C_name": "STR_get_char_ptr2_bufferify",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_get_char_ptr2_bufferify",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr2",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_char_ptr2"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_get_value": "",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "capsule_addr": "cbase",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_char_*_result",
                        "stmt1": "c_char_result"
                    },
                    "fmtpy": {
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "char",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INTP",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_char_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result-as-arg"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getCharPtr3",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "result-as-arg",
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr3()",
                "declgen": "const char * getCharPtr3() +deref(result-as-arg)",
                "doxygen": {
                    "brief": "return a 'const char *' as argument"
                },
                "fmtdict": {
                    "C_name": "STR_get_char_ptr3",
                    "C_prototype": "",
                    "C_return_type": "const char *",
                    "F_C_name": "c_get_char_ptr3",
                    "F_string_result_as_arg": "output",
                    "PY_name_impl": "PY_getCharPtr3",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr3",
                    "underscore_name": "get_char_ptr3"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_fortran": false
                }
            },
            {
                "_fmtargs": {
                    "output": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "output",
                            "c_var_len": "Noutput",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_result_buf",
                            "stmt1": "c_char_result_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_output",
                            "c_var": "output",
                            "c_var_len": "Noutput",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "output",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_char_*_result",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_*_result_buf",
                            "stmtc1": "c_char_result_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getCharPtr3",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "Noutput"
                            },
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const char * getCharPtr3()",
                "declgen": "void getCharPtr3(char * output +intent(out)+len(Noutput))",
                "doxygen": {
                    "brief": "return a 'const char *' as argument"
                },
                "fmtdict": {
                    "C_name": "STR_get_char_ptr3_bufferify",
                    "C_prototype": "char * output,\t int Noutput",
                    "C_return_type": "void",
                    "F_C_name": "c_get_char_ptr3_bufferify",
                    "F_string_result_as_arg": "output",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr3",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_char_ptr3"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getCharPtr3",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "Noutput"
                            },
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const char * getCharPtr3()",
                "declgen": "void getCharPtr3(char * output +intent(out)+len(Noutput))",
                "doxygen": {
                    "brief": "return a 'const char *' as argument"
                },
                "fmtdict": {
                    "F_C_call": "c_get_char_ptr3_bufferify",
                    "F_arg_c_call": "output,\t len(output, kind=C_INT)",
                    "F_arguments": "output",
                    "F_name_function": "get_char_ptr3",
                    "F_name_generic": "get_char_ptr3",
                    "F_name_impl": "get_char_ptr3",
                    "F_string_result_as_arg": "output",
                    "F_subprogram": "subroutine",
                    "function_name": "getCharPtr3",
                    "function_suffix": "",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_char_ptr3"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtresult": {
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_string_scalar_result_allocatable",
                        "stmt1": "f_string_result_allocatable",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_scalar_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringResult",
                        "pointer": []
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string getConstStringResult()",
                "declgen": "const string getConstStringResult() +deref(allocatable)",
                "doxygen": {
                    "brief": "return an ALLOCATABLE CHARACTER from std::string"
                },
                "fmtdict": {
                    "F_C_call": "c_get_const_string_result_bufferify",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_result",
                    "F_name_generic": "get_const_string_result",
                    "F_name_impl": "get_const_string_result",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringResult",
                    "function_name": "getConstStringResult",
                    "underscore_name": "get_const_string_result"
                },
                "options": {
                    "wrap_c": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "capsule_addr": "cbase",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_scalar_result_buf_allocatable",
                            "stmt1": "c_string_scalar_result_buf_allocatable"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_*_result_allocatable",
                            "stmt1": "f_string_result_allocatable",
                            "stmtc0": "c_string_*_result_buf_allocatable",
                            "stmtc1": "c_string_result_buf_allocatable"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringResult",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string getConstStringResult()",
                "declgen": "void getConstStringResult(const string * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))",
                "doxygen": {
                    "brief": "return an ALLOCATABLE CHARACTER from std::string"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_result_bufferify",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_result_bufferify",
                    "cxx_rv_decl": "*SHCXX_rv",
                    "function_name": "getConstStringResult",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_result"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtresult": {
                    "fmtf": {
                        "c_var_len": 30,
                        "cxx_type": "std::string",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_string_scalar_result_result-as-arg",
                        "stmt1": "f_default",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_scalar_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result-as-arg",
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringLen",
                        "pointer": []
                    },
                    "params": [],
                    "return_pointer_as": "result-as-arg",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string getConstStringLen() +len=30",
                "declgen": "const string getConstStringLen() +deref(result-as-arg)+len(30)",
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                },
                "fmtdict": {
                    "F_C_call": "c_get_const_string_len_bufferify",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_len",
                    "F_name_generic": "get_const_string_len",
                    "F_name_impl": "get_const_string_len",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringLen",
                    "function_name": "getConstStringLen",
                    "underscore_name": "get_const_string_len"
                },
                "options": {
                    "wrap_c": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_scalar_result_buf",
                            "stmt1": "c_string_scalar_result_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_len": "NSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_*_result",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_*_result_buf",
                            "stmtc1": "c_string_result_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "c_var_len": 30,
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "declarator": {
                        "name": "getConstStringLen",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string getConstStringLen() +len=30",
                "declgen": "void getConstStringLen(string * SHF_rv +intent(out)+len(NSHF_rv)) +len(30)",
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_len_bufferify",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_len_bufferify",
                    "cxx_rv_decl": "const std::string SHCXX_rv",
                    "function_name": "getConstStringLen",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_len"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtresult": {
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result-as-arg"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringAsArg",
                        "pointer": []
                    },
                    "params": [],
                    "return_pointer_as": "result-as-arg",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string getConstStringAsArg()",
                "declgen": "const string getConstStringAsArg() +deref(result-as-arg)",
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                },
                "fmtdict": {
                    "F_string_result_as_arg": "output",
                    "PY_name_impl": "PY_getConstStringAsArg",
                    "function_name": "getConstStringAsArg",
                    "underscore_name": "get_const_string_as_arg"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtargs": {
                    "output": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "output",
                            "c_var_len": "Noutput",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_scalar_result_buf",
                            "stmt1": "c_string_scalar_result_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_output",
                            "c_var": "output",
                            "c_var_len": "Noutput",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "output",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_*_result",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_*_result_buf",
                            "stmtc1": "c_string_result_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringAsArg",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "Noutput"
                            },
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string getConstStringAsArg()",
                "declgen": "void getConstStringAsArg(string * output +intent(out)+len(Noutput))",
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_as_arg_bufferify",
                    "C_prototype": "char * output,\t int Noutput",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_as_arg_bufferify",
                    "F_string_result_as_arg": "output",
                    "cxx_rv_decl": "const std::string SHCXX_rv",
                    "function_name": "getConstStringAsArg",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_as_arg"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringAsArg",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "Noutput"
                            },
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string getConstStringAsArg()",
                "declgen": "void getConstStringAsArg(string * output +intent(out)+len(Noutput))",
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                },
                "fmtdict": {
                    "F_C_call": "c_get_const_string_as_arg_bufferify",
                    "F_arg_c_call": "output,\t len(output, kind=C_INT)",
                    "F_arguments": "output",
                    "F_name_function": "get_const_string_as_arg",
                    "F_name_generic": "get_const_string_as_arg",
                    "F_name_impl": "get_const_string_as_arg",
                    "F_string_result_as_arg": "output",
                    "F_subprogram": "subroutine",
                    "function_name": "getConstStringAsArg",
                    "function_suffix": "",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_const_string_as_arg"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_string_scalar_result_allocatable",
                        "stmt1": "f_string_result_allocatable",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_scalar_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringAlloc",
                        "pointer": []
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string getConstStringAlloc()",
                "declgen": "const std::string getConstStringAlloc() +deref(allocatable)",
                "fmtdict": {
                    "F_C_call": "c_get_const_string_alloc_bufferify",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_alloc",
                    "F_name_generic": "get_const_string_alloc",
                    "F_name_impl": "get_const_string_alloc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringAlloc",
                    "function_name": "getConstStringAlloc",
                    "underscore_name": "get_const_string_alloc"
                },
                "options": {
                    "wrap_c": false
                }
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "capsule_addr": "cbase",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_scalar_result_buf_allocatable",
                            "stmt1": "c_string_scalar_result_buf_allocatable"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_*_result_allocatable",
                            "stmt1": "f_string_result_allocatable",
                            "stmtc0": "c_string_*_result_buf_allocatable",
                            "stmtc1": "c_string_result_buf_allocatable"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringAlloc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string getConstStringAlloc()",
                "declgen": "void getConstStringAlloc(const std::string * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))",
                "fmtdict": {
                    "C_name": "STR_get_const_string_alloc_bufferify",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_alloc_bufferify",
                    "cxx_rv_decl": "*SHCXX_rv",
                    "function_name": "getConstStringAlloc",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_alloc"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "capsule_addr": "cbase",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_string_&_result",
                        "stmt1": "c_string_result"
                    },
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_string_scalar_result_allocatable",
                        "stmt1": "f_string_result_allocatable",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_scalar_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefPure",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefPure()",
                "declgen": "const string & getConstStringRefPure() +deref(allocatable)",
                "doxygen": {
                    "brief": "return a 'const string&' as ALLOCATABLE character"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_ref_pure",
                    "C_prototype": "",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ref_pure_bufferify",
                    "F_C_name": "c_get_const_string_ref_pure",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ref_pure",
                    "F_name_generic": "get_const_string_ref_pure",
                    "F_name_impl": "get_const_string_ref_pure",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringRefPure",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefPure",
                    "underscore_name": "get_const_string_ref_pure"
                },
                "options": {
                    "literalinclude": true
                }
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "capsule_addr": "cbase",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_result_buf_allocatable",
                            "stmt1": "c_string_result_buf_allocatable"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_result_allocatable",
                            "stmt1": "f_string_result_allocatable",
                            "stmtc0": "c_string_&_result_buf_allocatable",
                            "stmtc1": "c_string_result_buf_allocatable"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringRefPure",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string& getConstStringRefPure()",
                "declgen": "void getConstStringRefPure(const string & SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))",
                "doxygen": {
                    "brief": "return a 'const string&' as ALLOCATABLE character"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_ref_pure_bufferify",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ref_pure_bufferify",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefPure",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ref_pure"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "c_var_len": 30,
                        "capsule_addr": "cbase",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_string_&_result",
                        "stmt1": "c_string_result"
                    },
                    "fmtf": {
                        "c_var_len": 30,
                        "cxx_type": "std::string",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_string_scalar_result_result-as-arg",
                        "stmt1": "f_default",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_scalar_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result-as-arg",
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefLen",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "result-as-arg",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefLen() +len=30",
                "declgen": "const string & getConstStringRefLen() +deref(result-as-arg)+len(30)",
                "doxygen": {
                    "brief": "return 'const string&' with fixed size (len=30)",
                    "description": "Since +len(30) is provided, the result of the function\nwill be copied directly into memory provided by Fortran.\nThe function will not be ALLOCATABLE.\n"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_ref_len",
                    "C_prototype": "",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ref_len_bufferify",
                    "F_C_name": "c_get_const_string_ref_len",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ref_len",
                    "F_name_generic": "get_const_string_ref_len",
                    "F_name_impl": "get_const_string_ref_len",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringRefLen",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefLen",
                    "underscore_name": "get_const_string_ref_len"
                },
                "options": {}
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_result_buf",
                            "stmt1": "c_string_result_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_len": "NSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_result",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_result_buf",
                            "stmtc1": "c_string_result_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "c_var_len": 30,
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "declarator": {
                        "name": "getConstStringRefLen",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string& getConstStringRefLen() +len=30",
                "declgen": "void getConstStringRefLen(string & SHF_rv +intent(out)+len(NSHF_rv)) +len(30)",
                "doxygen": {
                    "brief": "return 'const string&' with fixed size (len=30)",
                    "description": "Since +len(30) is provided, the result of the function\nwill be copied directly into memory provided by Fortran.\nThe function will not be ALLOCATABLE.\n"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_ref_len_bufferify",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ref_len_bufferify",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefLen",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ref_len"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "capsule_addr": "cbase",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_string_&_result",
                        "stmt1": "c_string_result"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result-as-arg"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefAsArg",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "result-as-arg",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefAsArg()",
                "declgen": "const string & getConstStringRefAsArg() +deref(result-as-arg)",
                "doxygen": {
                    "brief": "return a 'const string&' as argument",
                    "description": "Pass an additional argument which wil be used as the return value.\nThe length of the output variable is declared by the caller.\n"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_ref_as_arg",
                    "C_prototype": "",
                    "C_return_type": "const char *",
                    "F_C_name": "c_get_const_string_ref_as_arg",
                    "F_string_result_as_arg": "output",
                    "PY_name_impl": "PY_getConstStringRefAsArg",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefAsArg",
                    "underscore_name": "get_const_string_ref_as_arg"
                },
                "options": {
                    "wrap_fortran": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtargs": {
                    "output": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "output",
                            "c_var_len": "Noutput",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_result_buf",
                            "stmt1": "c_string_result_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_output",
                            "c_var": "output",
                            "c_var_len": "Noutput",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "output",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_result",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_result_buf",
                            "stmtc1": "c_string_result_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringRefAsArg",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "Noutput"
                            },
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string& getConstStringRefAsArg()",
                "declgen": "void getConstStringRefAsArg(string & output +intent(out)+len(Noutput))",
                "doxygen": {
                    "brief": "return a 'const string&' as argument",
                    "description": "Pass an additional argument which wil be used as the return value.\nThe length of the output variable is declared by the caller.\n"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_ref_as_arg_bufferify",
                    "C_prototype": "char * output,\t int Noutput",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ref_as_arg_bufferify",
                    "F_string_result_as_arg": "output",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefAsArg",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ref_as_arg"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringRefAsArg",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "Noutput"
                            },
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string& getConstStringRefAsArg()",
                "declgen": "void getConstStringRefAsArg(string & output +intent(out)+len(Noutput))",
                "doxygen": {
                    "brief": "return a 'const string&' as argument",
                    "description": "Pass an additional argument which wil be used as the return value.\nThe length of the output variable is declared by the caller.\n"
                },
                "fmtdict": {
                    "F_C_call": "c_get_const_string_ref_as_arg_bufferify",
                    "F_arg_c_call": "output,\t len(output, kind=C_INT)",
                    "F_arguments": "output",
                    "F_name_function": "get_const_string_ref_as_arg",
                    "F_name_generic": "get_const_string_ref_as_arg",
                    "F_name_impl": "get_const_string_ref_as_arg",
                    "F_string_result_as_arg": "output",
                    "F_subprogram": "subroutine",
                    "function_name": "getConstStringRefAsArg",
                    "function_suffix": "",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_const_string_ref_as_arg"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "c_var_len": 30,
                        "capsule_addr": "cbase",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_string_&_result",
                        "stmt1": "c_string_result"
                    },
                    "fmtf": {
                        "c_var_len": 30,
                        "cxx_type": "std::string",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_string_scalar_result_result-as-arg",
                        "stmt1": "f_default",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_scalar_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result-as-arg",
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefLenEmpty",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "result-as-arg",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefLenEmpty() +len=30",
                "declgen": "const string & getConstStringRefLenEmpty() +deref(result-as-arg)+len(30)",
                "doxygen": {
                    "brief": "Test returning empty string reference"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_ref_len_empty",
                    "C_prototype": "",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ref_len_empty_bufferify",
                    "F_C_name": "c_get_const_string_ref_len_empty",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ref_len_empty",
                    "F_name_generic": "get_const_string_ref_len_empty",
                    "F_name_impl": "get_const_string_ref_len_empty",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringRefLenEmpty",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefLenEmpty",
                    "underscore_name": "get_const_string_ref_len_empty"
                },
                "options": {}
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_result_buf",
                            "stmt1": "c_string_result_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_len": "NSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_result",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_result_buf",
                            "stmtc1": "c_string_result_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "c_var_len": 30,
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "declarator": {
                        "name": "getConstStringRefLenEmpty",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string& getConstStringRefLenEmpty() +len=30",
                "declgen": "void getConstStringRefLenEmpty(string & SHF_rv +intent(out)+len(NSHF_rv)) +len(30)",
                "doxygen": {
                    "brief": "Test returning empty string reference"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_ref_len_empty_bufferify",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ref_len_empty_bufferify",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefLenEmpty",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ref_len_empty"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "capsule_addr": "cbase",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_string_&_result",
                        "stmt1": "c_string_result"
                    },
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_string_scalar_result_allocatable",
                        "stmt1": "f_string_result_allocatable",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_scalar_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefAlloc",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& getConstStringRefAlloc()",
                "declgen": "const std::string & getConstStringRefAlloc() +deref(allocatable)",
                "fmtdict": {
                    "C_name": "STR_get_const_string_ref_alloc",
                    "C_prototype": "",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ref_alloc_bufferify",
                    "F_C_name": "c_get_const_string_ref_alloc",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ref_alloc",
                    "F_name_generic": "get_const_string_ref_alloc",
                    "F_name_impl": "get_const_string_ref_alloc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringRefAlloc",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefAlloc",
                    "underscore_name": "get_const_string_ref_alloc"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "capsule_addr": "cbase",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_result_buf_allocatable",
                            "stmt1": "c_string_result_buf_allocatable"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_result_allocatable",
                            "stmt1": "f_string_result_allocatable",
                            "stmtc0": "c_string_&_result_buf_allocatable",
                            "stmtc1": "c_string_result_buf_allocatable"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringRefAlloc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string& getConstStringRefAlloc()",
                "declgen": "void getConstStringRefAlloc(const std::string & SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))",
                "fmtdict": {
                    "C_name": "STR_get_const_string_ref_alloc_bufferify",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ref_alloc_bufferify",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefAlloc",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ref_alloc"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv->c_str()",
                        "c_var": "SHC_rv",
                        "c_var_len": 30,
                        "capsule_addr": "cbase",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_string_*_result",
                        "stmt1": "c_string_result"
                    },
                    "fmtf": {
                        "c_var_len": 30,
                        "cxx_type": "std::string",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_string_scalar_result_result-as-arg",
                        "stmt1": "f_default",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_scalar_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result-as-arg",
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrLen",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "result-as-arg",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string * getConstStringPtrLen() +len=30",
                "declgen": "const string * getConstStringPtrLen() +deref(result-as-arg)+len(30)",
                "doxygen": {
                    "brief": "return a 'const string *' as character(30)",
                    "description": "It is the caller's responsibility to release the string\ncreated by the C++ library.\nThis is accomplished with C_finalize_buf which is possible\nbecause +len(30) so the contents are copied before returning.\n"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_ptr_len",
                    "C_prototype": "",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ptr_len_bufferify",
                    "F_C_name": "c_get_const_string_ptr_len",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ptr_len",
                    "F_name_generic": "get_const_string_ptr_len",
                    "F_name_impl": "get_const_string_ptr_len",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringPtrLen",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrLen",
                    "underscore_name": "get_const_string_ptr_len"
                },
                "fstatements": {
                    "c_buf": {
                        "final": [
                            "delete {cxx_var};"
                        ]
                    }
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_*_result_buf",
                            "stmt1": "c_string_result_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_len": "NSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_*_result",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_*_result_buf",
                            "stmtc1": "c_string_result_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "c_var_len": 30,
                        "capsule_addr": "base",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "declarator": {
                        "name": "getConstStringPtrLen",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string * getConstStringPtrLen() +len=30",
                "declgen": "void getConstStringPtrLen(string * SHF_rv +intent(out)+len(NSHF_rv)) +len(30)",
                "doxygen": {
                    "brief": "return a 'const string *' as character(30)",
                    "description": "It is the caller's responsibility to release the string\ncreated by the C++ library.\nThis is accomplished with C_finalize_buf which is possible\nbecause +len(30) so the contents are copied before returning.\n"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_ptr_len_bufferify",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ptr_len_bufferify",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrLen",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ptr_len"
                },
                "fstatements": {
                    "c_buf": {
                        "final": [
                            "delete {cxx_var};"
                        ]
                    }
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv->c_str()",
                        "c_var": "SHC_rv",
                        "capsule_addr": "cbase",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_string_*_result",
                        "stmt1": "c_string_result"
                    },
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_string_scalar_result_allocatable",
                        "stmt1": "f_string_result_allocatable",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_scalar_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable",
                        "owner": "library"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrAlloc",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrAlloc() +owner(library)",
                "declgen": "const std::string * getConstStringPtrAlloc() +deref(allocatable)+owner(library)",
                "fmtdict": {
                    "C_name": "STR_get_const_string_ptr_alloc",
                    "C_prototype": "",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ptr_alloc_bufferify",
                    "F_C_name": "c_get_const_string_ptr_alloc",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ptr_alloc",
                    "F_name_generic": "get_const_string_ptr_alloc",
                    "F_name_impl": "get_const_string_ptr_alloc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringPtrAlloc",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrAlloc",
                    "underscore_name": "get_const_string_ptr_alloc"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "capsule_addr": "cbase",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_*_result_buf_allocatable",
                            "stmt1": "c_string_result_buf_allocatable"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_*_result_allocatable",
                            "stmt1": "f_string_result_allocatable",
                            "stmtc0": "c_string_*_result_buf_allocatable",
                            "stmtc1": "c_string_result_buf_allocatable"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringPtrAlloc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out",
                                "owner": "library"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string * getConstStringPtrAlloc() +owner(library)",
                "declgen": "void getConstStringPtrAlloc(const std::string * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out)+owner(library))",
                "fmtdict": {
                    "C_name": "STR_get_const_string_ptr_alloc_bufferify",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ptr_alloc_bufferify",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrAlloc",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ptr_alloc"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv->c_str()",
                        "c_var": "SHC_rv",
                        "capsule_addr": "cbase",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "2",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_string_*_result",
                        "stmt1": "c_string_result"
                    },
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_string_scalar_result_allocatable",
                        "stmt1": "f_string_result_allocatable",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_scalar_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable",
                        "owner": "caller"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrOwnsAlloc",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrOwnsAlloc() +owner(caller)",
                "declgen": "const std::string * getConstStringPtrOwnsAlloc() +deref(allocatable)+owner(caller)",
                "doxygen": {
                    "description": "It is the caller's responsibility to release the string\ncreated by the C++ library.\nThis is accomplished +owner(caller) which sets idtor.\nThe contents are copied by Fortran so they must outlast\nthe return from the C wrapper.\n"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_ptr_owns_alloc",
                    "C_prototype": "",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ptr_owns_alloc_bufferify",
                    "F_C_name": "c_get_const_string_ptr_owns_alloc",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ptr_owns_alloc",
                    "F_name_generic": "get_const_string_ptr_owns_alloc",
                    "F_name_impl": "get_const_string_ptr_owns_alloc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringPtrOwnsAlloc",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrOwnsAlloc",
                    "underscore_name": "get_const_string_ptr_owns_alloc"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "capsule_addr": "cbase",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "2",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_*_result_buf_allocatable",
                            "stmt1": "c_string_result_buf_allocatable"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_*_result_allocatable",
                            "stmt1": "f_string_result_allocatable",
                            "stmtc0": "c_string_*_result_buf_allocatable",
                            "stmtc1": "c_string_result_buf_allocatable"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringPtrOwnsAlloc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out",
                                "owner": "caller"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string * getConstStringPtrOwnsAlloc() +owner(caller)",
                "declgen": "void getConstStringPtrOwnsAlloc(const std::string * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out)+owner(caller))",
                "doxygen": {
                    "description": "It is the caller's responsibility to release the string\ncreated by the C++ library.\nThis is accomplished +owner(caller) which sets idtor.\nThe contents are copied by Fortran so they must outlast\nthe return from the C wrapper.\n"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_ptr_owns_alloc_bufferify",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ptr_owns_alloc_bufferify",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrOwnsAlloc",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ptr_owns_alloc"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv->c_str()",
                        "c_var": "SHC_rv",
                        "capsule_addr": "cbase",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "3",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_string_*_result",
                        "stmt1": "c_string_result"
                    },
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_string_scalar_result_allocatable",
                        "stmt1": "f_string_result_allocatable",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_scalar_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable",
                        "free_pattern": "C_string_free",
                        "owner": "caller"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrOwnsAllocPattern",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrOwnsAllocPattern() +owner(caller)",
                "declgen": "const std::string * getConstStringPtrOwnsAllocPattern() +deref(allocatable)+free_pattern(C_string_free)+owner(caller)",
                "doxygen": {
                    "description": "Similar to getConstStringPtrOwnsAlloc, but uses pattern to release memory.\n"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_ptr_owns_alloc_pattern",
                    "C_prototype": "",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ptr_owns_alloc_pattern_bufferify",
                    "F_C_name": "c_get_const_string_ptr_owns_alloc_pattern",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ptr_owns_alloc_pattern",
                    "F_name_generic": "get_const_string_ptr_owns_alloc_pattern",
                    "F_name_impl": "get_const_string_ptr_owns_alloc_pattern",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringPtrOwnsAllocPattern",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrOwnsAllocPattern",
                    "underscore_name": "get_const_string_ptr_owns_alloc_pattern"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "capsule_addr": "cbase",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "3",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_*_result_buf_allocatable",
                            "stmt1": "c_string_result_buf_allocatable"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_*_result_allocatable",
                            "stmt1": "f_string_result_allocatable",
                            "stmtc0": "c_string_*_result_buf_allocatable",
                            "stmtc1": "c_string_result_buf_allocatable"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {},
                    "declarator": {
                        "name": "getConstStringPtrOwnsAllocPattern",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "free_pattern": "C_string_free",
                                "intent": "out",
                                "owner": "caller"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string * getConstStringPtrOwnsAllocPattern() +owner(caller)",
                "declgen": "void getConstStringPtrOwnsAllocPattern(const std::string * SHF_rv +context(DSHF_rv)+deref(allocatable)+free_pattern(C_string_free)+intent(out)+owner(caller))",
                "doxygen": {
                    "description": "Similar to getConstStringPtrOwnsAlloc, but uses pattern to release memory.\n"
                },
                "fmtdict": {
                    "C_name": "STR_get_const_string_ptr_owns_alloc_pattern_bufferify",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ptr_owns_alloc_pattern_bufferify",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrOwnsAllocPattern",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ptr_owns_alloc_pattern"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "capsule_addr": "cbase",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_in",
                            "stmt1": "c_string_in"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_string_&_in",
                            "stmt1": "py_string_in"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "acceptStringConstReference",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringConstReference(const std::string & arg1)",
                "declgen": "void acceptStringConstReference(const std::string & arg1 +intent(in))",
                "doxygen": {
                    "brief": "Accept a const string reference",
                    "description": "Save contents of arg1.\narg1 is assumed to be intent(IN) since it is const\nWill copy in.\n"
                },
                "fmtdict": {
                    "C_call_list": "SHCXX_arg1",
                    "C_name": "STR_accept_string_const_reference",
                    "C_prototype": "const char * arg1",
                    "C_return_type": "void",
                    "F_C_call": "c_accept_string_const_reference_bufferify",
                    "F_C_name": "c_accept_string_const_reference",
                    "F_arg_c_call": "arg1,\t len_trim(arg1, kind=C_INT)",
                    "F_arguments": "arg1",
                    "F_name_function": "accept_string_const_reference",
                    "F_name_generic": "accept_string_const_reference",
                    "F_name_impl": "accept_string_const_reference",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptStringConstReference",
                    "function_name": "acceptStringConstReference",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "accept_string_const_reference"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "c_var_trim": "Larg1",
                            "capsule_addr": "cbase",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_in_buf",
                            "stmt1": "c_string_in_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "c_var_trim": "Larg1",
                            "f_intent": "IN",
                            "f_type": "character(*)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_in_buf",
                            "stmtc1": "c_string_in_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptStringConstReference",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "len_trim": "Larg1"
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringConstReference(const std::string & arg1)",
                "declgen": "void acceptStringConstReference(const std::string & arg1 +intent(in)+len_trim(Larg1))",
                "doxygen": {
                    "brief": "Accept a const string reference",
                    "description": "Save contents of arg1.\narg1 is assumed to be intent(IN) since it is const\nWill copy in.\n"
                },
                "fmtdict": {
                    "C_call_list": "SHCXX_arg1",
                    "C_name": "STR_accept_string_const_reference_bufferify",
                    "C_prototype": "const char * arg1,\t int Larg1",
                    "C_return_type": "void",
                    "F_C_name": "c_accept_string_const_reference_bufferify",
                    "function_name": "acceptStringConstReference",
                    "function_suffix": "_bufferify",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "accept_string_const_reference"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_out",
                            "stmt1": "c_string_out"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "char arg1",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "std::string arg1",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_string_&_out",
                            "stmt1": "py_string_out"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "acceptStringReferenceOut",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringReferenceOut(std::string & arg1+intent(out))",
                "declgen": "void acceptStringReferenceOut(std::string & arg1 +intent(out))",
                "doxygen": {
                    "brief": "Accept a string reference",
                    "description": "Set out to a constant string.\narg1 is intent(OUT)\nMust copy out.\n"
                },
                "fmtdict": {
                    "C_call_list": "SHCXX_arg1",
                    "C_name": "STR_accept_string_reference_out",
                    "C_prototype": "char * arg1",
                    "C_return_type": "void",
                    "F_C_call": "c_accept_string_reference_out_bufferify",
                    "F_C_name": "c_accept_string_reference_out",
                    "F_arg_c_call": "arg1,\t len(arg1, kind=C_INT)",
                    "F_arguments": "arg1",
                    "F_name_function": "accept_string_reference_out",
                    "F_name_generic": "accept_string_reference_out",
                    "F_name_impl": "accept_string_reference_out",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptStringReferenceOut",
                    "function_name": "acceptStringReferenceOut",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "accept_string_reference_out"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "c_var_len": "Narg1",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_out_buf",
                            "stmt1": "c_string_out_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "c_var_len": "Narg1",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_out_buf",
                            "stmtc1": "c_string_out_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptStringReferenceOut",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "len": "Narg1"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringReferenceOut(std::string & arg1+intent(out))",
                "declgen": "void acceptStringReferenceOut(std::string & arg1 +intent(out)+len(Narg1))",
                "doxygen": {
                    "brief": "Accept a string reference",
                    "description": "Set out to a constant string.\narg1 is intent(OUT)\nMust copy out.\n"
                },
                "fmtdict": {
                    "C_call_list": "SHCXX_arg1",
                    "C_name": "STR_accept_string_reference_out_bufferify",
                    "C_prototype": "char * arg1,\t int Narg1",
                    "C_return_type": "void",
                    "F_C_name": "c_accept_string_reference_out_bufferify",
                    "function_name": "acceptStringReferenceOut",
                    "function_suffix": "_bufferify",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "accept_string_reference_out"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_inout",
                            "stmt1": "c_string_inout"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_string_&_inout",
                            "stmt1": "py_string_inout"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "acceptStringReference",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringReference(std::string & arg1)",
                "declgen": "void acceptStringReference(std::string & arg1 +intent(inout))",
                "doxygen": {
                    "brief": "Accept a string reference",
                    "description": "Append \"dog\" to the end of arg1.\narg1 is assumed to be intent(INOUT)\nMust copy in and copy out.\n"
                },
                "fmtdict": {
                    "C_call_list": "SHCXX_arg1",
                    "C_name": "STR_accept_string_reference",
                    "C_prototype": "char * arg1",
                    "C_return_type": "void",
                    "F_C_call": "c_accept_string_reference_bufferify",
                    "F_C_name": "c_accept_string_reference",
                    "F_arg_c_call": "arg1,\t len_trim(arg1, kind=C_INT),\t len(arg1, kind=C_INT)",
                    "F_arguments": "arg1",
                    "F_name_function": "accept_string_reference",
                    "F_name_generic": "accept_string_reference",
                    "F_name_impl": "accept_string_reference",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptStringReference",
                    "function_name": "acceptStringReference",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "accept_string_reference"
                },
                "options": {
                    "literalinclude": true
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "c_var_len": "Narg1",
                            "c_var_trim": "Larg1",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_&_inout_buf",
                            "stmt1": "c_string_inout_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "c_var_len": "Narg1",
                            "c_var_trim": "Larg1",
                            "f_intent": "INOUT",
                            "f_type": "character(*)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_inout",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_inout_buf",
                            "stmtc1": "c_string_inout_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptStringReference",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout",
                                "len": "Narg1",
                                "len_trim": "Larg1"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringReference(std::string & arg1)",
                "declgen": "void acceptStringReference(std::string & arg1 +intent(inout)+len(Narg1)+len_trim(Larg1))",
                "doxygen": {
                    "brief": "Accept a string reference",
                    "description": "Append \"dog\" to the end of arg1.\narg1 is assumed to be intent(INOUT)\nMust copy in and copy out.\n"
                },
                "fmtdict": {
                    "C_call_list": "SHCXX_arg1",
                    "C_name": "STR_accept_string_reference_bufferify",
                    "C_prototype": "char * arg1,\t int Larg1,\t int Narg1",
                    "C_return_type": "void",
                    "F_C_name": "c_accept_string_reference_bufferify",
                    "function_name": "acceptStringReference",
                    "function_suffix": "_bufferify",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "accept_string_reference"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_*_inout",
                            "stmt1": "c_string_inout"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_string_*_inout",
                            "stmt1": "py_string_inout"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "acceptStringPointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringPointer(std::string * arg1)",
                "declgen": "void acceptStringPointer(std::string * arg1 +intent(inout))",
                "doxygen": {
                    "brief": "Accept a string pointer"
                },
                "fmtdict": {
                    "C_call_list": "&SHCXX_arg1",
                    "C_name": "STR_accept_string_pointer",
                    "C_prototype": "char * arg1",
                    "C_return_type": "void",
                    "F_C_call": "c_accept_string_pointer_bufferify",
                    "F_C_name": "c_accept_string_pointer",
                    "F_arg_c_call": "arg1,\t len_trim(arg1, kind=C_INT),\t len(arg1, kind=C_INT)",
                    "F_arguments": "arg1",
                    "F_name_function": "accept_string_pointer",
                    "F_name_generic": "accept_string_pointer",
                    "F_name_impl": "accept_string_pointer",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptStringPointer",
                    "function_name": "acceptStringPointer",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "accept_string_pointer"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "c_var_len": "Narg1",
                            "c_var_trim": "Larg1",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_string_*_inout_buf",
                            "stmt1": "c_string_inout_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "c_var_len": "Narg1",
                            "c_var_trim": "Larg1",
                            "f_intent": "INOUT",
                            "f_type": "character(*)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_*_inout",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_*_inout_buf",
                            "stmtc1": "c_string_inout_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptStringPointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout",
                                "len": "Narg1",
                                "len_trim": "Larg1"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringPointer(std::string * arg1)",
                "declgen": "void acceptStringPointer(std::string * arg1 +intent(inout)+len(Narg1)+len_trim(Larg1))",
                "doxygen": {
                    "brief": "Accept a string pointer"
                },
                "fmtdict": {
                    "C_call_list": "&SHCXX_arg1",
                    "C_name": "STR_accept_string_pointer_bufferify",
                    "C_prototype": "char * arg1,\t int Larg1,\t int Narg1",
                    "C_return_type": "void",
                    "F_C_name": "c_accept_string_pointer_bufferify",
                    "function_name": "acceptStringPointer",
                    "function_suffix": "_bufferify",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "accept_string_pointer"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "char arg1",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "std::string arg1",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_string_&_out",
                            "stmt1": "py_string_out"
                        }
                    },
                    "arg2": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "char arg2",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "std::string arg2",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": null,
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_string_&_out",
                            "stmt1": "py_string_out"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "returnStrings",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void returnStrings(std::string & arg1 +intent(out), std::string & arg2 +intent(out))",
                "declgen": "void returnStrings(std::string & arg1 +intent(out), std::string & arg2 +intent(out))",
                "doxygen": {
                    "brief": "Test Python returning multiple std::string arguments."
                },
                "fmtdict": {
                    "PY_name_impl": "PY_returnStrings",
                    "function_name": "returnStrings",
                    "underscore_name": "return_strings"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "returnMany",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "char returnMany(int *arg1 +intent(out))",
                "declgen": "char returnMany(int * arg1 +intent(out))",
                "doxygen": {
                    "description": "Test Py_BuildValue with multiple values.\n"
                },
                "fmtdict": {
                    "function_name": "returnMany",
                    "underscore_name": "return_many"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "c_var_trim": "AAlen",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_name",
                            "c_var": "name",
                            "c_var_trim": "AAlen",
                            "f_intent": "IN",
                            "f_type": "character(*)",
                            "f_var": "name",
                            "sh_type": "SH_TYPE_OTHER"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "data_var": "SHData_name",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt0": "py_char_*_in",
                            "stmt1": "py_char_*_in"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "explicit1",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "len_trim": "AAlen"
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void explicit1(char * name+len_trim(AAlen)+intent(in))",
                "declgen": "void explicit1(char * name +intent(in)+len_trim(AAlen))",
                "fmtdict": {
                    "C_bufferify_suffix": "_BUFFER",
                    "C_call_list": "name",
                    "C_name": "STR_explicit1",
                    "C_prototype": "char * name",
                    "C_return_type": "void",
                    "F_C_call": "c_explicit1",
                    "F_C_name": "c_explicit1",
                    "F_arg_c_call": "trim(name)//C_NULL_CHAR",
                    "F_arguments": "name",
                    "F_name_function": "explicit1",
                    "F_name_generic": "explicit1",
                    "F_name_impl": "explicit1",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_explicit1",
                    "function_name": "explicit1",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "explicit1"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "c_var_len": "AAtrim",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_out",
                            "stmt1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "explicit2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "len": "AAtrim"
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void explicit2(char * name+len(AAtrim)+intent(out))",
                "declgen": "void explicit2(char * name +intent(out)+len(AAtrim))",
                "fmtdict": {
                    "C_call_list": "name",
                    "C_name": "STR_explicit2",
                    "C_prototype": "char * name",
                    "C_return_type": "void",
                    "F_C_call": "c_explicit2_bufferify",
                    "F_C_name": "c_explicit2",
                    "F_arg_c_call": "name,\t len(name, kind=C_INT)",
                    "F_arguments": "name",
                    "F_name_function": "explicit2",
                    "F_name_generic": "explicit2",
                    "F_name_impl": "explicit2",
                    "F_subprogram": "subroutine",
                    "function_name": "explicit2",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "explicit2"
                },
                "options": {
                    "wrap_Lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "c_var_len": "AAtrim",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_out_buf",
                            "stmt1": "c_char_out_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_name",
                            "c_var": "name",
                            "c_var_len": "AAtrim",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "name",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_char_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_*_out_buf",
                            "stmtc1": "c_char_out_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "explicit2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "len": "AAtrim"
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void explicit2(char * name+len(AAtrim)+intent(out))",
                "declgen": "void explicit2(char * name +intent(out)+len(AAtrim))",
                "fmtdict": {
                    "C_call_list": "name",
                    "C_name": "STR_explicit2_bufferify",
                    "C_prototype": "char * name,\t int AAtrim",
                    "C_return_type": "void",
                    "F_C_name": "c_explicit2_bufferify",
                    "function_name": "explicit2",
                    "function_suffix": "_bufferify",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "explicit2"
                },
                "options": {
                    "wrap_Lua": false,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "status": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "status",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_schar_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_status",
                            "c_var": "status",
                            "f_intent": "IN",
                            "f_type": "character",
                            "f_var": "status",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_schar_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_schar_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "char status",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "status",
                            "cxx_addr": "&",
                            "cxx_decl": "char status",
                            "cxx_member": ".",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "data_var": "SHData_status",
                            "numpy_type": null,
                            "py_var": "SHPy_status",
                            "size_var": "SHSize_status",
                            "stmt0": "py_schar_scalar_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "CpassChar",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "status",
                                "pointer": []
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char_scalar"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void CpassChar(char status)",
                "declgen": "void CpassChar(char status +intent(in)+value)",
                "doxygen": {
                    "brief": "pass a single char argument as a scalar, extern \"C\""
                },
                "fmtdict": {
                    "C_call_list": "status",
                    "C_name": "CpassChar",
                    "C_prototype": "char status",
                    "C_return_type": "void",
                    "F_C_call": "c_cpass_char",
                    "F_C_name": "cpass_char",
                    "F_arg_c_call": "status",
                    "F_arguments": "status",
                    "F_name_function": "cpass_char",
                    "F_name_generic": "cpass_char",
                    "F_name_impl": "cpass_char",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_CpassChar",
                    "function_name": "CpassChar",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "cpass_char"
                },
                "options": {
                    "C_extern_C": true
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_schar_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "char",
                        "f_type": "character",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_schar_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_schar_scalar_result_buf",
                        "stmtc1": "c_schar_result_buf"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "char",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_schar_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "CreturnChar",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char_scalar"
                },
                "decl": "char CreturnChar()",
                "declgen": "char CreturnChar()",
                "doxygen": {
                    "brief": "return a char argument (non-pointer), extern \"C\""
                },
                "fmtdict": {
                    "C_name": "CreturnChar",
                    "C_prototype": "",
                    "C_return_type": "char",
                    "F_C_call": "c_creturn_char_bufferify",
                    "F_C_name": "c_creturn_char",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "creturn_char",
                    "F_name_generic": "creturn_char",
                    "F_name_impl": "creturn_char",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_CreturnChar",
                    "cxx_rv_decl": "char SHC_rv",
                    "function_name": "CreturnChar",
                    "underscore_name": "creturn_char"
                },
                "options": {
                    "C_extern_C": true
                }
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "capsule_addr": "base",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_schar_scalar_result_buf",
                            "stmt1": "c_schar_result_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_len": "NSHF_rv",
                            "f_intent": "OUT",
                            "f_type": "character",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_schar_*_result",
                            "stmt1": "f_default",
                            "stmtc0": "c_schar_*_result_buf",
                            "stmtc1": "c_schar_result_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "capsule_addr": "base",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_unknown_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "CreturnChar",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char_scalar"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "char CreturnChar()",
                "declgen": "void CreturnChar(char * SHF_rv +intent(out)+len(NSHF_rv))",
                "doxygen": {
                    "brief": "return a char argument (non-pointer), extern \"C\""
                },
                "fmtdict": {
                    "C_name": "STR_creturn_char_bufferify",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_type": "void",
                    "F_C_name": "c_creturn_char_bufferify",
                    "cxx_rv_decl": "char SHC_rv",
                    "function_name": "CreturnChar",
                    "function_suffix": "_bufferify",
                    "underscore_name": "creturn_char"
                },
                "options": {
                    "C_extern_C": true,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "dest",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_out",
                            "stmt1": "c_default"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "src",
                            "capsule_addr": "cbase",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_in",
                            "stmt1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "CpassCharPtr",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "dest",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "const": true,
                            "declarator": {
                                "name": "src",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void CpassCharPtr(char * dest+intent(out), const char *src)",
                "declgen": "void CpassCharPtr(char * dest +intent(out), const char * src +intent(in))",
                "doxygen": {
                    "brief": "strcpy like behavior",
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\nextern \"C\"\n"
                },
                "fmtdict": {
                    "C_call_list": "dest,\t src",
                    "C_name": "CpassCharPtr",
                    "C_prototype": "char * dest,\t const char * src",
                    "C_return_type": "void",
                    "F_C_call": "c_cpass_char_ptr_bufferify",
                    "F_C_name": "c_cpass_char_ptr",
                    "F_arg_c_call": "dest,\t len(dest, kind=C_INT),\t trim(src)//C_NULL_CHAR",
                    "F_arguments": "dest,\t src",
                    "F_name_function": "cpass_char_ptr",
                    "F_name_generic": "cpass_char_ptr",
                    "F_name_impl": "cpass_char_ptr",
                    "F_subprogram": "subroutine",
                    "function_name": "CpassCharPtr",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "cpass_char_ptr"
                },
                "options": {
                    "C_extern_C": true,
                    "wrap_Lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "dest",
                            "c_var_len": "Ndest",
                            "capsule_addr": "base",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_out_buf",
                            "stmt1": "c_char_out_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_dest",
                            "c_var": "dest",
                            "c_var_len": "Ndest",
                            "f_intent": "OUT",
                            "f_type": "character(*)",
                            "f_var": "dest",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_char_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_*_out_buf",
                            "stmtc1": "c_char_out_buf"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "src",
                            "capsule_addr": "cbase",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_*_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_src",
                            "c_var": "src",
                            "f_intent": "IN",
                            "f_type": "character(*)",
                            "f_var": "src",
                            "sh_type": "SH_TYPE_OTHER"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "CpassCharPtr",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "len": "Ndest"
                            },
                            "declarator": {
                                "name": "dest",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "const": true,
                            "declarator": {
                                "name": "src",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void CpassCharPtr(char * dest+intent(out), const char *src)",
                "declgen": "void CpassCharPtr(char * dest +intent(out)+len(Ndest), const char * src +intent(in))",
                "doxygen": {
                    "brief": "strcpy like behavior",
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\nextern \"C\"\n"
                },
                "fmtdict": {
                    "C_call_list": "dest,\t src",
                    "C_name": "STR_cpass_char_ptr_bufferify",
                    "C_prototype": "char * dest,\t int Ndest,\t const char * src",
                    "C_return_type": "void",
                    "F_C_name": "c_cpass_char_ptr_bufferify",
                    "function_name": "CpassCharPtr",
                    "function_suffix": "_bufferify",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "cpass_char_ptr"
                },
                "options": {
                    "C_extern_C": true,
                    "wrap_Lua": false,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "strings"
        ]
    }
}