{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2024, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "strings.hpp",
            "shroud/features.h"
        ],
        "fortran_header": [
            "shroud/features.h"
        ],
        "functions": [
            {
                "<FUNCTION>": "init_test  0 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "init_test",
                        "params": [],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void init_test(void)",
                "declgen": "void init_test(void)",
                "name": "init_test",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "init_test(\t)",
                            "C_name": "STR_init_test",
                            "C_prototype": "void",
                            "C_return_type": "void",
                            "F_C_name": "c_init_test",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "init_test(\t)",
                            "C_name": "STR_init_test",
                            "C_prototype": "void",
                            "C_return_type": "void",
                            "F_C_arguments": "",
                            "F_C_call": "c_init_test",
                            "F_C_name": "init_test",
                            "F_C_subprogram": "subroutine",
                            "F_arguments": "",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "init_test",
                    "F_name_api": "init_test",
                    "F_name_function": "init_test",
                    "F_name_generic": "init_test",
                    "F_name_impl": "init_test",
                    "PY_name_impl": "PY_init_test",
                    "function_name": "init_test"
                }
            },
            {
                "<FUNCTION>": "passChar  1 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "passChar",
                        "params": [
                            {
                                "declarator": {
                                    "name": "status",
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passChar(char status)",
                "declgen": "void passChar(char status)",
                "doxygen": {
                    "brief": "pass a single char argument as a scalar."
                },
                "name": "passChar",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "status": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "status": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_char_scalar"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "status": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "status": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "passChar(\tstatus)",
                            "C_call_list": "status",
                            "C_name": "STR_passChar",
                            "C_prototype": "char status",
                            "C_return_type": "void",
                            "F_C_name": "c_pass_char",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "passChar(\tstatus)",
                            "C_call_list": "status",
                            "C_name": "STR_passChar",
                            "C_prototype": "char status",
                            "C_return_type": "void",
                            "F_C_arguments": "status",
                            "F_C_call": "c_pass_char",
                            "F_C_name": "pass_char",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "status",
                            "F_arguments": "status",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "status": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "char",
                            "c_var": "status",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&status",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "char",
                            "c_var": "status",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&status",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "status",
                            "fc_var": "status",
                            "i_var": "status",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "status",
                            "ctor_expr": "status",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&status",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "data_var": "SHData_status",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_status",
                            "pytmp_var": "SHTPy_status",
                            "size_var": "SHSize_status",
                            "stmt": "py_in_char_scalar",
                            "value_var": "SHValue_status"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passChar",
                    "F_name_api": "pass_char",
                    "F_name_function": "pass_char",
                    "F_name_generic": "pass_char",
                    "F_name_impl": "pass_char",
                    "PY_name_impl": "PY_passChar",
                    "function_name": "passChar"
                }
            },
            {
                "<FUNCTION>": "passCharForce  2 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "passCharForce",
                        "params": [
                            {
                                "declarator": {
                                    "name": "status",
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharForce(char status)",
                "declgen": "void passCharForce(char status)",
                "doxygen": {
                    "description": "By default no Fortran wrapper is created.\nForce one so it can be tested.\n"
                },
                "name": "passCharForce",
                "options": {
                    "F_force_wrapper": true,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "status": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "status": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_char_scalar"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "status": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "passCharForce(\tstatus)",
                            "C_call_list": "status",
                            "C_name": "STR_passCharForce",
                            "C_prototype": "char status",
                            "C_return_type": "void",
                            "F_C_name": "c_pass_char_force",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "passCharForce(\tstatus)",
                            "C_call_list": "status",
                            "C_name": "STR_passCharForce",
                            "C_prototype": "char status",
                            "C_return_type": "void",
                            "F_C_arguments": "status",
                            "F_C_call": "c_pass_char_force",
                            "F_C_name": "c_pass_char_force",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "status",
                            "F_arguments": "status",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "status": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "char",
                            "c_var": "status",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&status",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "char",
                            "c_var": "status",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&status",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "status",
                            "fc_var": "status",
                            "i_var": "status",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passCharForce",
                    "F_name_api": "pass_char_force",
                    "F_name_function": "pass_char_force",
                    "F_name_generic": "pass_char_force",
                    "F_name_impl": "pass_char_force",
                    "function_name": "passCharForce"
                }
            },
            {
                "<FUNCTION>": "returnChar  3 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "returnChar",
                        "params": [],
                        "typemap_name": "char"
                    },
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "char returnChar()",
                "declgen": "char returnChar(void)",
                "doxygen": {
                    "brief": "return a char argument (non-pointer)"
                },
                "name": "returnChar",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_char_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_char_scalar"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "returnChar(\t)",
                            "C_name": "STR_returnChar",
                            "C_prototype": "char *SHC_rv",
                            "C_return_type": "void",
                            "F_C_name": "c_return_char",
                            "c_const": "",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_rv_decl": "char SHC_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_char_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "returnChar(\t)",
                            "C_name": "STR_returnChar",
                            "C_prototype": "char *SHC_rv",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv",
                            "F_C_call": "c_return_char",
                            "F_C_name": "c_return_char",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_rv_decl": "char SHC_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_char_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_char_scalar",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnChar",
                    "F_name_api": "return_char",
                    "F_name_function": "return_char",
                    "F_name_generic": "return_char",
                    "F_name_impl": "return_char",
                    "PY_name_impl": "PY_returnChar",
                    "function_name": "returnChar"
                }
            },
            {
                "<FUNCTION>": "passCharPtr  4 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "passCharPtr",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "charlen": "40",
                                        "intent": "out"
                                    },
                                    "name": "dest",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            },
                            {
                                "const": true,
                                "declarator": {
                                    "name": "src",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtr(char * dest+intent(out)+charlen(40), const char *src)",
                "declgen": "void passCharPtr(char * dest +charlen(40)+intent(out), const char * src)",
                "doxygen": {
                    "brief": "strcpy like behavior",
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\nIn Python, src must not be over 40 characters, defined by charlen.\n"
                },
                "helpers": {
                    "c": [
                        "char_blank_fill"
                    ]
                },
                "name": "passCharPtr",
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "dest": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_char_*"
                        },
                        "src": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "dest": {
                            "meta": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "stmt": "f_out_char_*_buf"
                        },
                        "src": {
                            "meta": {
                                "ftrim_char_in": true,
                                "intent": "in"
                            },
                            "stmt": "f_in_char_*"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "dest": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "src": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "dest": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "src": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "passCharPtr(\tdest,\t src)",
                            "C_call_list": "dest,\t src",
                            "C_name": "STR_passCharPtr",
                            "C_prototype": "char * dest,\t const char * src",
                            "C_return_type": "void",
                            "F_C_arguments": "dest,\t src",
                            "F_C_name": "c_pass_char_ptr",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "passCharPtr(\tdest,\t src)",
                            "C_call_list": "dest,\t src",
                            "C_name": "STR_passCharPtr_bufferify",
                            "C_prototype": "char *dest,\t int SHT_dest_len,\t const char * src",
                            "C_return_type": "void",
                            "F_C_arguments": "dest,\t SHT_dest_len,\t src",
                            "F_C_call": "c_pass_char_ptr_bufferify",
                            "F_C_name": "c_pass_char_ptr_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "dest,\t SHT_dest_len,\t trim(src)//C_NULL_CHAR",
                            "F_arguments": "dest,\t src",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "dest": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "dest",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "dest",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "dest",
                            "i_var": "dest",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_blank_fill": "ShroudCharBlankFill",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "dest",
                            "c_var_len": "SHT_dest_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "dest",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "dest",
                            "f_var_len": "SHT_dest_len",
                            "fc_var": "dest",
                            "i_var": "dest",
                            "i_var_len": "SHT_dest_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_char_*_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "dest",
                            "charlen": "40",
                            "ctor_expr": "dest",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "dest",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "data_var": "SHData_dest",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_dest",
                            "size_var": "SHSize_dest",
                            "stmt": "py_out_char_*_charlen",
                            "value_var": "SHValue_dest"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "src",
                            "i_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "src",
                            "fc_var": "src",
                            "i_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_*"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "src",
                            "ctor_expr": "*src",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "data_var": "SHData_src",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_src",
                            "size_var": "SHSize_src",
                            "stmt": "py_in_char_*",
                            "value_var": "SHValue_src"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passCharPtr",
                    "F_name_api": "pass_char_ptr",
                    "F_name_function": "pass_char_ptr",
                    "F_name_generic": "pass_char_ptr",
                    "F_name_impl": "pass_char_ptr",
                    "PY_name_impl": "PY_passCharPtr",
                    "function_name": "passCharPtr"
                }
            },
            {
                "<FUNCTION>": "passCharPtrInOut  5 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "passCharPtrInOut",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "inout"
                                    },
                                    "name": "s",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtrInOut(char * s+intent(inout))",
                "declgen": "void passCharPtrInOut(char * s +intent(inout))",
                "doxygen": {
                    "brief": "toupper",
                    "description": "Change a string in-place.\nFor Python, return a new string since strings are immutable.\n"
                },
                "helpers": {
                    "c": [
                        "char_alloc",
                        "char_copy",
                        "char_free"
                    ]
                },
                "name": "passCharPtrInOut",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "s": {
                            "meta": {
                                "intent": "inout"
                            },
                            "stmt": "c_inout_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "s": {
                            "meta": {
                                "api": "buf",
                                "intent": "inout"
                            },
                            "stmt": "f_inout_char_*_buf"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "s": {
                            "meta": {
                                "intent": "inout"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "s": {
                            "meta": {
                                "intent": "inout"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "passCharPtrInOut(\ts)",
                            "C_call_list": "s",
                            "C_name": "STR_passCharPtrInOut",
                            "C_prototype": "char * s",
                            "C_return_type": "void",
                            "F_C_arguments": "s",
                            "F_C_name": "c_pass_char_ptr_in_out",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "passCharPtrInOut(\tSHT_s_str)",
                            "C_call_list": "SHT_s_str",
                            "C_name": "STR_passCharPtrInOut_bufferify",
                            "C_prototype": "char *s,\t int SHT_s_len",
                            "C_return_type": "void",
                            "F_C_arguments": "s,\t SHT_s_len",
                            "F_C_call": "c_pass_char_ptr_in_out_bufferify",
                            "F_C_name": "c_pass_char_ptr_in_out_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "s,\t SHT_s_len",
                            "F_arguments": "s",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "s": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "s",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "s",
                            "cxx_type": "char",
                            "cxx_var": "s",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "s",
                            "i_var": "s",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_inout_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_alloc": "ShroudCharAlloc",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_helper_char_free": "ShroudCharFree",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "s",
                            "c_var_len": "SHT_s_len",
                            "c_var_str": "SHT_s_str",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "s",
                            "cxx_type": "char",
                            "cxx_var": "s",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "s",
                            "f_var_len": "SHT_s_len",
                            "fc_var": "s",
                            "i_var": "s",
                            "i_var_len": "SHT_s_len",
                            "i_var_str": "SHT_s_str",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_inout_char_*_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "s",
                            "ctor_expr": "s",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "s",
                            "cxx_type": "char",
                            "cxx_var": "s",
                            "data_var": "SHData_s",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_s",
                            "size_var": "SHSize_s",
                            "stmt": "py_inout_char_*",
                            "value_var": "SHValue_s"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "passCharPtrInOut",
                    "F_name_api": "pass_char_ptr_in_out",
                    "F_name_function": "pass_char_ptr_in_out",
                    "F_name_generic": "pass_char_ptr_in_out",
                    "F_name_impl": "pass_char_ptr_in_out",
                    "PY_name_impl": "PY_passCharPtrInOut",
                    "function_name": "passCharPtrInOut"
                }
            },
            {
                "<FUNCTION>": "getCharPtr1  6 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getCharPtr1",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "char"
                    },
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr1()",
                "declgen": "const char * getCharPtr1(void)",
                "doxygen": {
                    "brief": "return a 'const char *' as character(*)"
                },
                "helpers": {
                    "c": [
                        "array_context",
                        "copy_string",
                        "type_defines"
                    ],
                    "f": [
                        "array_context",
                        "copy_string"
                    ]
                },
                "name": "getCharPtr1",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "cdesc",
                                "deref": "allocatable",
                                "intent": "function"
                            },
                            "stmt": "f_function_char_*_cdesc_allocatable"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getCharPtr1(\t)",
                            "C_name": "STR_getCharPtr1",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_char_ptr1",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "const ",
                            "c_get_value": "",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(SHC_rv)",
                            "cxx_rv_decl": "const char * SHC_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_char_*"
                        },
                        "fmtf": {
                            "C_call_function": "getCharPtr1(\t)",
                            "C_name": "STR_getCharPtr1_bufferify",
                            "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv_cdesc",
                            "F_C_call": "c_get_char_ptr1_bufferify",
                            "F_C_name": "c_get_char_ptr1_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv_cdesc",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_helper_array_context": "STR_SHROUD_array",
                            "c_helper_copy_string": "STR_ShroudCopyString",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_cdesc": "SHT_rv_cdesc",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(SHC_rv)",
                            "cxx_rv_decl": "const char * SHC_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "f_c_suffix": "_bufferify",
                            "f_helper_array_context": "STR_SHROUD_array",
                            "f_helper_copy_string": "STR_SHROUD_copy_string",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_cdesc": "SHT_rv_cdesc",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_cdesc": "SHT_rv_cdesc",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_char_*_cdesc_allocatable"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(SHCXX_rv)",
                            "cxx_type": "char",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_char_*",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getCharPtr1",
                    "F_name_api": "get_char_ptr1",
                    "F_name_function": "get_char_ptr1",
                    "F_name_generic": "get_char_ptr1",
                    "F_name_impl": "get_char_ptr1",
                    "PY_name_impl": "PY_getCharPtr1",
                    "function_name": "getCharPtr1"
                }
            },
            {
                "<FUNCTION>": "getCharPtr2  7 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "len": "30"
                        },
                        "name": "getCharPtr2",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "char"
                    },
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr2() +len(30)",
                "declgen": "const char * getCharPtr2(void) +len(30)",
                "doxygen": {
                    "brief": "return 'const char *' with fixed size (len=30)"
                },
                "helpers": {
                    "c": [
                        "char_copy"
                    ]
                },
                "name": "getCharPtr2",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "buf",
                                "deref": "copy",
                                "intent": "function"
                            },
                            "stmt": "f_function_char_*_buf_copy"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getCharPtr2(\t)",
                            "C_name": "STR_getCharPtr2",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_char_ptr2",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_char_len": "30",
                            "c_const": "const ",
                            "c_get_value": "",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(SHC_rv)",
                            "cxx_rv_decl": "const char * SHC_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_char_*"
                        },
                        "fmtf": {
                            "C_call_function": "getCharPtr2(\t)",
                            "C_name": "STR_getCharPtr2_bufferify",
                            "C_prototype": "char *SHC_rv,\t int SHT_rv_len",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv,\t SHT_rv_len",
                            "F_C_call": "c_get_char_ptr2_bufferify",
                            "F_C_name": "c_get_char_ptr2_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv,\t SHT_rv_len",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_char_len": "30",
                            "c_const": "const ",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_len": "SHT_rv_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const char * SHCXX_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_len": "SHT_rv_len",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_len": "SHT_rv_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_char_*_buf_copy"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(SHCXX_rv)",
                            "cxx_type": "char",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_char_*",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getCharPtr2",
                    "F_name_api": "get_char_ptr2",
                    "F_name_function": "get_char_ptr2",
                    "F_name_generic": "get_char_ptr2",
                    "F_name_impl": "get_char_ptr2",
                    "PY_name_impl": "PY_getCharPtr2",
                    "function_name": "getCharPtr2"
                }
            },
            {
                "<FUNCTION>": "getCharPtr3  8 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getCharPtr3",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "char"
                    },
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr3()",
                "declgen": "const char * getCharPtr3(void)",
                "doxygen": {
                    "brief": "return a 'const char *' as argument"
                },
                "helpers": {
                    "c": [
                        "char_copy"
                    ]
                },
                "name": "getCharPtr3",
                "options": {
                    "literalinclude": true
                },
                "user_fmt": {
                    "F_string_result_as_arg": "output"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "buf",
                                "deref": "arg",
                                "intent": "function"
                            },
                            "stmt": "f_function_char_*_buf_arg"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getCharPtr3(\t)",
                            "C_name": "STR_getCharPtr3",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_char_ptr3",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "const ",
                            "c_get_value": "",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(SHC_rv)",
                            "cxx_rv_decl": "const char * SHC_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_char_*"
                        },
                        "fmtf": {
                            "C_call_function": "getCharPtr3(\t)",
                            "C_name": "STR_getCharPtr3_bufferify",
                            "C_prototype": "char *output,\t int noutput",
                            "C_return_type": "void",
                            "F_C_arguments": "output,\t noutput",
                            "F_C_call": "c_get_char_ptr3_bufferify",
                            "F_C_name": "c_get_char_ptr3_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "output,\t noutput",
                            "F_arguments": "output",
                            "F_subprogram": "subroutine",
                            "c_const": "const ",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_type": "char",
                            "c_var": "output",
                            "c_var_len": "noutput",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const char * SHCXX_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "output",
                            "f_var_len": "noutput",
                            "i_var": "output",
                            "i_var_len": "noutput",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_char_*_buf_arg"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(SHCXX_rv)",
                            "cxx_type": "char",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_char_*",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getCharPtr3",
                    "F_name_api": "get_char_ptr3",
                    "F_name_function": "get_char_ptr3",
                    "F_name_generic": "get_char_ptr3",
                    "F_name_impl": "get_char_ptr3",
                    "F_string_result_as_arg": "output",
                    "PY_name_impl": "PY_getCharPtr3",
                    "function_name": "getCharPtr3"
                }
            },
            {
                "<FUNCTION>": "getCharPtr4  9 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "deref": "raw"
                        },
                        "name": "getCharPtr4",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "char"
                    },
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr4() +deref(raw)",
                "declgen": "const char * getCharPtr4(void) +deref(raw)",
                "doxygen": {
                    "brief": "return a 'const char *' as type(C_PTR)"
                },
                "name": "getCharPtr4",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "deref": "raw",
                                "intent": "function"
                            },
                            "stmt": "f_function_char_*_raw"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getCharPtr4(\t)",
                            "C_name": "STR_getCharPtr4",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_name": "c_get_char_ptr4",
                            "c_const": "const ",
                            "c_get_value": "",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(SHC_rv)",
                            "cxx_rv_decl": "const char * SHC_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_char_*"
                        },
                        "fmtf": {
                            "C_call_function": "getCharPtr4(\t)",
                            "C_name": "STR_getCharPtr4",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_call": "c_get_char_ptr4",
                            "F_C_name": "get_char_ptr4",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_get_value": "",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(SHC_rv)",
                            "cxx_rv_decl": "const char * SHC_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_char_*_raw"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getCharPtr4",
                    "F_name_api": "get_char_ptr4",
                    "F_name_function": "get_char_ptr4",
                    "F_name_generic": "get_char_ptr4",
                    "F_name_impl": "get_char_ptr4",
                    "function_name": "getCharPtr4"
                }
            },
            {
                "<FUNCTION>": "getCharPtr5  10 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "deref": "pointer"
                        },
                        "name": "getCharPtr5",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "char"
                    },
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr5() +deref(pointer)",
                "declgen": "const char * getCharPtr5(void) +deref(pointer)",
                "doxygen": {
                    "brief": "return a 'const char *' as character(:) pointer"
                },
                "helpers": {
                    "c": [
                        "array_context",
                        "type_defines"
                    ],
                    "f": [
                        "array_context",
                        "pointer_string"
                    ]
                },
                "name": "getCharPtr5",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "cdesc",
                                "deref": "pointer",
                                "intent": "function"
                            },
                            "stmt": "f_function_char_*_cdesc_pointer"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getCharPtr5(\t)",
                            "C_name": "STR_getCharPtr5",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_char_ptr5",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "const ",
                            "c_get_value": "",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(SHC_rv)",
                            "cxx_rv_decl": "const char * SHC_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_char_*"
                        },
                        "fmtf": {
                            "C_call_function": "getCharPtr5(\t)",
                            "C_name": "STR_getCharPtr5_bufferify",
                            "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv_cdesc",
                            "F_C_call": "c_get_char_ptr5_bufferify",
                            "F_C_name": "c_get_char_ptr5_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv_cdesc",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_helper_array_context": "STR_SHROUD_array",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_cdesc": "SHT_rv_cdesc",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(SHC_rv)",
                            "cxx_rv_decl": "const char * SHC_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "f_c_suffix": "_bufferify",
                            "f_helper_array_context": "STR_SHROUD_array",
                            "f_helper_pointer_string": "STR_SHROUD_pointer_string",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_cdesc": "SHT_rv_cdesc",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_cdesc": "SHT_rv_cdesc",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_char_*_cdesc_pointer"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getCharPtr5",
                    "F_name_api": "get_char_ptr5",
                    "F_name_function": "get_char_ptr5",
                    "F_name_generic": "get_char_ptr5",
                    "F_name_impl": "get_char_ptr5",
                    "function_name": "getCharPtr5"
                }
            },
            {
                "<FUNCTION>": "getConstStringResult  11 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringResult",
                        "params": [],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string getConstStringResult()",
                "declgen": "const string getConstStringResult(void)",
                "doxygen": {
                    "brief": "return an ALLOCATABLE CHARACTER from std::string"
                },
                "helpers": {
                    "c": [
                        "array_context",
                        "string_to_cdesc",
                        "copy_string"
                    ],
                    "f": [
                        "array_context",
                        "copy_string",
                        "capsule_dtor"
                    ]
                },
                "name": "getConstStringResult",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "cdesc",
                                "deref": "allocatable",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_scalar_cdesc_allocatable"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getConstStringResult(\t)",
                            "C_name": "STR_getConstStringResult",
                            "C_prototype": "void",
                            "C_return_type": "const char",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_const_string_result",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "const ",
                            "c_get_value": "",
                            "c_rv_decl": "const char SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv.c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "getConstStringResult(\t)",
                            "C_name": "STR_getConstStringResult_bufferify",
                            "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc,\t STR_SHROUD_capsule_data *SHT_rv_capsule",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_C_call": "c_get_const_string_result_bufferify",
                            "F_C_name": "c_get_const_string_result_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_helper_array_context": "STR_SHROUD_array",
                            "c_helper_copy_string": "STR_ShroudCopyString",
                            "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_capsule": "SHT_rv_capsule",
                            "c_var_cdesc": "SHT_rv_cdesc",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "*SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_helper_array_context": "STR_SHROUD_array",
                            "f_helper_capsule_dtor": "STR_SHROUD_capsule_dtor",
                            "f_helper_copy_string": "STR_SHROUD_copy_string",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_capsule": "SHT_rv_capsule",
                            "f_var_cdesc": "SHT_rv_cdesc",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_capsule": "SHT_rv_capsule",
                            "i_var_cdesc": "SHT_rv_cdesc",
                            "idtor": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_scalar_cdesc_allocatable"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_scalar",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getConstStringResult",
                    "F_name_api": "get_const_string_result",
                    "F_name_function": "get_const_string_result",
                    "F_name_generic": "get_const_string_result",
                    "F_name_impl": "get_const_string_result",
                    "PY_name_impl": "PY_getConstStringResult",
                    "function_name": "getConstStringResult"
                }
            },
            {
                "<FUNCTION>": "getConstStringLen  12 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "len": 30
                        },
                        "name": "getConstStringLen",
                        "params": [],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string getConstStringLen() +len=30",
                "declgen": "const string getConstStringLen(void) +len(30)",
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                },
                "helpers": {
                    "c": [
                        "char_copy"
                    ]
                },
                "name": "getConstStringLen",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "buf",
                                "deref": "copy",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_scalar_buf_copy"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getConstStringLen(\t)",
                            "C_name": "STR_getConstStringLen",
                            "C_prototype": "void",
                            "C_return_type": "const char",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_const_string_len",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_char_len": 30,
                            "c_const": "const ",
                            "c_get_value": "",
                            "c_rv_decl": "const char SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv.c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "getConstStringLen(\t)",
                            "C_name": "STR_getConstStringLen_bufferify",
                            "C_prototype": "char *SHC_rv,\t int SHT_rv_len",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv,\t SHT_rv_len",
                            "F_C_call": "c_get_const_string_len_bufferify",
                            "F_C_name": "c_get_const_string_len_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv,\t SHT_rv_len",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_char_len": 30,
                            "c_const": "const ",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_len": "SHT_rv_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_len": "SHT_rv_len",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_len": "SHT_rv_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_scalar_buf_copy"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_scalar",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getConstStringLen",
                    "F_name_api": "get_const_string_len",
                    "F_name_function": "get_const_string_len",
                    "F_name_generic": "get_const_string_len",
                    "F_name_impl": "get_const_string_len",
                    "PY_name_impl": "PY_getConstStringLen",
                    "function_name": "getConstStringLen"
                }
            },
            {
                "<FUNCTION>": "getConstStringAsArg  13 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringAsArg",
                        "params": [],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string getConstStringAsArg()",
                "declgen": "const string getConstStringAsArg(void)",
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                },
                "helpers": {
                    "c": [
                        "char_copy"
                    ]
                },
                "name": "getConstStringAsArg",
                "options": {},
                "user_fmt": {
                    "F_string_result_as_arg": "output"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "buf",
                                "deref": "arg",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_scalar_buf_arg"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getConstStringAsArg(\t)",
                            "C_name": "STR_getConstStringAsArg",
                            "C_prototype": "void",
                            "C_return_type": "const char",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_const_string_as_arg",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "const ",
                            "c_get_value": "",
                            "c_rv_decl": "const char SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv.c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "getConstStringAsArg(\t)",
                            "C_name": "STR_getConstStringAsArg_bufferify",
                            "C_prototype": "char *output,\t int noutput",
                            "C_return_type": "void",
                            "F_C_arguments": "output,\t noutput",
                            "F_C_call": "c_get_const_string_as_arg_bufferify",
                            "F_C_name": "c_get_const_string_as_arg_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "output,\t noutput",
                            "F_arguments": "output",
                            "F_subprogram": "subroutine",
                            "c_const": "const ",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_type": "char",
                            "c_var": "output",
                            "c_var_len": "noutput",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "output",
                            "f_var_len": "noutput",
                            "i_var": "output",
                            "i_var_len": "noutput",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_scalar_buf_arg"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_scalar",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getConstStringAsArg",
                    "F_name_api": "get_const_string_as_arg",
                    "F_name_function": "get_const_string_as_arg",
                    "F_name_generic": "get_const_string_as_arg",
                    "F_name_impl": "get_const_string_as_arg",
                    "F_string_result_as_arg": "output",
                    "PY_name_impl": "PY_getConstStringAsArg",
                    "function_name": "getConstStringAsArg"
                }
            },
            {
                "<FUNCTION>": "getConstStringAlloc  14 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringAlloc",
                        "params": [],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string getConstStringAlloc()",
                "declgen": "const std::string getConstStringAlloc(void)",
                "helpers": {
                    "c": [
                        "array_context",
                        "string_to_cdesc",
                        "copy_string"
                    ],
                    "f": [
                        "array_context",
                        "copy_string",
                        "capsule_dtor"
                    ]
                },
                "name": "getConstStringAlloc",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "cdesc",
                                "deref": "allocatable",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_scalar_cdesc_allocatable"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getConstStringAlloc(\t)",
                            "C_name": "STR_getConstStringAlloc",
                            "C_prototype": "void",
                            "C_return_type": "const char",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_const_string_alloc",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "const ",
                            "c_get_value": "",
                            "c_rv_decl": "const char SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv.c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "getConstStringAlloc(\t)",
                            "C_name": "STR_getConstStringAlloc_bufferify",
                            "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc,\t STR_SHROUD_capsule_data *SHT_rv_capsule",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_C_call": "c_get_const_string_alloc_bufferify",
                            "F_C_name": "c_get_const_string_alloc_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_helper_array_context": "STR_SHROUD_array",
                            "c_helper_copy_string": "STR_ShroudCopyString",
                            "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_capsule": "SHT_rv_capsule",
                            "c_var_cdesc": "SHT_rv_cdesc",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "*SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_helper_array_context": "STR_SHROUD_array",
                            "f_helper_capsule_dtor": "STR_SHROUD_capsule_dtor",
                            "f_helper_copy_string": "STR_SHROUD_copy_string",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_capsule": "SHT_rv_capsule",
                            "f_var_cdesc": "SHT_rv_cdesc",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_capsule": "SHT_rv_capsule",
                            "i_var_cdesc": "SHT_rv_cdesc",
                            "idtor": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_scalar_cdesc_allocatable"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_scalar",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getConstStringAlloc",
                    "F_name_api": "get_const_string_alloc",
                    "F_name_function": "get_const_string_alloc",
                    "F_name_generic": "get_const_string_alloc",
                    "F_name_impl": "get_const_string_alloc",
                    "PY_name_impl": "PY_getConstStringAlloc",
                    "function_name": "getConstStringAlloc"
                }
            },
            {
                "<FUNCTION>": "getConstStringRefPure  15 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefPure",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefPure()",
                "declgen": "const string & getConstStringRefPure(void)",
                "doxygen": {
                    "brief": "return a 'const string&' as ALLOCATABLE character"
                },
                "helpers": {
                    "c": [
                        "array_context",
                        "string_to_cdesc",
                        "copy_string"
                    ],
                    "f": [
                        "array_context",
                        "copy_string",
                        "capsule_dtor"
                    ]
                },
                "name": "getConstStringRefPure",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_&"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "cdesc",
                                "deref": "allocatable",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_&_cdesc_allocatable"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getConstStringRefPure(\t)",
                            "C_name": "STR_getConstStringRefPure",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_const_string_ref_pure",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "const ",
                            "c_rv_decl": "const char * SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv.c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_&"
                        },
                        "fmtf": {
                            "C_call_function": "getConstStringRefPure(\t)",
                            "C_name": "STR_getConstStringRefPure_bufferify",
                            "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc,\t STR_SHROUD_capsule_data *SHT_rv_capsule",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_C_call": "c_get_const_string_ref_pure_bufferify",
                            "F_C_name": "c_get_const_string_ref_pure_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_helper_array_context": "STR_SHROUD_array",
                            "c_helper_copy_string": "STR_ShroudCopyString",
                            "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_capsule": "SHT_rv_capsule",
                            "c_var_cdesc": "SHT_rv_cdesc",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_helper_array_context": "STR_SHROUD_array",
                            "f_helper_capsule_dtor": "STR_SHROUD_capsule_dtor",
                            "f_helper_copy_string": "STR_SHROUD_copy_string",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_capsule": "SHT_rv_capsule",
                            "f_var_cdesc": "SHT_rv_cdesc",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_capsule": "SHT_rv_capsule",
                            "i_var_cdesc": "SHT_rv_cdesc",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_&_cdesc_allocatable"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_&",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getConstStringRefPure",
                    "F_name_api": "get_const_string_ref_pure",
                    "F_name_function": "get_const_string_ref_pure",
                    "F_name_generic": "get_const_string_ref_pure",
                    "F_name_impl": "get_const_string_ref_pure",
                    "PY_name_impl": "PY_getConstStringRefPure",
                    "function_name": "getConstStringRefPure"
                }
            },
            {
                "<FUNCTION>": "getConstStringRefLen  16 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "len": 30
                        },
                        "name": "getConstStringRefLen",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefLen() +len=30",
                "declgen": "const string & getConstStringRefLen(void) +len(30)",
                "doxygen": {
                    "brief": "return 'const string&' with fixed size (len=30)",
                    "description": "Since +len(30) is provided, the result of the function\nwill be copied directly into memory provided by Fortran.\nThe function will not be ALLOCATABLE.\n"
                },
                "helpers": {
                    "c": [
                        "char_copy"
                    ]
                },
                "name": "getConstStringRefLen",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_&"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "buf",
                                "deref": "copy",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_&_buf_copy"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getConstStringRefLen(\t)",
                            "C_name": "STR_getConstStringRefLen",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_const_string_ref_len",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_char_len": 30,
                            "c_const": "const ",
                            "c_rv_decl": "const char * SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv.c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_&"
                        },
                        "fmtf": {
                            "C_call_function": "getConstStringRefLen(\t)",
                            "C_name": "STR_getConstStringRefLen_bufferify",
                            "C_prototype": "char *SHC_rv,\t int SHT_rv_len",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv,\t SHT_rv_len",
                            "F_C_call": "c_get_const_string_ref_len_bufferify",
                            "F_C_name": "c_get_const_string_ref_len_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv,\t SHT_rv_len",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_char_len": 30,
                            "c_const": "const ",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_len": "SHT_rv_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_len": "SHT_rv_len",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_len": "SHT_rv_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_&_buf_copy"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_&",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getConstStringRefLen",
                    "F_name_api": "get_const_string_ref_len",
                    "F_name_function": "get_const_string_ref_len",
                    "F_name_generic": "get_const_string_ref_len",
                    "F_name_impl": "get_const_string_ref_len",
                    "PY_name_impl": "PY_getConstStringRefLen",
                    "function_name": "getConstStringRefLen"
                }
            },
            {
                "<FUNCTION>": "getConstStringRefAsArg  17 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefAsArg",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefAsArg()",
                "declgen": "const string & getConstStringRefAsArg(void)",
                "doxygen": {
                    "brief": "return a 'const string&' as argument",
                    "description": "Pass an additional argument which will be used as the return value.\nThe length of the output variable is declared by the caller.\n"
                },
                "helpers": {
                    "c": [
                        "char_copy"
                    ]
                },
                "name": "getConstStringRefAsArg",
                "options": {},
                "user_fmt": {
                    "F_string_result_as_arg": "output"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_&"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "buf",
                                "deref": "arg",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_&_buf_arg"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getConstStringRefAsArg(\t)",
                            "C_name": "STR_getConstStringRefAsArg",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_const_string_ref_as_arg",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "const ",
                            "c_rv_decl": "const char * SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv.c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_&"
                        },
                        "fmtf": {
                            "C_call_function": "getConstStringRefAsArg(\t)",
                            "C_name": "STR_getConstStringRefAsArg_bufferify",
                            "C_prototype": "char *output,\t int noutput",
                            "C_return_type": "void",
                            "F_C_arguments": "output,\t noutput",
                            "F_C_call": "c_get_const_string_ref_as_arg_bufferify",
                            "F_C_name": "c_get_const_string_ref_as_arg_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "output,\t noutput",
                            "F_arguments": "output",
                            "F_subprogram": "subroutine",
                            "c_const": "const ",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_type": "char",
                            "c_var": "output",
                            "c_var_len": "noutput",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "output",
                            "f_var_len": "noutput",
                            "i_var": "output",
                            "i_var_len": "noutput",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_&_buf_arg"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_&",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getConstStringRefAsArg",
                    "F_name_api": "get_const_string_ref_as_arg",
                    "F_name_function": "get_const_string_ref_as_arg",
                    "F_name_generic": "get_const_string_ref_as_arg",
                    "F_name_impl": "get_const_string_ref_as_arg",
                    "F_string_result_as_arg": "output",
                    "PY_name_impl": "PY_getConstStringRefAsArg",
                    "function_name": "getConstStringRefAsArg"
                }
            },
            {
                "<FUNCTION>": "getConstStringRefLenEmpty  18 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "len": 30
                        },
                        "name": "getConstStringRefLenEmpty",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefLenEmpty() +len=30",
                "declgen": "const string & getConstStringRefLenEmpty(void) +len(30)",
                "doxygen": {
                    "brief": "Test returning empty string reference"
                },
                "helpers": {
                    "c": [
                        "char_copy"
                    ]
                },
                "name": "getConstStringRefLenEmpty",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_&"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "buf",
                                "deref": "copy",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_&_buf_copy"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getConstStringRefLenEmpty(\t)",
                            "C_name": "STR_getConstStringRefLenEmpty",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_const_string_ref_len_empty",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_char_len": 30,
                            "c_const": "const ",
                            "c_rv_decl": "const char * SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv.c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_&"
                        },
                        "fmtf": {
                            "C_call_function": "getConstStringRefLenEmpty(\t)",
                            "C_name": "STR_getConstStringRefLenEmpty_bufferify",
                            "C_prototype": "char *SHC_rv,\t int SHT_rv_len",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv,\t SHT_rv_len",
                            "F_C_call": "c_get_const_string_ref_len_empty_bufferify",
                            "F_C_name": "c_get_const_string_ref_len_empty_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv,\t SHT_rv_len",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_char_len": 30,
                            "c_const": "const ",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_len": "SHT_rv_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_len": "SHT_rv_len",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_len": "SHT_rv_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_&_buf_copy"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_&",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getConstStringRefLenEmpty",
                    "F_name_api": "get_const_string_ref_len_empty",
                    "F_name_function": "get_const_string_ref_len_empty",
                    "F_name_generic": "get_const_string_ref_len_empty",
                    "F_name_impl": "get_const_string_ref_len_empty",
                    "PY_name_impl": "PY_getConstStringRefLenEmpty",
                    "function_name": "getConstStringRefLenEmpty"
                }
            },
            {
                "<FUNCTION>": "getConstStringRefAlloc  19 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefAlloc",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& getConstStringRefAlloc()",
                "declgen": "const std::string & getConstStringRefAlloc(void)",
                "helpers": {
                    "c": [
                        "array_context",
                        "string_to_cdesc",
                        "copy_string"
                    ],
                    "f": [
                        "array_context",
                        "copy_string",
                        "capsule_dtor"
                    ]
                },
                "name": "getConstStringRefAlloc",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_&"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "cdesc",
                                "deref": "allocatable",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_&_cdesc_allocatable"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getConstStringRefAlloc(\t)",
                            "C_name": "STR_getConstStringRefAlloc",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_const_string_ref_alloc",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "const ",
                            "c_rv_decl": "const char * SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv.c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_&"
                        },
                        "fmtf": {
                            "C_call_function": "getConstStringRefAlloc(\t)",
                            "C_name": "STR_getConstStringRefAlloc_bufferify",
                            "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc,\t STR_SHROUD_capsule_data *SHT_rv_capsule",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_C_call": "c_get_const_string_ref_alloc_bufferify",
                            "F_C_name": "c_get_const_string_ref_alloc_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_helper_array_context": "STR_SHROUD_array",
                            "c_helper_copy_string": "STR_ShroudCopyString",
                            "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_capsule": "SHT_rv_capsule",
                            "c_var_cdesc": "SHT_rv_cdesc",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_helper_array_context": "STR_SHROUD_array",
                            "f_helper_capsule_dtor": "STR_SHROUD_capsule_dtor",
                            "f_helper_copy_string": "STR_SHROUD_copy_string",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_capsule": "SHT_rv_capsule",
                            "f_var_cdesc": "SHT_rv_cdesc",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_capsule": "SHT_rv_capsule",
                            "i_var_cdesc": "SHT_rv_cdesc",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_&_cdesc_allocatable"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_&",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getConstStringRefAlloc",
                    "F_name_api": "get_const_string_ref_alloc",
                    "F_name_function": "get_const_string_ref_alloc",
                    "F_name_generic": "get_const_string_ref_alloc",
                    "F_name_impl": "get_const_string_ref_alloc",
                    "PY_name_impl": "PY_getConstStringRefAlloc",
                    "function_name": "getConstStringRefAlloc"
                }
            },
            {
                "<FUNCTION>": "getConstStringPtrLen  20 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "len": 30
                        },
                        "name": "getConstStringPtrLen",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string * getConstStringPtrLen() +len=30",
                "declgen": "const string * getConstStringPtrLen(void) +len(30)",
                "doxygen": {
                    "brief": "return a 'const string *' as character(30)",
                    "description": "It is the caller's responsibility to release the string\ncreated by the C++ library.\nThis is accomplished with C_finalize_buf which is possible\nbecause +len(30) so the contents are copied before returning.\n"
                },
                "fstatements": {
                    "f": {
                        "c_final": [
                            "delete {cxx_var};"
                        ]
                    }
                },
                "helpers": {
                    "c": [
                        "char_copy"
                    ]
                },
                "name": "getConstStringPtrLen",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "fstmts": "f",
                            "meta": {
                                "api": "buf",
                                "deref": "copy",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_*_buf_copy"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getConstStringPtrLen(\t)",
                            "C_name": "STR_getConstStringPtrLen",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_const_string_ptr_len",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_char_len": 30,
                            "c_const": "const ",
                            "c_rv_decl": "const char * SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv->c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const std::string * SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_*"
                        },
                        "fmtf": {
                            "C_call_function": "getConstStringPtrLen(\t)",
                            "C_name": "STR_getConstStringPtrLen_bufferify",
                            "C_prototype": "char *SHC_rv,\t int SHT_rv_len",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv,\t SHT_rv_len",
                            "F_C_call": "c_get_const_string_ptr_len_bufferify",
                            "F_C_name": "c_get_const_string_ptr_len_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv,\t SHT_rv_len",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_char_len": 30,
                            "c_const": "const ",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_len": "SHT_rv_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const std::string * SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_len": "SHT_rv_len",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_len": "SHT_rv_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_*_buf_copy"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv->data(),\t SHCXX_rv->size()",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_*",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getConstStringPtrLen",
                    "F_name_api": "get_const_string_ptr_len",
                    "F_name_function": "get_const_string_ptr_len",
                    "F_name_generic": "get_const_string_ptr_len",
                    "F_name_impl": "get_const_string_ptr_len",
                    "PY_name_impl": "PY_getConstStringPtrLen",
                    "function_name": "getConstStringPtrLen"
                }
            },
            {
                "<FUNCTION>": "getConstStringPtrAlloc  21 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "owner": "library"
                        },
                        "name": "getConstStringPtrAlloc",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrAlloc() +owner(library)",
                "declgen": "const std::string * getConstStringPtrAlloc(void) +owner(library)",
                "helpers": {
                    "c": [
                        "array_context",
                        "string_to_cdesc",
                        "copy_string"
                    ],
                    "f": [
                        "array_context",
                        "copy_string",
                        "capsule_dtor"
                    ]
                },
                "name": "getConstStringPtrAlloc",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_*_library"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "cdesc",
                                "deref": "allocatable",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_*_cdesc_allocatable_library"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function",
                                "owner": "library"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getConstStringPtrAlloc(\t)",
                            "C_name": "STR_getConstStringPtrAlloc",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_const_string_ptr_alloc",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "const ",
                            "c_rv_decl": "const char * SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv->c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const std::string * SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_*_library"
                        },
                        "fmtf": {
                            "C_call_function": "getConstStringPtrAlloc(\t)",
                            "C_name": "STR_getConstStringPtrAlloc_bufferify",
                            "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc,\t STR_SHROUD_capsule_data *SHT_rv_capsule",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_C_call": "c_get_const_string_ptr_alloc_bufferify",
                            "F_C_name": "c_get_const_string_ptr_alloc_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_helper_array_context": "STR_SHROUD_array",
                            "c_helper_copy_string": "STR_ShroudCopyString",
                            "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_capsule": "SHT_rv_capsule",
                            "c_var_cdesc": "SHT_rv_cdesc",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const std::string * SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_helper_array_context": "STR_SHROUD_array",
                            "f_helper_capsule_dtor": "STR_SHROUD_capsule_dtor",
                            "f_helper_copy_string": "STR_SHROUD_copy_string",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_capsule": "SHT_rv_capsule",
                            "f_var_cdesc": "SHT_rv_cdesc",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_capsule": "SHT_rv_capsule",
                            "i_var_cdesc": "SHT_rv_cdesc",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_*_cdesc_allocatable_library"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv->data(),\t SHCXX_rv->size()",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_*",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getConstStringPtrAlloc",
                    "F_name_api": "get_const_string_ptr_alloc",
                    "F_name_function": "get_const_string_ptr_alloc",
                    "F_name_generic": "get_const_string_ptr_alloc",
                    "F_name_impl": "get_const_string_ptr_alloc",
                    "PY_name_impl": "PY_getConstStringPtrAlloc",
                    "function_name": "getConstStringPtrAlloc"
                }
            },
            {
                "<FUNCTION>": "getConstStringPtrOwnsAlloc  22 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "owner": "caller"
                        },
                        "name": "getConstStringPtrOwnsAlloc",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrOwnsAlloc() +owner(caller)",
                "declgen": "const std::string * getConstStringPtrOwnsAlloc(void) +owner(caller)",
                "doxygen": {
                    "description": "It is the caller's responsibility to release the string\ncreated by the C++ library.\nThis is accomplished +owner(caller) which sets idtor.\nThe contents are copied by Fortran so they must outlast\nthe return from the C wrapper.\n"
                },
                "helpers": {
                    "c": [
                        "array_context",
                        "string_to_cdesc",
                        "copy_string"
                    ],
                    "f": [
                        "array_context",
                        "copy_string",
                        "capsule_dtor"
                    ]
                },
                "name": "getConstStringPtrOwnsAlloc",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_*_caller"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "cdesc",
                                "deref": "allocatable",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_*_cdesc_allocatable_caller"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function",
                                "owner": "caller"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getConstStringPtrOwnsAlloc(\t)",
                            "C_name": "STR_getConstStringPtrOwnsAlloc",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_const_string_ptr_owns_alloc",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "const ",
                            "c_rv_decl": "const char * SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv->c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const std::string * SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "2",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_*_caller"
                        },
                        "fmtf": {
                            "C_call_function": "getConstStringPtrOwnsAlloc(\t)",
                            "C_name": "STR_getConstStringPtrOwnsAlloc_bufferify",
                            "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc,\t STR_SHROUD_capsule_data *SHT_rv_capsule",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_C_call": "c_get_const_string_ptr_owns_alloc_bufferify",
                            "F_C_name": "c_get_const_string_ptr_owns_alloc_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_helper_array_context": "STR_SHROUD_array",
                            "c_helper_copy_string": "STR_ShroudCopyString",
                            "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_capsule": "SHT_rv_capsule",
                            "c_var_cdesc": "SHT_rv_cdesc",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const std::string * SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_helper_array_context": "STR_SHROUD_array",
                            "f_helper_capsule_dtor": "STR_SHROUD_capsule_dtor",
                            "f_helper_copy_string": "STR_SHROUD_copy_string",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_capsule": "SHT_rv_capsule",
                            "f_var_cdesc": "SHT_rv_cdesc",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_capsule": "SHT_rv_capsule",
                            "i_var_cdesc": "SHT_rv_cdesc",
                            "idtor": "2",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_*_cdesc_allocatable_caller"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv->data(),\t SHCXX_rv->size()",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_*",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getConstStringPtrOwnsAlloc",
                    "F_name_api": "get_const_string_ptr_owns_alloc",
                    "F_name_function": "get_const_string_ptr_owns_alloc",
                    "F_name_generic": "get_const_string_ptr_owns_alloc",
                    "F_name_impl": "get_const_string_ptr_owns_alloc",
                    "PY_name_impl": "PY_getConstStringPtrOwnsAlloc",
                    "function_name": "getConstStringPtrOwnsAlloc"
                }
            },
            {
                "<FUNCTION>": "getConstStringPtrOwnsAllocPattern  23 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "free_pattern": "C_string_free",
                            "owner": "caller"
                        },
                        "name": "getConstStringPtrOwnsAllocPattern",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrOwnsAllocPattern() +owner(caller)",
                "declgen": "const std::string * getConstStringPtrOwnsAllocPattern(void) +free_pattern(C_string_free)+owner(caller)",
                "doxygen": {
                    "description": "Similar to getConstStringPtrOwnsAlloc, but uses pattern to release memory.\n"
                },
                "helpers": {
                    "c": [
                        "array_context",
                        "string_to_cdesc",
                        "copy_string"
                    ],
                    "f": [
                        "array_context",
                        "copy_string",
                        "capsule_dtor"
                    ]
                },
                "name": "getConstStringPtrOwnsAllocPattern",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_*_caller"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "cdesc",
                                "deref": "allocatable",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_*_cdesc_allocatable_caller"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "free_pattern": "C_string_free",
                                "intent": "function",
                                "owner": "caller"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getConstStringPtrOwnsAllocPattern(\t)",
                            "C_name": "STR_getConstStringPtrOwnsAllocPattern",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_const_string_ptr_owns_alloc_pattern",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "const ",
                            "c_rv_decl": "const char * SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv->c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const std::string * SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "3",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_*_caller"
                        },
                        "fmtf": {
                            "C_call_function": "getConstStringPtrOwnsAllocPattern(\t)",
                            "C_name": "STR_getConstStringPtrOwnsAllocPattern_bufferify",
                            "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc,\t STR_SHROUD_capsule_data *SHT_rv_capsule",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_C_call": "c_get_const_string_ptr_owns_alloc_pattern_bufferify",
                            "F_C_name": "c_get_const_string_ptr_owns_alloc_pattern_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_helper_array_context": "STR_SHROUD_array",
                            "c_helper_copy_string": "STR_ShroudCopyString",
                            "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_capsule": "SHT_rv_capsule",
                            "c_var_cdesc": "SHT_rv_cdesc",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const std::string * SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_helper_array_context": "STR_SHROUD_array",
                            "f_helper_capsule_dtor": "STR_SHROUD_capsule_dtor",
                            "f_helper_copy_string": "STR_SHROUD_copy_string",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_capsule": "SHT_rv_capsule",
                            "f_var_cdesc": "SHT_rv_cdesc",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_capsule": "SHT_rv_capsule",
                            "i_var_cdesc": "SHT_rv_cdesc",
                            "idtor": "3",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_*_cdesc_allocatable_caller"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "*",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv->data(),\t SHCXX_rv->size()",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_*",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getConstStringPtrOwnsAllocPattern",
                    "F_name_api": "get_const_string_ptr_owns_alloc_pattern",
                    "F_name_function": "get_const_string_ptr_owns_alloc_pattern",
                    "F_name_generic": "get_const_string_ptr_owns_alloc_pattern",
                    "F_name_impl": "get_const_string_ptr_owns_alloc_pattern",
                    "PY_name_impl": "PY_getConstStringPtrOwnsAllocPattern",
                    "function_name": "getConstStringPtrOwnsAllocPattern"
                }
            },
            {
                "<FUNCTION>": "getConstStringPtrPointer  24 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "deref": "pointer",
                            "owner": "library"
                        },
                        "name": "getConstStringPtrPointer",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrPointer() +deref(pointer)+owner(library)",
                "declgen": "const std::string * getConstStringPtrPointer(void) +deref(pointer)+owner(library)",
                "helpers": {
                    "c": [
                        "array_context",
                        "string_to_cdesc"
                    ],
                    "f": [
                        "array_context",
                        "pointer_string"
                    ]
                },
                "name": "getConstStringPtrPointer",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_*_library"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "cdesc",
                                "deref": "pointer",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_*_cdesc_pointer_library"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function",
                                "owner": "library"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "getConstStringPtrPointer(\t)",
                            "C_name": "STR_getConstStringPtrPointer",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_get_const_string_ptr_pointer",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "const ",
                            "c_rv_decl": "const char * SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv->c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const std::string * SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_*_library"
                        },
                        "fmtf": {
                            "C_call_function": "getConstStringPtrPointer(\t)",
                            "C_name": "STR_getConstStringPtrPointer_bufferify",
                            "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv_cdesc",
                            "F_C_call": "c_get_const_string_ptr_pointer_bufferify",
                            "F_C_name": "c_get_const_string_ptr_pointer_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv_cdesc",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_helper_array_context": "STR_SHROUD_array",
                            "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_cdesc": "SHT_rv_cdesc",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "const std::string * SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_helper_array_context": "STR_SHROUD_array",
                            "f_helper_pointer_string": "STR_SHROUD_pointer_string",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_cdesc": "SHT_rv_cdesc",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_cdesc": "SHT_rv_cdesc",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_*_cdesc_pointer_library"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getConstStringPtrPointer",
                    "F_name_api": "get_const_string_ptr_pointer",
                    "F_name_function": "get_const_string_ptr_pointer",
                    "F_name_generic": "get_const_string_ptr_pointer",
                    "F_name_impl": "get_const_string_ptr_pointer",
                    "function_name": "getConstStringPtrPointer"
                }
            },
            {
                "<FUNCTION>": "acceptStringConstReference  25 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "acceptStringConstReference",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringConstReference(const std::string & arg1)",
                "declgen": "void acceptStringConstReference(const std::string & arg1)",
                "doxygen": {
                    "brief": "Accept a const string reference",
                    "description": "Save contents of arg1.\narg1 is assumed to be intent(IN) since it is const\nWill copy in.\n"
                },
                "helpers": {
                    "c": [
                        "char_len_trim"
                    ]
                },
                "name": "acceptStringConstReference",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_string_&"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "api": "buf",
                                "intent": "in"
                            },
                            "stmt": "f_in_string_&_buf"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "acceptStringConstReference(\tSHCXX_arg1)",
                            "C_call_list": "SHCXX_arg1",
                            "C_name": "STR_acceptStringConstReference",
                            "C_prototype": "const char * arg1",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1",
                            "F_C_name": "c_accept_string_const_reference",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "acceptStringConstReference(\tSHCXX_arg1)",
                            "C_call_list": "SHCXX_arg1",
                            "C_name": "STR_acceptStringConstReference_bufferify",
                            "C_prototype": "char *arg1,\t int SHT_arg1_len",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t SHT_arg1_len",
                            "F_C_call": "c_accept_string_const_reference_bufferify",
                            "F_C_name": "c_accept_string_const_reference_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg1,\t SHT_arg1_len",
                            "F_arguments": "arg1",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_string_&"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "c_var_len": "SHT_arg1_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "f_var_len": "SHT_arg1_len",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "i_var_len": "SHT_arg1_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_string_&_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_in_string_&",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "acceptStringConstReference",
                    "F_name_api": "accept_string_const_reference",
                    "F_name_function": "accept_string_const_reference",
                    "F_name_generic": "accept_string_const_reference",
                    "F_name_impl": "accept_string_const_reference",
                    "PY_name_impl": "PY_acceptStringConstReference",
                    "function_name": "acceptStringConstReference"
                }
            },
            {
                "<FUNCTION>": "acceptStringReferenceOut  26 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "acceptStringReferenceOut",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringReferenceOut(std::string & arg1+intent(out))",
                "declgen": "void acceptStringReferenceOut(std::string & arg1 +intent(out))",
                "doxygen": {
                    "brief": "Accept a string reference",
                    "description": "Set out to a constant string.\narg1 is intent(OUT)\nMust copy out.\n"
                },
                "helpers": {
                    "c": [
                        "char_copy"
                    ]
                },
                "name": "acceptStringReferenceOut",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_string_&"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "stmt": "f_out_string_&_buf"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "acceptStringReferenceOut(\tSHCXX_arg1)",
                            "C_call_list": "SHCXX_arg1",
                            "C_name": "STR_acceptStringReferenceOut",
                            "C_prototype": "char * arg1",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1",
                            "F_C_name": "c_accept_string_reference_out",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "acceptStringReferenceOut(\tSHCXX_arg1)",
                            "C_call_list": "SHCXX_arg1",
                            "C_name": "STR_acceptStringReferenceOut_bufferify",
                            "C_prototype": "char *arg1,\t int SHT_arg1_len",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t SHT_arg1_len",
                            "F_C_call": "c_accept_string_reference_out_bufferify",
                            "F_C_name": "c_accept_string_reference_out_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg1,\t SHT_arg1_len",
                            "F_arguments": "arg1",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_string_&"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "c_var_len": "SHT_arg1_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "f_var_len": "SHT_arg1_len",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "i_var_len": "SHT_arg1_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_string_&_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_out_string_&",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "acceptStringReferenceOut",
                    "F_name_api": "accept_string_reference_out",
                    "F_name_function": "accept_string_reference_out",
                    "F_name_generic": "accept_string_reference_out",
                    "F_name_impl": "accept_string_reference_out",
                    "PY_name_impl": "PY_acceptStringReferenceOut",
                    "function_name": "acceptStringReferenceOut"
                }
            },
            {
                "<FUNCTION>": "acceptStringReference  27 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "acceptStringReference",
                        "params": [
                            {
                                "declarator": {
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringReference(std::string & arg1)",
                "declgen": "void acceptStringReference(std::string & arg1)",
                "doxygen": {
                    "brief": "Accept a string reference",
                    "description": "Append \"dog\" to the end of arg1.\narg1 is assumed to be intent(INOUT)\nMust copy in and copy out.\n"
                },
                "helpers": {
                    "c": [
                        "char_copy",
                        "char_len_trim"
                    ]
                },
                "name": "acceptStringReference",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "inout"
                            },
                            "stmt": "c_inout_string_&"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "api": "buf",
                                "intent": "inout"
                            },
                            "stmt": "f_inout_string_&_buf"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "inout"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "inout"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "acceptStringReference(\tSHCXX_arg1)",
                            "C_call_list": "SHCXX_arg1",
                            "C_name": "STR_acceptStringReference",
                            "C_prototype": "char * arg1",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1",
                            "F_C_name": "c_accept_string_reference",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "acceptStringReference(\tSHCXX_arg1)",
                            "C_call_list": "SHCXX_arg1",
                            "C_name": "STR_acceptStringReference_bufferify",
                            "C_prototype": "char *arg1,\t int SHT_arg1_len",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t SHT_arg1_len",
                            "F_C_call": "c_accept_string_reference_bufferify",
                            "F_C_name": "c_accept_string_reference_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg1,\t SHT_arg1_len",
                            "F_arguments": "arg1",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_inout_string_&"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "c_var_len": "SHT_arg1_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "f_var_len": "SHT_arg1_len",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "i_var_len": "SHT_arg1_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_inout_string_&_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_inout_string_&",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "acceptStringReference",
                    "F_name_api": "accept_string_reference",
                    "F_name_function": "accept_string_reference",
                    "F_name_generic": "accept_string_reference",
                    "F_name_impl": "accept_string_reference",
                    "PY_name_impl": "PY_acceptStringReference",
                    "function_name": "acceptStringReference"
                }
            },
            {
                "<FUNCTION>": "acceptStringPointerConst  28 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "acceptStringPointerConst",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringPointerConst(const std::string * arg1)",
                "declgen": "void acceptStringPointerConst(const std::string * arg1)",
                "doxygen": {
                    "brief": "Accept a const string pointer - intent(in)"
                },
                "helpers": {
                    "c": [
                        "char_len_trim"
                    ]
                },
                "name": "acceptStringPointerConst",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_string_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "api": "buf",
                                "intent": "in"
                            },
                            "stmt": "f_in_string_*_buf"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "acceptStringPointerConst(\t&SHCXX_arg1)",
                            "C_call_list": "&SHCXX_arg1",
                            "C_name": "STR_acceptStringPointerConst",
                            "C_prototype": "const char * arg1",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1",
                            "F_C_name": "c_accept_string_pointer_const",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "acceptStringPointerConst(\t&SHCXX_arg1)",
                            "C_call_list": "&SHCXX_arg1",
                            "C_name": "STR_acceptStringPointerConst_bufferify",
                            "C_prototype": "char *arg1,\t int SHT_arg1_len",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t SHT_arg1_len",
                            "F_C_call": "c_accept_string_pointer_const_bufferify",
                            "F_C_name": "c_accept_string_pointer_const_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg1,\t SHT_arg1_len",
                            "F_arguments": "arg1",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_string_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "c_var_len": "SHT_arg1_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "f_var_len": "SHT_arg1_len",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "i_var_len": "SHT_arg1_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_string_*_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_in_string_*",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "acceptStringPointerConst",
                    "F_name_api": "accept_string_pointer_const",
                    "F_name_function": "accept_string_pointer_const",
                    "F_name_generic": "accept_string_pointer_const",
                    "F_name_impl": "accept_string_pointer_const",
                    "PY_name_impl": "PY_acceptStringPointerConst",
                    "function_name": "acceptStringPointerConst"
                }
            },
            {
                "<FUNCTION>": "acceptStringPointer  29 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "acceptStringPointer",
                        "params": [
                            {
                                "declarator": {
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringPointer(std::string * arg1)",
                "declgen": "void acceptStringPointer(std::string * arg1)",
                "doxygen": {
                    "brief": "Accept a string pointer - intent(inout)"
                },
                "helpers": {
                    "c": [
                        "char_copy",
                        "char_len_trim"
                    ]
                },
                "name": "acceptStringPointer",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "inout"
                            },
                            "stmt": "c_inout_string_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "api": "buf",
                                "intent": "inout"
                            },
                            "stmt": "f_inout_string_*_buf"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "inout"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "inout"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "acceptStringPointer(\t&SHCXX_arg1)",
                            "C_call_list": "&SHCXX_arg1",
                            "C_name": "STR_acceptStringPointer",
                            "C_prototype": "char * arg1",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1",
                            "F_C_name": "c_accept_string_pointer",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "acceptStringPointer(\t&SHCXX_arg1)",
                            "C_call_list": "&SHCXX_arg1",
                            "C_name": "STR_acceptStringPointer_bufferify",
                            "C_prototype": "char *arg1,\t int SHT_arg1_len",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t SHT_arg1_len",
                            "F_C_call": "c_accept_string_pointer_bufferify",
                            "F_C_name": "c_accept_string_pointer_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg1,\t SHT_arg1_len",
                            "F_arguments": "arg1",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_inout_string_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "c_var_len": "SHT_arg1_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "f_var_len": "SHT_arg1_len",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "i_var_len": "SHT_arg1_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_inout_string_*_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_inout_string_*",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "acceptStringPointer",
                    "F_name_api": "accept_string_pointer",
                    "F_name_function": "accept_string_pointer",
                    "F_name_generic": "accept_string_pointer",
                    "F_name_impl": "accept_string_pointer",
                    "PY_name_impl": "PY_acceptStringPointer",
                    "function_name": "acceptStringPointer"
                }
            },
            {
                "<FUNCTION>": "fetchStringPointer  30 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "fetchStringPointer",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fetchStringPointer(std::string * arg1 +intent(out))",
                "declgen": "void fetchStringPointer(std::string * arg1 +intent(out))",
                "doxygen": {
                    "brief": "Accept a string pointer - intent(out)",
                    "description": "Return global_str.\n"
                },
                "helpers": {
                    "c": [
                        "char_copy"
                    ]
                },
                "name": "fetchStringPointer",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_string_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "stmt": "f_out_string_*_buf"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "fetchStringPointer(\t&SHCXX_arg1)",
                            "C_call_list": "&SHCXX_arg1",
                            "C_name": "STR_fetchStringPointer",
                            "C_prototype": "char * arg1",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1",
                            "F_C_name": "c_fetch_string_pointer",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "fetchStringPointer(\t&SHCXX_arg1)",
                            "C_call_list": "&SHCXX_arg1",
                            "C_name": "STR_fetchStringPointer_bufferify",
                            "C_prototype": "char *arg1,\t int SHT_arg1_len",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t SHT_arg1_len",
                            "F_C_call": "c_fetch_string_pointer_bufferify",
                            "F_C_name": "c_fetch_string_pointer_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg1,\t SHT_arg1_len",
                            "F_arguments": "arg1",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_string_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "c_var_len": "SHT_arg1_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "f_var_len": "SHT_arg1_len",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "i_var_len": "SHT_arg1_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_string_*_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_out_string_*",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "fetchStringPointer",
                    "F_name_api": "fetch_string_pointer",
                    "F_name_function": "fetch_string_pointer",
                    "F_name_generic": "fetch_string_pointer",
                    "F_name_impl": "fetch_string_pointer",
                    "PY_name_impl": "PY_fetchStringPointer",
                    "function_name": "fetchStringPointer"
                }
            },
            {
                "<FUNCTION>": "acceptStringPointerLen  31 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "acceptStringPointerLen",
                        "params": [
                            {
                                "declarator": {
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "nlen",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringPointerLen(std::string * arg1, int *nlen+intent(out))",
                "declgen": "void acceptStringPointerLen(std::string * arg1, int * nlen +intent(out))",
                "doxygen": {
                    "brief": "Accept a string pointer - intent(inout)",
                    "description": "Test return tuple with two arguments.\nMust rename argument to nlen to avoid conflict with intrinsic len.\n"
                },
                "helpers": {
                    "c": [
                        "char_copy",
                        "char_len_trim"
                    ]
                },
                "name": "acceptStringPointerLen",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "inout"
                            },
                            "stmt": "c_inout_string_*"
                        },
                        "nlen": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_native_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "api": "buf",
                                "intent": "inout"
                            },
                            "stmt": "f_inout_string_*_buf"
                        },
                        "nlen": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "f_out_native_*"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "inout"
                            }
                        },
                        "nlen": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "inout"
                            }
                        },
                        "nlen": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "acceptStringPointerLen(\t&SHCXX_arg1,\t nlen)",
                            "C_call_list": "&SHCXX_arg1,\t nlen",
                            "C_name": "STR_acceptStringPointerLen",
                            "C_prototype": "char * arg1,\t int * nlen",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t nlen",
                            "F_C_name": "c_accept_string_pointer_len",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "acceptStringPointerLen(\t&SHCXX_arg1,\t nlen)",
                            "C_call_list": "&SHCXX_arg1,\t nlen",
                            "C_name": "STR_acceptStringPointerLen_bufferify",
                            "C_prototype": "char *arg1,\t int SHT_arg1_len,\t int * nlen",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t SHT_arg1_len,\t nlen",
                            "F_C_call": "c_accept_string_pointer_len_bufferify",
                            "F_C_name": "c_accept_string_pointer_len_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg1,\t SHT_arg1_len,\t nlen",
                            "F_arguments": "arg1,\t nlen",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_inout_string_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "c_var_len": "SHT_arg1_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "f_var_len": "SHT_arg1_len",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "i_var_len": "SHT_arg1_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_inout_string_*_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_inout_string_*",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "nlen": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nlen",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nlen",
                            "cxx_type": "int",
                            "cxx_var": "nlen",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nlen",
                            "i_var": "nlen",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_out_native_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nlen",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nlen",
                            "cxx_type": "int",
                            "cxx_var": "nlen",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nlen",
                            "fc_var": "nlen",
                            "i_var": "nlen",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_out_native_*"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "nlen",
                            "ctor_expr": "nlen",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nlen",
                            "cxx_type": "int",
                            "cxx_var": "nlen",
                            "data_var": "SHData_nlen",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_nlen",
                            "size_var": "SHSize_nlen",
                            "stmt": "py_out_native_*",
                            "value_var": "SHValue_nlen"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "acceptStringPointerLen",
                    "F_name_api": "accept_string_pointer_len",
                    "F_name_function": "accept_string_pointer_len",
                    "F_name_generic": "accept_string_pointer_len",
                    "F_name_impl": "accept_string_pointer_len",
                    "PY_name_impl": "PY_acceptStringPointerLen",
                    "function_name": "acceptStringPointerLen"
                }
            },
            {
                "<FUNCTION>": "fetchStringPointerLen  32 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "fetchStringPointerLen",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "nlen",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fetchStringPointerLen(std::string * arg1 +intent(out), int *nlen+intent(out))",
                "declgen": "void fetchStringPointerLen(std::string * arg1 +intent(out), int * nlen +intent(out))",
                "doxygen": {
                    "brief": "Accept a string pointer - intent(out)",
                    "description": "Return global_str.\nTest return tuple with two arguments.\nMust rename argument to nlen to avoid conflict with intrinsic len.\n"
                },
                "helpers": {
                    "c": [
                        "char_copy"
                    ]
                },
                "name": "fetchStringPointerLen",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_string_*"
                        },
                        "nlen": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_native_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg1": {
                            "meta": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "stmt": "f_out_string_*_buf"
                        },
                        "nlen": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "f_out_native_*"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "nlen": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "nlen": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "fetchStringPointerLen(\t&SHCXX_arg1,\t nlen)",
                            "C_call_list": "&SHCXX_arg1,\t nlen",
                            "C_name": "STR_fetchStringPointerLen",
                            "C_prototype": "char * arg1,\t int * nlen",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t nlen",
                            "F_C_name": "c_fetch_string_pointer_len",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "fetchStringPointerLen(\t&SHCXX_arg1,\t nlen)",
                            "C_call_list": "&SHCXX_arg1,\t nlen",
                            "C_name": "STR_fetchStringPointerLen_bufferify",
                            "C_prototype": "char *arg1,\t int SHT_arg1_len,\t int * nlen",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t SHT_arg1_len,\t nlen",
                            "F_C_call": "c_fetch_string_pointer_len_bufferify",
                            "F_C_name": "c_fetch_string_pointer_len_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg1,\t SHT_arg1_len,\t nlen",
                            "F_arguments": "arg1,\t nlen",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_string_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "c_var_len": "SHT_arg1_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "f_var_len": "SHT_arg1_len",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "i_var_len": "SHT_arg1_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_string_*_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_out_string_*",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "nlen": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nlen",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nlen",
                            "cxx_type": "int",
                            "cxx_var": "nlen",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nlen",
                            "i_var": "nlen",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_out_native_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nlen",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nlen",
                            "cxx_type": "int",
                            "cxx_var": "nlen",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nlen",
                            "fc_var": "nlen",
                            "i_var": "nlen",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_out_native_*"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "nlen",
                            "ctor_expr": "nlen",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nlen",
                            "cxx_type": "int",
                            "cxx_var": "nlen",
                            "data_var": "SHData_nlen",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_nlen",
                            "size_var": "SHSize_nlen",
                            "stmt": "py_out_native_*",
                            "value_var": "SHValue_nlen"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "fetchStringPointerLen",
                    "F_name_api": "fetch_string_pointer_len",
                    "F_name_function": "fetch_string_pointer_len",
                    "F_name_generic": "fetch_string_pointer_len",
                    "F_name_impl": "fetch_string_pointer_len",
                    "PY_name_impl": "PY_fetchStringPointerLen",
                    "function_name": "fetchStringPointerLen"
                }
            },
            {
                "<FUNCTION>": "acceptStringInstance  33 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "acceptStringInstance",
                        "params": [
                            {
                                "declarator": {
                                    "name": "arg1",
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int acceptStringInstance(std::string arg1)",
                "declgen": "int acceptStringInstance(std::string arg1)",
                "doxygen": {
                    "brief": "Accept a string instance"
                },
                "helpers": {
                    "c": [
                        "char_len_trim"
                    ]
                },
                "name": "acceptStringInstance",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_string_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "arg1": {
                            "meta": {
                                "api": "buf",
                                "intent": "in"
                            },
                            "stmt": "f_in_string_scalar_buf"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "acceptStringInstance(\targ1)",
                            "C_call_list": "arg1",
                            "C_name": "STR_acceptStringInstance",
                            "C_prototype": "char *arg1",
                            "C_return_type": "int",
                            "F_C_arguments": "arg1",
                            "F_C_name": "c_accept_string_instance",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "acceptStringInstance(\tSHCXX_arg1)",
                            "C_call_list": "SHCXX_arg1",
                            "C_name": "STR_acceptStringInstance_bufferify",
                            "C_prototype": "char *arg1,\t int SHT_arg1_len",
                            "C_return_type": "int",
                            "F_C_arguments": "arg1,\t SHT_arg1_len",
                            "F_C_call": "c_accept_string_instance_bufferify",
                            "F_C_name": "c_accept_string_instance_bufferify",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "arg1,\t SHT_arg1_len",
                            "F_arguments": "arg1",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_c_suffix": "_bufferify",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_string_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                            "c_local_trim": "SHC_arg1_trim",
                            "c_member": ".",
                            "c_type": "char",
                            "c_var": "arg1",
                            "c_var_len": "SHT_arg1_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "f_var_len": "SHT_arg1_len",
                            "fc_var": "arg1",
                            "i_local_trim": "SHC_arg1_trim",
                            "i_var": "arg1",
                            "i_var_len": "SHT_arg1_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_string_scalar_buf"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_in_string_scalar",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "acceptStringInstance",
                    "F_name_api": "accept_string_instance",
                    "F_name_function": "accept_string_instance",
                    "F_name_generic": "accept_string_instance",
                    "F_name_impl": "accept_string_instance",
                    "PY_name_impl": "PY_acceptStringInstance",
                    "function_name": "acceptStringInstance"
                }
            },
            {
                "<FUNCTION>": "returnStrings  34 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "returnStrings",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg2",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void returnStrings(std::string & arg1 +intent(out), std::string & arg2 +intent(out))",
                "declgen": "void returnStrings(std::string & arg1 +intent(out), std::string & arg2 +intent(out))",
                "doxygen": {
                    "brief": "Test Python returning multiple std::string arguments."
                },
                "name": "returnStrings",
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false
                },
                "wrap": {
                    "python": true
                },
                "zz_bind": {
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_out_string_&",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg2",
                            "ctor_expr": "SH_arg2.data(),\t SH_arg2.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": null,
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt": "py_out_string_&",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnStrings",
                    "F_name_api": "return_strings",
                    "PY_name_impl": "PY_returnStrings",
                    "function_name": "returnStrings"
                }
            },
            {
                "<FUNCTION>": "fetchArrayStringArg  35 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "fetchArrayStringArg",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "dimension": "nstrs",
                                        "intent": "out"
                                    },
                                    "name": "strs",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "name": "nstrs",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fetchArrayStringArg( std::string **strs +intent(out)+dimension(nstrs), int *nstrs+intent(out)+hidden);",
                "declgen": "void fetchArrayStringArg(std::string * * strs +dimension(nstrs)+intent(out), int * nstrs +hidden+intent(out))",
                "doxygen": {
                    "description": "Copy output into argument strs which must be large enough\nto hold values.  Excess values will be truncated.\nThe nstrs argument is the length of the array.\nIt is associated with strs via the dimension(nstrs) attribute.\n+hidden indicates that it is not part of the Fortran API.\n"
                },
                "helpers": {
                    "c": [
                        "array_string_out"
                    ],
                    "f": [
                        "type_defines",
                        "array_context"
                    ]
                },
                "name": "fetchArrayStringArg",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "nstrs": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_native_*"
                        },
                        "strs": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "name": "nstrs"
                                    }
                                ],
                                "dimension": "nstrs",
                                "intent": "out"
                            },
                            "stmt": "c_out_string_**"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "nstrs": {
                            "meta": {
                                "hidden": true,
                                "intent": "out"
                            },
                            "stmt": "f_out_native_*_hidden"
                        },
                        "strs": {
                            "meta": {
                                "api": "cdesc",
                                "deref": "copy",
                                "dim_ast": [
                                    {
                                        "name": "nstrs"
                                    }
                                ],
                                "dimension": "nstrs",
                                "intent": "out"
                            },
                            "stmt": "f_out_string_**_cdesc_copy"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "nstrs": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "strs": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "name": "nstrs"
                                    }
                                ],
                                "dimension": "nstrs",
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "fetchArrayStringArg(\tstrs,\t nstrs)",
                            "C_call_list": "strs,\t nstrs",
                            "C_name": "STR_fetchArrayStringArg",
                            "C_prototype": "char * * strs,\t int * nstrs",
                            "C_return_type": "void",
                            "F_C_arguments": "strs,\t nstrs",
                            "F_C_name": "c_fetch_array_string_arg",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "fetchArrayStringArg(\t&strs,\t &nstrs)",
                            "C_call_list": "&strs,\t &nstrs",
                            "C_name": "STR_fetchArrayStringArg_bufferify",
                            "C_prototype": "STR_SHROUD_array *SHT_strs_cdesc",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_strs_cdesc",
                            "F_C_call": "c_fetch_array_string_arg_bufferify",
                            "F_C_name": "c_fetch_array_string_arg_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_strs_cdesc",
                            "F_arguments": "strs",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "nstrs": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nstrs",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nstrs",
                            "cxx_type": "int",
                            "cxx_var": "nstrs",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nstrs",
                            "i_var": "nstrs",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_out_native_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nstrs",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nstrs",
                            "cxx_type": "int",
                            "cxx_var": "nstrs",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nstrs",
                            "i_var": "nstrs",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_out_native_*_hidden"
                        }
                    },
                    "strs": {
                        "fmtc": {
                            "c_addr": "",
                            "c_array_size2": "nstrs",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "strs",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "strs",
                            "cxx_type": "std::string",
                            "cxx_var": "strs",
                            "f_array_allocate": "(nstrs)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "strs",
                            "i_var": "strs",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_string_**"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_array_shape": "\nSHT_strs_cdesc->shape[0] = nstrs;",
                            "c_array_size": "SHT_strs_cdesc->shape[0]",
                            "c_array_size2": "nstrs",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_array_string_out": "STR_ShroudArrayStringOut",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "strs",
                            "c_var_cdesc": "SHT_strs_cdesc",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "strs",
                            "cxx_type": "std::string",
                            "cxx_var": "strs",
                            "f_array_allocate": "(SHT_strs_cdesc%shape(1))",
                            "f_array_shape": ",\t SHT_strs_cdesc%shape(1:1)",
                            "f_assumed_shape": "(:)",
                            "f_cdesc_shape": "\nSHT_strs_cdesc%shape(1:1) = shape(strs)",
                            "f_helper_array_context": "STR_SHROUD_array",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "strs",
                            "f_var_cdesc": "SHT_strs_cdesc",
                            "fc_var": "strs",
                            "i_var": "strs",
                            "i_var_cdesc": "SHT_strs_cdesc",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_string_**_cdesc_copy"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "fetchArrayStringArg",
                    "F_name_api": "fetch_array_string_arg",
                    "F_name_function": "fetch_array_string_arg",
                    "F_name_generic": "fetch_array_string_arg",
                    "F_name_impl": "fetch_array_string_arg",
                    "function_name": "fetchArrayStringArg"
                }
            },
            {
                "<FUNCTION>": "fetchArrayStringAlloc  36 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "fetchArrayStringAlloc",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "allocatable",
                                        "dimension": "nstrs",
                                        "intent": "out"
                                    },
                                    "name": "strs",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "name": "nstrs",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fetchArrayStringAlloc( std::string **strs +intent(out)+dimension(nstrs)+deref(allocatable), int *nstrs+intent(out)+hidden);",
                "declgen": "void fetchArrayStringAlloc(std::string * * strs +deref(allocatable)+dimension(nstrs)+intent(out), int * nstrs +hidden+intent(out))",
                "doxygen": {
                    "description": "Copy output into argument strs which must be large enough\nto hold values.  Excess values will be truncated.\nThe nstrs argument is the length of the array.\nIt is associated with strs via the dimension(nstrs) attribute.\n+hidden indicates that it is not part of the Fortran API.\nThe defered length is set to the maximum string length.\n"
                },
                "helpers": {
                    "c": [
                        "array_context",
                        "array_string_allocatable",
                        "array_string_out_len"
                    ],
                    "f": [
                        "array_context",
                        "array_string_allocatable",
                        "capsule_dtor"
                    ]
                },
                "name": "fetchArrayStringAlloc",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "nstrs": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_native_*"
                        },
                        "strs": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "name": "nstrs"
                                    }
                                ],
                                "dimension": "nstrs",
                                "intent": "out"
                            },
                            "stmt": "c_out_string_**"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "nstrs": {
                            "meta": {
                                "hidden": true,
                                "intent": "out"
                            },
                            "stmt": "f_out_native_*_hidden"
                        },
                        "strs": {
                            "meta": {
                                "api": "cdesc",
                                "deref": "allocatable",
                                "dim_ast": [
                                    {
                                        "name": "nstrs"
                                    }
                                ],
                                "dimension": "nstrs",
                                "intent": "out"
                            },
                            "stmt": "f_out_string_**_cdesc_allocatable"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "nstrs": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "strs": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "name": "nstrs"
                                    }
                                ],
                                "dimension": "nstrs",
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "fetchArrayStringAlloc(\tstrs,\t nstrs)",
                            "C_call_list": "strs,\t nstrs",
                            "C_name": "STR_fetchArrayStringAlloc",
                            "C_prototype": "char * * strs,\t int * nstrs",
                            "C_return_type": "void",
                            "F_C_arguments": "strs,\t nstrs",
                            "F_C_name": "c_fetch_array_string_alloc",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "fetchArrayStringAlloc(\t&strs,\t &nstrs)",
                            "C_call_list": "&strs,\t &nstrs",
                            "C_name": "STR_fetchArrayStringAlloc_bufferify",
                            "C_prototype": "STR_SHROUD_array *SHT_strs_cdesc,\t STR_SHROUD_capsule_data *SHT_strs_capsule",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_strs_cdesc,\t SHT_strs_capsule",
                            "F_C_call": "c_fetch_array_string_alloc_bufferify",
                            "F_C_name": "c_fetch_array_string_alloc_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_strs_cdesc,\t SHT_strs_capsule",
                            "F_arguments": "strs",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "nstrs": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nstrs",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nstrs",
                            "cxx_type": "int",
                            "cxx_var": "nstrs",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nstrs",
                            "i_var": "nstrs",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_out_native_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nstrs",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nstrs",
                            "cxx_type": "int",
                            "cxx_var": "nstrs",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nstrs",
                            "i_var": "nstrs",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_out_native_*_hidden"
                        }
                    },
                    "strs": {
                        "fmtc": {
                            "c_addr": "",
                            "c_array_size2": "nstrs",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "strs",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "strs",
                            "cxx_type": "std::string",
                            "cxx_var": "strs",
                            "f_array_allocate": "(nstrs)",
                            "f_assumed_shape": "(:)",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "strs",
                            "i_var": "strs",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_string_**"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_array_shape": "\nSHT_strs_cdesc->shape[0] = nstrs;",
                            "c_array_size": "SHT_strs_cdesc->shape[0]",
                            "c_array_size2": "nstrs",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_array_context": "STR_SHROUD_array",
                            "c_helper_array_string_allocatable": "STR_ShroudArrayStringAllocatable",
                            "c_helper_array_string_out_len": "STR_ShroudArrayStringOutSize",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "strs",
                            "c_var_capsule": "SHT_strs_capsule",
                            "c_var_cdesc": "SHT_strs_cdesc",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "strs",
                            "cxx_type": "std::string",
                            "cxx_var": "strs",
                            "f_array_allocate": "(SHT_strs_cdesc%shape(1))",
                            "f_array_shape": ",\t SHT_strs_cdesc%shape(1:1)",
                            "f_assumed_shape": "(:)",
                            "f_cdesc_shape": "\nSHT_strs_cdesc%shape(1:1) = shape(strs)",
                            "f_char_type": "character(len=SHT_strs_cdesc%elem_len) ::\t ",
                            "f_helper_array_context": "STR_SHROUD_array",
                            "f_helper_array_string_allocatable": "STR_SHROUD_array_string_allocatable",
                            "f_helper_capsule_dtor": "STR_SHROUD_capsule_dtor",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "strs",
                            "f_var_capsule": "SHT_strs_capsule",
                            "f_var_cdesc": "SHT_strs_cdesc",
                            "fc_var": "strs",
                            "i_var": "strs",
                            "i_var_capsule": "SHT_strs_capsule",
                            "i_var_cdesc": "SHT_strs_cdesc",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_string_**_cdesc_allocatable"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "fetchArrayStringAlloc",
                    "F_name_api": "fetch_array_string_alloc",
                    "F_name_function": "fetch_array_string_alloc",
                    "F_name_generic": "fetch_array_string_alloc",
                    "F_name_impl": "fetch_array_string_alloc",
                    "function_name": "fetchArrayStringAlloc"
                }
            },
            {
                "<FUNCTION>": "fetchArrayStringAllocLen  37 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "fetchArrayStringAllocLen",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "deref": "allocatable",
                                        "dimension": "nstrs",
                                        "intent": "out",
                                        "len": "20"
                                    },
                                    "name": "strs",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "hidden": true,
                                        "intent": "out"
                                    },
                                    "name": "nstrs",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fetchArrayStringAllocLen( std::string **strs +intent(out)+len(20)+dimension(nstrs)+deref(allocatable), int *nstrs+intent(out)+hidden);",
                "declgen": "void fetchArrayStringAllocLen(std::string * * strs +deref(allocatable)+dimension(nstrs)+intent(out)+len(20), int * nstrs +hidden+intent(out))",
                "doxygen": {
                    "description": "Copy output into argument strs which must be large enough\nto hold values.  Excess values will be truncated.\nThe nstrs argument is the length of the array.\nIt is associated with strs via the dimension(nstrs) attribute.\n+hidden indicates that it is not part of the Fortran API.\nThe defered length is set to the len attribute.\n"
                },
                "helpers": {
                    "c": [
                        "array_context",
                        "array_string_allocatable",
                        "array_string_out_len"
                    ],
                    "f": [
                        "array_context",
                        "array_string_allocatable",
                        "capsule_dtor"
                    ]
                },
                "name": "fetchArrayStringAllocLen",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "nstrs": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_native_*"
                        },
                        "strs": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "name": "nstrs"
                                    }
                                ],
                                "dimension": "nstrs",
                                "intent": "out"
                            },
                            "stmt": "c_out_string_**"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "nstrs": {
                            "meta": {
                                "hidden": true,
                                "intent": "out"
                            },
                            "stmt": "f_out_native_*_hidden"
                        },
                        "strs": {
                            "meta": {
                                "api": "cdesc",
                                "deref": "allocatable",
                                "dim_ast": [
                                    {
                                        "name": "nstrs"
                                    }
                                ],
                                "dimension": "nstrs",
                                "intent": "out"
                            },
                            "stmt": "f_out_string_**_cdesc_allocatable"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "nstrs": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "strs": {
                            "meta": {
                                "dim_ast": [
                                    {
                                        "name": "nstrs"
                                    }
                                ],
                                "dimension": "nstrs",
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "fetchArrayStringAllocLen(\tstrs,\t nstrs)",
                            "C_call_list": "strs,\t nstrs",
                            "C_name": "STR_fetchArrayStringAllocLen",
                            "C_prototype": "char * * strs,\t int * nstrs",
                            "C_return_type": "void",
                            "F_C_arguments": "strs,\t nstrs",
                            "F_C_name": "c_fetch_array_string_alloc_len",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "fetchArrayStringAllocLen(\t&strs,\t &nstrs)",
                            "C_call_list": "&strs,\t &nstrs",
                            "C_name": "STR_fetchArrayStringAllocLen_bufferify",
                            "C_prototype": "STR_SHROUD_array *SHT_strs_cdesc,\t STR_SHROUD_capsule_data *SHT_strs_capsule",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_strs_cdesc,\t SHT_strs_capsule",
                            "F_C_call": "c_fetch_array_string_alloc_len_bufferify",
                            "F_C_name": "c_fetch_array_string_alloc_len_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_strs_cdesc,\t SHT_strs_capsule",
                            "F_arguments": "strs",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "nstrs": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nstrs",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nstrs",
                            "cxx_type": "int",
                            "cxx_var": "nstrs",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nstrs",
                            "i_var": "nstrs",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_out_native_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nstrs",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nstrs",
                            "cxx_type": "int",
                            "cxx_var": "nstrs",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "nstrs",
                            "i_var": "nstrs",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_out_native_*_hidden"
                        }
                    },
                    "strs": {
                        "fmtc": {
                            "c_addr": "",
                            "c_array_size2": "nstrs",
                            "c_char_len": "20",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "strs",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "strs",
                            "cxx_type": "std::string",
                            "cxx_var": "strs",
                            "f_array_allocate": "(nstrs)",
                            "f_assumed_shape": "(:)",
                            "f_char_len": "len=20",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "strs",
                            "i_var": "strs",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_string_**"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_array_shape": "\nSHT_strs_cdesc->shape[0] = nstrs;",
                            "c_array_size": "SHT_strs_cdesc->shape[0]",
                            "c_array_size2": "nstrs",
                            "c_char_len": "20",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_array_context": "STR_SHROUD_array",
                            "c_helper_array_string_allocatable": "STR_ShroudArrayStringAllocatable",
                            "c_helper_array_string_out_len": "STR_ShroudArrayStringOutSize",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "strs",
                            "c_var_capsule": "SHT_strs_capsule",
                            "c_var_cdesc": "SHT_strs_cdesc",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "strs",
                            "cxx_type": "std::string",
                            "cxx_var": "strs",
                            "f_array_allocate": "(SHT_strs_cdesc%shape(1))",
                            "f_array_shape": ",\t SHT_strs_cdesc%shape(1:1)",
                            "f_assumed_shape": "(:)",
                            "f_cdesc_shape": "\nSHT_strs_cdesc%shape(1:1) = shape(strs)",
                            "f_char_len": "len=20",
                            "f_helper_array_context": "STR_SHROUD_array",
                            "f_helper_array_string_allocatable": "STR_SHROUD_array_string_allocatable",
                            "f_helper_capsule_dtor": "STR_SHROUD_capsule_dtor",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "strs",
                            "f_var_capsule": "SHT_strs_capsule",
                            "f_var_cdesc": "SHT_strs_cdesc",
                            "fc_var": "strs",
                            "i_var": "strs",
                            "i_var_capsule": "SHT_strs_capsule",
                            "i_var_cdesc": "SHT_strs_cdesc",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_string_**_cdesc_allocatable"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "fetchArrayStringAllocLen",
                    "F_name_api": "fetch_array_string_alloc_len",
                    "F_name_function": "fetch_array_string_alloc_len",
                    "F_name_generic": "fetch_array_string_alloc_len",
                    "F_name_impl": "fetch_array_string_alloc_len",
                    "function_name": "fetchArrayStringAllocLen"
                }
            },
            {
                "<FUNCTION>": "returnMany  38 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "returnMany",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "char"
                    },
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "char returnMany(int *arg1 +intent(out))",
                "declgen": "char returnMany(int * arg1 +intent(out))",
                "doxygen": {
                    "description": "Test Py_BuildValue with multiple values.\n"
                },
                "name": "returnMany",
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "returnMany",
                    "F_name_api": "return_many",
                    "function_name": "returnMany"
                }
            },
            {
                "<FUNCTION>": "explicit1  39 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "explicit1",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "len_trim": "AAlen"
                                    },
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void explicit1(char * name+len_trim(AAlen)+intent(in))",
                "declgen": "void explicit1(char * name +intent(in)+len_trim(AAlen))",
                "name": "explicit1",
                "options": {},
                "user_fmt": {
                    "C_bufferify_suffix": "_BUFFER"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "name": {
                            "meta": {
                                "ftrim_char_in": true,
                                "intent": "in"
                            },
                            "stmt": "f_in_char_*"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "explicit1(\tname)",
                            "C_call_list": "name",
                            "C_name": "STR_explicit1",
                            "C_prototype": "char * name",
                            "C_return_type": "void",
                            "F_C_name": "c_explicit1",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "explicit1(\tname)",
                            "C_call_list": "name",
                            "C_name": "STR_explicit1",
                            "C_prototype": "char * name",
                            "C_return_type": "void",
                            "F_C_arguments": "name",
                            "F_C_call": "c_explicit1",
                            "F_C_name": "c_explicit1",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "trim(name)//C_NULL_CHAR",
                            "F_arguments": "name",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "fc_var": "name",
                            "i_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_*"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name",
                            "ctor_expr": "*name",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "data_var": "SHData_name",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt": "py_in_char_*",
                            "value_var": "SHValue_name"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_bufferify_suffix": "_BUFFER",
                    "C_name_api": "explicit1",
                    "F_name_api": "explicit1",
                    "F_name_function": "explicit1",
                    "F_name_generic": "explicit1",
                    "F_name_impl": "explicit1",
                    "PY_name_impl": "PY_explicit1",
                    "function_name": "explicit1"
                }
            },
            {
                "<FUNCTION>": "explicit2  40 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "explicit2",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out",
                                        "len": "AAtrim"
                                    },
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void explicit2(char * name+len(AAtrim)+intent(out))",
                "declgen": "void explicit2(char * name +intent(out)+len(AAtrim))",
                "helpers": {
                    "c": [
                        "char_blank_fill"
                    ]
                },
                "name": "explicit2",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "name": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "name": {
                            "meta": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "stmt": "f_out_char_*_buf"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "explicit2(\tname)",
                            "C_call_list": "name",
                            "C_name": "STR_explicit2",
                            "C_prototype": "char * name",
                            "C_return_type": "void",
                            "F_C_arguments": "name",
                            "F_C_name": "c_explicit2",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "explicit2(\tname)",
                            "C_call_list": "name",
                            "C_name": "STR_explicit2_bufferify",
                            "C_prototype": "char *name,\t int SHT_name_len",
                            "C_return_type": "void",
                            "F_C_arguments": "name,\t SHT_name_len",
                            "F_C_call": "c_explicit2_bufferify",
                            "F_C_name": "c_explicit2_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "name,\t SHT_name_len",
                            "F_arguments": "name",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_char_len": "AAtrim",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "f_char_len": "len=AAtrim",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "i_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_char_len": "AAtrim",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_blank_fill": "ShroudCharBlankFill",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "c_var_len": "SHT_name_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "f_char_len": "len=AAtrim",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "f_var_len": "SHT_name_len",
                            "fc_var": "name",
                            "i_var": "name",
                            "i_var_len": "SHT_name_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_char_*_buf"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "explicit2",
                    "F_name_api": "explicit2",
                    "F_name_function": "explicit2",
                    "F_name_generic": "explicit2",
                    "F_name_impl": "explicit2",
                    "function_name": "explicit2"
                }
            },
            {
                "<FUNCTION>": "CpassChar  41 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "CpassChar",
                        "params": [
                            {
                                "declarator": {
                                    "name": "status",
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void CpassChar(char status)",
                "declgen": "void CpassChar(char status)",
                "doxygen": {
                    "brief": "pass a single char argument as a scalar, extern \"C\""
                },
                "name": "CpassChar",
                "options": {
                    "C_extern_C": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "status": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "status": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_char_scalar"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "status": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "status": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "CpassChar(\tstatus)",
                            "C_call_list": "status",
                            "C_name": "CpassChar",
                            "C_prototype": "char status",
                            "C_return_type": "void",
                            "F_C_name": "c_cpass_char",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "CpassChar(\tstatus)",
                            "C_call_list": "status",
                            "C_name": "CpassChar",
                            "C_prototype": "char status",
                            "C_return_type": "void",
                            "F_C_arguments": "status",
                            "F_C_call": "c_cpass_char",
                            "F_C_name": "cpass_char",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "status",
                            "F_arguments": "status",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "status": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "char",
                            "c_var": "status",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&status",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "char",
                            "c_var": "status",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&status",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "status",
                            "fc_var": "status",
                            "i_var": "status",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "status",
                            "ctor_expr": "status",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&status",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "data_var": "SHData_status",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_status",
                            "pytmp_var": "SHTPy_status",
                            "size_var": "SHSize_status",
                            "stmt": "py_in_char_scalar",
                            "value_var": "SHValue_status"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "CpassChar",
                    "F_name_api": "cpass_char",
                    "F_name_function": "cpass_char",
                    "F_name_generic": "cpass_char",
                    "F_name_impl": "cpass_char",
                    "PY_name_impl": "PY_CpassChar",
                    "function_name": "CpassChar"
                }
            },
            {
                "<FUNCTION>": "CreturnChar  42 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "CreturnChar",
                        "params": [],
                        "typemap_name": "char"
                    },
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "char CreturnChar()",
                "declgen": "char CreturnChar(void)",
                "doxygen": {
                    "brief": "return a char argument (non-pointer), extern \"C\""
                },
                "name": "CreturnChar",
                "options": {
                    "C_extern_C": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_char_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_char_scalar"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "CreturnChar(\t)",
                            "C_name": "STR_CreturnChar",
                            "C_prototype": "char *SHC_rv",
                            "C_return_type": "void",
                            "F_C_name": "c_creturn_char",
                            "c_const": "",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_rv_decl": "char SHC_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_char_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "CreturnChar(\t)",
                            "C_name": "STR_CreturnChar",
                            "C_prototype": "char *SHC_rv",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv",
                            "F_C_call": "c_creturn_char",
                            "F_C_name": "c_creturn_char",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_rv_decl": "char SHC_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_char_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_char_scalar",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "CreturnChar",
                    "F_name_api": "creturn_char",
                    "F_name_function": "creturn_char",
                    "F_name_generic": "creturn_char",
                    "F_name_impl": "creturn_char",
                    "PY_name_impl": "PY_CreturnChar",
                    "function_name": "CreturnChar"
                }
            },
            {
                "<FUNCTION>": "CpassCharPtr  43 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "CpassCharPtr",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "dest",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            },
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "blanknull": true
                                    },
                                    "name": "src",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void CpassCharPtr(char * dest+intent(out), const char *src+blanknull)",
                "declgen": "void CpassCharPtr(char * dest +intent(out), const char * src +blanknull)",
                "doxygen": {
                    "brief": "strcpy like behavior",
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\nextern \"C\"\nIf src is a blank string, pass a NULL pointer to C library function.\n"
                },
                "helpers": {
                    "c": [
                        "char_blank_fill",
                        "char_alloc",
                        "char_free"
                    ]
                },
                "name": "CpassCharPtr",
                "options": {
                    "C_extern_C": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "dest": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_char_*"
                        },
                        "src": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "dest": {
                            "meta": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "stmt": "f_out_char_*_buf"
                        },
                        "src": {
                            "meta": {
                                "api": "buf",
                                "blanknull": true,
                                "intent": "in"
                            },
                            "stmt": "f_in_char_*_buf"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "dest": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "src": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "CpassCharPtr(\tdest,\t src)",
                            "C_call_list": "dest,\t src",
                            "C_name": "CpassCharPtr",
                            "C_prototype": "char * dest,\t const char * src",
                            "C_return_type": "void",
                            "F_C_arguments": "dest,\t src",
                            "F_C_name": "c_cpass_char_ptr",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "CpassCharPtr(\tdest,\t SHT_src_str)",
                            "C_call_list": "dest,\t SHT_src_str",
                            "C_name": "STR_CpassCharPtr_bufferify",
                            "C_prototype": "char *dest,\t int SHT_dest_len,\t char *src,\t int SHT_src_len",
                            "C_return_type": "void",
                            "F_C_arguments": "dest,\t SHT_dest_len,\t src,\t SHT_src_len",
                            "F_C_call": "c_cpass_char_ptr_bufferify",
                            "F_C_name": "c_cpass_char_ptr_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "dest,\t SHT_dest_len,\t src,\t SHT_src_len",
                            "F_arguments": "dest,\t src",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "dest": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "dest",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "dest",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "dest",
                            "i_var": "dest",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_blank_fill": "ShroudCharBlankFill",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "dest",
                            "c_var_len": "SHT_dest_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "dest",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "dest",
                            "f_var_len": "SHT_dest_len",
                            "fc_var": "dest",
                            "i_var": "dest",
                            "i_var_len": "SHT_dest_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_char_*_buf"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "src",
                            "i_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_blanknull": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_helper_char_alloc": "ShroudCharAlloc",
                            "c_helper_char_free": "ShroudCharFree",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "c_var_len": "SHT_src_len",
                            "c_var_str": "SHT_src_str",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "src",
                            "f_var_len": "SHT_src_len",
                            "fc_var": "src",
                            "i_var": "src",
                            "i_var_len": "SHT_src_len",
                            "i_var_str": "SHT_src_str",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_*_buf"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "CpassCharPtr",
                    "F_name_api": "cpass_char_ptr",
                    "F_name_function": "cpass_char_ptr",
                    "F_name_generic": "cpass_char_ptr",
                    "F_name_impl": "cpass_char_ptr",
                    "function_name": "CpassCharPtr"
                }
            },
            {
                "<FUNCTION>": "CpassCharPtrBlank  44 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "CpassCharPtrBlank",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "name": "dest",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            },
                            {
                                "const": true,
                                "declarator": {
                                    "name": "src",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void CpassCharPtrBlank(char * dest+intent(out), const char *src)",
                "declgen": "void CpassCharPtrBlank(char * dest +intent(out), const char * src)",
                "doxygen": {
                    "brief": "Test F_blanknull option"
                },
                "helpers": {
                    "c": [
                        "char_blank_fill",
                        "char_alloc",
                        "char_free"
                    ]
                },
                "name": "CpassCharPtrBlank",
                "options": {
                    "F_blanknull": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "dest": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_char_*"
                        },
                        "src": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "dest": {
                            "meta": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "stmt": "f_out_char_*_buf"
                        },
                        "src": {
                            "meta": {
                                "api": "buf",
                                "blanknull": true,
                                "intent": "in"
                            },
                            "stmt": "f_in_char_*_buf"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "dest": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "src": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "CpassCharPtrBlank(\tdest,\t src)",
                            "C_call_list": "dest,\t src",
                            "C_name": "STR_CpassCharPtrBlank",
                            "C_prototype": "char * dest,\t const char * src",
                            "C_return_type": "void",
                            "F_C_arguments": "dest,\t src",
                            "F_C_name": "c_cpass_char_ptr_blank",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "CpassCharPtrBlank(\tdest,\t SHT_src_str)",
                            "C_call_list": "dest,\t SHT_src_str",
                            "C_name": "STR_CpassCharPtrBlank_bufferify",
                            "C_prototype": "char *dest,\t int SHT_dest_len,\t char *src,\t int SHT_src_len",
                            "C_return_type": "void",
                            "F_C_arguments": "dest,\t SHT_dest_len,\t src,\t SHT_src_len",
                            "F_C_call": "c_cpass_char_ptr_blank_bufferify",
                            "F_C_name": "c_cpass_char_ptr_blank_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "dest,\t SHT_dest_len,\t src,\t SHT_src_len",
                            "F_arguments": "dest,\t src",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "dest": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "dest",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "dest",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "dest",
                            "i_var": "dest",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_out_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_blank_fill": "ShroudCharBlankFill",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "dest",
                            "c_var_len": "SHT_dest_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "dest",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "dest",
                            "f_var_len": "SHT_dest_len",
                            "fc_var": "dest",
                            "i_var": "dest",
                            "i_var_len": "SHT_dest_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_out_char_*_buf"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "src",
                            "i_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_blanknull": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_helper_char_alloc": "ShroudCharAlloc",
                            "c_helper_char_free": "ShroudCharFree",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "c_var_len": "SHT_src_len",
                            "c_var_str": "SHT_src_str",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "src",
                            "f_var_len": "SHT_src_len",
                            "fc_var": "src",
                            "i_var": "src",
                            "i_var_len": "SHT_src_len",
                            "i_var_str": "SHT_src_str",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_*_buf"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "CpassCharPtrBlank",
                    "F_name_api": "cpass_char_ptr_blank",
                    "F_name_function": "cpass_char_ptr_blank",
                    "F_name_generic": "cpass_char_ptr_blank",
                    "F_name_impl": "cpass_char_ptr_blank",
                    "function_name": "CpassCharPtrBlank"
                }
            },
            {
                "<FUNCTION>": "PostDeclare  45 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "PostDeclare",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "in",
                                        "rank": 1
                                    },
                                    "name": "count",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void PostDeclare(int *count +rank(1)+intent(in), std::string &name)",
                "declgen": "void PostDeclare(int * count +intent(in)+rank(1), std::string & name)",
                "doxygen": {
                    "description": "Test post_declare.\nThe std::string in py_string_inout must be declared before the\ngoto added by py_native_*_in_pointer_list to avoid\n\"jump to label 'fail' crosses initialization of\" error.\n"
                },
                "helpers": {
                    "c": [
                        "char_copy",
                        "char_len_trim"
                    ]
                },
                "name": "PostDeclare",
                "options": {
                    "PY_array_arg": "list"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "count": {
                            "meta": {
                                "intent": "in",
                                "rank": 1
                            },
                            "stmt": "c_in_native_*"
                        },
                        "name": {
                            "meta": {
                                "intent": "inout"
                            },
                            "stmt": "c_inout_string_&"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "count": {
                            "meta": {
                                "intent": "in",
                                "rank": 1
                            },
                            "stmt": "f_in_native_*"
                        },
                        "name": {
                            "meta": {
                                "api": "buf",
                                "intent": "inout"
                            },
                            "stmt": "f_inout_string_&_buf"
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "intent": "in",
                                "rank": 1
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "inout"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "count": {
                            "meta": {
                                "intent": "in",
                                "rank": 1
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "inout"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "PostDeclare(\tcount,\t SHCXX_name)",
                            "C_call_list": "count,\t SHCXX_name",
                            "C_name": "STR_PostDeclare",
                            "C_prototype": "int * count,\t char * name",
                            "C_return_type": "void",
                            "F_C_arguments": "count,\t name",
                            "F_C_name": "c_post_declare",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "PostDeclare(\tcount,\t SHCXX_name)",
                            "C_call_list": "count,\t SHCXX_name",
                            "C_name": "STR_PostDeclare_bufferify",
                            "C_prototype": "int * count,\t char *name,\t int SHT_name_len",
                            "C_return_type": "void",
                            "F_C_arguments": "count,\t name,\t SHT_name_len",
                            "F_C_call": "c_post_declare_bufferify",
                            "F_C_name": "c_post_declare_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "count,\t name,\t SHT_name_len",
                            "F_arguments": "count,\t name",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "count": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "count",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "i_dimension": "(*)",
                            "i_var": "count",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(count)",
                            "stmt_name": "c_in_native_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "count",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "f_assumed_shape": "(:)",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "count",
                            "fc_var": "count",
                            "i_dimension": "(*)",
                            "i_var": "count",
                            "idtor": "0",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(count)",
                            "stmt_name": "f_in_native_*"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "count",
                            "ctor_expr": "*count",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "data_var": "SHData_count",
                            "hnamefunc0": "SHROUD_get_from_object_int_list",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_count",
                            "pytmp_var": "SHTPy_count",
                            "rank": "1",
                            "size_var": "SHSize_count",
                            "stmt": "py_in_native_*_list",
                            "value_var": "SHValue_count"
                        }
                    },
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_name",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "i_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_inout_string_&"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "c_var_len": "SHT_name_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_name",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "f_var_len": "SHT_name_len",
                            "fc_var": "name",
                            "i_var": "name",
                            "i_var_len": "SHT_name_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_inout_string_&_buf"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "name",
                            "ctor_expr": "SH_name.data(),\t SH_name.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&name",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_name",
                            "data_var": "SHData_name",
                            "numpy_type": null,
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt": "py_inout_string_&",
                            "value_var": "SHValue_name"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "PostDeclare",
                    "F_name_api": "post_declare",
                    "F_name_function": "post_declare",
                    "F_name_generic": "post_declare",
                    "F_name_impl": "post_declare",
                    "PY_name_impl": "PY_PostDeclare",
                    "function_name": "PostDeclare"
                }
            },
            {
                "<FUNCTION>": "CpassCharPtrNotrim  46 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "CpassCharPtrNotrim",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "src",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int CpassCharPtrNotrim(const char *src)",
                "declgen": "int CpassCharPtrNotrim(const char * src)",
                "doxygen": {
                    "brief": "NULL terminate input string in C, not in Fortran."
                },
                "helpers": {
                    "c": [
                        "char_alloc",
                        "char_free"
                    ]
                },
                "name": "CpassCharPtrNotrim",
                "options": {
                    "F_trim_char_in": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "src": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "src": {
                            "meta": {
                                "api": "buf",
                                "ftrim_char_in": false,
                                "intent": "in"
                            },
                            "stmt": "f_in_char_*_buf"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "src": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "CpassCharPtrNotrim(\tsrc)",
                            "C_call_list": "src",
                            "C_name": "STR_CpassCharPtrNotrim",
                            "C_prototype": "const char * src",
                            "C_return_type": "int",
                            "F_C_arguments": "src",
                            "F_C_name": "c_cpass_char_ptr_notrim",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "CpassCharPtrNotrim(\tSHT_src_str)",
                            "C_call_list": "SHT_src_str",
                            "C_name": "STR_CpassCharPtrNotrim_bufferify",
                            "C_prototype": "char *src,\t int SHT_src_len",
                            "C_return_type": "int",
                            "F_C_arguments": "src,\t SHT_src_len",
                            "F_C_call": "c_cpass_char_ptr_notrim_bufferify",
                            "F_C_name": "c_cpass_char_ptr_notrim_bufferify",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "src,\t SHT_src_len",
                            "F_arguments": "src",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_c_suffix": "_bufferify",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "src",
                            "i_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_helper_char_alloc": "ShroudCharAlloc",
                            "c_helper_char_free": "ShroudCharFree",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "c_var_len": "SHT_src_len",
                            "c_var_str": "SHT_src_str",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "src",
                            "f_var_len": "SHT_src_len",
                            "fc_var": "src",
                            "i_var": "src",
                            "i_var_len": "SHT_src_len",
                            "i_var_str": "SHT_src_str",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_*_buf"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "CpassCharPtrNotrim",
                    "F_name_api": "cpass_char_ptr_notrim",
                    "F_name_function": "cpass_char_ptr_notrim",
                    "F_name_generic": "cpass_char_ptr_notrim",
                    "F_name_impl": "cpass_char_ptr_notrim",
                    "function_name": "CpassCharPtrNotrim"
                }
            },
            {
                "<FUNCTION>": "CpassCharPtrCAPI  47 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "CpassCharPtrCAPI",
                        "params": [
                            {
                                "declarator": {
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "void"
                                },
                                "specifier": [
                                    "void"
                                ],
                                "typemap_name": "void"
                            },
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "api": "capi"
                                    },
                                    "name": "src",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int CpassCharPtrCAPI(void *addr, const char *src +api(capi))",
                "declgen": "int CpassCharPtrCAPI(void * addr, const char * src +api(capi))",
                "doxygen": {
                    "brief": "Do not NULL terminate input string",
                    "description": "The C library function should get the same address\nfor addr and src.\nUsed when the C function needs the true address of the argument.\nSkips null-termination. Useful to create an interface for\na function which is already callable by Fortran.\nFor example, the length is passed explicitly.\nThis example will not create a Fortran wrapper since C can be\ncalled directly.\n"
                },
                "name": "CpassCharPtrCAPI",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "addr": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_void_*"
                        },
                        "src": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "addr": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_void_*"
                        },
                        "src": {
                            "meta": {
                                "api": "capi",
                                "intent": "in"
                            },
                            "stmt": "f_in_char_*_capi"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "addr": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "src": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "CpassCharPtrCAPI(\taddr,\t src)",
                            "C_call_list": "addr,\t src",
                            "C_name": "STR_CpassCharPtrCAPI",
                            "C_prototype": "void * addr,\t const char * src",
                            "C_return_type": "int",
                            "F_C_name": "c_cpass_char_ptr_capi",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "CpassCharPtrCAPI(\taddr,\t src)",
                            "C_call_list": "addr,\t src",
                            "C_name": "STR_CpassCharPtrCAPI",
                            "C_prototype": "void * addr,\t const char * src",
                            "C_return_type": "int",
                            "F_C_arguments": "addr,\t src",
                            "F_C_call": "c_cpass_char_ptr_capi",
                            "F_C_name": "cpass_char_ptr_capi",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "addr,\t src",
                            "F_arguments": "addr,\t src",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        }
                    },
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "addr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "addr",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "c_in_void_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "void",
                            "c_var": "addr",
                            "cfi_type": "CFI_type_intptr_t",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "addr",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "f_intent": "IN",
                            "f_type": "type(C_PTR)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "addr",
                            "fc_var": "addr",
                            "i_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt_name": "f_in_void_*"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "src",
                            "fc_var": "src",
                            "i_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_*_capi"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "CpassCharPtrCAPI",
                    "F_name_api": "cpass_char_ptr_capi",
                    "F_name_function": "cpass_char_ptr_capi",
                    "F_name_generic": "cpass_char_ptr_capi",
                    "F_name_impl": "cpass_char_ptr_capi",
                    "function_name": "CpassCharPtrCAPI"
                }
            },
            {
                "<FUNCTION>": "CpassCharPtrCAPI2  48 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "CpassCharPtrCAPI2",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "in",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            },
                            {
                                "const": true,
                                "declarator": {
                                    "attrs": {
                                        "api": "capi"
                                    },
                                    "name": "src",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ],
                                    "typemap_name": "char"
                                },
                                "specifier": [
                                    "char"
                                ],
                                "typemap_name": "char"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int CpassCharPtrCAPI2(const char *in, const char *src +api(capi))",
                "declgen": "int CpassCharPtrCAPI2(const char * in, const char * src +api(capi))",
                "doxygen": {
                    "brief": "Mix api(buf) and api(capi)"
                },
                "name": "CpassCharPtrCAPI2",
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_*"
                        },
                        "src": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_char_*"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "in": {
                            "meta": {
                                "ftrim_char_in": true,
                                "intent": "in"
                            },
                            "stmt": "f_in_char_*"
                        },
                        "src": {
                            "meta": {
                                "api": "capi",
                                "intent": "in"
                            },
                            "stmt": "f_in_char_*_capi"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "src": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "CpassCharPtrCAPI2(\tin,\t src)",
                            "C_call_list": "in,\t src",
                            "C_name": "STR_CpassCharPtrCAPI2",
                            "C_prototype": "const char * in,\t const char * src",
                            "C_return_type": "int",
                            "F_C_name": "c_cpass_char_ptr_capi2",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "CpassCharPtrCAPI2(\tin,\t src)",
                            "C_call_list": "in,\t src",
                            "C_name": "STR_CpassCharPtrCAPI2",
                            "C_prototype": "const char * in,\t const char * src",
                            "C_return_type": "int",
                            "F_C_arguments": "in,\t src",
                            "F_C_call": "c_cpass_char_ptr_capi2",
                            "F_C_name": "c_cpass_char_ptr_capi2",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "trim(in)//C_NULL_CHAR,\t src",
                            "F_arguments": "in,\t src",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        }
                    },
                    "in": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "in",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(in)",
                            "cxx_type": "char",
                            "cxx_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "in",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(in)",
                            "cxx_type": "char",
                            "cxx_var": "in",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "in",
                            "fc_var": "in",
                            "i_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_*"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_char_*"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "src",
                            "fc_var": "src",
                            "i_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_char_*_capi"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "CpassCharPtrCAPI2",
                    "F_name_api": "cpass_char_ptr_capi2",
                    "F_name_function": "cpass_char_ptr_capi2",
                    "F_name_generic": "cpass_char_ptr_capi2",
                    "F_name_impl": "cpass_char_ptr_capi2",
                    "function_name": "CpassCharPtrCAPI2"
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "strings"
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "python": true
        }
    }
}