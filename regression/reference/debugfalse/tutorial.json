{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "tutorial.hpp"
        ],
        "enums": [
            {
                "<ENUM>": "Color ****************************************",
                "_fmtmembers": {
                    "BLUE": {
                        "C_enum_member": "TUT_BLUE",
                        "F_enum_member": "blue",
                        "F_value": 1,
                        "enum_member_lower": "blue",
                        "enum_member_name": "BLUE",
                        "enum_member_upper": "BLUE"
                    },
                    "RED": {
                        "C_enum_member": "TUT_RED",
                        "F_enum_member": "red",
                        "F_value": 0,
                        "enum_member_lower": "red",
                        "enum_member_name": "RED",
                        "enum_member_upper": "RED"
                    },
                    "WHITE": {
                        "C_enum_member": "TUT_WHITE",
                        "F_enum_member": "white",
                        "F_value": 2,
                        "enum_member_lower": "white",
                        "enum_member_name": "WHITE",
                        "enum_member_upper": "WHITE"
                    }
                },
                "ast": {
                    "members": [
                        {
                            "name": "RED"
                        },
                        {
                            "name": "BLUE"
                        },
                        {
                            "name": "WHITE"
                        }
                    ],
                    "name": "Color"
                },
                "decl": "enum Color {\n  RED,\n  BLUE,\n  WHITE\n};\n",
                "name": "Color",
                "options": {
                    "bar": 4
                },
                "typemap_name": "tutorial::Color",
                "user_fmt": {
                    "baz": "4"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_enum": "TUT_Color",
                    "enum_lower": "color",
                    "enum_name": "Color",
                    "enum_upper": "COLOR"
                }
            }
        ],
        "functions": [
            {
                "<FUNCTION>": "NoReturnNoArguments  0 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "NoReturnNoArguments",
                        "params": [],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void NoReturnNoArguments()",
                "declgen": "void NoReturnNoArguments(void)",
                "name": "NoReturnNoArguments",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::NoReturnNoArguments(\t)",
                            "C_name": "TUT_NoReturnNoArguments",
                            "C_prototype": "void",
                            "C_return_type": "void",
                            "F_C_name": "c_no_return_no_arguments",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::NoReturnNoArguments(\t)",
                            "C_name": "TUT_NoReturnNoArguments",
                            "C_prototype": "void",
                            "C_return_type": "void",
                            "F_C_arguments": "",
                            "F_C_call": "c_no_return_no_arguments",
                            "F_C_name": "no_return_no_arguments",
                            "F_C_subprogram": "subroutine",
                            "F_arguments": "",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        },
                        "fmtl": {
                            "stmt": "lua_subroutine"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "NoReturnNoArguments",
                    "F_name_api": "no_return_no_arguments",
                    "F_name_function": "no_return_no_arguments",
                    "F_name_generic": "no_return_no_arguments",
                    "F_name_impl": "no_return_no_arguments",
                    "LUA_name": "NoReturnNoArguments",
                    "LUA_name_api": "NoReturnNoArguments",
                    "LUA_name_impl": "l_NoReturnNoArguments",
                    "PY_name_impl": "PY_NoReturnNoArguments",
                    "function_name": "NoReturnNoArguments"
                }
            },
            {
                "<FUNCTION>": "PassByValue  1 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "PassByValue",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "double"
                    },
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double PassByValue(double arg1, int arg2)",
                "declgen": "double PassByValue(double arg1 +value, int arg2 +value)",
                "name": "PassByValue",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::PassByValue(\targ1,\t arg2)",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "TUT_PassByValue",
                            "C_prototype": "double arg1,\t int arg2",
                            "C_return_type": "double",
                            "F_C_name": "c_pass_by_value",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "double",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "double SHC_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::PassByValue(\targ1,\t arg2)",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "TUT_PassByValue",
                            "C_prototype": "double arg1,\t int arg2",
                            "C_return_type": "double",
                            "F_C_arguments": "arg1,\t arg2",
                            "F_C_call": "c_pass_by_value",
                            "F_C_name": "pass_by_value",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "arg1,\t arg2",
                            "F_arguments": "arg1,\t arg2",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "double",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "double SHC_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtl": {
                            "c_var": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_var": "SHCXX_rv",
                            "push_arg": "SHCXX_rv",
                            "push_expr": "lua_pushnumber(L, SHCXX_rv)",
                            "stmt": "lua_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "c_var_len": "Larg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "lua_var": "SH_Lua_arg1",
                            "pop_expr": "lua_tonumber(L, 1)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg1",
                            "ctor_expr": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "fc_var": "arg2",
                            "i_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2",
                            "pop_expr": "lua_tointeger(L, 2)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg2",
                            "ctor_expr": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "PassByValue",
                    "F_name_api": "pass_by_value",
                    "F_name_function": "pass_by_value",
                    "F_name_generic": "pass_by_value",
                    "F_name_impl": "pass_by_value",
                    "LUA_name": "PassByValue",
                    "LUA_name_api": "PassByValue",
                    "LUA_name_impl": "l_PassByValue",
                    "PY_name_impl": "PY_PassByValue",
                    "function_name": "PassByValue"
                }
            },
            {
                "<FUNCTION>": "ConcatenateStrings  2 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "metaattrs": {
                            "deref": "allocatable"
                        },
                        "name": "ConcatenateStrings",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string ConcatenateStrings( const std::string& arg1, const std::string& arg2 )",
                "declgen": "const std::string ConcatenateStrings(const std::string & arg1, const std::string & arg2)",
                "doxygen": {
                    "description": "Note that since a reference is returned, no intermediate string\nis allocated.  It is assumed +owner(library).\n"
                },
                "helpers": {
                    "c": [
                        "array_context",
                        "string_to_cdesc",
                        "copy_string",
                        "char_len_trim"
                    ],
                    "f": [
                        "array_context",
                        "copy_string",
                        "capsule_dtor"
                    ]
                },
                "name": "ConcatenateStrings",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_scalar"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_string_&"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_string_&"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "cdesc",
                                "deref": "allocatable",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_scalar_cdesc_allocatable"
                        },
                        "arg1": {
                            "meta": {
                                "api": "buf",
                                "intent": "in"
                            },
                            "stmt": "f_in_string_&_buf"
                        },
                        "arg2": {
                            "meta": {
                                "api": "buf",
                                "intent": "in"
                            },
                            "stmt": "f_in_string_&_buf"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::ConcatenateStrings(\tSHCXX_arg1,\t SHCXX_arg2)",
                            "C_call_list": "SHCXX_arg1,\t SHCXX_arg2",
                            "C_name": "TUT_ConcatenateStrings",
                            "C_prototype": "const char * arg1,\t const char * arg2",
                            "C_return_type": "const char",
                            "F_C_arguments": "arg1,\t arg2",
                            "F_C_name": "c_concatenate_strings",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_const": "const ",
                            "c_get_value": "",
                            "c_rv_decl": "const char SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv.c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::ConcatenateStrings(\tSHCXX_arg1,\t SHCXX_arg2)",
                            "C_call_list": "SHCXX_arg1,\t SHCXX_arg2",
                            "C_name": "TUT_ConcatenateStrings_bufferify",
                            "C_prototype": "char *arg1,\t int SHT_arg1_len,\t char *arg2,\t int SHT_arg2_len,\t TUT_SHROUD_array *SHT_rv_cdesc,\t TUT_SHROUD_capsule_data *SHT_rv_capsule",
                            "C_return_type": "void",
                            "F_C_arguments": "arg1,\t SHT_arg1_len,\t arg2,\t SHT_arg2_len,\t SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_C_call": "c_concatenate_strings_bufferify",
                            "F_C_name": "c_concatenate_strings_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg1,\t SHT_arg1_len,\t arg2,\t SHT_arg2_len,\t SHT_rv_cdesc,\t SHT_rv_capsule",
                            "F_arguments": "arg1,\t arg2",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "const ",
                            "c_helper_array_context": "TUT_SHROUD_array",
                            "c_helper_copy_string": "TUT_ShroudCopyString",
                            "c_helper_string_to_cdesc": "ShroudStringToCdesc",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_capsule": "SHT_rv_capsule",
                            "c_var_cdesc": "SHT_rv_cdesc",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_rv_decl": "*SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_helper_array_context": "TUT_SHROUD_array",
                            "f_helper_capsule_dtor": "TUT_SHROUD_capsule_dtor",
                            "f_helper_copy_string": "TUT_SHROUD_copy_string",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_capsule": "SHT_rv_capsule",
                            "f_var_cdesc": "SHT_rv_cdesc",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_capsule": "SHT_rv_capsule",
                            "i_var_cdesc": "SHT_rv_cdesc",
                            "idtor": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_scalar_cdesc_allocatable"
                        },
                        "fmtl": {
                            "c_var": "SHCXX_rv.c_str()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_var": "SHCXX_rv",
                            "push_arg": "SHCXX_rv.c_str()",
                            "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                            "stmt": "lua_function_string_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_string_&"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "c_var_len": "SHT_arg1_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "f_var_len": "SHT_arg1_len",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "i_var_len": "SHT_arg1_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_string_&_buf"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "c_var_len": "Larg1",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "arg1",
                            "lua_var": "SH_Lua_arg1",
                            "pop_expr": "lua_tostring(L, 1)",
                            "stmt": "lua_in_string_&"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_in_string_&",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_arg2)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg2",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "i_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_string_&"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg2",
                            "c_var_len": "SHT_arg2_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_arg2)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg2",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "f_var_len": "SHT_arg2_len",
                            "fc_var": "arg2",
                            "i_var": "arg2",
                            "i_var_len": "SHT_arg2_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_string_&_buf"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2",
                            "pop_expr": "lua_tostring(L, 2)",
                            "stmt": "lua_in_string_&"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg2",
                            "ctor_expr": "SH_arg2.data(),\t SH_arg2.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&arg2)",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": null,
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt": "py_in_string_&",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "ConcatenateStrings",
                    "F_name_api": "concatenate_strings",
                    "F_name_function": "concatenate_strings",
                    "F_name_generic": "concatenate_strings",
                    "F_name_impl": "concatenate_strings",
                    "LUA_name": "ConcatenateStrings",
                    "LUA_name_api": "ConcatenateStrings",
                    "LUA_name_impl": "l_ConcatenateStrings",
                    "PY_name_impl": "PY_ConcatenateStrings",
                    "function_name": "ConcatenateStrings"
                }
            },
            {
                "<FUNCTION>": "UseDefaultArguments  18 ****************************************",
                "_generated": "has_default_arg",
                "_generated_path": [
                    "has_default_arg"
                ],
                "_orig_node_index": 3,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultArguments",
                        "params": [],
                        "typemap_name": "double"
                    },
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double UseDefaultArguments(double arg1 = 3.1415, bool arg2 = true)",
                "declgen": "double UseDefaultArguments(void)",
                "default_arg_suffix": [
                    "",
                    "_arg1",
                    "_arg1_arg2"
                ],
                "name": "UseDefaultArguments",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::UseDefaultArguments(\t)",
                            "C_name": "TUT_UseDefaultArguments",
                            "C_prototype": "void",
                            "C_return_type": "double",
                            "F_C_name": "c_use_default_arguments",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "double",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "double SHC_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::UseDefaultArguments(\t)",
                            "C_name": "TUT_UseDefaultArguments",
                            "C_prototype": "void",
                            "C_return_type": "double",
                            "F_C_arguments": "",
                            "F_C_call": "c_use_default_arguments",
                            "F_C_name": "c_use_default_arguments",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "double",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "double SHC_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_function_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "UseDefaultArguments",
                    "F_name_api": "use_default_arguments",
                    "F_name_function": "use_default_arguments",
                    "F_name_generic": "use_default_arguments",
                    "F_name_impl": "use_default_arguments",
                    "function_name": "UseDefaultArguments",
                    "function_suffix": ""
                }
            },
            {
                "<FUNCTION>": "UseDefaultArguments  19 ****************************************",
                "_generated": "has_default_arg",
                "_generated_path": [
                    "has_default_arg"
                ],
                "_orig_node_index": 3,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultArguments",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "init": 3.1415,
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "double"
                    },
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double UseDefaultArguments(double arg1 = 3.1415, bool arg2 = true)",
                "declgen": "double UseDefaultArguments(double arg1=3.1415 +value)",
                "default_arg_suffix": [
                    "",
                    "_arg1",
                    "_arg1_arg2"
                ],
                "name": "UseDefaultArguments",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::UseDefaultArguments(\targ1)",
                            "C_call_list": "arg1",
                            "C_name": "TUT_UseDefaultArguments_arg1",
                            "C_prototype": "double arg1",
                            "C_return_type": "double",
                            "F_C_name": "c_use_default_arguments_arg1",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "double",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "double SHC_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::UseDefaultArguments(\targ1)",
                            "C_call_list": "arg1",
                            "C_name": "TUT_UseDefaultArguments_arg1",
                            "C_prototype": "double arg1",
                            "C_return_type": "double",
                            "F_C_arguments": "arg1",
                            "F_C_call": "c_use_default_arguments_arg1",
                            "F_C_name": "c_use_default_arguments_arg1",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "arg1",
                            "F_arguments": "arg1",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "double",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "double SHC_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_function_native_scalar"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "UseDefaultArguments",
                    "F_name_api": "use_default_arguments",
                    "F_name_function": "use_default_arguments_arg1",
                    "F_name_generic": "use_default_arguments",
                    "F_name_impl": "use_default_arguments_arg1",
                    "function_name": "UseDefaultArguments",
                    "function_suffix": "_arg1"
                }
            },
            {
                "<FUNCTION>": "UseDefaultArguments  3 ****************************************",
                "_default_funcs": [
                    18,
                    19
                ],
                "_has_default_arg": true,
                "_nargs": [
                    0,
                    2
                ],
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultArguments",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "init": 3.1415,
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg1",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "init": "true",
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "typemap_name": "bool"
                                },
                                "specifier": [
                                    "bool"
                                ],
                                "typemap_name": "bool"
                            }
                        ],
                        "typemap_name": "double"
                    },
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double UseDefaultArguments(double arg1 = 3.1415, bool arg2 = true)",
                "declgen": "double UseDefaultArguments(double arg1=3.1415 +value, bool arg2=true +value)",
                "default_arg_suffix": [
                    "",
                    "_arg1",
                    "_arg1_arg2"
                ],
                "name": "UseDefaultArguments",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_bool_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_bool_scalar"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg1": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::UseDefaultArguments(\targ1,\t arg2)",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "TUT_UseDefaultArguments_arg1_arg2",
                            "C_prototype": "double arg1,\t bool arg2",
                            "C_return_type": "double",
                            "F_C_name": "c_use_default_arguments_arg1_arg2",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "double",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "double SHC_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::UseDefaultArguments(\targ1,\t arg2)",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "TUT_UseDefaultArguments_arg1_arg2",
                            "C_prototype": "double arg1,\t bool arg2",
                            "C_return_type": "double",
                            "F_C_arguments": "arg1,\t arg2",
                            "F_C_call": "c_use_default_arguments_arg1_arg2",
                            "F_C_name": "c_use_default_arguments_arg1_arg2",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "arg1,\t SHT_arg2_cxx",
                            "F_arguments": "arg1,\t arg2",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "double",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "double SHC_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtl": {
                            "c_var": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_var": "SHCXX_rv",
                            "push_arg": "SHCXX_rv",
                            "push_expr": "lua_pushnumber(L, SHCXX_rv)",
                            "stmt": "lua_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg1",
                            "fc_var": "arg1",
                            "i_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "c_var_len": "Larg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "lua_var": "SH_Lua_arg1",
                            "pop_expr": "lua_tonumber(L, 1)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg1",
                            "ctor_expr": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "bool",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "c_in_bool_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "bool",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_Bool",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_BOOL",
                            "f_type": "logical",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "f_var_cxx": "SHT_arg2_cxx",
                            "fc_var": "arg2",
                            "i_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt_name": "f_in_bool_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2",
                            "pop_expr": "lua_toboolean(L, 2)",
                            "stmt": "lua_in_bool_scalar"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "arg2",
                            "ctor_expr": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_BOOL",
                            "py_object": "PyObject",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt": "py_in_bool_scalar",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "UseDefaultArguments",
                    "F_name_api": "use_default_arguments",
                    "F_name_function": "use_default_arguments_arg1_arg2",
                    "F_name_generic": "use_default_arguments",
                    "F_name_impl": "use_default_arguments_arg1_arg2",
                    "LUA_name": "UseDefaultArguments",
                    "LUA_name_api": "UseDefaultArguments",
                    "LUA_name_impl": "l_UseDefaultArguments",
                    "PY_cleanup_decref": "Py_XDECREF",
                    "PY_name_impl": "PY_UseDefaultArguments_arg1_arg2",
                    "function_name": "UseDefaultArguments",
                    "function_suffix": "_arg1_arg2"
                }
            },
            {
                "<FUNCTION>": "OverloadedFunction  4 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "OverloadedFunction",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void OverloadedFunction(const std::string& name)",
                "declgen": "void OverloadedFunction(const std::string & name)",
                "helpers": {
                    "c": [
                        "char_len_trim"
                    ]
                },
                "name": "OverloadedFunction",
                "options": {},
                "user_fmt": {
                    "function_suffix": "_from_name"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_string_&"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "name": {
                            "meta": {
                                "api": "buf",
                                "intent": "in"
                            },
                            "stmt": "f_in_string_&_buf"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::OverloadedFunction(\tSHCXX_name)",
                            "C_call_list": "SHCXX_name",
                            "C_name": "TUT_OverloadedFunction_from_name",
                            "C_prototype": "const char * name",
                            "C_return_type": "void",
                            "F_C_arguments": "name",
                            "F_C_name": "c_overloaded_function_from_name",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::OverloadedFunction(\tSHCXX_name)",
                            "C_call_list": "SHCXX_name",
                            "C_name": "TUT_OverloadedFunction_from_name_bufferify",
                            "C_prototype": "char *name,\t int SHT_name_len",
                            "C_return_type": "void",
                            "F_C_arguments": "name,\t SHT_name_len",
                            "F_C_call": "c_overloaded_function_from_name_bufferify",
                            "F_C_name": "c_overloaded_function_from_name_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "name,\t SHT_name_len",
                            "F_arguments": "name",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        },
                        "fmtl": {
                            "stmt": "lua_subroutine"
                        }
                    },
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "i_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_string_&"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "c_var_len": "SHT_name_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "f_var_len": "SHT_name_len",
                            "fc_var": "name",
                            "i_var": "name",
                            "i_var_len": "SHT_name_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_string_&_buf"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "name",
                            "c_var_len": "Lname",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "name",
                            "lua_var": "SH_Lua_name",
                            "pop_expr": "lua_tostring(L, 1)",
                            "stmt": "lua_in_string_&"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "name",
                            "ctor_expr": "SH_name.data(),\t SH_name.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&name)",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_name",
                            "data_var": "SHData_name",
                            "numpy_type": null,
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt": "py_in_string_&",
                            "value_var": "SHValue_name"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "OverloadedFunction",
                    "F_name_api": "overloaded_function",
                    "F_name_function": "overloaded_function_from_name",
                    "F_name_generic": "overloaded_function",
                    "F_name_impl": "overloaded_function_from_name",
                    "LUA_name": "OverloadedFunction",
                    "LUA_name_api": "OverloadedFunction",
                    "LUA_name_impl": "l_OverloadedFunction",
                    "PY_name_impl": "PY_OverloadedFunction_from_name",
                    "function_name": "OverloadedFunction",
                    "function_suffix": "_from_name"
                }
            },
            {
                "<FUNCTION>": "OverloadedFunction  5 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "OverloadedFunction",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "indx",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void OverloadedFunction(int indx)",
                "declgen": "void OverloadedFunction(int indx +value)",
                "name": "OverloadedFunction",
                "options": {},
                "user_fmt": {
                    "function_suffix": "_from_index"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "indx": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "indx": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "indx": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "indx": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "indx": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::OverloadedFunction(\tindx)",
                            "C_call_list": "indx",
                            "C_name": "TUT_OverloadedFunction_from_index",
                            "C_prototype": "int indx",
                            "C_return_type": "void",
                            "F_C_name": "c_overloaded_function_from_index",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::OverloadedFunction(\tindx)",
                            "C_call_list": "indx",
                            "C_name": "TUT_OverloadedFunction_from_index",
                            "C_prototype": "int indx",
                            "C_return_type": "void",
                            "F_C_arguments": "indx",
                            "F_C_call": "c_overloaded_function_from_index",
                            "F_C_name": "c_overloaded_function_from_index",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "indx",
                            "F_arguments": "indx",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        },
                        "fmtl": {
                            "stmt": "lua_subroutine"
                        }
                    },
                    "indx": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "indx",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&indx",
                            "cxx_type": "int",
                            "cxx_var": "indx",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "indx",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&indx",
                            "cxx_type": "int",
                            "cxx_var": "indx",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "indx",
                            "fc_var": "indx",
                            "i_var": "indx",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "indx",
                            "c_var_len": "Lindx",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "indx",
                            "lua_var": "SH_Lua_indx",
                            "pop_expr": "lua_tointeger(L, 1)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "indx",
                            "ctor_expr": "indx",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&indx",
                            "cxx_type": "int",
                            "cxx_var": "indx",
                            "data_var": "SHData_indx",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_indx",
                            "size_var": "SHSize_indx",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_indx"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "OverloadedFunction",
                    "F_name_api": "overloaded_function",
                    "F_name_function": "overloaded_function_from_index",
                    "F_name_generic": "overloaded_function",
                    "F_name_impl": "overloaded_function_from_index",
                    "PY_name_impl": "PY_OverloadedFunction_from_index",
                    "function_name": "OverloadedFunction",
                    "function_suffix": "_from_index"
                }
            },
            {
                "<FUNCTION>": "TemplateArgument  6 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateArgument",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg"
                                },
                                "specifier": [
                                    "ArgType"
                                ],
                                "template_argument": "ArgType"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "cxx_template": {
                    "ArgType": [
                        "int",
                        "double"
                    ]
                },
                "decl": "template<typename ArgType>\nvoid TemplateArgument(ArgType arg)\n",
                "declgen": "void TemplateArgument(ArgType arg +value)",
                "have_template_args": true,
                "name": "TemplateArgument",
                "options": {},
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "ArgType"
                ],
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "TemplateArgument",
                    "F_name_api": "template_argument",
                    "function_name": "TemplateArgument"
                }
            },
            {
                "<FUNCTION>": "TemplateArgument  20 ****************************************",
                "_generated": "cxx_template",
                "_generated_path": [
                    "cxx_template"
                ],
                "_orig_node_index": 6,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateArgument",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "template_argument": "ArgType",
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<typename ArgType>\nvoid TemplateArgument(ArgType arg)\n",
                "declgen": "void TemplateArgument(int arg +value)",
                "have_template_args": true,
                "name": "TemplateArgument",
                "options": {},
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "ArgType"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::TemplateArgument<int>(\targ)",
                            "C_call_list": "arg",
                            "C_name": "TUT_TemplateArgument_int",
                            "C_prototype": "int arg",
                            "C_return_type": "void",
                            "F_C_name": "c_template_argument_int",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::TemplateArgument<int>(\targ)",
                            "C_call_list": "arg",
                            "C_name": "TUT_TemplateArgument_int",
                            "C_prototype": "int arg",
                            "C_return_type": "void",
                            "F_C_arguments": "arg",
                            "F_C_call": "c_template_argument_int",
                            "F_C_name": "c_template_argument_int",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg",
                            "F_arguments": "arg",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        },
                        "fmtl": {
                            "stmt": "lua_subroutine"
                        }
                    },
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg",
                            "pop_expr": "lua_tointeger(L, 1)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "CXX_template": "<int>",
                    "C_name_api": "TemplateArgument",
                    "F_name_api": "template_argument",
                    "F_name_function": "template_argument_int",
                    "F_name_generic": "template_argument",
                    "F_name_impl": "template_argument_int",
                    "LUA_name": "TemplateArgument",
                    "LUA_name_api": "TemplateArgument",
                    "LUA_name_impl": "l_TemplateArgument",
                    "PY_name_impl": "PY_TemplateArgument_int",
                    "function_name": "TemplateArgument",
                    "template_suffix": "_int"
                }
            },
            {
                "<FUNCTION>": "TemplateArgument  21 ****************************************",
                "_generated": "cxx_template",
                "_generated_path": [
                    "cxx_template"
                ],
                "_orig_node_index": 6,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateArgument",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "template_argument": "ArgType",
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<typename ArgType>\nvoid TemplateArgument(ArgType arg)\n",
                "declgen": "void TemplateArgument(double arg +value)",
                "gen_headers_typedef": [
                    "int",
                    "double"
                ],
                "have_template_args": true,
                "name": "TemplateArgument",
                "options": {},
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "ArgType"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::TemplateArgument<double>(\targ)",
                            "C_call_list": "arg",
                            "C_name": "TUT_TemplateArgument_double",
                            "C_prototype": "double arg",
                            "C_return_type": "void",
                            "F_C_name": "c_template_argument_double",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::TemplateArgument<double>(\targ)",
                            "C_call_list": "arg",
                            "C_name": "TUT_TemplateArgument_double",
                            "C_prototype": "double arg",
                            "C_return_type": "void",
                            "F_C_arguments": "arg",
                            "F_C_call": "c_template_argument_double",
                            "F_C_name": "c_template_argument_double",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "arg",
                            "F_arguments": "arg",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        },
                        "fmtl": {
                            "stmt": "lua_subroutine"
                        }
                    },
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg",
                            "pop_expr": "lua_tonumber(L, 1)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "CXX_template": "<double>",
                    "C_name_api": "TemplateArgument",
                    "F_name_api": "template_argument",
                    "F_name_function": "template_argument_double",
                    "F_name_generic": "template_argument",
                    "F_name_impl": "template_argument_double",
                    "PY_name_impl": "PY_TemplateArgument_double",
                    "function_name": "TemplateArgument",
                    "template_suffix": "_double"
                }
            },
            {
                "<FUNCTION>": "TemplateReturn  7 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateReturn",
                        "params": []
                    },
                    "specifier": [
                        "RetType"
                    ],
                    "template_argument": "RetType"
                },
                "cxx_template": {
                    "RetType": [
                        "int",
                        "double"
                    ]
                },
                "decl": "template<typename RetType> RetType TemplateReturn()",
                "declgen": "RetType TemplateReturn(void)",
                "have_template_args": true,
                "name": "TemplateReturn",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "RetType"
                ],
                "wrap": {},
                "zz_bind": {
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "TemplateReturn",
                    "F_name_api": "template_return",
                    "function_name": "TemplateReturn"
                }
            },
            {
                "<FUNCTION>": "TemplateReturn  22 ****************************************",
                "_generated": "cxx_template",
                "_generated_path": [
                    "cxx_template"
                ],
                "_orig_node_index": 7,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateReturn",
                        "params": []
                    },
                    "specifier": [
                        "int"
                    ],
                    "template_argument": "RetType",
                    "typemap_name": "int"
                },
                "decl": "template<typename RetType> RetType TemplateReturn()",
                "declgen": "int TemplateReturn(void)",
                "have_template_args": true,
                "name": "TemplateReturn",
                "options": {
                    "F_create_generic": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "RetType"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::TemplateReturn<int>(\t)",
                            "C_name": "TUT_TemplateReturn_int",
                            "C_prototype": "void",
                            "C_return_type": "int",
                            "F_C_name": "c_template_return_int",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::TemplateReturn<int>(\t)",
                            "C_name": "TUT_TemplateReturn_int",
                            "C_prototype": "void",
                            "C_return_type": "int",
                            "F_C_arguments": "",
                            "F_C_call": "c_template_return_int",
                            "F_C_name": "c_template_return_int",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "CXX_template": "<int>",
                    "C_name_api": "TemplateReturn",
                    "F_name_api": "template_return",
                    "F_name_function": "template_return_int",
                    "F_name_generic": "template_return",
                    "F_name_impl": "template_return_int",
                    "function_name": "TemplateReturn",
                    "template_suffix": "_int"
                }
            },
            {
                "<FUNCTION>": "TemplateReturn  23 ****************************************",
                "_generated": "cxx_template",
                "_generated_path": [
                    "cxx_template"
                ],
                "_orig_node_index": 7,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateReturn",
                        "params": []
                    },
                    "specifier": [
                        "double"
                    ],
                    "template_argument": "RetType",
                    "typemap_name": "double"
                },
                "decl": "template<typename RetType> RetType TemplateReturn()",
                "declgen": "double TemplateReturn(void)",
                "gen_headers_typedef": [
                    "int",
                    "double"
                ],
                "have_template_args": true,
                "name": "TemplateReturn",
                "options": {
                    "F_create_generic": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "RetType"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::TemplateReturn<double>(\t)",
                            "C_name": "TUT_TemplateReturn_double",
                            "C_prototype": "void",
                            "C_return_type": "double",
                            "F_C_name": "c_template_return_double",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "double",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "double SHC_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::TemplateReturn<double>(\t)",
                            "C_name": "TUT_TemplateReturn_double",
                            "C_prototype": "void",
                            "C_return_type": "double",
                            "F_C_arguments": "",
                            "F_C_call": "c_template_return_double",
                            "F_C_name": "c_template_return_double",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "double",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "double SHC_rv",
                            "cxx_type": "double",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_function_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "CXX_template": "<double>",
                    "C_name_api": "TemplateReturn",
                    "F_name_api": "template_return",
                    "F_name_function": "template_return_double",
                    "F_name_generic": "template_return",
                    "F_name_impl": "template_return_double",
                    "function_name": "TemplateReturn",
                    "template_suffix": "_double"
                }
            },
            {
                "<FUNCTION>": "FortranGenericOverloaded  8 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "params": [],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded()",
                "declgen": "void FortranGenericOverloaded(void)",
                "name": "FortranGenericOverloaded",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::FortranGenericOverloaded(\t)",
                            "C_name": "TUT_FortranGenericOverloaded_0",
                            "C_prototype": "void",
                            "C_return_type": "void",
                            "F_C_name": "c_fortran_generic_overloaded_0",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::FortranGenericOverloaded(\t)",
                            "C_name": "TUT_FortranGenericOverloaded_0",
                            "C_prototype": "void",
                            "C_return_type": "void",
                            "F_C_arguments": "",
                            "F_C_call": "c_fortran_generic_overloaded_0",
                            "F_C_name": "c_fortran_generic_overloaded_0",
                            "F_C_subprogram": "subroutine",
                            "F_arguments": "",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        },
                        "fmtl": {
                            "stmt": "lua_subroutine"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "FortranGenericOverloaded",
                    "F_name_api": "fortran_generic_overloaded",
                    "F_name_function": "fortran_generic_overloaded_0",
                    "F_name_generic": "fortran_generic_overloaded",
                    "F_name_impl": "fortran_generic_overloaded_0",
                    "LUA_name": "FortranGenericOverloaded",
                    "LUA_name_api": "FortranGenericOverloaded",
                    "LUA_name_impl": "l_FortranGenericOverloaded",
                    "PY_name_impl": "PY_FortranGenericOverloaded_0",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_0"
                }
            },
            {
                "<FUNCTION>": "FortranGenericOverloaded  9 ****************************************",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded(const std::string &name, double arg2)",
                "declgen": "void FortranGenericOverloaded(const std::string & name, double arg2 +value)",
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            }
                        ],
                        "function_suffix": "_float",
                        "generic": "(float arg2)"
                    },
                    {
                        "decls": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "function_suffix": "_double",
                        "generic": "(double arg2)"
                    }
                ],
                "helpers": {
                    "c": [
                        "char_len_trim"
                    ]
                },
                "name": "FortranGenericOverloaded",
                "options": {
                    "F_string_len_trim": true
                },
                "wrap": {
                    "c": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_string_&"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::FortranGenericOverloaded(\tSHCXX_name,\t arg2)",
                            "C_call_list": "SHCXX_name,\t arg2",
                            "C_name": "TUT_FortranGenericOverloaded_1",
                            "C_prototype": "const char * name,\t double arg2",
                            "C_return_type": "void",
                            "F_C_arguments": "name,\t arg2",
                            "F_C_name": "c_fortran_generic_overloaded_1",
                            "F_C_subprogram": "subroutine",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtl": {
                            "stmt": "lua_subroutine"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "i_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2",
                            "pop_expr": "lua_tonumber(L, 2)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg2",
                            "ctor_expr": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg2"
                        }
                    },
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "i_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_in_string_&"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "name",
                            "c_var_len": "Lname",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "name",
                            "lua_var": "SH_Lua_name",
                            "pop_expr": "lua_tostring(L, 1)",
                            "stmt": "lua_in_string_&"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "name",
                            "ctor_expr": "SH_name.data(),\t SH_name.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&name)",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_name",
                            "data_var": "SHData_name",
                            "numpy_type": null,
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt": "py_in_string_&",
                            "value_var": "SHValue_name"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "FortranGenericOverloaded",
                    "F_name_api": "fortran_generic_overloaded",
                    "PY_name_impl": "PY_FortranGenericOverloaded_1",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_1"
                }
            },
            {
                "<FUNCTION>": "FortranGenericOverloaded  28 ****************************************",
                "C_force_wrapper": "True",
                "_PTR_C_CXX_index": "9",
                "_generated": "fortran_generic",
                "_generated_path": [
                    "fortran_generic"
                ],
                "_orig_node_index": 9,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "typemap_name": "float"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded(const std::string &name, double arg2)",
                "declgen": "void FortranGenericOverloaded(const std::string & name, float arg2 +value)",
                "helpers": {
                    "c": [
                        "char_len_trim"
                    ]
                },
                "name": "FortranGenericOverloaded",
                "options": {
                    "F_string_len_trim": true
                },
                "wrap": {
                    "fortran": true
                },
                "zz_bind": {
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "name": {
                            "meta": {
                                "api": "buf",
                                "intent": "in"
                            },
                            "stmt": "f_in_string_&_buf"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtf": {
                            "C_call_function": "tutorial::FortranGenericOverloaded(\tSHCXX_name,\t arg2)",
                            "C_call_list": "SHCXX_name,\t arg2",
                            "C_name": "TUT_FortranGenericOverloaded_1_float_bufferify",
                            "C_prototype": "char *name,\t int SHT_name_len,\t float arg2",
                            "C_return_type": "void",
                            "F_C_arguments": "name,\t SHT_name_len,\t arg2",
                            "F_C_call": "c_fortran_generic_overloaded_1_float_bufferify",
                            "F_C_name": "c_fortran_generic_overloaded_1_float_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "name,\t SHT_name_len,\t arg2",
                            "F_arguments": "name,\t arg2",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg2": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "float",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_float",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "float",
                            "cxx_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_FLOAT",
                            "f_type": "real(C_FLOAT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "fc_var": "arg2",
                            "i_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt_name": "f_in_native_scalar"
                        }
                    },
                    "name": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "c_var_len": "SHT_name_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "f_var_len": "SHT_name_len",
                            "fc_var": "name",
                            "i_var": "name",
                            "i_var_len": "SHT_name_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_string_&_buf"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "FortranGenericOverloaded",
                    "F_name_api": "fortran_generic_overloaded",
                    "F_name_function": "fortran_generic_overloaded_1_float",
                    "F_name_generic": "fortran_generic_overloaded",
                    "F_name_impl": "fortran_generic_overloaded_1_float",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_1_float"
                }
            },
            {
                "<FUNCTION>": "FortranGenericOverloaded  29 ****************************************",
                "C_force_wrapper": "True",
                "_PTR_C_CXX_index": "9",
                "_generated": "fortran_generic",
                "_generated_path": [
                    "fortran_generic"
                ],
                "_orig_node_index": 9,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "params": [
                            {
                                "const": true,
                                "declarator": {
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "std::string"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg2",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded(const std::string &name, double arg2)",
                "declgen": "void FortranGenericOverloaded(const std::string & name, double arg2 +value)",
                "helpers": {
                    "c": [
                        "char_len_trim"
                    ]
                },
                "name": "FortranGenericOverloaded",
                "options": {
                    "F_string_len_trim": true
                },
                "wrap": {
                    "fortran": true
                },
                "zz_bind": {
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "name": {
                            "meta": {
                                "api": "buf",
                                "intent": "in"
                            },
                            "stmt": "f_in_string_&_buf"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "arg2": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "name": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtf": {
                            "C_call_function": "tutorial::FortranGenericOverloaded(\tSHCXX_name,\t arg2)",
                            "C_call_list": "SHCXX_name,\t arg2",
                            "C_name": "TUT_FortranGenericOverloaded_1_double_bufferify",
                            "C_prototype": "char *name,\t int SHT_name_len,\t double arg2",
                            "C_return_type": "void",
                            "F_C_arguments": "name,\t SHT_name_len,\t arg2",
                            "F_C_call": "c_fortran_generic_overloaded_1_double_bufferify",
                            "F_C_name": "c_fortran_generic_overloaded_1_double_bufferify",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "name,\t SHT_name_len,\t arg2",
                            "F_arguments": "name,\t arg2",
                            "F_subprogram": "subroutine",
                            "f_c_suffix": "_bufferify",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "arg2": {
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "arg2",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg2",
                            "fc_var": "arg2",
                            "i_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_in_native_scalar"
                        }
                    },
                    "name": {
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_helper_char_len_trim": "ShroudCharLenTrim",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "c_var_len": "SHT_name_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "name",
                            "f_var_len": "SHT_name_len",
                            "fc_var": "name",
                            "i_var": "name",
                            "i_var_len": "SHT_name_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_in_string_&_buf"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "FortranGenericOverloaded",
                    "F_name_api": "fortran_generic_overloaded",
                    "F_name_function": "fortran_generic_overloaded_1_double",
                    "F_name_generic": "fortran_generic_overloaded",
                    "F_name_impl": "fortran_generic_overloaded_1_double",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_1_double"
                }
            },
            {
                "<FUNCTION>": "UseDefaultOverload  24 ****************************************",
                "_generated": "has_default_arg",
                "_generated_path": [
                    "has_default_arg"
                ],
                "_orig_node_index": 10,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "num",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(int num +value)",
                "default_arg_suffix": [
                    "_num",
                    "_num_offset",
                    "_num_offset_stride"
                ],
                "name": "UseDefaultOverload",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::UseDefaultOverload(\tnum)",
                            "C_call_list": "num",
                            "C_name": "TUT_UseDefaultOverload_num",
                            "C_prototype": "int num",
                            "C_return_type": "int",
                            "F_C_name": "c_use_default_overload_num",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::UseDefaultOverload(\tnum)",
                            "C_call_list": "num",
                            "C_name": "TUT_UseDefaultOverload_num",
                            "C_prototype": "int num",
                            "C_return_type": "int",
                            "F_C_arguments": "num",
                            "F_C_call": "c_use_default_overload_num",
                            "F_C_name": "c_use_default_overload_num",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "num",
                            "F_arguments": "num",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        }
                    },
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "num",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "num",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "num",
                            "fc_var": "num",
                            "i_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "UseDefaultOverload",
                    "F_name_api": "use_default_overload",
                    "F_name_function": "use_default_overload_num",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_num",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_num"
                }
            },
            {
                "<FUNCTION>": "UseDefaultOverload  25 ****************************************",
                "_generated": "has_default_arg",
                "_generated_path": [
                    "has_default_arg"
                ],
                "_orig_node_index": 10,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "num",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "init": 0,
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "offset",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(int num +value, int offset=0 +value)",
                "default_arg_suffix": [
                    "_num",
                    "_num_offset",
                    "_num_offset_stride"
                ],
                "name": "UseDefaultOverload",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::UseDefaultOverload(\tnum,\t offset)",
                            "C_call_list": "num,\t offset",
                            "C_name": "TUT_UseDefaultOverload_num_offset",
                            "C_prototype": "int num,\t int offset",
                            "C_return_type": "int",
                            "F_C_name": "c_use_default_overload_num_offset",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::UseDefaultOverload(\tnum,\t offset)",
                            "C_call_list": "num,\t offset",
                            "C_name": "TUT_UseDefaultOverload_num_offset",
                            "C_prototype": "int num,\t int offset",
                            "C_return_type": "int",
                            "F_C_arguments": "num,\t offset",
                            "F_C_call": "c_use_default_overload_num_offset",
                            "F_C_name": "c_use_default_overload_num_offset",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "num,\t offset",
                            "F_arguments": "num,\t offset",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        }
                    },
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "num",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "num",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "num",
                            "fc_var": "num",
                            "i_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "offset",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "offset",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "offset",
                            "fc_var": "offset",
                            "i_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "UseDefaultOverload",
                    "F_name_api": "use_default_overload",
                    "F_name_function": "use_default_overload_num_offset",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_num_offset",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_num_offset"
                }
            },
            {
                "<FUNCTION>": "UseDefaultOverload  10 ****************************************",
                "_default_funcs": [
                    24,
                    25
                ],
                "_has_default_arg": true,
                "_nargs": [
                    1,
                    3
                ],
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "num",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "init": 0,
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "offset",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "init": 1,
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "stride",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(int num +value, int offset=0 +value, int stride=1 +value)",
                "default_arg_suffix": [
                    "_num",
                    "_num_offset",
                    "_num_offset_stride"
                ],
                "name": "UseDefaultOverload",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "stride": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "stride": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "stride": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "stride": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "stride": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::UseDefaultOverload(\tnum,\t offset,\t stride)",
                            "C_call_list": "num,\t offset,\t stride",
                            "C_name": "TUT_UseDefaultOverload_num_offset_stride",
                            "C_prototype": "int num,\t int offset,\t int stride",
                            "C_return_type": "int",
                            "F_C_name": "c_use_default_overload_num_offset_stride",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::UseDefaultOverload(\tnum,\t offset,\t stride)",
                            "C_call_list": "num,\t offset,\t stride",
                            "C_name": "TUT_UseDefaultOverload_num_offset_stride",
                            "C_prototype": "int num,\t int offset,\t int stride",
                            "C_return_type": "int",
                            "F_C_arguments": "num,\t offset,\t stride",
                            "F_C_call": "c_use_default_overload_num_offset_stride",
                            "F_C_name": "c_use_default_overload_num_offset_stride",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "num,\t offset,\t stride",
                            "F_arguments": "num,\t offset,\t stride",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtl": {
                            "c_var": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_var": "SHCXX_rv",
                            "push_arg": "SHCXX_rv",
                            "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                            "stmt": "lua_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "num",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "num",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "num",
                            "fc_var": "num",
                            "i_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "c_var_len": "Lnum",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "lua_var": "SH_Lua_num",
                            "pop_expr": "lua_tointeger(L, 1)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "num",
                            "ctor_expr": "num",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "data_var": "SHData_num",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_num",
                            "size_var": "SHSize_num",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_num"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "offset",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "offset",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "offset",
                            "fc_var": "offset",
                            "i_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "c_var_len": "Loffset",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "lua_var": "SH_Lua_offset",
                            "pop_expr": "lua_tointeger(L, 2)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "offset",
                            "ctor_expr": "offset",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "data_var": "SHData_offset",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_offset",
                            "size_var": "SHSize_offset",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_offset"
                        }
                    },
                    "stride": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "stride",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&stride",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "stride",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&stride",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "stride",
                            "fc_var": "stride",
                            "i_var": "stride",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 3,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "stride",
                            "c_var_len": "Lstride",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "lua_var": "SH_Lua_stride",
                            "pop_expr": "lua_tointeger(L, 3)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "stride",
                            "ctor_expr": "stride",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&stride",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "data_var": "SHData_stride",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_stride",
                            "size_var": "SHSize_stride",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_stride"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "UseDefaultOverload",
                    "F_name_api": "use_default_overload",
                    "F_name_function": "use_default_overload_num_offset_stride",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_num_offset_stride",
                    "LUA_name": "UseDefaultOverload",
                    "LUA_name_api": "UseDefaultOverload",
                    "LUA_name_impl": "l_UseDefaultOverload",
                    "PY_cleanup_decref": "Py_XDECREF",
                    "PY_name_impl": "PY_UseDefaultOverload_num_offset_stride",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_num_offset_stride"
                }
            },
            {
                "<FUNCTION>": "UseDefaultOverload  26 ****************************************",
                "_generated": "has_default_arg",
                "_generated_path": [
                    "has_default_arg"
                ],
                "_orig_node_index": 11,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "num",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(double type, int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(double type +value, int num +value)",
                "name": "UseDefaultOverload",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::UseDefaultOverload(\ttype,\t num)",
                            "C_call_list": "type,\t num",
                            "C_name": "TUT_UseDefaultOverload_3",
                            "C_prototype": "double type,\t int num",
                            "C_return_type": "int",
                            "F_C_name": "c_use_default_overload_3",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::UseDefaultOverload(\ttype,\t num)",
                            "C_call_list": "type,\t num",
                            "C_name": "TUT_UseDefaultOverload_3",
                            "C_prototype": "double type,\t int num",
                            "C_return_type": "int",
                            "F_C_arguments": "type,\t num",
                            "F_C_call": "c_use_default_overload_3",
                            "F_C_name": "c_use_default_overload_3",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "type,\t num",
                            "F_arguments": "type,\t num",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        }
                    },
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "num",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "num",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "num",
                            "fc_var": "num",
                            "i_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "type",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "type",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "type",
                            "fc_var": "type",
                            "i_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "UseDefaultOverload",
                    "F_name_api": "use_default_overload",
                    "F_name_function": "use_default_overload_3",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_3",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_3"
                }
            },
            {
                "<FUNCTION>": "UseDefaultOverload  27 ****************************************",
                "_generated": "has_default_arg",
                "_generated_path": [
                    "has_default_arg"
                ],
                "_orig_node_index": 11,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "num",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "init": 0,
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "offset",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(double type, int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(double type +value, int num +value, int offset=0 +value)",
                "name": "UseDefaultOverload",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::UseDefaultOverload(\ttype,\t num,\t offset)",
                            "C_call_list": "type,\t num,\t offset",
                            "C_name": "TUT_UseDefaultOverload_4",
                            "C_prototype": "double type,\t int num,\t int offset",
                            "C_return_type": "int",
                            "F_C_name": "c_use_default_overload_4",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::UseDefaultOverload(\ttype,\t num,\t offset)",
                            "C_call_list": "type,\t num,\t offset",
                            "C_name": "TUT_UseDefaultOverload_4",
                            "C_prototype": "double type,\t int num,\t int offset",
                            "C_return_type": "int",
                            "F_C_arguments": "type,\t num,\t offset",
                            "F_C_call": "c_use_default_overload_4",
                            "F_C_name": "c_use_default_overload_4",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "type,\t num,\t offset",
                            "F_arguments": "type,\t num,\t offset",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        }
                    },
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "num",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "num",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "num",
                            "fc_var": "num",
                            "i_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "offset",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "offset",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "offset",
                            "fc_var": "offset",
                            "i_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "type",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "type",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "type",
                            "fc_var": "type",
                            "i_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "UseDefaultOverload",
                    "F_name_api": "use_default_overload",
                    "F_name_function": "use_default_overload_4",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_4",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_4"
                }
            },
            {
                "<FUNCTION>": "UseDefaultOverload  11 ****************************************",
                "_default_funcs": [
                    26,
                    27
                ],
                "_has_default_arg": true,
                "_nargs": [
                    2,
                    4
                ],
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "type",
                                    "typemap_name": "double"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "num",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "init": 0,
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "offset",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "init": 1,
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "stride",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(double type, int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(double type +value, int num +value, int offset=0 +value, int stride=1 +value)",
                "name": "UseDefaultOverload",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "stride": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "stride": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "stride": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "stride": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "num": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "offset": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "stride": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "type": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::UseDefaultOverload(\ttype,\t num,\t offset,\t stride)",
                            "C_call_list": "type,\t num,\t offset,\t stride",
                            "C_name": "TUT_UseDefaultOverload_5",
                            "C_prototype": "double type,\t int num,\t int offset,\t int stride",
                            "C_return_type": "int",
                            "F_C_name": "c_use_default_overload_5",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::UseDefaultOverload(\ttype,\t num,\t offset,\t stride)",
                            "C_call_list": "type,\t num,\t offset,\t stride",
                            "C_name": "TUT_UseDefaultOverload_5",
                            "C_prototype": "double type,\t int num,\t int offset,\t int stride",
                            "C_return_type": "int",
                            "F_C_arguments": "type,\t num,\t offset,\t stride",
                            "F_C_call": "c_use_default_overload_5",
                            "F_C_name": "c_use_default_overload_5",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "type,\t num,\t offset,\t stride",
                            "F_arguments": "type,\t num,\t offset,\t stride",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtl": {
                            "c_var": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_var": "SHCXX_rv",
                            "push_arg": "SHCXX_rv",
                            "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                            "stmt": "lua_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "num",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "num",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "num",
                            "fc_var": "num",
                            "i_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "c_var_len": "Lnum",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "lua_var": "SH_Lua_num",
                            "pop_expr": "lua_tointeger(L, 2)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "num",
                            "ctor_expr": "num",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "data_var": "SHData_num",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_num",
                            "size_var": "SHSize_num",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_num"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "offset",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "offset",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "offset",
                            "fc_var": "offset",
                            "i_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 3,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "c_var_len": "Loffset",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "lua_var": "SH_Lua_offset",
                            "pop_expr": "lua_tointeger(L, 3)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "offset",
                            "ctor_expr": "offset",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "data_var": "SHData_offset",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_offset",
                            "size_var": "SHSize_offset",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_offset"
                        }
                    },
                    "stride": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "stride",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&stride",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "stride",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&stride",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "stride",
                            "fc_var": "stride",
                            "i_var": "stride",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 4,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "stride",
                            "c_var_len": "Lstride",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "lua_var": "SH_Lua_stride",
                            "pop_expr": "lua_tointeger(L, 4)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "stride",
                            "ctor_expr": "stride",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&stride",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "data_var": "SHData_stride",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_stride",
                            "size_var": "SHSize_stride",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_stride"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "type",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "type",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "type",
                            "fc_var": "type",
                            "i_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "c_var_len": "Ltype",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "lua_var": "SH_Lua_type",
                            "pop_expr": "lua_tonumber(L, 1)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "type",
                            "ctor_expr": "type",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "data_var": "SHData_type",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_type",
                            "size_var": "SHSize_type",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_type"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "UseDefaultOverload",
                    "F_name_api": "use_default_overload",
                    "F_name_function": "use_default_overload_5",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_5",
                    "PY_cleanup_decref": "Py_XDECREF",
                    "PY_name_impl": "PY_UseDefaultOverload_5",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_5"
                }
            },
            {
                "<FUNCTION>": "typefunc  12 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "typefunc",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "tutorial::TypeID"
                                },
                                "specifier": [
                                    "TypeID"
                                ],
                                "typemap_name": "tutorial::TypeID"
                            }
                        ],
                        "typemap_name": "tutorial::TypeID"
                    },
                    "specifier": [
                        "TypeID"
                    ],
                    "typemap_name": "tutorial::TypeID"
                },
                "decl": "TypeID typefunc(TypeID arg)",
                "declgen": "TypeID typefunc(TypeID arg +value)",
                "name": "typefunc",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::typefunc(\targ)",
                            "C_call_list": "arg",
                            "C_name": "TUT_typefunc",
                            "C_prototype": "TUT_TypeID arg",
                            "C_return_type": "TUT_TypeID",
                            "F_C_name": "c_typefunc",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "TUT_TypeID",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "tutorial::TypeID SHC_rv",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::typefunc(\targ)",
                            "C_call_list": "arg",
                            "C_name": "TUT_typefunc",
                            "C_prototype": "TUT_TypeID arg",
                            "C_return_type": "TUT_TypeID",
                            "F_C_arguments": "arg",
                            "F_C_call": "c_typefunc",
                            "F_C_name": "typefunc",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "arg",
                            "F_arguments": "arg",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "TUT_TypeID",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "tutorial::TypeID SHC_rv",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "type_id",
                            "f_type": "integer(type_id)",
                            "f_type_module": "tutorial_mod",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtl": {
                            "c_var": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_var": "SHCXX_rv",
                            "push_arg": "SHCXX_rv",
                            "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                            "stmt": "lua_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "TUT_TypeID",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "TUT_TypeID",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "type_id",
                            "f_type": "integer(type_id)",
                            "f_type_module": "tutorial_mod",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg",
                            "pop_expr": "lua_tointeger(L, 1)",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "TUT_TypeID",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "typefunc",
                    "F_name_api": "typefunc",
                    "F_name_function": "typefunc",
                    "F_name_generic": "typefunc",
                    "F_name_impl": "typefunc",
                    "LUA_name": "typefunc",
                    "LUA_name_api": "typefunc",
                    "LUA_name_impl": "l_typefunc",
                    "PY_name_impl": "PY_typefunc",
                    "function_name": "typefunc"
                }
            },
            {
                "<FUNCTION>": "enumfunc  13 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "enumfunc",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "tutorial::EnumTypeID"
                                },
                                "specifier": [
                                    "EnumTypeID"
                                ],
                                "typemap_name": "tutorial::EnumTypeID"
                            }
                        ],
                        "typemap_name": "tutorial::EnumTypeID"
                    },
                    "specifier": [
                        "EnumTypeID"
                    ],
                    "typemap_name": "tutorial::EnumTypeID"
                },
                "decl": "EnumTypeID enumfunc(EnumTypeID arg)",
                "declgen": "EnumTypeID enumfunc(EnumTypeID arg +value)",
                "name": "enumfunc",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::enumfunc(\tSHCXX_arg)",
                            "C_call_list": "SHCXX_arg",
                            "C_name": "TUT_enumfunc",
                            "C_prototype": "TUT_EnumTypeID arg",
                            "C_return_type": "TUT_EnumTypeID",
                            "F_C_name": "c_enumfunc",
                            "c_const": "",
                            "c_get_value": "",
                            "c_rv_decl": "TUT_EnumTypeID SHC_rv",
                            "c_type": "TUT_EnumTypeID",
                            "c_val": "static_cast<int>(SHCXX_rv)",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_rv_decl": "tutorial::EnumTypeID SHCXX_rv",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::enumfunc(\tSHCXX_arg)",
                            "C_call_list": "SHCXX_arg",
                            "C_name": "TUT_enumfunc",
                            "C_prototype": "TUT_EnumTypeID arg",
                            "C_return_type": "TUT_EnumTypeID",
                            "F_C_arguments": "arg",
                            "F_C_call": "c_enumfunc",
                            "F_C_name": "enumfunc",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "arg",
                            "F_arguments": "arg",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_rv_decl": "TUT_EnumTypeID SHC_rv",
                            "c_type": "TUT_EnumTypeID",
                            "c_val": "static_cast<int>(SHCXX_rv)",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_rv_decl": "tutorial::EnumTypeID SHCXX_rv",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_var": "SHCXX_rv",
                            "f_intent": "OUT",
                            "f_kind": "enum_type_id",
                            "f_type": "integer(enum_type_id)",
                            "f_type_module": "tutorial_mod",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtl": {
                            "c_var": "static_cast<int>(SHCXX_rv)",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_var": "SHCXX_rv",
                            "push_arg": "static_cast<int>(SHCXX_rv)",
                            "push_expr": "lua_pushinteger(L, static_cast<int>(SHCXX_rv))",
                            "stmt": "lua_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "TUT_EnumTypeID",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::EnumTypeID SHCXX_arg",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_val": "static_cast<tutorial::EnumTypeID>(arg)",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "TUT_EnumTypeID",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::EnumTypeID SHCXX_arg",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_val": "static_cast<tutorial::EnumTypeID>(arg)",
                            "cxx_var": "SHCXX_arg",
                            "f_intent": "IN",
                            "f_kind": "enum_type_id",
                            "f_type": "integer(enum_type_id)",
                            "f_type_module": "tutorial_mod",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg",
                            "pop_expr": "static_cast<tutorial::EnumTypeID>(lua_tointeger(L, 1))",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "TUT_EnumTypeID",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::EnumTypeID SH_arg",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_val": "static_cast<tutorial::EnumTypeID>(arg)",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "enumfunc",
                    "F_name_api": "enumfunc",
                    "F_name_function": "enumfunc",
                    "F_name_generic": "enumfunc",
                    "F_name_impl": "enumfunc",
                    "LUA_name": "enumfunc",
                    "LUA_name_api": "enumfunc",
                    "LUA_name_impl": "l_enumfunc",
                    "PY_name_impl": "PY_enumfunc",
                    "function_name": "enumfunc"
                }
            },
            {
                "<FUNCTION>": "colorfunc  14 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "colorfunc",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "arg",
                                    "typemap_name": "tutorial::Color"
                                },
                                "specifier": [
                                    "Color"
                                ],
                                "typemap_name": "tutorial::Color"
                            }
                        ],
                        "typemap_name": "tutorial::Color"
                    },
                    "specifier": [
                        "Color"
                    ],
                    "typemap_name": "tutorial::Color"
                },
                "decl": "Color colorfunc(Color arg);",
                "declgen": "Color colorfunc(Color arg +value)",
                "name": "colorfunc",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "arg": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::colorfunc(\tSHCXX_arg)",
                            "C_call_list": "SHCXX_arg",
                            "C_name": "TUT_colorfunc",
                            "C_prototype": "int arg",
                            "C_return_type": "int",
                            "F_C_name": "c_colorfunc",
                            "c_const": "",
                            "c_get_value": "",
                            "c_rv_decl": "int SHC_rv",
                            "c_type": "int",
                            "c_val": "static_cast<int>(SHCXX_rv)",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_rv_decl": "tutorial::Color SHCXX_rv",
                            "cxx_type": "tutorial::Color",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::colorfunc(\tSHCXX_arg)",
                            "C_call_list": "SHCXX_arg",
                            "C_name": "TUT_colorfunc",
                            "C_prototype": "int arg",
                            "C_return_type": "int",
                            "F_C_arguments": "arg",
                            "F_C_call": "c_colorfunc",
                            "F_C_name": "colorfunc",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "arg",
                            "F_arguments": "arg",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_rv_decl": "int SHC_rv",
                            "c_type": "int",
                            "c_val": "static_cast<int>(SHCXX_rv)",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_rv_decl": "tutorial::Color SHCXX_rv",
                            "cxx_type": "tutorial::Color",
                            "cxx_var": "SHCXX_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        },
                        "fmtl": {
                            "c_var": "static_cast<int>(SHCXX_rv)",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_var": "SHCXX_rv",
                            "push_arg": "static_cast<int>(SHCXX_rv)",
                            "push_expr": "lua_pushinteger(L, static_cast<int>(SHCXX_rv))",
                            "stmt": "lua_function_native_scalar"
                        },
                        "fmtpy": {
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "tutorial::Color",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_native_scalar",
                            "value_var": "SHValue_rv"
                        }
                    },
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::Color SHCXX_arg",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg",
                            "cxx_type": "tutorial::Color",
                            "cxx_val": "static_cast<tutorial::Color>(arg)",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::Color SHCXX_arg",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg",
                            "cxx_type": "tutorial::Color",
                            "cxx_val": "static_cast<tutorial::Color>(arg)",
                            "cxx_var": "SHCXX_arg",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "arg",
                            "fc_var": "arg",
                            "i_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::Color",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg",
                            "pop_expr": "static_cast<tutorial::Color>(lua_tointeger(L, 1))",
                            "stmt": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::Color SH_arg",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "tutorial::Color",
                            "cxx_val": "static_cast<tutorial::Color>(arg)",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt": "py_in_native_scalar",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "colorfunc",
                    "F_name_api": "colorfunc",
                    "F_name_function": "colorfunc",
                    "F_name_generic": "colorfunc",
                    "F_name_impl": "colorfunc",
                    "LUA_name": "colorfunc",
                    "LUA_name_api": "colorfunc",
                    "LUA_name_impl": "l_colorfunc",
                    "PY_name_impl": "PY_colorfunc",
                    "function_name": "colorfunc"
                }
            },
            {
                "<FUNCTION>": "getMinMax  15 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getMinMax",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "min",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "intent": "out"
                                    },
                                    "metaattrs": {
                                        "intent": "out"
                                    },
                                    "name": "max",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "void"
                    },
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getMinMax(int &min +intent(out), int &max +intent(out))",
                "declgen": "void getMinMax(int & min +intent(out), int & max +intent(out))",
                "doxygen": {
                    "brief": "Pass in reference to scalar"
                },
                "name": "getMinMax",
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "c_subroutine"
                        },
                        "max": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_native_&"
                        },
                        "min": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "c_out_native_&"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            },
                            "stmt": "f_subroutine"
                        },
                        "max": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "f_out_native_&"
                        },
                        "min": {
                            "meta": {
                                "intent": "out"
                            },
                            "stmt": "f_out_native_&"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "max": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "min": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "max": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "min": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "subroutine"
                            }
                        },
                        "max": {
                            "meta": {
                                "intent": "out"
                            }
                        },
                        "min": {
                            "meta": {
                                "intent": "out"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::getMinMax(\t*min,\t *max)",
                            "C_call_list": "*min,\t *max",
                            "C_name": "TUT_getMinMax",
                            "C_prototype": "int * min,\t int * max",
                            "C_return_type": "void",
                            "F_C_name": "c_get_min_max",
                            "stmt_name": "c_subroutine"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::getMinMax(\t*min,\t *max)",
                            "C_call_list": "*min,\t *max",
                            "C_name": "TUT_getMinMax",
                            "C_prototype": "int * min,\t int * max",
                            "C_return_type": "void",
                            "F_C_arguments": "min,\t max",
                            "F_C_call": "c_get_min_max",
                            "F_C_name": "get_min_max",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "min,\t max",
                            "F_arguments": "min,\t max",
                            "F_subprogram": "subroutine",
                            "stmt_name": "f_subroutine"
                        }
                    },
                    "max": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "max",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&max",
                            "cxx_type": "int",
                            "cxx_var": "max",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_out_native_&"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "max",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&max",
                            "cxx_type": "int",
                            "cxx_var": "max",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "max",
                            "fc_var": "max",
                            "i_var": "max",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_out_native_&"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "max",
                            "ctor_expr": "max",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&max",
                            "cxx_type": "int",
                            "cxx_var": "max",
                            "data_var": "SHData_max",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_max",
                            "size_var": "SHSize_max",
                            "stmt": "py_out_native_&",
                            "value_var": "SHValue_max"
                        }
                    },
                    "min": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "min",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&min",
                            "cxx_type": "int",
                            "cxx_var": "min",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_out_native_&"
                        },
                        "fmtf": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "min",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&min",
                            "cxx_type": "int",
                            "cxx_var": "min",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "min",
                            "fc_var": "min",
                            "i_var": "min",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_out_native_&"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "min",
                            "ctor_expr": "min",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&min",
                            "cxx_type": "int",
                            "cxx_var": "min",
                            "data_var": "SHData_min",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_min",
                            "size_var": "SHSize_min",
                            "stmt": "py_out_native_&",
                            "value_var": "SHValue_min"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "getMinMax",
                    "F_name_api": "get_min_max",
                    "F_name_function": "get_min_max",
                    "F_name_generic": "get_min_max",
                    "F_name_impl": "get_min_max",
                    "PY_name_impl": "PY_getMinMax",
                    "function_name": "getMinMax"
                }
            },
            {
                "<FUNCTION>": "callback1  16 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "callback1",
                        "params": [
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "in",
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "declarator": {
                                    "attrs": {
                                        "value": true
                                    },
                                    "func": {
                                        "name": "incr",
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ],
                                        "typemap_name": "int"
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "name": "incr",
                                    "params": [
                                        {
                                            "declarator": {
                                                "attrs": {
                                                    "value": true
                                                },
                                                "typemap_name": "int"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        }
                                    ],
                                    "typemap_name": "int"
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int callback1(int in, int (*incr)(int));",
                "declgen": "int callback1(int in +value, int ( * incr)(int) +value)",
                "doxygen": {
                    "brief": "Test function pointer"
                },
                "name": "callback1",
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_native_scalar"
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        },
                        "incr": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "c_in_native_scalar"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "f_function_native_scalar"
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        },
                        "incr": {
                            "meta": {
                                "intent": "in"
                            },
                            "stmt": "f_in_native_scalar"
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        },
                        "in": {
                            "meta": {
                                "intent": "in"
                            }
                        },
                        "incr": {
                            "meta": {
                                "intent": "in"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::callback1(\tin,\t incr)",
                            "C_call_list": "in,\t incr",
                            "C_name": "TUT_callback1",
                            "C_prototype": "int in,\t int ( * incr)(\tint)",
                            "C_return_type": "int",
                            "F_C_name": "c_callback1",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_function_native_scalar"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::callback1(\tin,\t incr)",
                            "C_call_list": "in,\t incr",
                            "C_name": "TUT_callback1",
                            "C_prototype": "int in,\t int ( * incr)(\tint)",
                            "C_return_type": "int",
                            "F_C_arguments": "in,\t incr",
                            "F_C_call": "c_callback1",
                            "F_C_name": "callback1",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "in,\t incr",
                            "F_arguments": "in,\t incr",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_get_value": "",
                            "c_type": "int",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHC_rv",
                            "cxx_rv_decl": "int SHC_rv",
                            "cxx_type": "int",
                            "cxx_var": "SHC_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_function_native_scalar"
                        }
                    },
                    "in": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "in",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&in",
                            "cxx_type": "int",
                            "cxx_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "in",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&in",
                            "cxx_type": "int",
                            "cxx_var": "in",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "in",
                            "fc_var": "in",
                            "i_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        }
                    },
                    "incr": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "incr",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&incr",
                            "cxx_type": "int",
                            "cxx_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "c_in_native_scalar"
                        },
                        "fmtf": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "incr",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&incr",
                            "cxx_type": "int",
                            "cxx_var": "incr",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "incr",
                            "fc_var": "incr",
                            "i_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt_name": "f_in_native_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "callback1",
                    "F_name_api": "callback1",
                    "F_name_function": "callback1",
                    "F_name_generic": "callback1",
                    "F_name_impl": "callback1",
                    "function_name": "callback1"
                }
            },
            {
                "<FUNCTION>": "LastFunctionCalled  17 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "attrs": {
                            "len": "30"
                        },
                        "metaattrs": {
                            "deref": "copy"
                        },
                        "name": "LastFunctionCalled",
                        "params": [],
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ],
                        "typemap_name": "std::string"
                    },
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& LastFunctionCalled() +len(30)",
                "declgen": "const std::string & LastFunctionCalled(void) +len(30)",
                "helpers": {
                    "c": [
                        "char_copy"
                    ]
                },
                "name": "LastFunctionCalled",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_bind": {
                    "c": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            },
                            "stmt": "c_function_string_&"
                        }
                    },
                    "f": {
                        "+result": {
                            "meta": {
                                "api": "buf",
                                "deref": "copy",
                                "intent": "function"
                            },
                            "stmt": "f_function_string_&_buf_copy"
                        }
                    },
                    "lua": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "py": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    },
                    "share": {
                        "+result": {
                            "meta": {
                                "intent": "function"
                            }
                        }
                    }
                },
                "zz_fmtargs": {
                    "+result": {
                        "fmtc": {
                            "C_call_function": "tutorial::LastFunctionCalled(\t)",
                            "C_name": "TUT_LastFunctionCalled",
                            "C_prototype": "void",
                            "C_return_type": "const char *",
                            "F_C_arguments": "",
                            "F_C_name": "c_last_function_called",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "c_char_len": "30",
                            "c_const": "const ",
                            "c_rv_decl": "const char * SHC_rv",
                            "c_type": "char",
                            "c_val": "SHCXX_rv.c_str()",
                            "c_var": "SHC_rv",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "c_function_string_&"
                        },
                        "fmtf": {
                            "C_call_function": "tutorial::LastFunctionCalled(\t)",
                            "C_name": "TUT_LastFunctionCalled_bufferify",
                            "C_prototype": "char *SHC_rv,\t int SHT_rv_len",
                            "C_return_type": "void",
                            "F_C_arguments": "SHT_rv,\t SHT_rv_len",
                            "F_C_call": "c_last_function_called_bufferify",
                            "F_C_name": "c_last_function_called_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "SHT_rv,\t SHT_rv_len",
                            "F_arguments": "",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_char_len": "30",
                            "c_const": "const ",
                            "c_helper_char_copy": "ShroudCharCopy",
                            "c_type": "char",
                            "c_var": "SHC_rv",
                            "c_var_len": "SHT_rv_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "f_c_suffix": "_bufferify",
                            "f_char_len": "len=30",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_type_module": "iso_c_binding",
                            "f_var": "SHT_rv",
                            "f_var_len": "SHT_rv_len",
                            "fc_var": "SHT_rv",
                            "i_var": "SHT_rv",
                            "i_var_len": "SHT_rv_len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt_name": "f_function_string_&_buf_copy"
                        },
                        "fmtl": {
                            "c_var": "SHCXX_rv.c_str()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_var": "SHCXX_rv",
                            "push_arg": "SHCXX_rv.c_str()",
                            "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                            "stmt": "lua_function_string_&"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_deref": "",
                            "c_var": "SHCXX_rv",
                            "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "data_var": "SHData_rv",
                            "numpy_type": null,
                            "py_var": "SHTPy_rv",
                            "size_var": "SHSize_rv",
                            "stmt": "py_function_string_&",
                            "value_var": "SHValue_rv"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name_api": "LastFunctionCalled",
                    "F_name_api": "last_function_called",
                    "F_name_function": "last_function_called",
                    "F_name_generic": "last_function_called",
                    "F_name_impl": "last_function_called",
                    "LUA_name": "LastFunctionCalled",
                    "LUA_name_api": "LastFunctionCalled",
                    "LUA_name_impl": "l_LastFunctionCalled",
                    "PY_name_impl": "PY_LastFunctionCalled",
                    "function_name": "LastFunctionCalled"
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "Tutorial"
        ],
        "typedefs": [
            {
                "<TYPEDEF>": "TypeID ****************************************",
                "ast": {
                    "declarator": {
                        "name": "TypeID",
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "typedef"
                    ],
                    "typemap_name": "tutorial::TypeID"
                },
                "f_kind": "C_INT",
                "f_module": {
                    "iso_c_binding": [
                        "C_INT"
                    ]
                },
                "name": "TypeID",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name_api": "TypeID",
                    "C_name_typedef": "TUT_TypeID",
                    "F_name_api": "type_id",
                    "F_name_typedef": "type_id",
                    "cxx_type": "TypeID",
                    "typedef_name": "TypeID"
                }
            },
            {
                "<TYPEDEF>": "EnumTypeID ****************************************",
                "ast": {
                    "declarator": {
                        "name": "EnumTypeID",
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "typedef"
                    ],
                    "typemap_name": "tutorial::EnumTypeID"
                },
                "f_kind": "C_INT",
                "f_module": {
                    "iso_c_binding": [
                        "C_INT"
                    ]
                },
                "name": "EnumTypeID",
                "options": {},
                "user_fields": {
                    "c_to_cxx": "static_cast<tutorial::EnumTypeID>({c_var})",
                    "cxx_to_c": "static_cast<int>({cxx_var})"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name_api": "EnumTypeID",
                    "C_name_typedef": "TUT_EnumTypeID",
                    "F_name_api": "enum_type_id",
                    "F_name_typedef": "enum_type_id",
                    "cxx_type": "EnumTypeID",
                    "typedef_name": "EnumTypeID"
                }
            }
        ],
        "variables": [
            {
                "<VARIABLE>": "global_flag ****************************************",
                "ast": {
                    "declarator": {
                        "name": "global_flag",
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "extern"
                    ],
                    "typemap_name": "int"
                },
                "name": "global_flag",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "c_type": "int",
                    "cxx_type": "int",
                    "field_name": "global_flag",
                    "variable_lower": "global_flag",
                    "variable_name": "global_flag",
                    "variable_upper": "GLOBAL_FLAG"
                }
            },
            {
                "<VARIABLE>": "tutorial_flag ****************************************",
                "ast": {
                    "declarator": {
                        "name": "tutorial_flag",
                        "typemap_name": "int"
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "extern"
                    ],
                    "typemap_name": "int"
                },
                "name": "tutorial_flag",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "c_type": "int",
                    "cxx_type": "int",
                    "field_name": "tutorial_flag",
                    "variable_lower": "tutorial_flag",
                    "variable_name": "tutorial_flag",
                    "variable_upper": "TUTORIAL_FLAG"
                }
            }
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "lua": true,
            "python": true
        }
    },
    "symtab": {
        "tutorial": {
            "Color": "enum-Color",
            "enum-Color": "tutorial::Color"
        }
    },
    "types": {
        "tutorial::Color": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({ctor_expr})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "base": "integer",
            "c_to_cxx": "static_cast<tutorial::Color>({c_var})",
            "c_type": "int",
            "cfi_type": "CFI_type_int",
            "cxx_to_c": "static_cast<int>({cxx_var})",
            "cxx_type": "tutorial::Color",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_module_name": "iso_c_binding",
            "f_type": "integer(C_INT)",
            "flat_name": "int",
            "sgroup": "native",
            "sh_type": "SH_TYPE_INT"
        },
        "tutorial::EnumTypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({ctor_expr})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "base": "integer",
            "c_to_cxx": "static_cast<tutorial::EnumTypeID>({c_var})",
            "c_type": "TUT_EnumTypeID",
            "cfi_type": "CFI_type_int",
            "cxx_to_c": "static_cast<int>({cxx_var})",
            "cxx_type": "tutorial::EnumTypeID",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "enum_type_id",
            "f_module": {
                "tutorial_mod": [
                    "enum_type_id"
                ]
            },
            "f_module_name": "tutorial_mod",
            "f_type": "integer(enum_type_id)",
            "flat_name": "int",
            "i_module": {
                "tutorial_mod": [
                    "enum_type_id"
                ]
            },
            "sgroup": "native",
            "sh_type": "SH_TYPE_INT",
            "typedef": "int",
            "wrap_header": [
                "wrapTutorial.h"
            ]
        },
        "tutorial::TypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({ctor_expr})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "base": "integer",
            "c_type": "TUT_TypeID",
            "cfi_type": "CFI_type_int",
            "cxx_type": "tutorial::TypeID",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "type_id",
            "f_module": {
                "tutorial_mod": [
                    "type_id"
                ]
            },
            "f_module_name": "tutorial_mod",
            "f_type": "integer(type_id)",
            "flat_name": "int",
            "i_module": {
                "tutorial_mod": [
                    "type_id"
                ]
            },
            "sgroup": "native",
            "sh_type": "SH_TYPE_INT",
            "typedef": "int",
            "wrap_header": [
                "wrapTutorial.h"
            ]
        }
    }
}