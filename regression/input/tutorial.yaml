copyright:
- Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
- other Shroud Project Developers.
- See the top-level COPYRIGHT file for details.
-
- "SPDX-License-Identifier: (BSD-3-Clause)"
-

# Create an executable program for the tutorial

library: Tutorial
cxx_header: tutorial.hpp
namespace: tutorial

options:
  debug: True
  wrap_python: True
  wrap_lua: True
  literalinclude2: True


declarations:
- decl: extern int global_flag;

- decl: typedef int TypeID;

- decl: typedef int EnumTypeID
  fields:
    c_to_cxx : static_cast<tutorial::EnumTypeID>({c_var})
    cxx_to_c : static_cast<int>({cxx_var})

- decl: |
      enum Color {
        RED,
        BLUE,
        WHITE
      };
  options:
     bar: 4
  format:
     baz: 4

- decl: extern int tutorial_flag;

- decl: void NoReturnNoArguments()
  # from clibrary.yaml
  options:
    literalinclude: True

- decl: double PassByValue(double arg1, int arg2)
  # from clibrary.yaml
  
- decl: const std::string ConcatenateStrings(
          const std::string& arg1,
          const std::string& arg2 )
  doxygen:
    description: |
       Note that since a reference is returned, no intermediate string
       is allocated.  It is assumed +owner(library).
  
- decl: double UseDefaultArguments(double arg1 = 3.1415, bool arg2 = true)
  default_arg_suffix:
  -  
  -  _arg1
  -  _arg1_arg2
  options:
    literalinclude: True
  
# overloaded functions
- decl: void OverloadedFunction(const std::string& name)
  format:
    function_suffix: _from_name
- decl: void OverloadedFunction(int indx)
  format:
    function_suffix: _from_index
  
- decl: |
      template<typename ArgType>
      void TemplateArgument(ArgType arg)
  cxx_template:
  - instantiation: <int>
  - instantiation: <double>
  
- decl: template<typename RetType> RetType TemplateReturn()
  cxx_template:
  - instantiation: <int>
  - instantiation: <double>
  options:
     wrap_lua: False
     wrap_python: False

# test cxx_template, fortran_generic, overload
#- decl: void Function10()
#- decl: template<typename ArgType> void Function10(ArgType arg1, std::string &name, double arg2 = 0)
#  options:
#    F_string_len_trim: True
#  cxx_template:
#  - instantiation: <int>
#  - instantiation: <double>
#  cxx_template:
#    ArgType:
#    - int
#    - double
#  fortran_generic:
#  - decl: (float arg2)
#  - decl: (double arg2)
  
  
# test fortran_generic, overload
- decl: void FortranGenericOverloaded()
- decl: void FortranGenericOverloaded(const std::string &name, double arg2)
  options:
    F_string_len_trim: True
#   cxx_template:
#   - instantiation: <int>
#   - instantiation: <double>
  fortran_generic:
  - decl: (float arg2)
    function_suffix: _float
  - decl: (double arg2)
    function_suffix: _double
  
# overload with default values
- decl: int UseDefaultOverload(int num,
            int offset = 0, int stride = 1)
  default_arg_suffix:
  - _num
  - _num_offset
  - _num_offset_stride
- decl: int UseDefaultOverload(double type, int num,
            int offset = 0, int stride = 1)
  
# test F_string_result_as_arg and optional arguments
#- decl: const string& overload2(int flag = 0, bool flag2 = true) const
#  format:
#    F_string_result_as_arg: output
  
# TypeID and DataTypeId must be define in types
- decl: TypeID typefunc(TypeID arg)
- decl: EnumTypeID enumfunc(EnumTypeID arg)
- decl: Color colorfunc(Color arg);
  
- decl: void getMinMax(int &min +intent(out), int &max +intent(out))
  doxygen:
     brief: Pass in reference to scalar
  options:
    wrap_lua: False
    literalinclude: True
  
##################################################
# Function pointer

- decl: int callback1(int in, int (*incr)(int));
  doxygen:
    brief: Test function pointer
  options:
    wrap_lua: False
    wrap_python: False
    literalinclude: True
  
##################################################
# Used with testing
- decl: const std::string& LastFunctionCalled() +len(30)

##########
  
  
  
##################################################
# Files which contain code to be inserted into generated code
splicer:
#  c:
#  -  ctutorialsplicer.c
  f:
  -  ftutorialsplicer.f
