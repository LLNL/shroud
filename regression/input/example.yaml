copyright:
- Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
- other Shroud Project Developers.
- See the top-level COPYRIGHT file for details.
-
- "SPDX-License-Identifier: (BSD-3-Clause)"
-

library: UserLibrary

splicer:
  f:
  -  fsplicer.f
  c:
  -  csplicer.c
  py:
  -  pysplicer.c

format:
  C_prefix: AA_
  # do not create get/set instance routines
  F_name_instance_get: yadda
  F_name_instance_set:
  PY_prefix: PP_

options:
#  module_name: exclass1_mod
  debug: True
  # include files to add to module
  wrap_python: True
  wrap_lua: True

typemap:
- type: MPI_Comm
  fields:
    cpp_if: ifdef USE_MPI

declarations:
- decl: typedef long SidreLength
  fields:
# defined in SidreTypes.hpp
    c_header : sidre/SidreTypes.h
    c_type   : SIDRE_SidreLength
#    f_type   : integer(C_LONG)
##    f_module : iso_c_binding:C_LONG
#    f_module : 
#      iso_c_binding:
#      - C_LONG

- decl: typedef int TypeID
  fields:
    # enum for types
    c_header : sidre/SidreTypes.h
    cxx_header : sidre/SidreWrapperHelpers.hpp
    cxx_to_c : static_cast<int>({cxx_var})
    c_to_cxx : getTypeID({c_var})

- decl: namespace example
  declarations:
  - decl: namespace nested
    declarations:

    - decl: class ExClass1
      cxx_header: ExClass1.hpp
      # include files to add to module

      # Test adding fields to typemap
      fields:
         export: True

      python:
        type: [ init, repr, richcompare ]

      declarations:
      # overloaded constructor
      - decl: ExClass1()
      - decl: ExClass1( const string *name )
        doxygen:
          brief:  constructor
          description: |
             longer description
             usually multiple lines
          return: return new instance

      - decl: ~ExClass1()
        format:
          F_name_function: delete
        doxygen:
          brief: destructor
          description:
             longer description
             joined with previous line

      - decl: int incrementCount(int incr)

      - decl: const string& getNameErrorCheck() const

      - decl: const string& getNameArg() const
      # This function will convert the return value into a argument
        format:
           F_string_result_as_arg: name

      - decl: int  getValue(int value)
        format:
          function_suffix: _from_int
      - decl: long getValue(long value)

      - decl: bool hasAddr(bool in)

      - decl: void SplicerSpecial()

    ######################################################################
    - decl: class ExClass2
      cxx_header: ExClass2.hpp
      python:
        type: [dealloc, print, compare, getattr, setattr,
               getattro, setattro,
               repr, hash, call, str,
               init, alloc, new, free, del]

      declarations:
      - decl: class ExClass2Nested
      - decl: ExClass2(const string *name)
        doxygen:
          brief:  constructor

        # test annotating arguments
        attrs:
          name:
            len_trim: trim_name

      - decl: ~ExClass2()
        format:
          F_name_function: delete
        doxygen:
          brief: destructor

      - decl: const string& getName() const
        # test annotating result
        fattrs:
          # XXX - len is evalued in C code
          len: aa_exclass2_get_name_length({F_this}%{F_derived_member})

    # test variations of const for result and method
      - decl: const string& getName2()
      - decl:       string& getName3() const
      - decl:       string& getName4()

    #   This function does not actually exist in the wrapped libray
      - decl: int GetNameLength() const
        doxygen:
          brief: helper function for Fortran
        splicer:
          c:
          - "return SH_this->getName().length();"

      # test forward declarations
      - decl: ExClass1 *get_class1(const ExClass1 *in)

      # typedefs that require modules
      - decl: void* declare(TypeID type, SidreLength len = 1)
        # by returning this,the C++ function allows chaining.
        # make them subroutines in Fortran.
        return_this: True
        fortran_generic:
        -  decl: (int len=1)
           function_suffix: _int
        -  decl: (long len=1)
           function_suffix: _long

      # void function
      - decl: void destroyall()

      # return typedef'd type
      - decl: TypeID getTypeID() const

      - decl: template<typename ValueType> void setValue(ValueType value)
        cxx_template:
        - instantiation: <int>
        - instantiation: <long>
        - instantiation: <float>
        - instantiation: <double>

      - decl: template<typename ValueType> ValueType getValue()
        cxx_template:
        - instantiation: <int>
#        - instantiation: <long>
#        - instantiation: <float>
        - instantiation: <double>

    ########################################
    - decl: void local_function1()

    # override the C code.
    - decl: bool isNameValid(const std::string& name)
      splicer:
        c:
        - "return name != NULL;"
        c_buf:
        - "return name != NULL;"
        f:
        - 'rv = name .ne. " "'

    # return bool, no arguments.
    # This needs to generate a Fortran wrapper to convert the bool to logical
    - decl: bool isInitialized()

    # overrides which each accept a string.
    # Test the name of generated 'bufferify' functions
    - decl: void test_names(const std::string &name)
      # explicitly set suffix, otherwise it defaults to _0
      format:
        function_suffix:
    - decl: void test_names(const std::string &name, int flag)
      format:
        function_suffix: _flag

    - decl: void testoptional(int i = 1, long j=2)

    # test cxx_template, fortran_generic, overload
    #  - decl: void Function10()
    #  - decl: template<typename ArgType> void Function10(ArgType arg1, std::string &name, double arg2 = 0)
    #    options:
    #      F_string_len_trim: True
    #    cxx_template:
    #    - instantiation: <int>
    #    - instantiation: <double>
    #    fortran_generic:
    #    - decl: (float arg2)
    #    - decl: (double arg2)

    - decl: size_t test_size_t()


    # test non-class, overloaded, cpp_if    
    - decl: void testmpi(MPI_Comm comm)
      format:
        function_suffix: _mpi
      cpp_if: ifdef HAVE_MPI
    - decl: void testmpi()
      format:
        function_suffix: _serial
      cpp_if: ifndef HAVE_MPI

    # function pointers
    - decl: void FuncPtr1(void (*get)());
      doxygen:
        brief: subroutine
    - decl: void FuncPtr2(double * (*get)());
      doxygen:
        brief: return a pointer
    - decl: void FuncPtr3(double (*get)(int i, int));
      doxygen:
        brief: abstract argument
      options:
        F_force_wrapper: True
    - decl: void FuncPtr4(double (*get)(double, int));
      doxygen:
        brief: abstract argument
      options:
        wrap_lua: False
        wrap_python: False
        F_force_wrapper: True
        F_abstract_interface_subprogram_template: custom_funptr
        F_abstract_interface_argument_template: XX{index}arg
    - decl: void FuncPtr5(void (*get)(int verylongname1, 
                                      int verylongname2, 
                                      int verylongname3, 
                                      int verylongname4, 
                                      int verylongname5, 
                                      int verylongname6, 
                                      int verylongname7, 
                                      int verylongname8, 
                                      int verylongname9, 
                                      int verylongname10))

    - decl: void verylongfunctionname1(int *verylongname1 +intent(inout), 
                                       int *verylongname2 +intent(inout), 
                                       int *verylongname3 +intent(inout), 
                                       int *verylongname4 +intent(inout), 
                                       int *verylongname5 +intent(inout), 
                                       int *verylongname6 +intent(inout), 
                                       int *verylongname7 +intent(inout), 
                                       int *verylongname8 +intent(inout), 
                                       int *verylongname9 +intent(inout), 
                                       int *verylongname10 +intent(inout))
      options:
        # Force wrapper to test interface line lengths
        F_force_wrapper: True

    - decl: int verylongfunctionname2(int verylongname1, 
                                      int verylongname2, 
                                      int verylongname3, 
                                      int verylongname4, 
                                      int verylongname5, 
                                      int verylongname6, 
                                      int verylongname7, 
                                      int verylongname8, 
                                      int verylongname9, 
                                      int verylongname10)
      options:
        # Force wrapper to test interface line lengths
        F_force_wrapper: True
        F_line_length: 0
        C_line_length: 0

    - decl: void cos_doubles(
               double * in   +intent(in)  +rank(2),
               double * out  +intent(out) +dimension(shape(in)),
               int      sizein +implied(size(in)))
      doxygen:
        brief: Test multidimensional arrays with allocatable
      options:
         F_standard: 2008
