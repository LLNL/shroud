# test names options
# These tests are not compiled.
# Various format combinations are tested.

copyright:
- Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
- other Shroud Project Developers.
- See the top-level COPYRIGHT file for details.
-
- "SPDX-License-Identifier: (BSD-3-Clause)"
-

library: testnames

options:
  debug: True

  # always create wrappers to demonstrate name generation
  F_force_wrapper: True
  wrap_python: True

format:
  CXX_local: ARG_
  C_header_filename_suffix: hh
  C_impl_filename_suffix: cc
  F_filename_suffix: F

  C_header_filename: top.h
  C_impl_filename: top.cpp
  F_module_name: top_module
  F_impl_filename: top.f
  LUA_module_name: lua_module_name

  PY_type_obj: myobj
  PY_type_dtor: mydtor

declarations:
- decl: |
      enum Color {
        RED,
        BLUE,
        WHITE
      };
  options:
     bar: 4
  format:
     baz: 4

# Override attr names.
- decl: void getName(char *name +len(worklen) +len_trim(worktrim))


- decl: namespace ns0
  format:
    # C_header_filename is not created.
    C_header_filename: foons0.h
    C_impl_filename: foons0.cpp
    F_module_name: name_module
    F_impl_filename: foo.f
  declarations:
  - decl: namespace inner
  - decl: class Names
    options:
      none: foo
      C_name_template: XXX_{C_prefix}{C_name_scope}{C_name_api}{function_suffix}
      F_C_name_template: XXX_{C_prefix}{F_name_scope}{C_name_api}{function_suffix}
    format:
      C_header_filename: foo.h
      C_impl_filename: foo.cpp
      F_derived_name: FNames
  
    declarations:
    - decl: Names()         +name(defaultctor)
    - decl: void method1()
      format:
        F_name_function: type_method1
    - decl: void method2()
      format:
        C_this: self2
        CXX_this: SH_this2
        F_this:  obj2

# test file suffix
- decl: class Names2
  declarations: []

- block: True
  options:
    C_name_template: YYY_{C_prefix}{C_name_api}{function_suffix}
    F_C_name_template: YYY_{C_prefix}{F_name_api}{function_suffix}
    F_name_impl_template: "{library}_{F_name_scope}{F_name_api}{function_suffix}"
  declarations:
  - decl: void function1()
  - decl: void function2()
    format:
      C_name: c_name_special
      F_C_name: f_c_name_special
      F_name_impl: f_name_special

  # test generic/overloaded functions
  - decl: void function3a(int i)
    format:
      F_name_generic: generic3
      F_name_impl: F_name_function3a_int
  - decl: void function3a(long i)
    format:
      F_name_generic: generic3
      F_name_impl: F_name_function3a_long

  # test F_result
  # test C_result  with arg rv
  - decl: int function4(const std::string &rv)

  - decl: void function5() +name(fiveplus)

- decl: namespace ns1
  options:
    # test options in namespace
    F_name_impl_template: "{library_lower}_{F_name_scope}{F_name_api}{function_suffix}"
  declarations:
  - decl: void init_ns1()

########################################
# inline splicers

- decl: void TestMultilineSplicer(std::string & name, int *value+intent(out))
# XXX - The helper ShroudStrCopy is inserted by the c_statements, but not
#       used because of the explicit splicer.
#       Would need a fstatement to get rid of it.
  doxygen:
    description: |
      Use std::string argument to get bufferified function.
  splicer:
    c: |
      // line 1
      // line 2
    c_buf: |
      // buf line 1
      // buf line 2
    f: |
      ! line 1
      ! line 2
    py: |
      // py line 1
      // py line 2

########################################
# Copied from templates.yaml
# Test class.format.template_suffix
- decl: namespace internal
  declarations:
# Class which is used to instantiate the C++ template.
# It is not part of the Fortran API.
  - decl: class ImplWorker1
    format:
      template_suffix: _instantiation3
    options:
      wrap_fortran: false
      wrap_python: false



# Function with multiple template arguments.
# Copied from templates.yaml, test replacing generated names
- decl: template<T,U> void FunctionTU(T arg1, U arg2)
  doxygen:
     brief: Function template with two template parameters.
  cxx_template:
  - instantiation: <int, long>
    format:
      C_name: c_name_instantiation1
      F_C_name: f_c_name_instantiation1
      F_name_impl: f_name_instantiation1
      PY_name_impl: PY_name_instantiation1
  - instantiation: <float, double>
    format:
      template_suffix: _instantiation2

# Class with single template argument.
# Copied from templates.yaml.
- decl: namespace std
  declarations:
  - decl: template<typename T> class vector
    # std::vector class
    cxx_header: <vector>
    cxx_template:
    - instantiation: <int>
      format:
        # Explicit class name.
        # XXX - Necessary to specify lower and upper.
        cxx_class: Vvv1
#        class_lower: vvv1     # automatically set from cxx_class
#        class_upper: VVV1     # automatically set from cxx_class
#        class_scope: 'VvV1::' # automatically set from cxx_class
        F_derived_name: FFvvv1
    - instantiation: <double>
      # Based on template typename.   vector_double
    - instantiation: <long>
      # Explicit template_suffix.     vector_instantiation5
      format:
        template_suffix: _instantiation5
    - instantiation: <internal::ImplWorker1>
      # Use template_suffix from internal::ImplWorker.  vector_instantiation3

# Class with multiple template arguments.
- decl: template<typename T1, typename T2> class twoTs
  cxx_template:
  - instantiation: <int, long>
    # template_suffix will be sequence number
  - instantiation: <float, double>
    format:
      template_suffix: _instantiation4

########################################
# Test option C_API_case
#
- decl: namespace CAPI
  options:
    wrap_python: False
    C_API_case: lower
  declarations:
  - decl: void Worker1()
  - decl: class Class1
    declarations:
    - decl: void Member1()

- decl: namespace CAPI2
  options:
    wrap_python: False
  format:
    C_name_api: CAPItwo
    F_name_api: FAPItwo
  declarations:
  - decl: void Worker1()


########################################
# Copied from templates.yaml
- decl: template<typename T> int UseImplWorker()
  doxygen:
     brief: Function which uses a templated T in the implemetation.
  cxx_template:
  - instantiation: <internal::ImplWorker1>

########################################
# from struct.yaml
# Check that F_derived_member_base is set correctly.
# Should be F_derived_name of class_baseclass.

- decl: struct Cstruct_as_class
  options:
    wrap_struct_as: class
  format:
    F_derived_name: Fstruct_as_class

- decl: struct Cstruct_as_subclass
  options:
    wrap_struct_as: class
    class_baseclass: Cstruct_as_class
  format:
    F_derived_name: Fstruct_as_subclass

# Fortran type-bound name same as function name so will generate:
#    procedure :: cstruct_as_class_sum
- decl: int Cstruct_as_class_sum(const Cstruct_as_class *point +pass)
  options:
    class_method: Cstruct_as_class

########################################
# Continuation of IMPORT statement

- decl: void external_funcs(const char *rdbase, const char *pkg,
                            const char *name,
                            void (*alloc)(double *arr+intent(inout), int *err+intent(out)),
                            void (*afree)(double *arr+intent(inout)),
                            void (*assoc)(double *arr+intent(in), int *err+intent(out)))
  options:
    wrap_python: False

########################################
# Test explicit splicers
# class Name2 has no methods by default it would not be written.
splicer_code:
   c:
     CXX_definitions:
       - // Add some text from splicer
       - // And another line
     namespace:
       ns0:
         CXX_definitions:
         - // lines from explict splicer - namespace ns0
         class:
           Names:
             CXX_definitions: |
               // CXX_definitions for ns0 class Names
               // allow YAML multiline strings
       ns0::inner:
          CXX_definitions:
          - // CXX_definitions for ns0::inner
          - // Allow blank line below (convert None to '')
          -
     class:
       Names2:
         C_definitions:
           - int write_file;
     function:
       test_multiline_splicer:
       - // This splicer should be ignored.
       - // Instead the inline splicer above is used since it is closer to the decl.
   f:
     namespace:
       ns0::inner:
          file_top:
          # necessary to quote line to avoid creating a dictionary with the : metacharacter.
          -  "! top of ns0::inner"
     function:
       test_multiline_splicer:
       - // This splicer should be ignored.
       - // Instead the inline splicer above is used since it is closer to the decl.
   py:
     function:
       function1:
       - // splicer code for function.function1
       test_multiline_splicer:
       - // This splicer should be ignored.
       - // Instead the inline splicer above is used since it is closer to the decl.


file_code:
  top.h:
     c_header: cfoo.h
     cxx_header: cxxfoo.hpp
