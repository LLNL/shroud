copyright:
- Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
- other Shroud Project Developers.
- See the top-level COPYRIGHT file for details.
-
- "SPDX-License-Identifier: (BSD-3-Clause)"
-

library: classes
cxx_header: classes.hpp
namespace: classes

options:
  debug: True
  wrap_python: True
  wrap_lua: True
  literalinclude2: True

declarations:
- decl: class Class1
  options:
    literalinclude: True
  declarations:
  - decl: int m_flag +readonly;
  - decl: int m_test +name(test);
  - decl: std::string m_name
    options:
      wrap_python: False
  - decl: Class1()
    format:
      function_suffix: _default
  - decl: Class1(int flag)
    format:
      function_suffix: _flag
  - decl: ~Class1()        +name(delete)
  - decl: int Method1()
    doxygen:
       brief: returns the value of flag member
  
  - decl: bool equivalent(Class1 const &obj2) const;
    # Note that Fortran adds an obj argument so use obj2 instead.
    doxygen:
       brief: Pass in reference to instance
    options:
       # Need to fix fmt.cxx_deref
       wrap_lua: False

# start returnThis
  - decl: Class1 * returnThis();
    return_this: True
# end returnThis
    doxygen:
       brief: Return pointer to 'this' to allow chaining calls
    options:
       wrap_python: False
       wrap_lua: False
  
  - decl: Class1 * returnThisBuffer(std::string & name +intent(in), bool flag);
    # do not set return_this
    # passing in a string will cause node.generated_suffix to be set to '_buf'.
    # but result is not bufferified so look for c_statements['function'], not
    # 'function_buf'.

    # The bool argument tests that wrapf.py does not use _generated_suffix
    # since it only applies to the generated C function.

    doxygen:
       brief: Return pointer to 'this' to allow chaining calls
    options:
       wrap_python: False
       wrap_lua: False
  
  - decl: Class1 *getclass3() const
    doxygen:
       brief: Test const method
# This test is compile only to make sure it is not PURE
    options:
#    wrap_python: False
      wrap_lua: False

  - decl: const std::string& getName();
    doxygen:
      brief: test helper

  - decl: enum DIRECTION { UP = 2, DOWN, LEFT= 100, RIGHT };
  
  - decl: DIRECTION directionFunc(DIRECTION arg);
  
##################################################

- decl: class Class2
  declarations:
  - decl: const std::string& getName();
    doxygen:
      brief: test helper

##################################################

- decl: Class1::DIRECTION directionFunc(Class1::DIRECTION arg);
  
- decl: void passClassByValue(Class1 arg)
  doxygen:
    brief: Pass arguments to a function.
  options:
     wrap_lua: False
  
- decl: int useclass(const Class1 *arg)
  options:
    wrap_lua: False
  
# parser does not recognized **
#- decl: void getclass(const Class1 **arg1)
#  doxygen:
#    brief:  Return class pointer via argument
#  options:
#    wrap_python: False
#    wrap_lua: False
  
- decl: const Class1 *getclass2() 
  doxygen:
    brief:  Return const class pointer
  options:
    # const issues with python
    wrap_python: False
    wrap_lua: False
  
- decl: Class1 *getclass3() 
  doxygen:
    brief:  Return class pointer
  options:
#  wrap_python: False
    wrap_lua: False

- decl: const Class1 *getclass2_void() 
  doxygen:
    brief:  C wrapper will return void
  options:
    C_shadow_result: False
    # const issues with python
    wrap_python: False
    wrap_lua: False
  
- decl: Class1 *getclass3_void() 
  doxygen:
    brief:  C wrapper will return void
  options:
    C_shadow_result: False
    wrap_python: False
    wrap_lua: False

- decl: const Class1 &getConstClassReference()
  options:
    # const issues with python
    wrap_python: False
    wrap_lua: False
  
- decl: Class1 &getClassReference()
  options:
#  wrap_python: False
    wrap_lua: False

- decl: Class1 getClassCopy(int flag)
  doxygen:
    brief: Return Class1 instance by value, uses copy constructor
  options:
    wrap_python: False
    wrap_lua: False

##################################################

- decl: class Singleton
  options:
    wrap_lua: false
    literalinclude: True
  format:
    # Avoid this clutter in the documentation (literalinclude)
    F_name_instance_get:
    F_name_instance_set:
    F_name_associated:
  declarations:
#  - decl: static Singleton* instancePtr()
  - decl: static Singleton& getReference()

##################################################

- decl: class Shape
  declarations:
  - decl: Shape()
  - decl: int get_ivar() const

- decl: "class Circle : public Shape"
  declarations:
  - decl: Circle()

##################################################
# test getters with pointers

- decl: class Data
  options:
    wrap_lua: false
    wrap_python: false
    literalinclude: true
  format:
    # Remove these methods to make documentation less cluttered.
    F_name_associated:
    F_name_instance_get:
    F_name_instance_set:
  declarations:
  - decl: int nitems;
  - decl: int *items  +dimension(nitems);
  - decl: void allocate(int n);
  - decl: void free();
  - decl: Data()
  - decl: ~Data()
    
##################################################
# Used with testing
- decl: void set_global_flag(int arg)
- decl: int get_global_flag()
- decl: const std::string& LastFunctionCalled() +len(30)
