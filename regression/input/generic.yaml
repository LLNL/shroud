copyright:
- Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
- other Shroud Project Developers.
- See the top-level COPYRIGHT file for details.
-
- "SPDX-License-Identifier: (BSD-3-Clause)"
-

# Test fortran_generic

library: generic
cxx_header: generic.h helper.h
language: c

options:
  debug: True
  wrap_python: False
  wrap_lua: False
  literalinclude2: True

declarations:

########################################
# Create a generic interface for two functions.
# XXX - F_force_wrapper is required since the generic interface is using
#       MODULE PROCEDURE and Shroud is not creating a function since no
#       wrapper is needed since they're native types.
- decl: void UpdateAsFloat(float arg)
  options:
    F_force_wrapper: True
  format:
    F_name_generic: update_real
- decl: void UpdateAsDouble(double arg)
  options:
    F_force_wrapper: True
  format:
    F_name_generic: update_real

- decl: double GetGlobalDouble(void)

########################################
- decl: void GenericReal(double arg)
  options:
    literalinclude: True
  doxygen:
    brief: Single argument generic
  fortran_generic:
  - decl: (float arg)
    function_suffix: _float
  - decl: (double arg)
    function_suffix: _double

########################################
- decl: long GenericReal2(long arg1, long arg2)
  doxygen:
    brief: Two argument generic
    description: |
      It is not possible to call the function with (int, long)
      or (long, int)
  fortran_generic:
  - decl: (int arg1, int arg2)
    function_suffix: _all_int
  - decl: (long arg1, long arg2)
    function_suffix: _all_long


- decl: int SumValues(const int *values+dimension(..), int nvalues)
  doxygen:
    brief: scalar or array argument using assumed rank
  options:
    F_assumed_rank_max: 2

########################################
# Test Fortran Generic and rank.
# Also creates several bind(C) interfaces to the same function.
- decl: void AssignValues(const int *from, int nfrom, int *to, int nto)
  doxygen:
    description: |
      Broadcast if nfrom == 1
      Copy if nfrom == nto
  fortran_generic:
  - decl: (const int *from, int *to)
    function_suffix: _scalar
  - decl: (const int *from, int *to+rank(1))
    function_suffix: _broadcast
  - decl: (const int *from+rank(1), int *to+rank(1))
    function_suffix: _copy

########################################
- decl: void SavePointer(void *addr, int type, size_t size+implied(size(addr)))
  # cannot use size as an dummy argument name
  # Add deref(raw) attribute to Fortan function.
  # This will take the C_LOC of the variable in order to get a 'void *'
  # for the C interface.
  cpp_if: if 1
  fortran_generic:
  - decl: (float *addr+rank(1)+intent(in),    int type+implied(T_FLOAT))
    function_suffix: _float1d
  - decl: (float *addr+rank(2)+intent(in),  int type+implied(T_FLOAT))
    function_suffix: _float2d

#  - decl: (double *addr+rank(1),   int type+implied(T_DOUBLE))
#  - decl: (double *addr+rank(2), int type+implied(T_DOUBLE))


########################################
- decl: void SavePointer2(void *addr, int type+implied(type(addr)), size_t size+implied(size(addr)))
  fstatements:
    c:
      c_helper: ShroudTypeDefines
      pre_call:
      - // Test adding a blank line below.
      -
      - type = convert_type(type);
  fortran_generic:
  - decl: (float *addr+rank(1)+intent(in))
    function_suffix: _float1d
  - decl: (float *addr+rank(2)+intent(in))
    function_suffix: _float2d

#  - decl: (double *addr+rank(1), int type+implied(T_DOUBLE))
#  - decl: (double *addr+rank(2), int type+implied(T_DOUBLE))


########################################
- decl: void GetPointer(void **addr+intent(out),
                        int *type+intent(out),
                        size_t *size+intent(out))
- decl: void GetPointerAsPointer(
               void **addr+intent(out),
               int *type+intent(out)+hidden,
               size_t *size+intent(out)+hidden)
  cpp_if: if 0
  fortran_generic:
  - decl: (float **addr+intent(out)+rank(1)+deref(pointer))
    function_suffix: _float1d
  - decl: (float **addr+intent(out)+rank(2)+deref(pointer))
    function_suffix: _float2d


- decl: struct StructAsClass
  options:
    wrap_struct_as: class
- decl: StructAsClass *CreateStructAsClass(void)
  options:
    class_ctor: StructAsClass

########################################
# XXX - This creates two Fortran wrappers but it also creates a
#       bind(C) interface for the original routine. Not sure that's needed.
- decl: long UpdateStructAsClass(StructAsClass *arg, long inew)
  fortran_generic:
  - decl: (int inew)
    function_suffix: _int
  - decl: (long inew)
    function_suffix: _long

splicer_code:
  f:
    module_top:
    -  "integer, parameter :: T_INT = 1"
    -  "integer, parameter :: T_LONG = 2"
    -  "integer, parameter :: T_FLOAT = 3"
    -  "integer, parameter :: T_DOUBLE = 4"
