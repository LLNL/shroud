copyright:
- Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
- other Shroud Project Developers.
- See the top-level COPYRIGHT file for details.
-
- "SPDX-License-Identifier: (BSD-3-Clause)"
-

# test std::vector

library: vectors
cxx_header: vectors.hpp

options:
  debug: True
  literalinclude2: True
#  wrap_python: True

declarations:

##################################################
# int

# const implies intent(in)
- decl: int vector_sum(const std::vector<int> &arg)
  options:
#    wrap_python: False
    wrap_lua: False
    literalinclude: True

- decl: void vector_iota_out(std::vector<int> &arg+intent(out))
  doxygen:
    brief: Copy vector into Fortran input array
  options:
#    wrap_python: False
    wrap_lua: False
    literalinclude: True

- decl: void vector_iota_out_with_num(std::vector<int> &arg+intent(out))
  doxygen:
    brief: Copy vector into Fortran input array
    description: |
      Convert subroutine in to a function and
      return the number of items copied into argument
      by setting fstatements for both C and Fortran.
  options:
    wrap_python: False
    wrap_lua: False
    literalinclude: True
  fstatements:
    c:
      return_type: long
      ret:
      - return SHT_arg_cdesc->size;
    c_buf:
      return_type: long
      ret:
      - return SHT_arg_cdesc->size;
    f:
      result: num
      f_module:
        iso_c_binding: ["C_LONG"]
      declare:
      -  "integer(C_LONG) :: {F_result}"
      call:
      -  "{F_result} = {F_C_call}({F_arg_c_call})"

- decl: void vector_iota_out_with_num2(std::vector<int> &arg+intent(out))
  doxygen:
    brief: Copy vector into Fortran input array
    description: |
      Convert subroutine in to a function.
      Return the number of items copied into argument
      by setting fstatements for the Fortran wrapper only.
  options:
    wrap_python: False
    wrap_lua: False
    literalinclude: True
  fstatements:
    f:
      result: num
      f_module:
        iso_c_binding: ["C_LONG"]
      declare:
      -  "integer(C_LONG) :: num"
      post_call:
      -  "num = SHT_arg_cdesc%size"

- decl: void vector_iota_out_alloc(std::vector<int> &arg+intent(out)+deref(allocatable))
  doxygen:
    brief: Copy vector into Fortran allocatable array
  options:
    wrap_python: False
    wrap_lua: False
    literalinclude: True

- decl: void vector_iota_inout_alloc(std::vector<int> &arg+intent(inout)+deref(allocatable))
  doxygen:
    brief: Copy vector into Fortran allocatable array
  options:
    wrap_python: False
    wrap_lua: False
    literalinclude: True

# defaults to intent(inout)
- decl: void vector_increment(std::vector<int> &arg)
  options:
    wrap_python: False
    wrap_lua: False
  
# does multidimensional make sense?  Need to call shape
#- decl: void vector1XXX(std::vector<int> &arg+dimension(:,:))

##################################################
# double

- decl: void vector_iota_out_d(std::vector<double> &arg+intent(out))
  doxygen:
    brief: Copy vector into Fortran input array
  options:
    wrap_lua: False

##################################################
# double *

- decl: int vector_of_pointers(std::vector<const double *> &arg1 +intent(in),
                               int num)
  doxygen:
    brief: Fortran 2-d array to vector<const double *>
  options:
    wrap_python: False
    wrap_lua: False

##################################################
  
- decl: int vector_string_count(const std::vector< std::string > &arg)
  doxygen:
    brief: count number of underscore in vector of strings
    decription: |
      The input will be copied in order to create the C++ argument
  options:
    wrap_python: False

- decl: void vector_string_fill(std::vector< std::string > &arg+intent(out))
  options:
    wrap_python: False
    wrap_lua: False
#  format:
#    C_return_type: int   # XXX use fstatements
#    C_return_code: return SH_arg.size();
  doxygen:
    brief: Fill in arg with some animal names
    description: |
      The C++ function returns void. But the C and Fortran wrappers return
      an int with the number of items added to arg.

- decl: void vector_string_fill_allocatable(
            std::vector< std::string > &arg+intent(out)+deref(allocatable))
  options:
    wrap_python: False
    wrap_lua: False

- decl: void vector_string_fill_allocatable_len(
            std::vector< std::string > &arg+intent(out)+len(20)+deref(allocatable))
  options:
    wrap_python: False
    wrap_lua: False

- decl: void vector_string_append(std::vector< std::string > &arg+intent(inout))
  options:
    wrap_c: False
    wrap_fortran: False
    wrap_python: False
    wrap_lua: False
  doxygen:
    brief: append '-like' to names.


########################################
# return vectors

- decl: std::vector<int> ReturnVectorAlloc(int n)
  doxygen:
    description: |
      Implement iota function.
      Return a vector as an ALLOCATABLE array.
      Copy results into the new array.

######################################################################
# Test implied with two arguments
- decl: int returnDim2(int *arg +rank(2)+intent(in), int len+implied(size(arg,2)))
# XXX - Not sure how this should work with Python list
